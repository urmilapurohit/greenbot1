function kendo_IsSpvAllowedBySpvmanufacturer(e) { return '<div class="onoffswitch" style="position:relative!important;"><input type="checkbox" data-check="' + e.IsSpvAllowedBySpvmanufacturer + '" name="onoffswitchIsSpvAllowedBySpvmanufacturer" class="onoffswitch-checkbox switch onoffswitchIsSpvAllowedBySpvmanufacturer" id="' + e.SPVManufactureId + '" ison="1"> <label class="onoffswitch-label" for="' + e.SPVManufactureId + '"><span class="onoffswitch-inner" ></span ><span class="onoffswitch-switch"></span></label ></div >' } function SetSPVByManufacturer() { $("#datatableSpvManufacturerList").kendoGrid({ dataSource: { type: "odata", transport: { read: { url: urlGetSpvManufacture, data: {}, contentType: "application/json", dataType: "json", type: "POST" }, parameterMap: function (e) { return e.SPVManufactureName = null == $("#txtSPVManufactureName").val() ? "All" : $("#txtSPVManufactureName").val(), e.ServiceAdministrator = null == $("#txtServiceAdministrator").val() ? "All" : $("#txtServiceAdministrator").val(), JSON.stringify(e) } }, schema: { data: "data", total: "total" }, pageSize: "10", serverPaging: !0, serverSorting: !0, requestStart: function (e) { setTimeout(function (e) { $(".k-loading-image").hide() }) } }, pageable: { buttonCount: 5, pageSizes: [10, 25, 50, 100, 200] }, groupable: !1, sortable: !0, resizable: !1, scrollable: !1, reorderable: !1, filterMenuInit: function (e) { $(".loading-image").hide() }, columns: [{ template: "#= ++rowNumber #", field: "", title: "No.", width: "60px" }, { field: "SpvUserId", title: "SpvUserId", width: "100px", hidden: !0, template: function (e) { return "<span>" + e.SerialNumber + "</span>" } }, { field: "SPVManufactureName", title: "SPVManufactureName", filterable: !1, sortable: !0, template: function (e) { return "<span>" + e.SPVManufactureName + "</span>" }, media: "(min-width: 100px)" }, { field: "ServiceAdministrator", title: "ServiceAdministrator", filterable: !1, sortable: !0, template: function (e) { return "<span>" + e.ServiceAdministrator + "</span>" } }, { field: "ExcludeReseller", title: "Exclude Reseller", filterable: !1, template: "#= ExcludeResellerPopup(data)#" }, { field: "Supplier", title: "Supplier", filterable: !1, sortable: !1, template: "#= SupplierManufacturePopUp(data)#" }, { field: "IsSpvAllowedBySpvmanufacturer", width: "120px", sortable: !1, template: "#= kendo_IsSpvAllowedBySpvmanufacturer(data)#" }], dataBinding: function () { rowNumber = (this.dataSource.page() - 1) * this.dataSource.pageSize() }, dataBound: function () { $(".onoffswitchIsSpvAllowedBySpvmanufacturer").each(function (e, a) { "true" == $(a).attr("data-check") ? $(a).prop("checked", !0) : $(a).prop("checked", !1) }) } }) } function initeSPV() { $("#datatableSpvManufacturerList").data("kendoGrid").dataSource.data().length } $(document).ready(function () { $("#excludeReseller").click(function (e) { var a = "", t = $(".resellerData").val(); t && (a = t.join()), $.ajax({ url: urlSaveExcludeReseller, type: "GET", dataType: "json", data: { resellerIds: a, spvManufacturerId: $("#spvManufactureId").val() }, contentType: "application/json; charset=utf-8", success: function (e) { null != e && 1 == e.status ? showSuccessMessage("Reseller excluded from panel successfully") : showErrorMessage("Error while excluding reseller from panel"), $("#popUpReseller").modal("hide") }, error: function (e) { console.log(e) } }) }), $("#resetResellerPopup").click(function (e) { $(".resellerData")[0].sumo.unSelectAll() }), reseller = $(".resellerData").SumoSelect({ csvDispCount: 3, search: !0, searchText: "Search..", selectAll: !0, okCancelInMulti: !0 }), window.onload = function () { var e = localStorage.getItem("MessageText"); null != e && "" != e && "null" != e && (showSuccessMessage(e), localStorage.setItem("MessageText", "")) }, $("#datatableSpvManufacturerList").kendoGrid({ dataSource: { type: "json", transport: { read: { url: urlGetSpvManufacture, data: {}, contentType: "application/json; charset=utf-8", dataType: "json", type: "POST" }, parameterMap: function (e) { return e.SPVManufactureName = null == $("#txtSPVManufactureName").val() ? "All" : $("#txtSPVManufactureName").val(), e.ServiceAdministrator = null == $("#txtServiceAdministrator").val() ? "All" : $("#txtServiceAdministrator").val(), JSON.stringify(e) } }, batch: !0, schema: { data: "data", total: "total" }, pageSize: 10, serverSorting: !0, serverPaging: !1 }, resizable: !0, pageable: { buttonCount: 5, pageSizes: [10, 25, 50, 100, 200] }, scrollable: !1, dataBound: onDataBound, columns: [{ template: "#= ++rowNumber #", field: "", title: "No.", width: "60px" }, { field: "SpvUserId", title: "SpvUserId", width: "100px", hidden: !0 }, { field: "SPVManufactureName", title: "SPVManufactureName", filterable: !1 }, { field: "ServiceAdministrator", title: "ServiceAdministrator", filterable: !1 }, { field: "ExcludeReseller", title: "Exclude Reseller", filterable: !1, template: "#= ExcludeResellerPopup(data)#" }, { field: "Supplier", title: "Supplier", filterable: !1, template: "#= SupplierManufacturePopUp(data)#" }, { field: "IsSpvAllowedBySpvmanufacturer", width: "120px", template: "#= kendo_IsSpvAllowedBySpvmanufacturer(data)#" }], dataBinding: function () { rowNumber = (this.dataSource.page() - 1) * this.dataSource.pageSize() } }).data("kendoGrid").table.on("click", ".onoffswitchIsSpvAllowedBySpvmanufacturer", selectRow), $("#btnSaveManufacturer").bind("click", function () { var e = []; checkedIds.forEach(function (a) { 1 == a.value && e.push(a.key) }); var a = { Spvmanufacturerid: e.toString() }; $.ajax({ url: urlSaveSPVManufacture, type: "post", dataType: "Json", data: a, success: function (e) { 1 == e.status ? showSuccessMessage("SPV allowance set by particular manufacturers successfully.") : showErrorMessage("SPV allowance could not set by particular manufacturers successfully.") }, error: function () { showErrorMessage("SPV allowance could not set by particular manufacturers successfully.") } }) }), $("#onoffswitchAllowSPV").change(function (e) { var a = e.target.checked; $(".onoffswitchIsSpvAllowedBySpvmanufacturer").each(function (e, t) { $(t).prop("checked", a); for (var r = 0; r < checkedIds.length; r++)checkedIds[r].value = a }) }) }); var checkedIds = []; function selectRow() { var e, a = this.checked, t = $(this).closest("tr"), r = $("#datatableSpvManufacturerList").data("kendoGrid").dataItem(t).SPVManufactureId; checkedIds.forEach(function (e) { if (e.key == r) return e.value = a, !1 }), checkedIds.forEach(function (a) { 0 == a.value && (e = !1) }), 0 == e ? $("#onoffswitchAllowSPV").prop("checked", !1) : $("#onoffswitchAllowSPV").prop("checked", !0) } function onDataBound(e) { for (var a = this.dataSource.view(), t = 0; t < a.length; t++)checkedIds[a[t].SPVManufactureId] && this.tbody.find("tr[data-uid='" + a[t].uid + "']").find(".onoffswitchIsSpvAllowedBySpvmanufacturer").attr("checked", "checked"); var r, l = $("#datatableSpvManufacturerList").data("kendoGrid").dataSource.data(), n = l.length, s = ""; if (0 == checkedIds.length) for (t = 0; t < n; t++)s = l[t].SPVManufactureId, 1 == $("#datatableSpvManufacturerList").data("kendoGrid").dataSource.data()[t].IsSpvAllowedBySpvmanufacturer ? checkedIds.push({ key: s, value: !0 }) : checkedIds.push({ key: s, value: !1 }); $(".onoffswitchIsSpvAllowedBySpvmanufacturer").each(function (e, a) { checkedIds.forEach(function (e) { if (e.key == a.id) return $(a).prop("checked", e.value), !1 }) }), checkedIds.forEach(function (e) { 0 == e.value && (r = !1) }), 0 == r ? $("#onoffswitchAllowSPV").prop("checked", !1) : $("#onoffswitchAllowSPV").prop("checked", !0) } function ResetSearchFilters() { $("#txtSPVManufactureName").val(""), $("#txtServiceAdministrator").val(""), Searching("", ""), $("#txtSPVManufactureName").focus() } function SupplierManufacturePopUp(e) { return "<a href='#' onclick=GetSupplier(" + e.SPVManufactureId + ")>View Supplier</a>" } function ExcludeResellerPopup(e) { return "<a href='#' onclick=GetReseller(" + e.SPVManufactureId + ")>View Reseller</a>" } function GetExcludedReseller(e) { $.ajax({ url: urlGetExcludedReseller, type: "GET", dataType: "json", data: { spvManufacturerId: e }, async: !1, contentType: "application/json; charset=utf-8", success: function (a) { if (null != a && a.data && a.data.length > 0) for (var t = a.data.split(","), r = 0; r < t.length; r++)$(".resellerData")[0].sumo.selectItem(t[r].toString()); $("#popUpReseller").find("input[id='spvManufactureId']").val(e), $("#popUpReseller").modal("show") }, error: function (e) { console.log(e) } }) } function GetReseller(e) { 0 == $("#ResellerDiv").find("ul").find("li").length ? $.ajax({ url: urlGetReseller, type: "GET", dataType: "json", data: "", contentType: "application/json; charset=utf-8", success: function (a) { if (null != a && a.length > 0) { for (var t = 0; t < a.length; t++)$(".resellerData")[0].sumo.add(a[t].Value, a[t].Text); GetExcludedReseller(e) } }, error: function (e) { console.log(e) } }) : ($(".resellerData")[0].sumo.unSelectAll(), GetExcludedReseller(e), $("#popUpReseller").find("input[id='spvManufactureId']").val(e), $("#popUpReseller").modal("show")) } function GetSupplier(e) { $.ajax({ url: urlGetSupplier, type: "GET", data: { id: e }, contentType: "application/json", dataType: "json", success: function (e) { if (e.lstSupplier.length > 0) { $("#supplierUl").html(""); for (var a = 0; a < e.lstSupplier.length; a++)$("#supplierUl").append("<li>" + e.lstSupplier[a] + "</li>") } } }), $("#popUpSupplier").modal("show") } function kendo_IsSpvAllowedBySpvmanufacturer(e) { return '<div class="onoffswitch" style="position:relative!important;"><input type="checkbox" data-check="' + e.IsSpvAllowedBySpvmanufacturer + '" name="onoffswitchIsSpvAllowedBySpvmanufacturer" class="onoffswitch-checkbox switch onoffswitchIsSpvAllowedBySpvmanufacturer" id="' + e.SPVManufactureId + '" ison="1"> <label class="onoffswitch-label" for="' + e.SPVManufactureId + '"><span class="onoffswitch-inner" ></span ><span class="onoffswitch-switch"></span></label ></div >' } function Searching(e, a) { SetSPVByManufacturer(e = e, a = a) } function SearchSPVManufactureName() { SetSPVByManufacturer($("#txtSPVManufactureName").val(), $("#txtServiceAdministrator").val()) } function saveSpvSetByManufacturerPopUp() { var e = []; $(".onoffswitchIsSpvAllowedBySpvmanufacturer:checked").each(function () { e.push($(this).attr("id")) }); var a = { Spvmanufacturerid: e.toString() }; $.ajax({ url: urlSaveSPVManufacture, type: "post", dataType: "Json", data: a, success: function (e) { 1 == e.status ? showSuccessMessage("SPV allowance set by particular manufacturers successfully.") : showErrorMessage("SPV allowance could not set by particular manufacturers successfully.") }, error: function () { showErrorMessage("SPV allowance could not set by particular manufacturers successfully.") } }) } function showErrorMessage(e) { $(".alert").hide(), $("#successMsgRegion").hide(), $("#errorMsgRegion").html(closeButton + e), $("#errorMsgRegion").show() } function showSuccessMessage(e) { $(".alert").hide(), $("#errorMsgRegion").hide(), $("#successMsgRegion").html(closeButton + e), $("#successMsgRegion").show() } function refreshKendoGrid() { location.reload(!0) } $("#txtSPVManufactureName").keypress(function (e) { 13 == e.which && $("#btnSendRequest").click() }), $("#btnReset").click(function (e) { $("#txtSPVManufactureName").val(""), $("#txtServiceAdministrator").val(""), SearchSPVManufactureName() }), $("#btnSendRequest").click(function (e) { SearchSPVManufactureName() }), $("#btnUploadSPVJson").change(function () { var e = $("#btnUploadSPVJson").get(0).files, a = new FormData; if ("json" != e[0].name.split(".").pop().toLowerCase()) return alert("Please upload json format file"), !1; a.append(e[0].name, e[0]), $.ajax({ url: urlUploadJson, type: "POST", data: a, contentType: !1, processData: !1, success: function (e) { e.status ? (showSuccessMessage("SPV Json file upload successfully."), $("#headerTitle").html(e.message[0]), localStorage.setItem("MessageText", "SPV Json file upload successfully."), refreshKendoGrid()) : showErrorMessage("something wrong was happening in upload SPV Json.") } }) }), $("#btnSyncSPVJson").click(function () { $.ajax({ url: urlSyncJson, type: "GET", contentType: !1, processData: !1, data: {}, success: function (e) { e.status ? (showSuccessMessage("SPV Json Sync successfully."), $("#headerTitle").html(e.message[0]), localStorage.setItem("MessageText", "SPV Json Sync successfully."), refreshKendoGrid()) : showErrorMessage("something wrong was happening in sync SPV Json.") } }) });