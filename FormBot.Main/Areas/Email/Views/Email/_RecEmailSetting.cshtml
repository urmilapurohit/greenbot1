@model FormBot.Entity.Email.RecEmailSignup
@{
    List<SelectListItem> lstTimeZone = new List<SelectListItem>(){new SelectListItem {Text = "Default", Value = "0" },
        new SelectListItem { Value = "1", Text = "(GMT -12:00) Eniwetok, Kwajalein, Dateline Time" },
        new SelectListItem { Value = "2", Text = "(GMT -11:00) Midway Island, Samoa" },
        new SelectListItem { Value = "3", Text = "(GMT -10:00) Hawaii" },
        new SelectListItem { Value = "4", Text = "(GMT -09:00) Alaska" },
        new SelectListItem { Value = "5", Text = "(GMT -08:00) Pacific Time (US &amp; Canada); Tijuana" },
        new SelectListItem { Value = "6", Text = "(GMT -07:00) Arizona" },
        new SelectListItem { Value = "7", Text = "(GMT -07:00) Mountain Time (US &amp; Canada)" },
        new SelectListItem { Value = "8", Text = "(GMT -06:00) Central America" },
        new SelectListItem { Value = "9", Text = "(GMT -06:00) Central Time (US &amp; Canada)" },
        new SelectListItem { Value = "10", Text = "(GMT -06:00) Mexico City, Tegucigalpa" },
        new SelectListItem { Value = "11", Text = "(GMT -06:00) Saskatchewan" },
        new SelectListItem { Value = "12", Text = "(GMT -05:00) Indiana (East)" },
        new SelectListItem { Value = "13", Text = "(GMT -05:00) Eastern Time (US &amp; Canada)" },
        new SelectListItem { Value = "14", Text = "(GMT -05:00) Bogota, Lima, Quito" },
        new SelectListItem { Value = "15", Text = "(GMT -04:00) Santiago" },
        new SelectListItem { Value = "16", Text = "(GMT -04:00) Caracas, La Paz" },
        new SelectListItem { Value = "17", Text = "(GMT -04:00) Atlantic Time (Canada)" },
        new SelectListItem { Value = "18", Text = "(GMT -03:30) Newfoundland" },
        new SelectListItem { Value = "19", Text = "(GMT -03:00) Greenland" },
        new SelectListItem { Value = "20", Text = "(GMT -03:00) Buenos Aires, Georgetown" },
        new SelectListItem { Value = "21", Text = "(GMT -03:00) Brasilia" },
        new SelectListItem { Value = "22", Text = "(GMT -02:00) Mid-Atlantic" },
        new SelectListItem { Value = "23", Text = "(GMT -01:00) Cape Verde Is." },
        new SelectListItem { Value = "24", Text = "(GMT -01:00) Azores" },
        new SelectListItem { Value = "25", Text = "(GMT) Casablanca, Monrovia" },
        new SelectListItem { Value = "26", Text = "(GMT) Dublin, Edinburgh, Lisbon, London" },
        new SelectListItem { Value = "27", Text = "(GMT +01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna" },
        new SelectListItem { Value = "28", Text = "(GMT +01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague" },
        new SelectListItem { Value = "29", Text = "(GMT +01:00) Brussels, Copenhagen, Madrid, Paris" },
        new SelectListItem { Value = "30", Text = "(GMT +01:00) Sarajevo, Skopje, Sofija, Vilnius, Warsaw, Zagreb" },
        new SelectListItem { Value = "31", Text = "(GMT +01:00) West Central Africa" },
        new SelectListItem { Value = "32", Text = "(GMT +02:00) Athens, Istanbul, Minsk" },
        new SelectListItem { Value = "33", Text = "(GMT +02:00) Bucharest" },
        new SelectListItem { Value = "34", Text = "(GMT +02:00) Cairo" },
        new SelectListItem { Value = "35", Text = "(GMT +02:00) Harare, Pretoria" },
        new SelectListItem { Value = "36", Text = "(GMT +02:00) Helsinki, Riga, Tallinn" },
        new SelectListItem { Value = "37", Text = "(GMT +02:00) Israel, Jerusalem Standard Time" },
        new SelectListItem { Value = "38", Text = "(GMT +03:00) Baghdad" },
        new SelectListItem { Value = "39", Text = "(GMT +03:00) Arab, Kuwait, Riyadh" },
        new SelectListItem { Value = "40", Text = "(GMT +03:00) Moscow, St. Petersburg, Volgograd" },
        new SelectListItem { Value = "41", Text = "(GMT +03:00) East Africa, Nairobi" },
        new SelectListItem { Value = "42", Text = "(GMT +03:30) Tehran" },
        new SelectListItem { Value = "43", Text = "(GMT +04:00) Abu Dhabi, Muscat" },
        new SelectListItem { Value = "44", Text = "(GMT +04:00) Baku, Tbilisi, Yerevan" },
        new SelectListItem { Value = "45", Text = "(GMT +04:30) Kabul" },
        new SelectListItem { Value = "46", Text = "(GMT +05:00) Ekaterinburg" },
        new SelectListItem { Value = "47", Text = "(GMT +05:00) Islamabad, Karachi, Sverdlovsk, Tashkent" },
        new SelectListItem { Value = "48", Text = "(GMT +05:30) Calcutta, Chennai, Mumbai, New Delhi, India Standard Time" },
        new SelectListItem { Value = "49", Text = "(GMT +05:45) Kathmandu, Nepal" },
        new SelectListItem { Value = "50", Text = "(GMT +06:00) Almaty, Novosibirsk, North Central Asia" },
        new SelectListItem { Value = "51", Text = "(GMT +06:00) Astana, Dhaka" },
        new SelectListItem { Value = "52", Text = "(GMT +06:00) Sri Jayewardenepura, Sri Lanka" },
        new SelectListItem { Value = "53", Text = "(GMT +06:30) Rangoon" },
        new SelectListItem { Value = "54", Text = "(GMT +07:00) Bangkok, Hanoi, Jakarta" },
        new SelectListItem { Value = "55", Text = "(GMT +07:00) Krasnoyarsk" },
        new SelectListItem { Value = "56", Text = "(GMT +08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi" },
        new SelectListItem { Value = "57", Text = "(GMT +08:00) Irkutsk, Ulaan Bataar" },
        new SelectListItem { Value = "58", Text = "(GMT +08:00) Kuala Lumpur, Singapore" },
        new SelectListItem { Value = "59", Text = "(GMT +08:00) Perth, Western Australia" },
        new SelectListItem { Value = "60", Text = "(GMT +08:00) Taipei" },
        new SelectListItem { Value = "61", Text = "(GMT +09:00) Osaka, Sapporo, Tokyo" },
        new SelectListItem { Value = "62", Text = "(GMT +09:00) Seoul, Korea Standard time" },
        new SelectListItem { Value = "63", Text = "(GMT +09:00) Yakutsk" },
        new SelectListItem { Value = "64", Text = "(GMT +09:30) Adelaide, Central Australia" },
        new SelectListItem { Value = "65", Text = "(GMT +09:30) Darwin" },
        new SelectListItem { Value = "66", Text = "(GMT +10:00) Brisbane, East Australia" },
        new SelectListItem { Value = "67", Text = "(GMT +10:00) Canberra, Melbourne, Sydney, Hobart" },
        new SelectListItem { Value = "68", Text = "(GMT +10:00) Guam, Port Moresby" },
        new SelectListItem { Value = "69", Text = "(GMT +10:00) Hobart, Tasmania" },
        new SelectListItem { Value = "70", Text = "(GMT +10:00) Vladivostok" },
        new SelectListItem { Value = "71", Text = "(GMT +11:00) Magadan, Solomon Is., New Caledonia" },
        new SelectListItem { Value = "72", Text = "(GMT +12:00) Auckland, Wellington" },
        new SelectListItem { Value = "73", Text = "(GMT +12:00) Fiji Islands, Kamchatka, Marshall Is." },
        new SelectListItem { Value = "74", Text = "(GMT +13:00) Nuku'alofa, Tonga" }
    };
    
}
@if (ViewBag.ErrorMessage != null)
{
    <div class="row">
        <div class="col-sm-12">
            <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegion">
                @ViewBag.ErrorMessage
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-sm-2">
        <div class="form-group">
            @Html.LabelFor(m => m.RecDef_TimeZone, new { @class = "control-label" })
            @Html.DropDownListFor(m => m.RecDef_TimeZone, lstTimeZone, new { @class = "form-control" })
           
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-2">
        <div class="form-group">
            @Html.HiddenFor(m => m.RecIsRequired)
            @if (Model.RecIsRequired)
            {
                @Html.LabelFor(m => m.RecConfigurationEmail, new { @class = "control-label required" });
            }
            else {
                @Html.LabelFor(m => m.RecConfigurationEmail, new { @class = "control-label" });
            }            
            @Html.TextBoxFor(m => m.RecConfigurationEmail, new { @class = "form-control", @maxlength = 250, @tabindex = 1, @autofocus = "autofocus" })
            @Html.ValidationMessageFor(m => m.RecConfigurationEmail)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
                @if (Model.RecIsRequired)
                {
                    @Html.LabelFor(m => m.RecConfigurationPassword, new { @class = "control-label required" });
                }
                else
                {
                    @Html.LabelFor(m => m.RecConfigurationPassword, new { @class = "control-label" });
                }
                            
                @Html.TextBoxFor(m => m.RecConfigurationPassword, new { @class = "form-control", @maxlength = 50, @tabindex = 2, @autofocus = "autofocus", id = "ConfigurationPassword", @type = "password" })
                @Html.ValidationMessageFor(m => m.RecConfigurationPassword)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            @Html.LabelFor(m => m.RecProtocolType, new { @class = "control-label" })
            @Html.DropDownListFor(m => m.RecProtocolType, new List<SelectListItem>()
{
    new SelectListItem(){ Text= "POP3", Value = "0"},
    //new SelectListItem(){ Text= "IMAP4", Value = "1"},
}, null, new { @class = "form-control", @autofocus = "autofocus", @tabindex = 3 })
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            @if (Model.RecIsRequired)
            {
                @Html.LabelFor(m => m.RecIncomingMail, new { @class = "control-label required" });
            }
            else
            {
                @Html.LabelFor(m => m.RecIncomingMail, new { @class = "control-label" });
            }            
            @Html.TextBoxFor(m => m.RecIncomingMail, new { @class = "form-control", @maxlength = 100, @tabindex = 4, @autofocus = "autofocus" })
            @Html.ValidationMessageFor(m => m.RecIncomingMail)
        </div>
    </div>
    <div class="col-sm-1">
        <div class="form-group">
            @if (Model.RecIsRequired)
            {
                @Html.LabelFor(m => m.RecIncomingMailPort, new { @class = "control-label required" });
            }
            else
            {
                @Html.LabelFor(m => m.RecIncomingMailPort, new { @class = "control-label" });
            }            
            @Html.TextBoxFor(m => m.RecIncomingMailPort, new { @class = "form-control", @maxlength = 10, @tabindex = 5, @autofocus = "autofocus" })
            @Html.ValidationMessageFor(m => m.RecIncomingMailPort)
        </div>
    </div>

    <div class="col-sm-2">
        <div class="form-group">
            @if (Model.RecIsRequired)
            {
                @Html.LabelFor(m => m.RecOutgoingMail, new { @class = "control-label required" });
            }
            else
            {
                @Html.LabelFor(m => m.RecOutgoingMail, new { @class = "control-label" });
            }                        
            @Html.TextBoxFor(m => m.RecOutgoingMail, new { @class = "form-control", @maxlength = 100, @tabindex = 6, @autofocus = "autofocus" })
            @Html.ValidationMessageFor(m => m.RecOutgoingMail)
        </div>
    </div>
    <div class="col-sm-1">
        <div class="form-group">
            @if (Model.RecIsRequired)
            {
                @Html.LabelFor(m => m.RecOutgoingMailPort, new { @class = "control-label required" });
            }
            else
            {
                @Html.LabelFor(m => m.RecOutgoingMailPort, new { @class = "control-label" });
            }
            @Html.TextBoxFor(m => m.RecOutgoingMailPort, new { @class = "form-control", @maxlength = 10, @tabindex = 7, @autofocus = "autofocus" })
            @Html.ValidationMessageFor(m => m.RecOutgoingMailPort)
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            @Html.LabelFor(m => m.RecEmailSignature, new { @class = "control-label" })
            <div id="editor_Rec" tabindex="8">
            </div>
        </div>
    </div>
</div>

