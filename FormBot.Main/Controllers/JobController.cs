using FormBot.BAL.Service;
using FormBot.Entity;
using System.Collections.Generic;
using FormBot.Helper;
using System;
using System.Web.Mvc;
using System.Net;
using System.IO;
using System.Linq;
using FormBot.BAL;
using System.Web;
using FormBot.Email;
using System.Data;
using FormBot.BAL.Service.Documents;
using System.Text;
using FormBot.Entity.Pdf;
using System.Collections;
using FormBot.Entity.Documents;
using System.Configuration;
using FormBot.Entity.Job;
using FormBot.BAL.Service.Job;
using FormBot.Entity.Email;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;
using System.Text.RegularExpressions;
using System.Globalization;
using FormBot.Main.Models;
using FormBot.Entity.Settings;
using System.ComponentModel;
using FormBot.Main.Infrastructure;
using Microsoft.Reporting.WebForms;
using System.Xml;
using System.Reflection;
using Ionic.Zip;
using System.Xml.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using FormBot.Entity.SolarElectrician;
using FormBot.Entity.Signature;
using FormBot.Helper.Helper;
using FormBot.BAL.Service.CommonRules;
using System.Web.UI;
using System.Web.Mvc.Html;
using FormBot.BAL.Service.RAMSolarCompanyMapping;
using System.Web.Script.Serialization;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using FormBot.Entity.DocumentSignatureRequest;
using FormBot.BAL.Service.DocumentSignatureRequest;
using FormBot.Entity.KendoGrid;
using ClosedXML.Excel;
using FormBot.Entity.JobHistory;
using Excel;

using System.IO.Compression;
using FormBot.BAL.Service.SPV;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;
using iTextSharp.tool.xml;
using iTextSharp.tool.xml.pipeline.html;
using iTextSharp.tool.xml.html;
using iTextSharp.tool.xml.pipeline.end;
using iTextSharp.tool.xml.parser;
using iTextSharp.text;
using iTextSharp.text.pdf;
using FormBot.Entity.SPV;
using HtmlAgilityPack;
//using org.apache.pdfbox.pdmodel;
//using org.apache.pdfbox.util;

//using Xceed.Words.NET;
using System.Diagnostics;
using FormBot.Entity.CheckList;
using DocumentFormat.OpenXml.Bibliography;
using System.Xml.Serialization;
using FormBot.BAL.Service.RECRegistry;
using StackExchange.Redis;
using Newtonsoft.Json.Serialization;





//using DocumentFormat.OpenXml.Drawing.Pictures;


//using System.Web.UI;

namespace FormBot.Main.Controllers
{
    [SessionState(System.Web.SessionState.SessionStateBehavior.ReadOnly)]
    public class JobController : Controller
    {
        #region Properties
        private readonly IUserBAL _user;
        private readonly IEmailBAL _emailService;
        private readonly ICreateJobBAL _job;
        private readonly IUserBAL _userBAL;
        private readonly IDocumentsBAL _documentsBAL;
        private readonly IJobSchedulingBAL _jobSchedule;
        private readonly IJobInvoiceBAL _jobInvoice;
        private readonly IJobInvoiceDetailBAL _jobInvoiceDetail;
        private readonly IJobDetailsBAL _jobDetails;
        private readonly ICreateJobHistoryBAL _jobHistory;
        private readonly ISTCInvoiceBAL _stcInvoiceServiceBAL;
        private readonly IEmailBAL _emailBAL;
        private readonly IJobRulesBAL _jobRules;
        private readonly ICERImportBAL _cerImportBAL;
        private readonly IGenerateStcReportBAL _generateStcReportBAL;
        private readonly IJobSettingBAL _jobSettingBAL;
        private readonly IDocumentSignatureRequestBAL _documentSignatureRequestBAL;
        private readonly ICommonRECMethodsBAL _commonRECMethodsBAL;
        private readonly ILogger _log; // = new Logger();
        private readonly IDocumentSignatureLogBAL _documentSignatureLogBAL;
        private readonly ISpvLogBAL _spvLog;
        private readonly ISpvVerificationBAL _spvVerificationBAL;
        private readonly ISolarCompanyBAL _solarCompanyService;
        private readonly ICommonBulkUploadToCERBAL _commonBulkUploadToCER;
        private readonly IPricingManagerBAL _pricingManagerBAL;
        #endregion

        #region Constructor

        public JobController(IUserBAL user, ICreateJobBAL job, IUserBAL userBAL, IDocumentsBAL documentsBAL, IJobSchedulingBAL jobScheduling, IEmailBAL emailService, IJobInvoiceBAL jobInvoice, IJobInvoiceDetailBAL jobInvoiceDetailBAL, IJobDetailsBAL jobDetails, ICreateJobHistoryBAL jobHistory, ISTCInvoiceBAL stcInvoiceServiceBAL, IEmailBAL emailBAL, IJobRulesBAL jobRules, ICERImportBAL cerImportBAL, IGenerateStcReportBAL generateStcReportBAL, IJobSettingBAL jobSettingBAL, IDocumentSignatureRequestBAL documentSignatureRequestBAL, ICommonRECMethodsBAL commonRECMethodsBAL, IDocumentSignatureLogBAL documentSignatureLogBAL, ISpvLogBAL spvLog, ISpvVerificationBAL spvVerificationBAL, ILogger log, ISolarCompanyBAL solarCompanyService, ICommonBulkUploadToCERBAL commonBulkUploadToCER, IPricingManagerBAL pricingManagerBAL)
        {
            this._log = log;
            this._user = user;
            this._job = job;
            this._userBAL = userBAL;
            this._documentsBAL = documentsBAL;
            this._jobSchedule = jobScheduling;
            this._emailService = emailService;
            this._jobInvoice = jobInvoice;
            this._jobInvoiceDetail = jobInvoiceDetailBAL;
            this._jobDetails = jobDetails;
            this._jobHistory = jobHistory;
            this._stcInvoiceServiceBAL = stcInvoiceServiceBAL;
            this._emailBAL = emailBAL;
            this._jobRules = jobRules;
            this._cerImportBAL = cerImportBAL;
            this._generateStcReportBAL = generateStcReportBAL;
            this._jobSettingBAL = jobSettingBAL;
            this._documentSignatureRequestBAL = documentSignatureRequestBAL;
            this._commonRECMethodsBAL = commonRECMethodsBAL;
            this._documentSignatureLogBAL = documentSignatureLogBAL;
            this._spvLog = spvLog;
            this._spvVerificationBAL = spvVerificationBAL;
            this._solarCompanyService = solarCompanyService;
            this._commonBulkUploadToCER = commonBulkUploadToCER;
            this._pricingManagerBAL = pricingManagerBAL;
        }

        #endregion

        #region Events

        /// <summary>
        /// Gets the job invoice.
        /// </summary>
        /// <returns>PartialView Result</returns>
        [UserAuthorization]
        public PartialViewResult GetJobInvoice()
        {
            return PartialView("_JobInvoice");
        }

        /// <summary>
        /// Gets the invoice list.
        /// </summary>
        /// <param name="JobID">The job identifier.</param>
        public void GetInvoiceList(string JobID)
        {
            int jobID = Convert.ToInt32(JobID);
            GridParam gridParam = Grid.ParseParams(HttpContext.Request);
            int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
            try
            {
                List<JobInvoice> lstJobInvoice = _jobInvoice.GetJobInvoice(jobID, pageNumber, gridParam.PageSize, gridParam.SortCol, gridParam.SortDir, ProjectSession.LoggedInUserId);
                if (gridParam.SortCol == "InvoiceTotal" || gridParam.SortCol == "InvoiceAmountDue")
                {
                    if (gridParam.SortCol == "InvoiceTotal")
                    {
                        if (gridParam.SortDir.ToLower() == "desc")
                            lstJobInvoice = lstJobInvoice.OrderByDescending(s => s.InvoiceTotal).ToList();
                        else
                            lstJobInvoice = lstJobInvoice.OrderBy(s => s.InvoiceTotal).ToList();
                    }
                    if (gridParam.SortCol == "InvoiceAmountDue")
                    {
                        if (gridParam.SortDir.ToLower() == "desc")
                            lstJobInvoice = lstJobInvoice.OrderByDescending(s => s.InvoiceAmountDue).ToList();
                        else
                            lstJobInvoice = lstJobInvoice.OrderBy(s => s.InvoiceAmountDue).ToList();
                    }
                }
                if (lstJobInvoice.Count > 0)
                {
                    gridParam.TotalDisplayRecords = lstJobInvoice.FirstOrDefault().TotalRecords;
                    gridParam.TotalRecords = lstJobInvoice.FirstOrDefault().TotalRecords;
                }
                HttpContext.Response.Write(Grid.PrepareDataSet(lstJobInvoice, gridParam));
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                HttpContext.Response.Write(Grid.PrepareDataSet(new List<JobInvoice>(), gridParam));
            }
        }

        /// <summary>
        /// Deletes the invoice.
        /// </summary>
        /// <param name="invoiceID">The invoice identifier.</param>
        /// <returns>object Result</returns>
        [HttpPost]
        public JsonResult DeleteInvoice(string invoiceID)
        {
            clsUploadedFileJsonResponseObject JsonResponseObj = new clsUploadedFileJsonResponseObject();
            try
            {
                _jobInvoice.DeleteInvoice(Convert.ToInt32(invoiceID));
                JsonResponseObj.status = "Success";
                JsonResponseObj.strErrors = "<ul><li>Invoice deleted successfully..</li></ul>";
            }
            catch (Exception ex)
            {
                JsonResponseObj.status = "Failed";
                JsonResponseObj.strErrors = "<ul><li>" + ex.Message.ToString() + "</li></ul>";
            }
            return Json(JsonResponseObj);
        }

        /// <summary>
        /// _s the add time.
        /// </summary>
        /// <returns>action result</returns>
        public ActionResult _AddTime()
        {
            List<SelectListItem> lstList = new List<SelectListItem>();
            DataSet dataset = _jobInvoiceDetail.JobVisitData(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 158);
            if (dataset.Tables.Count > 0)
            {
                foreach (DataRow item in dataset.Tables[0].Rows)
                {
                    SelectListItem selectedList = new SelectListItem()
                    {
                        Value = item.ItemArray[0].ToString(),
                        Text = item.ItemArray[1].ToString()
                    };

                    lstList.Add(selectedList);
                }
            }

            ViewBag.JobVisit = lstList;
            return PartialView("_AddTime");
        }

        /// <summary>
        /// Main Job Create Page.
        /// </summary>
        /// <returns>action result</returns>
        [UserAuthorization]
        public ActionResult Create()
        {
            CreateJob createJob = new Entity.CreateJob();
            createJob.Guid = Guid.NewGuid().ToString();
            createJob.BasicDetails = new BasicDetails();
            createJob.JobInstallationDetails = new JobInstallationDetails();
            createJob.JobOwnerDetails = new JobOwnerDetails();
            createJob.JobInstallerDetails = new JobInstallerDetails();
            createJob.JobSTCDetails = new JobSTCDetails() { DeemingPeriod = "One year" };
            DataSet dataSet = _job.CreateJobNumber((int)Helper.SystemEnums.JobType.PVD, ProjectSession.SolarCompanyId);
            string jobNumber = string.Empty;
            if (dataSet != null && dataSet.Tables.Count > 0)
            {
                jobNumber = dataSet.Tables[0].Rows[0].ItemArray[0].ToString();
            }

            createJob.JobPanelDetails = new JobPanelDetails();
            createJob.JobInverterDetails = new JobInverterDetails();
            createJob.JobElectricians = new JobElectricians();
            createJob.JobElectricians.ElectricianID = 0;
            createJob.JobElectricians.InstallerID = 0;
            createJob.BasicDetails = new BasicDetails() { JobNumber = jobNumber };
            createJob.JobSystemDetails = new Entity.JobSystemDetails();
            //var designRole = from SystemEnums.PostalAddressType s in Enum.GetValues(typeof(SystemEnums.PostalAddressType))
            //                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace('_', ' ') };
            ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
            createJob.Guid = Guid.NewGuid().ToString();
            createJob.UserType = ProjectSession.UserTypeId;

            createJob.InstallerSignature = null;
            createJob.DesignerSignature = null;
            createJob.ElectricianSignature = null;

            return View(createJob);
        }

        /// <summary>
        /// Indexes the specified identifier.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>action result</returns>
        [HttpGet]
        [UserAuthorization]
        public ActionResult Index(string id = null, bool isClassic = false, bool isTabularView = false, string IsStaticSearch = null)
        {
            if (ProjectSession.LoggedInUserId > 0)
            {
                if (string.IsNullOrEmpty(id))// || id.ToLower() == "archive")
                {
                    FormBot.Entity.JobList job = new FormBot.Entity.JobList();
                    job.UserTypeID = ProjectSession.UserTypeId;
                    job.SolarCompanyId = ProjectSession.SolarCompanyId;
                    //if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                    //{
                    //    job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, ProjectSession.SolarCompanyId);
                    //}
                    //else
                    //{
                    //    job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0);
                    //}
                    //job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8 ? ProjectSession.SolarCompanyId : 0);

                    var jobSearchType = from SystemEnums.JobScheduleType j in Enum.GetValues(typeof(SystemEnums.JobScheduleType))
                                        select new { ID = j, Name = j.ToString() };
                    ViewData["JobScheduleType"] = new SelectList(jobSearchType, "ID", "Name");
                    var jobType = from SystemEnums.JobType j in Enum.GetValues(typeof(SystemEnums.JobType))
                                  select new { ID = j, Name = j.ToString() };
                    ViewData["JobType"] = new SelectList(jobType, "ID", "Name");

                    var jobPriority = from SystemEnums.JobPriority j in Enum.GetValues(typeof(SystemEnums.JobPriority))
                                      select new { ID = j, Name = j.ToString() };
                    ViewData["JobPriority"] = new SelectList(jobPriority, "ID", "Name");

                    ViewData["JobStage"] = new SelectList(GetJobAllStage(ProjectSession.UserTypeId), "Value", "Text");
                    ViewData["PropertyType"] = new string[] { "Residential", "Commercial", "School" };
                    ViewData["colPriority"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobPriority);
                    ViewData["colJobType"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobType);
                    var tradeStatus = from SystemEnums.TradeStatus j in Enum.GetValues(typeof(SystemEnums.TradeStatus))
                                      select new { ID = j, Name = j.ToString() };
                    ViewData["colTradeStatus"] = Newtonsoft.Json.JsonConvert.SerializeObject(tradeStatus);

                    //DataSet dsPreapproval = _job.GetPreApprovalStatus();
                    //DataSet dsConnection = _job.GetConnectionStatus();
                    //Get PreApprovalStatus and ConnectionStatus in one call
                    DataSet dsJobStatusCommonDetails = _job.GetJobStatusCommonDetails(ProjectSession.LoggedInUserId);
                    if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0 && dsJobStatusCommonDetails.Tables[0] != null && dsJobStatusCommonDetails.Tables[0].Rows.Count > 0)
                    {
                        job.lstPreApproval = dsJobStatusCommonDetails.Tables[0].ToListof<PreConStatus>();
                    }

                    if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0 && dsJobStatusCommonDetails.Tables[1] != null && dsJobStatusCommonDetails.Tables[1].Rows.Count > 0)
                    {
                        job.lstConnection = dsJobStatusCommonDetails.Tables[1].ToListof<PreConStatus>();
                    }

                    if (TempData["PreApprovalsDashboardStatus"] != null && Convert.ToString(TempData["PreApprovalsDashboardStatus"]) != "")
                    {
                        job.PreApprovalStatusId = Convert.ToInt32(TempData["PreApprovalsDashboardStatus"]);
                    }

                    if (TempData["ConnectionsDashboardStatus"] != null && Convert.ToString(TempData["ConnectionsDashboardStatus"]) != "")
                    {
                        job.ConnectionStatusId = Convert.ToInt32(TempData["ConnectionsDashboardStatus"]);
                    }

                    List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
                    ViewBag.JSUserColumnList = listUserWiseColumns;
                    ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
                    ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
                    var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
                    if (SavePageSize <= 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
                    {
                        SavePageSize = 10;
                    }
                    ViewBag.PageSize = SavePageSize;
                    //AdvanceSearchCategory is assigned in GetJobStatusCommonDetails method
                    //DataSet dsAdvanceSearchCategory = _job.GetAdvanceSearchCategory();
                    if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0)
                    {
                        List<AdvanceSearchCategory> lstSearchCategory = new List<AdvanceSearchCategory>();

                        if (dsJobStatusCommonDetails.Tables[2].Rows.Count > 0)
                        {
                            Int32[] arrSearchCategoryId = dsJobStatusCommonDetails.Tables[2].AsEnumerable().ToList().Select(s => s.Field<Int32>("SearchCategoryId")).Distinct().ToArray<Int32>();
                            foreach (int i in arrSearchCategoryId)
                            {
                                List<DataRow> drSearchCategory = dsJobStatusCommonDetails.Tables[2].AsEnumerable().ToList().Where(s => s.Field<Int32>("SearchCategoryId") == i).ToList();
                                if (drSearchCategory.Count > 0)
                                {
                                    AdvanceSearchCategory tmp = new AdvanceSearchCategory();
                                    tmp.SearchCategoryId = Convert.ToInt32(drSearchCategory[0]["SearchCategoryId"]);
                                    tmp.SearchCategoryName = Convert.ToString(drSearchCategory[0]["SearchCategoryName"]);
                                    List<AdvanceSearchSubCategory> lstAdvanceSearchSubCategory = new List<AdvanceSearchSubCategory>();
                                    foreach (DataRow dr in drSearchCategory)
                                    {
                                        AdvanceSearchSubCategory tmpsub = new AdvanceSearchSubCategory();
                                        tmpsub.ColumnID = Convert.ToInt32(dr["ColumnID"]);
                                        tmpsub.Name = Convert.ToString(dr["Name"]);
                                        tmpsub.DisplayName = Convert.ToString(dr["DisplayName"]);
                                        lstAdvanceSearchSubCategory.Add(tmpsub);
                                    }

                                    if (lstAdvanceSearchSubCategory.Count > 0)
                                    {
                                        tmp.lstAdvanceSearchSubCategory = lstAdvanceSearchSubCategory;
                                        tmp.hdnColName = lstAdvanceSearchSubCategory[0].Name;
                                    }

                                    //if (tmp.SearchCategoryId == 3 && dsAdvanceSearchCategory.Tables[1].Rows.Count > 0)
                                    //{
                                    //    tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", dsAdvanceSearchCategory.Tables[1].AsEnumerable().ToList().Select(s => s.Field<string>("Abbreviation")).Distinct().ToArray<string>());
                                    //}
                                    //else 
                                    if (tmp.SearchCategoryId == 4)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", jobPriority.Select(x => x.Name).ToList());
                                    }
                                    else if (tmp.SearchCategoryId == 5)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", tradeStatus.Select(x => x.Name).ToList());
                                    }
                                    else if (tmp.SearchCategoryId == 6)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = "Pending,Approved";
                                    }
                                    else if (tmp.SearchCategoryId == 7)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = "Pending,Completed";
                                    }
                                    else if (tmp.SearchCategoryId == 8)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", jobType.Select(x => x.Name).ToList());
                                    }
                                    else if (tmp.SearchCategoryId == 9 || tmp.SearchCategoryId == 11)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = "Yes,No";
                                    }
                                    else if (tmp.SearchCategoryId == 10)
                                    {
                                        tmp.AllFilters = tmp.hdnAllFilters = "Commercial,Residential,School";
                                    }
                                    else
                                    {
                                        tmp.AllFilters = string.Join(",", string.Join(",", lstAdvanceSearchSubCategory.Select(X => X.DisplayName).ToList()));
                                        tmp.hdnAllFilters = string.Join(",", string.Join(",", lstAdvanceSearchSubCategory.Select(X => X.Name).ToList()));
                                        tmp.hdnColName = string.Empty;
                                    }

                                    lstSearchCategory.Add(tmp);
                                }
                            }
                        }

                        //ViewBag.jsListSearchCategory = Newtonsoft.Json.JsonConvert.SerializeObject(lstSearchCategory);
                        job.lstAdvanceSearchCategory = lstSearchCategory;
                    }
                    UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
                    {
                        IsKendoGrid = true,
                        PageSize = 10,
                        UserId = ProjectSession.LoggedInUserId,
                        ViewPageId = SystemEnums.ViewPageId.JobView.GetHashCode(),
                        UserWiseGridConfigurationId = 0
                    };
                    UserWiseGridConfiguration sessionObjUserWiseGridConfiguration = null;
                    List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = new List<UserWiseGridConfiguration>();
                    var index = -1;
                    try
                    {
                        lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
                        sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.JobView.GetHashCode()).FirstOrDefault();
                        index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
                    }
                    catch (Exception ex) { }
                    if (!string.IsNullOrEmpty(IsStaticSearch))
                    {
                        objUserWiseGridConfiguration.IsKendoGrid = !Convert.ToBoolean(IsStaticSearch);
                        objUserWiseGridConfiguration.PageSize = sessionObjUserWiseGridConfiguration == null ? 10 : sessionObjUserWiseGridConfiguration.PageSize;
                        objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
                        objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
                        sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
                    }
                    else if (sessionObjUserWiseGridConfiguration == null)
                        sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
                    if (index != -1)
                    {
                        lstUserWiseGridConfigurations[index] = sessionObjUserWiseGridConfiguration;
                        ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
                    }
                    else
                    {
                        lstUserWiseGridConfigurations.Add(sessionObjUserWiseGridConfiguration);
                        ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
                    }

                    //SpvRequiredSolarCompanyWise objSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCOrGlobalLevel(job.SolarCompanyId.ToString()).FirstOrDefault();
                    //job.GlobalisAllowedSPV = objSpvRequiredSolarCompanyWise.status;
                    //if (!string.IsNullOrEmpty(id) && id.ToLower() == "archive")
                    //    ViewBag.Archive = true;

                    if (sessionObjUserWiseGridConfiguration.IsKendoGrid)
                        return View("Index", job);
                    else
                        return View("StaticJobIndex", job);
                }
                else
                {
                    int jobId = 0;
                    CreateJob createJob = new CreateJob();
                    if (!string.IsNullOrEmpty(id))
                    {
                        int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
                    }

                    if (jobId > 0)
                    {
                        //_log.LogException("jobId = " + Convert.ToInt32(jobId) + " Error : ", null);
                        if (isTabularView == true)
                        {
                            GetFirstTabular(id, jobId, isTabularView, ref createJob);
                        }
                        else
                        {
                            //CreateJob createJob = _job.GetJobByID(Convert.ToInt32(jobId));
                            createJob = _job.GetJobByID(Convert.ToInt32(jobId));

                            int SSCID = Convert.ToInt32(createJob.BasicDetails.SSCID);
                            List<SelectListItem> SSCItemsList = _job.GetSSCUserByJbID(jobId, ProjectSession.SolarCompanyId).Select(a => new SelectListItem { Text = a.FirstName + ' ' + a.LastName, Value = a.UserID.ToString() }).ToList();
                            List<SelectListItem> SSCItems = SSCItemsList.Where(x => x.Value.Contains(Convert.ToString(SSCID))).ToList();
                            if (SSCItems.Count > 0)
                            {
                                createJob.BasicDetails.SSCName = SSCItems[0].Text;
                            }

                            createJob.SerialNumberwithPhotosAvaibilityList = CheckSerialNumberPhotoAvailability(Convert.ToInt32(jobId));

                            DataSet commonjobWithSameAddress = _job.CommonJobsWithSameInstallationAddress(jobId);
                            if (commonjobWithSameAddress.Tables.Count > 0)
                            {
                                createJob.CommonJobsWithSameInstallationAddress = commonjobWithSameAddress.Tables[0].Rows.Count > 0 ? commonjobWithSameAddress.Tables[0].ToListof<CommonJobsWithSameInstallationAddress>() : new List<CommonJobsWithSameInstallationAddress>();
                            }

                            // check user has rights to access current job
                            if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
                            {
                                bool isAllow = false;
                                if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && (createJob.BasicDetails.ResellerId == ProjectSession.ResellerId))
                                    isAllow = true;
                                else if ((ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8) && (createJob.BasicDetails.SolarCompanyId == ProjectSession.SolarCompanyId))
                                    isAllow = true;
                                else if (ProjectSession.UserTypeId == 6 && ((createJob.BasicDetails.SSCID == ProjectSession.LoggedInUserId || createJob.BasicDetails.CreatedBy == ProjectSession.LoggedInUserId)))
                                    isAllow = true;
                                else if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9 || ProjectSession.UserTypeId == 10)
                                {
                                    if (createJob.ElectricianData.Rows.Count > 0)
                                    {
                                        for (int data = 0; data < createJob.ElectricianData.Rows.Count; data++)
                                        {
                                            if (ProjectSession.LoggedInUserId.ToString() == createJob.ElectricianData.Rows[data]["UserId"].ToString())
                                            {
                                                isAllow = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                else
                                    isAllow = false;

                                if (!isAllow)
                                    return RedirectToAction("Index");
                            }

                            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(createJob.JobSystemDetails.SerialNumbers);
                            createJob.JobSystemDetails.StoredSerialNumber = System.Convert.ToBase64String(plainTextBytes);
                            createJob.JobSystemDetails.PreviousSystemSize = createJob.JobSystemDetails.SystemSize != null ? createJob.JobSystemDetails.SystemSize : 0;

                            createJob.lstCustomDetails = ReplaceSeperatorValue(createJob.lstCustomDetails);


                            // In _job.GetJobByID method assign createJob.CommonSerialNumbers
                            //DataSet dsSerialNumber = _job.GetCommonSerialByID(jobId, ProjectSession.UserTypeId);
                            //createJob.CommonSerialNumbers = dsSerialNumber.Tables[0].Rows.Count > 0 ? dsSerialNumber.Tables[0].ToListof<CommonSerialNumber>() : new List<CommonSerialNumber>();
                            if (jobId > 0 && createJob.BasicDetails.InstallerID > 0 && !string.IsNullOrEmpty(Convert.ToString(createJob.BasicDetails.InstallationDate)))
                            {
                                //createJob.CommonJobsWithSameInstallDateAndInstaller = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, Convert.ToInt32(createJob.BasicDetails.InstallerID), Convert.ToString(createJob.BasicDetails.InstallationDate));
                                DataSet ds = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, Convert.ToInt32(createJob.BasicDetails.InstallerID), Convert.ToString(createJob.BasicDetails.InstallationDate));
                                if (ds.Tables.Count > 0)
                                {
                                    createJob.CommonJobsWithSameInstallDateAndInstaller = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                                    createJob.CommonJobsWithSameInstallDateAndInstallerAndFailedStcStatus = ds.Tables[1].Rows.Count > 0 ? ds.Tables[1].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                                }

                            }

                            //WriteToLogFile("3 : after GetCommonSerialByID" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                            createJob.Guid = Convert.ToString(jobId);
                            createJob.JobID = jobId;
                            createJob.BasicDetails.strInstallationDateTemp = createJob.BasicDetails.InstallationDate != null ? createJob.BasicDetails.InstallationDate.Value.ToString("yyyy/MM/dd") : "";
                            //createJob.BasicDetails.strInstallationDate = null;
                            createJob.BasicDetails.strSoldByDate = createJob.BasicDetails.SoldByDate != null ? createJob.BasicDetails.SoldByDate.Value.ToString("yyyy/MM/dd") : "";

                            createJob.InstallerSignature = createJob.InstallerSignature != null ? createJob.InstallerSignature.Replace("\\", "/") : null;
                            createJob.DesignerSignature = createJob.DesignerSignature != null ? createJob.DesignerSignature.Replace("\\", "/") : null;
                            createJob.ElectricianSignature = createJob.ElectricianSignature != null ? createJob.ElectricianSignature.Replace("\\", "/") : null;
                            createJob.OwnerSignature = createJob.OwnerSignature != null ? createJob.OwnerSignature.Replace("\\", "/") : null;

                            createJob.BasicDetails.InstallerSignature = createJob.BasicDetails.InstallerSignature != null ? createJob.BasicDetails.InstallerSignature.Replace("\\", "/") : "";
                            createJob.BasicDetails.DesignerSignature = createJob.BasicDetails.DesignerSignature != null ? createJob.BasicDetails.DesignerSignature.Replace("\\", "/") : "";
                            createJob.BasicDetails.ElectricianSignature = createJob.BasicDetails.ElectricianSignature != null ? createJob.BasicDetails.ElectricianSignature.Replace("\\", "/") : "";
                            createJob.BasicDetails.OwnerSignature = createJob.BasicDetails.OwnerSignature != null ? createJob.BasicDetails.OwnerSignature.Replace("\\", "/") : "";

                            createJob.OwnerSignatureSelfie = (string.IsNullOrEmpty(createJob.OwnerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.OwnerSignatureSelfie;
                            createJob.InstallerSignatureSelfie = (string.IsNullOrEmpty(createJob.InstallerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.InstallerSignatureSelfie;
                            createJob.DesignerSignatureSelfie = (string.IsNullOrEmpty(createJob.DesignerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.DesignerSignatureSelfie;
                            createJob.ElectritionSignatureSelfie = (string.IsNullOrEmpty(createJob.ElectritionSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.ElectritionSignatureSelfie;

                            ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
                            createJob.JobID = jobId;
                            createJob.Signature = createJob.JobElectricians.Signature;

                            if (!string.IsNullOrEmpty(createJob.BasicDetails.GSTDocument))
                            {
                                createJob.BasicDetails.MimeType = MimeMapping.GetMimeMapping(createJob.BasicDetails.GSTDocument).Split('/')[0];
                            }

                            if (createJob.BasicDetails.JobType == 2)
                            {
                                //createJob.JobSystemDetails.CalculatedSTCForSWH = createJob.JobSystemDetails.CalculatedSTC;
                                createJob.JobSystemDetails.CalculatedSTCForSWH = !string.IsNullOrEmpty(createJob.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? createJob.JobSystemDetails.ModifiedCalculatedSTC : createJob.JobSystemDetails.CalculatedSTC;
                            }
                            else
                            {
                                createJob.JobSystemDetails.CalculatedSTC = !string.IsNullOrEmpty(createJob.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? createJob.JobSystemDetails.ModifiedCalculatedSTC : createJob.JobSystemDetails.CalculatedSTC;
                            }

                            createJob.UserType = ProjectSession.UserTypeId;
                            if (createJob.JobElectricians.IsPostalAddress == true)
                            {
                                createJob.JobElectricians.AddressID = 2;
                            }
                            else
                            {
                                createJob.JobElectricians.AddressID = 1;
                            }

                            if (createJob.JobOwnerDetails.IsPostalAddress == true)
                            {
                                createJob.JobOwnerDetails.AddressID = 2;
                            }
                            else
                            {
                                createJob.JobOwnerDetails.AddressID = 1;
                            }

                            if (createJob.JobInstallationDetails.IsPostalAddress == true)
                            {
                                createJob.JobInstallationDetails.AddressID = 2;
                            }
                            else
                            {
                                createJob.JobInstallationDetails.AddressID = 1;
                            }
                            if (createJob.JobInstallerDetails.IsPostalAddress == true)
                            {
                                createJob.JobInstallerDetails.AddressID = 2;
                            }
                            else
                            {
                                createJob.JobInstallerDetails.AddressID = 1;
                            }

                            //createJob.BasicDetails.PreviousJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.JobStage)).Select(s => s.StageName).FirstOrDefault();
                            //WriteToLogFile("9 : after GetJobStage" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                            createJob.BasicDetails.PreviousJobStage = createJob.BasicDetails.JobStage;
                            Helper.SystemEnums.JobPriority jobPriority;
                            if (Enum.TryParse(createJob.BasicDetails.Priority.ToString(), out jobPriority))
                            {
                                createJob.BasicDetails.PreviousPriority = jobPriority.ToString();
                            }
                            createJob.BasicDetails.PreviousSSCID = createJob.BasicDetails.SSCID;
                            createJob.BasicDetails.PreviousSCOID = createJob.BasicDetails.ScoID;
                            createJob.BasicDetails.CompanyABN = createJob.BasicDetails.CompanyABN;
                            createJob.BasicDetails.Reseller = createJob.BasicDetails.Reseller;
                            createJob.BasicDetails.PreviousRefNumber = createJob.BasicDetails.RefNumber;
                            createJob.JobOwnerDetails.PreviousFirstName = createJob.JobOwnerDetails.FirstName;
                            createJob.JobOwnerDetails.PreviousLastName = createJob.JobOwnerDetails.LastName;
                            createJob.JobOwnerDetails.PreviousEmail = createJob.JobOwnerDetails.Email;
                            createJob.JobOwnerDetails.PreviousMobile = createJob.JobOwnerDetails.Mobile;
                            createJob.JobOwnerDetails.PreviousPhone = createJob.JobOwnerDetails.Phone;
                            createJob.JobOwnerDetails.PreviousOwnerType = createJob.JobOwnerDetails.OwnerType;
                            createJob.JobOwnerDetails.OldABNNumber = createJob.JobOwnerDetails.CompanyABN;
                            createJob.JobOwnerDetails.PreviousCompanyName = createJob.JobOwnerDetails.CompanyName;
                            createJob.JobInstallationDetails.PreviousNMI = createJob.JobInstallationDetails.NMI;
                            createJob.JobInstallationDetails.PreviousInstallingNewPanel = createJob.JobInstallationDetails.InstallingNewPanel;
                            createJob.JobInstallationDetails.PreviousLocation = createJob.JobInstallationDetails.Location;
                            createJob.JobInstallationDetails.PreviousSingleMultipleStory = createJob.JobInstallationDetails.SingleMultipleStory;
                            createJob.JobSTCDetails.PreviousAdditionalLocationInformation = createJob.JobSTCDetails.AdditionalLocationInformation;
                            createJob.JobSTCDetails.PreviousAdditionalSystemInformation = createJob.JobSTCDetails.AdditionalSystemInformation;
                            createJob.JobSTCDetails.PreviousCertificateCreated = createJob.JobSTCDetails.CertificateCreated;
                            createJob.JobSTCDetails.PreviousDeemingPeriod = createJob.JobSTCDetails.DeemingPeriod;
                            createJob.JobSTCDetails.PreviousFailedAccreditationCode = createJob.JobSTCDetails.FailedAccreditationCode;

                            createJob.JobSTCDetails.PreviousLatitude = createJob.JobSTCDetails.Latitude;
                            createJob.JobSTCDetails.PreviousLocation = createJob.JobSTCDetails.Location;
                            createJob.JobSTCDetails.PreviousLongitude = createJob.JobSTCDetails.Longitude;
                            createJob.JobSTCDetails.PreviousMultipleSGUAddress = createJob.JobSTCDetails.MultipleSGUAddress;
                            createJob.JobSTCDetails.PreviousSecondhandWaterHeater = createJob.JobSTCDetails.SecondhandWaterHeater;
                            createJob.JobSTCDetails.PreviousConnectionType = createJob.JobSTCDetails.TypeOfConnection;
                            createJob.JobSTCDetails.PreviousStatutoryDeclarations = createJob.JobSTCDetails.StatutoryDeclarations;
                            createJob.JobSTCDetails.PreviousSystemMountingType = createJob.JobSTCDetails.SystemMountingType;
                            createJob.JobSTCDetails.PreviousVolumetricCapacity = createJob.JobSTCDetails.VolumetricCapacity;
                            //createJob.JobOwnerDetails.PreviousAddressID = createJob.JobOwnerDetails.AddressID;
                            //createJob.JobOwnerDetails.PreviousUnitTypeID = createJob.JobOwnerDetails.UnitTypeID;
                            //createJob.JobOwnerDetails.PreviousUnitNumber = createJob.JobOwnerDetails.UnitNumber;
                            //createJob.JobOwnerDetails.PreviousStreetNumber = createJob.JobOwnerDetails.StreetNumber;
                            //createJob.JobOwnerDetails.PreviousStreetName = createJob.JobOwnerDetails.StreetName;
                            //createJob.JobOwnerDetails.PreviousStreetTypeID = createJob.JobOwnerDetails.StreetTypeID;
                            //createJob.JobOwnerDetails.PreviousTown = createJob.JobOwnerDetails.Town;
                            //createJob.JobOwnerDetails.PreviousState = createJob.JobOwnerDetails.State;
                            //createJob.JobOwnerDetails.PreviousPostCode = createJob.JobOwnerDetails.PostCode;

                            //Account acct = new Account();
                            if (Session[FormBot.Email.Constants.sessionAccount] == null)
                            {
                                FormBot.Entity.Email.EmailSignup emailModel = new Entity.Email.EmailSignup();
                                string xmlString = string.Empty;
                                DataSet lstEmail = _user.LoginUserEmailDetails(ProjectSession.LoggedInUserId);

                                //WriteToLogFile("11 : after LoginUserEmailDetails" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                if (lstEmail.Tables[0].Rows.Count > 0)
                                {
                                    Session[FormBot.Email.Constants.sessionAccount] = null;
                                    DataRow dr = (DataRow)lstEmail.Tables[0].Rows[0];

                                    emailModel.Login = dr["email"].ToString();
                                    emailModel.ConfigurationEmail = dr["email"].ToString();
                                    emailModel.ConfigurationPassword = Utils.DecodePassword(Convert.ToString(dr["mail_inc_pass"]));
                                    emailModel.IncomingMail = dr["mail_inc_host"].ToString();
                                    emailModel.IncomingMailPort = Convert.ToInt32(dr["mail_inc_port"]);
                                    emailModel.Login = dr["email"].ToString();
                                    emailModel.OutgoingMail = dr["mail_out_host"].ToString();
                                    emailModel.OutgoingMailPort = Convert.ToInt32(dr["mail_out_port"]);

                                    xmlString = "<?xml version='1.0' encoding='UTF-8'?><webmail><param name='action' value='login' /><param name='request' value='' /><param name='email'><![CDATA[" + emailModel.ConfigurationEmail
                                        + "]]></param><param name='mail_inc_login'><![CDATA[" + emailModel.Login + "]]></param><param name='mail_inc_pass'><![CDATA[" + emailModel.ConfigurationPassword + "]]></param><param name='mail_inc_host'><![CDATA[" + emailModel.IncomingMail
                                        + "]]></param><param name='mail_inc_port' value='" + emailModel.IncomingMailPort + "' /><param name='mail_protocol' value='0' /><param name='mail_out_host'><![CDATA[" + emailModel.OutgoingMail
                                        + "]]></param><param name='mail_out_port' value='" + emailModel.OutgoingMailPort + "' /><param name='mail_out_auth' value='1' /><param name='sign_me' value='0' /><param name='language' /><param name='advanced_login' value='1' /></webmail>";
                                    CheckMail checkMail = new CheckMail();
                                    //var result = checkMail.GetMessages(xmlString);

                                    //WriteToLogFile("12 : after GetMessages" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                                }
                            }
                            //acct = Session[FormBot.Email.Constants.sessionAccount] as Account;

                            ViewBag.JobId = jobId;
                            List<JobWiseUsers> lstJobWiseUsers = _emailService.GetJobWiseUsers(jobId, ProjectSession.LoggedInUserId);

                            //WriteToLogFile("13 : after GetJobWiseUsers" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                            Session["JobWiseUsers"] = lstJobWiseUsers;
                            List<SelectListItem> jobWiseUsers = new List<SelectListItem>();

                            //if (lstJobWiseUsers.Count > 0 && acct != null)
                            //{
                            //    lstJobWiseUsers = lstJobWiseUsers.Where(w => w.Email != null && w.Email != "" && w.Email != acct.Email).ToList();
                            //    if (lstJobWiseUsers != null)
                            //    {
                            //        foreach (var item in lstJobWiseUsers)
                            //        {
                            //            if (!string.IsNullOrEmpty(item.Email))
                            //            {
                            //                jobWiseUsers.Add(new SelectListItem
                            //                {
                            //                    Text = !string.IsNullOrEmpty(item.FullName) ? item.FullName.First().ToString().ToUpper() + item.FullName.Substring(1) : item.FullName,
                            //                    Value = item.Email
                            //                });
                            //            }

                            //        }
                            //    }

                            //    jobWiseUsers.Add(new SelectListItem { Text = "Other", Value = "other" });
                            //}

                            ViewBag.JobWiseUsers = jobWiseUsers;

                            GetSTCStatusAndPreApprovalConnectionComment(Convert.ToInt32(jobId));
                            STCBasicDetails stcBasicDetails = new STCBasicDetails();

                            if (createJob.BasicDetails.IsClassic)
                            {
                                stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(createJob.BasicDetails.JobID), ProjectSession.UserTypeId);
                                DataSet headerDetails = _job.GetHeaderDetails(jobId);
                                if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
                                {
                                    DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                                    createJob.Header = dr["Header"].ToString();
                                }
                            }
                            else
                            {
                                createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJob(id, true, false, _job, createJob.lstJobSchedule);
                                string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";

                                JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
                                createJob.DocumentJson = result; // new JavaScriptSerializer().Serialize(result.Data);

                                var getJobStageData = _emailService.GetStatusForPreApprovalAndConnection();
                                List<SelectListItem> listJobStatusPreapproval = getJobStageData.Where(k => k.JobStage == 1).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                                ViewBag.listJobStatusPreapproval = listJobStatusPreapproval;
                                //WriteToLogFile("16 : after GetStatusForPreApprovalAndConnection" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                List<SelectListItem> listJobStatusConnection = getJobStageData.Where(k => k.JobStage == 2).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                                ViewBag.listJobStatusConnection = listJobStatusConnection;
                                //WriteToLogFile("17 : after GetStatusForPreApprovalAndConnection" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                int distributorId = createJob.JobInstallationDetails.DistributorID != null ? Convert.ToInt32(createJob.JobInstallationDetails.DistributorID) : 0;
                                //if distributorId is 0 then no need to call database
                                if (distributorId != 0)
                                {
                                    List<FormBot.Entity.Documents.DocumentSteps> preApprovalDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "PreApprovals", jobId);
                                    //WriteToLogFile("18 : after GetDocumentsStepsForPreApprovalAndConn" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                    List<FormBot.Entity.Documents.DocumentSteps> connectionDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "Connections", jobId);
                                    //WriteToLogFile("19 : after GetDocumentsStepsForPreApprovalAndConn" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                    createJob.lstPreApprovalDocumentSteps = preApprovalDocumentSteps;
                                    createJob.lstConnectionDocumentSteps = connectionDocumentSteps;
                                }


                                //createJob.STCDetailsModel = GetSTCDetailsModel(jobId, 0);
                                createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
                                //WriteToLogFile("20 : after LoadAllPhotosOfNewJob" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

                                createJob.STCDetailsModel = isTabularView ? CommonForSTCJob(jobId, true, true, createJob) : CommonForSTCJob(jobId, false, true, createJob);

                                stcBasicDetails = createJob.STCDetailsModel.stcBasicDetails;
                                //createJob.STCDetailsModel.pricingManager.STCSettlementTerm = (stcBasicDetails.STCSettlementTerm == null) ? 0 : Convert.ToInt32(stcBasicDetails.STCSettlementTerm);
                                createJob.Header = stcBasicDetails.Header;

                                ViewData["Description"] = !string.IsNullOrEmpty(stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : stcBasicDetails.STCDescription;
                                createJob.liLength = createJob.STCDetailsModel.ErrorLength;

                                if (string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason) && (!string.IsNullOrEmpty(stcBasicDetails.STCDescription)) && stcBasicDetails.STCDescription.Contains("You may recreate"))
                                {
                                    //HtmlString(string.Format(stcBasicDetails.STCDescription));
                                    createJob.JobSTCDetails.CertificateCreated = "Yes";
                                    createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), "<br>", Environment.NewLine);
                                    string s = createJob.JobSTCDetails.FailedReason;
                                    var startTag = "following reason(s):";
                                    int startIndex = s.IndexOf(startTag) + startTag.Length;
                                    int endIndex = s.IndexOf("You may recreate", startIndex);
                                    createJob.JobSTCDetails.FailedReason = s.Substring(startIndex, endIndex - startIndex).Trim();
                                }
                                if (!string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason))
                                {
                                    createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(createJob.JobSTCDetails.FailedReason), "<br>", Environment.NewLine);
                                }
                                createJob.JobSTCDetails.PreviousFailedReason = createJob.JobSTCDetails.FailedReason;
                                //WriteToLogFile("end = " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                            }

                            if (stcBasicDetails != null)
                            {
                                ViewBag.STCStatusName = stcBasicDetails.Status;
                                ViewBag.STCDescription = HttpUtility.HtmlDecode(stcBasicDetails.STCDescription);
                                ViewBag.STCStatusId = stcBasicDetails.STCStatusId;
                                ViewBag.ColorCode = stcBasicDetails.ColorCode;
                            }

                            if (createJob != null)
                            {
                                createJob.ElectricianSignature = Server.HtmlDecode(createJob.ElectricianSignature);
                                createJob.Signature = Server.HtmlDecode(createJob.Signature);

                                if (createJob.BasicDetails != null)
                                    createJob.BasicDetails.ElectricianSignature = Server.HtmlDecode(createJob.BasicDetails.ElectricianSignature);

                                if (createJob.JobElectricians != null)
                                    createJob.JobElectricians.Signature = Server.HtmlDecode(createJob.JobElectricians.Signature);
                            }
                            if (createJob.BasicDetails.IsClassic)
                                return View("create", createJob);
                            else
                            {
                                if (!string.IsNullOrEmpty(Request["isTabularView"]))
                                {
                                    ProjectSession.IsTabularView = isTabularView;
                                    _user.UpdateTabularViewConfiguration(isTabularView);
                                }

                                CheckSPVrequired objSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCAOrGlobalLevelOrManufacturer(JobIds: createJob.BasicDetails.JobID.ToString()).FirstOrDefault();
                                createJob.GlobalisAllowedSPV = objSpvRequiredSolarCompanyWise.IsSPVRequired;
                                DataSet jobRetailerSetting = _job.GetJobRetailerSettingData(createJob.BasicDetails.JobID, createJob.BasicDetails.SolarCompanyId);
                                if (jobRetailerSetting != null && jobRetailerSetting.Tables.Count > 0 && jobRetailerSetting.Tables[0].Rows.Count > 0)
                                {
                                    createJob.JobRetailerSetting = new JobRetailerSetting();
                                    createJob.JobRetailerSetting.JobRetailerUserId = Convert.ToInt32(jobRetailerSetting.Tables[0].Rows[0]["RetailerUserId"].ToString());
                                    createJob.JobRetailerSetting.RepresentativeName = jobRetailerSetting.Tables[0].Rows[0]["name"].ToString();
                                    createJob.JobRetailerSetting.PositionHeld = jobRetailerSetting.Tables[0].Rows[0]["PositionHeld"].ToString();
                                    createJob.JobRetailerSetting.PositionHeldlbl = jobRetailerSetting.Tables[0].Rows[0]["PositionHeld"].ToString();
                                    bool IsEmployee = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                                    //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                                    bool IsChangedDesign = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                                    createJob.JobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                                    createJob.JobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                                    createJob.JobRetailerSetting.Signature = jobRetailerSetting.Tables[0].Rows[0]["Signature"].ToString();
                                    createJob.JobRetailerSetting.SignedBy = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["SignedBy"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                                    createJob.JobRetailerSetting.SignedDate = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(jobRetailerSetting.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                                    createJob.JobRetailerSetting.Latitude = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["Latitude"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["Latitude"].ToString() : "";
                                    createJob.JobRetailerSetting.Longitude = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["Longitude"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["Longitude"].ToString() : "";
                                    string isEmployeeOrSSC = createJob.JobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : createJob.JobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                                    string isChangedDesign = createJob.JobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                                    createJob.JobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + createJob.InstallerView.CECAccreditationNumber + " " + createJob.InstallerView.FirstName + " " + createJob.InstallerView.LastName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesign + "</b>";
                                }
                                string UserDocuments = "";
                                if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
                                {
                                    if (createJob.BasicDetails != null && createJob.BasicDetails.InstallerID != null && createJob.BasicDetails.InstallerID > 0)
                                    {

                                        string strInstallerId = _user.GetUserIdFromCECNumber(createJob.InstallerView.CECAccreditationNumber, createJob.InstallerView.ElectricalContractorsLicenseNumber, createJob.InstallerView.IsPVDUser, createJob.InstallerView.IsSWHUser);

                                        if (!string.IsNullOrEmpty(strInstallerId))
                                        {
                                            int elecID = !string.IsNullOrEmpty(strInstallerId) ? Convert.ToInt32(strInstallerId) : 0;
                                            string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "UserDocuments/" + elecID + "/";
                                            //string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "userdocuments/" + ProjectSession.LoggedInUserId + "/";
                                            DirectoryInfo dir = new DirectoryInfo(path);
                                            if (dir.Exists)
                                            {

                                                FileInfo[] Files = dir.GetFiles(); //Getting Text files

                                                foreach (FileInfo file in Files)
                                                {
                                                    //for server use
                                                    UserDocuments = UserDocuments + ", " + ProjectConfiguration.UploadedDocumentPath + "UserDocuments/" + elecID + "/" + file.Name;
                                                    //for local use
                                                    //UserDocuments = UserDocuments + ", " + "UserDocuments/" + elecID + "/" + file.Name;
                                                }

                                            }
                                            //check for drivers license 
                                            DirectoryInfo Driverdir = new DirectoryInfo(path + "InstallersDriversLicense"); //Assuming Test is your Folder
                                            if (Driverdir.Exists)
                                            {
                                                FileInfo[] DriverFiles = Driverdir.GetFiles(); //Getting Text files
                                                foreach (FileInfo file in DriverFiles)
                                                {

                                                    UserDocuments = UserDocuments + ", " + ProjectConfiguration.UploadedDocumentPath + "UserDocuments/" + elecID + "/InstallersDriversLicense/" + file.Name;
                                                    //  for local use
                                                    //UserDocuments = UserDocuments + ", " + "UserDocuments/" + elecID + "/InstallersDriversLicense/" + file.Name;
                                                }
                                            }
                                        }
                                    }
                                }
                                //createJob.InstallerDeviceAudits = GetInstallerDeviceAuditsFromLogFile();
                                createJob.UserDocuments = UserDocuments;

                                //if (!ProjectSession.IsTabularView)
                                //    return View("ViewAndEditNewJob", createJob);
                                //else
                                //    return View("JobTabularView", createJob);
                            }
                        }
                        if (!ProjectSession.IsTabularView)
                            return View("ViewAndEditNewJob", createJob);
                        else
                            return View("JobTabularViewNew", createJob);
                    }
                    else
                    {
                        return RedirectToAction("Index");
                    }
                }
            }
            else
                return RedirectToAction("Logout", "Account");
        }


        [HttpGet]
        public async Task<JsonResult> LoadCustomDetailsAjax(string JobId)
        {
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.JobID=Convert.ToInt32(JobId);
            var customdetailView = ControlToString("~/Views/Job/_CustomJobField.cshtml", createJob);
            return Serializer.GetJsonResult(new { customdetailView });

        }

        [HttpGet]
        public async Task<JsonResult> LoadSystemDetailsAjax(string JobId)
        {
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.JobID = Convert.ToInt32(JobId);
            var systemdetailView = ControlToString("~/Views/Job/_JobSystemDetails.cshtml", createJob);
            return Serializer.GetJsonResult(new { systemdetailView });

        }

        [HttpGet]
        public JsonResult LoadNotesTabAjax(string JobId)
        {
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.JobID = Convert.ToInt32(JobId);
            var notestabView = ControlToString("~/Views/Job/_Notes.cshtml", createJob);
            return Serializer.GetJsonResult(new { notestabView });
        }
                [HttpGet]
                public async Task<JsonResult> LoadInstallerDesignerElectricianAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    //createJob.JobScheduling = new JobScheduling();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.JobID = Convert.ToInt32(JobId);
            createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);
                    var installerdesignerelectricianView = ControlToString("~/Views/Job/_InstallerDesignerElectrician.cshtml", createJob);
                    return Serializer.GetJsonResult(new { installerdesignerelectricianView });

        }

                [HttpGet]
                public async Task<JsonResult> LoadJobSchedulingVisitAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.JobID = Convert.ToInt32(JobId);
            createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);

            IRoleBAL role = new RoleBAL();
            var dsMenus = role.CustomAuthorization(ProjectSession.RoleId, "Job", "Index");
            List<MenuIdList> menuIds = DBClient.DataTableToList<MenuIdList>(dsMenus.Tables[0]);
            TempData[SystemEnums.TempDataKey.RoleMenu.ToString()] = menuIds.Where(d => d.ParentId == menuIds.Where(data => data.MenuId == 56).Select(x => x.ParentId).FirstOrDefault()).ToList();

            var JobVisitView = ControlToString("~/Views/JobScheduling/_JobVisit.cshtml", createJob.JobScheduling);
                    return Serializer.GetJsonResult(new { JobVisitView });

        }

        //[HttpGet]
        //public JsonResult LoadRetailerAutoSettingAjax(string JobId)
        //{
        //    CreateJob createJob = new CreateJob();
        //    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
        //    //createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);
        //    var RetailerAutoSettingView = ControlToString("~/Views/Job/_SCAWrittenStatement.cshtml", createJob.RetailerAutoSetting);
        //    return Serializer.GetJsonResult(new { RetailerAutoSettingView });

        //}

                [HttpGet]
                public async Task<JsonResult> LoadDocumentManagerNewViewAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            //createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);
            createJob.STCDetailsModel = CommonForSTCJob(Convert.ToInt32(JobId), false, true, createJob);
                    createJob.liLength = createJob.STCDetailsModel.ErrorLength;
                    string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";
                    JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
                    createJob.DocumentJson = result;
            createJob.JobID = Convert.ToInt32(JobId);
            var JobDocumentNewView = ControlToString("~/Views/Job/_DocumentManager.cshtml", new Tuple<FormBot.Entity.CreateJob, FormBot.Entity.Job.CaptureUserSign>(createJob, new FormBot.Entity.Job.CaptureUserSign()));
                    return Serializer.GetJsonResult(new { JobDocumentNewView });

        }

                [HttpGet]
                public async Task<JsonResult> LoadJobDocumentNewViewAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            //createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);
            createJob.STCDetailsModel = CommonForSTCJob(Convert.ToInt32(JobId), false, true, createJob);
                    createJob.liLength = createJob.STCDetailsModel.ErrorLength;
                    string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";
                    JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
                    createJob.DocumentJson = result;
            createJob.JobID = Convert.ToInt32(JobId);
            var JobDocumentNewView = ControlToString("~/Views/Job/_JobDocumentsNew.cshtml", createJob.STCDetailsModel);
                    return Serializer.GetJsonResult(new { JobDocumentNewView });

        }

                [HttpGet]
                public async Task<JsonResult> LoadSTCJobNewScreenAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            //createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJobModularAjax(Convert.ToInt32(JobId), true, false, _job, createJob.lstJobSchedule);
            createJob.STCDetailsModel = CommonForSTCJob(Convert.ToInt32(JobId), false, true, createJob);
                    createJob.liLength = createJob.STCDetailsModel.ErrorLength;
            //string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";
            //JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
            //createJob.DocumentJson = result;
            createJob.JobID = Convert.ToInt32(JobId);
            var STCJobNewScreenView = ControlToString("~/Views/Job/_STCJobNewScreen.cshtml", createJob.STCDetailsModel);
                    return Serializer.GetJsonResult(new { STCJobNewScreenView });

        }

                [HttpGet]
                public JsonResult LoadNewJobPhotoAjax(string JobId)
                {
                    CreateJob createJob = new CreateJob();
                    createJob = _job.GetJobByID(Convert.ToInt32(JobId));
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.JobID = Convert.ToInt32(JobId);
            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(Convert.ToInt32(JobId));
                    var JobPhotosNewView = ControlToString("~/Views/Job/_JobPhotosNew.cshtml", createJob);
                    return Serializer.GetJsonResult(new { JobPhotosNewView });

        }

        private List<InstallerDeviceAudit> GetInstallerDeviceAuditsFromLogFile()
        {
            List<InstallerDeviceAudit> installerDeviceAudits = new List<InstallerDeviceAudit>();
            foreach (string file in Directory.EnumerateFiles("D:\\Projects\\Formbot\\SourceCode\\FormBot01082017\\FormBot.Main\\Content\\GPSLogs", "*GPSLogs.json"))
            {
                string json = System.IO.File.ReadAllText(file);
                InstallerDeviceAuditViewModel installerDeviceAuditViewModels = JsonConvert.DeserializeObject<InstallerDeviceAuditViewModel>(json);

                InstallerAuditDetails installerAuditDetails = _user.GetInstallerAuditDetails(installerDeviceAuditViewModels.DeviceID);

                InstallerDeviceAudit installerDeviceAudit;
                if (installerDeviceAudits.Any(ida => ida.UserID == installerAuditDetails.UserID))
                {
                    installerDeviceAudit = installerDeviceAudits.First(ida => ida.UserID == installerAuditDetails.UserID);
                }
                else
                {
                    installerDeviceAudit = new InstallerDeviceAudit();
                    installerDeviceAudit.UserID = installerAuditDetails.UserID;
                    installerDeviceAudit.InstallerName = installerAuditDetails.InstallerName;
                    installerDeviceAudit.AccreditationNumber = installerAuditDetails.AccreditationNumber;
                    installerDeviceAudit.InstallerVisits = new List<InstallerVisit>();
                }
                InstallerVisit installerVisit = new InstallerVisit();
                installerVisit.VisitID = installerDeviceAuditViewModels.VisitID;
                installerVisit.DeviceID = installerDeviceAuditViewModels.DeviceID;
                installerVisit.RegisteredOTP = installerAuditDetails.RegisteredOTP;
                installerVisit.LastUsed = installerAuditDetails.LastUsed;
                installerVisit.MostRecentSignedIn = installerAuditDetails.MostRecentSignedIn;
                installerVisit.FileLocation = file.Split('\\').Last();
                installerVisit.InstallerVisitDateTimes = new List<InstallerVisitDateTime>();

                DateTime dtStart, dtEnd;
                dtStart = DateTime.ParseExact(installerDeviceAuditViewModels.Details[0].Date, "yyyy:MM:dd HH:mm:ss", new CultureInfo("en-US"));
                for (int i = 1; i < installerDeviceAuditViewModels.Details.Count; i++)
                {
                    DateTime dt = DateTime.ParseExact(installerDeviceAuditViewModels.Details[i].Date, "yyyy:MM:dd HH:mm:ss", new CultureInfo("en-US"));
                    if (dt.Date.CompareTo(dtStart.Date) != 0)
                    {
                        dtEnd = DateTime.ParseExact(installerDeviceAuditViewModels.Details[i - 1].Date, "yyyy:MM:dd HH:mm:ss", new CultureInfo("en-US"));

                        InstallerVisitDateTime iVisit = new InstallerVisitDateTime();
                        iVisit.VisitDate = dtEnd.Date;
                        iVisit.LengthOfTime = dtStart.ToShortTimeString() + " - " + dtEnd.ToShortTimeString() + "(" + dtEnd.Subtract(dtStart).ToString(@"hh\:mm") + ")";
                        installerVisit.InstallerVisitDateTimes.Add(iVisit);

                        dtStart = DateTime.ParseExact(installerDeviceAuditViewModels.Details[i].Date, "yyyy:MM:dd HH:mm:ss", new CultureInfo("en-US"));
                    }
                }
                dtEnd = DateTime.ParseExact(installerDeviceAuditViewModels.Details[installerDeviceAuditViewModels.Details.Count - 1].Date, "yyyy:MM:dd HH:mm:ss", new CultureInfo("en-US"));


                InstallerVisitDateTime installerVisitDateTime = new InstallerVisitDateTime();
                installerVisitDateTime.VisitDate = dtEnd.Date;
                installerVisitDateTime.LengthOfTime = dtStart.ToShortTimeString() + " - " + dtEnd.ToShortTimeString() + "(" + dtEnd.Subtract(dtStart).ToString(@"hh\:mm") + ")";
                installerVisit.InstallerVisitDateTimes.Add(installerVisitDateTime);

                installerDeviceAudit.InstallerVisits.Add(installerVisit);

                if (!installerDeviceAudits.Any(ida => ida.UserID == installerAuditDetails.UserID))
                {
                    installerDeviceAudits.Add(installerDeviceAudit);
                }

            }
            return installerDeviceAudits;
        }

        public ActionResult DownloadInstallerDeviceAuditLog(string filePath)
        {
            var fileData = System.IO.File.ReadAllBytes("D:\\Projects\\Formbot\\SourceCode\\FormBot01082017\\FormBot.Main\\Content\\GPSLogs\\" + filePath);
            Response.Clear();
            Response.ClearHeaders();
            Response.ClearContent();
            Response.ContentType = "application/json";
            Response.AddHeader("Content-Disposition", string.Format("attachment; filename = \"{0}\"", filePath + ".json"));
            Response.BinaryWrite(fileData);

            return Json("", JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult _Documents(string id)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            }
            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(jobId));
            createJob.JobID = jobId;
            createJob.lstJobOtherDocument = _job.GetJobOtherDocumentByJobID(jobId);
            return View(createJob);
        }

        /// <summary>
        /// Gets the job documents for email attachment.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>action result</returns>
        public ActionResult GetJobDocumentsForEmailAttachment(string jobId)
        {
            #region Get Email Documents
            List<UserDocument> lstEmailDocuments = new List<UserDocument>();
            DataSet dsJobDocuments_Email = _jobDetails.GetJobDocuments_ForEmailAttachmentByJobID(Convert.ToInt32(jobId));
            if (dsJobDocuments_Email != null && dsJobDocuments_Email.Tables.Count > 0)
            {
                lstEmailDocuments = dsJobDocuments_Email.Tables[0].AsEnumerable().Select(s => new UserDocument
                {
                    strDocumentPath = GeneratedDocPath(s.Field<string>("Stage"), s.Field<int>("StateId").ToString(), s.Field<string>("ServiceProviderName"), s.Field<string>("Name"), s.Field<int>("JobId").ToString()),
                    DocumentPath = GetName(s.Field<string>("Name"), s.Field<string>("ServiceProviderName"))
                }).ToList();
            }

            return Json(new { lstEmailDocuments }, JsonRequestBehavior.AllowGet);

            #endregion
        }

        /// <summary>
        /// Gets the name.
        /// </summary>
        /// <param name="filename">The filename.</param>
        /// <param name="provname">The name.</param>
        /// <returns>string name</returns>
        public string GetName(string filename, string provname)
        {
            string name = filename;
            if (!string.IsNullOrEmpty(name) && name.ToLower() == "ces")
            {
                return provname.ToLower() == "pvd" ? "cespvd.pdf" : "cessw.pdf";
            }
            else
            {
                return name;
            }
        }

        /// <summary>
        /// Saves the job document in temporary folder.
        /// </summary>
        /// <param name="fileFullPath">The file full path.</param>
        /// <returns>action result</returns>
        public ActionResult SaveJobDocumentInTempFolder(string fileFullPath)
        {
            string tempFileName = string.Empty;
            if (!string.IsNullOrEmpty(fileFullPath))
            {
                tempFileName = Path.GetFileName(SaveUploadFiles_Reseller(Path.GetFileName(fileFullPath), fileFullPath));
                return Json(new { TempFileName = tempFileName }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { TempFileName = tempFileName }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Saves the upload files_ reseller.
        /// </summary>
        /// <param name="file_name">The file_name.</param>
        /// <param name="fileFullPath">The file full path.</param>
        /// <returns>string name</returns>
        public string SaveUploadFiles_Reseller(string file_name, string fileFullPath)
        {
            string filename = string.Empty;
            string tmp_name = string.Empty;
            string name = Utils.EncodeHtml(Path.GetFileName(fileFullPath)).Replace(@"'", @"\'");
            try
            {
                byte[] buffer = ReadFile(fileFullPath);
                if (buffer != null)
                {
                    string tempFolder = Utils.GetTempFolderName();
                    filename = Utils.CreateTempFilePath(tempFolder, file_name);
                    tmp_name = Path.GetFileName(filename);
                    using (FileStream fs = System.IO.File.Open(filename, FileMode.Create, FileAccess.Write))
                    {
                        fs.Write(buffer, 0, buffer.Length);
                    }
                }

                return filename;
            }
            catch (IOException ex)
            {
                Helper.Log.WriteError(ex);
                return string.Empty;
            }
        }

        /// <summary>
        /// Reads the file.
        /// </summary>
        /// <param name="filePath">The file path.</param>
        /// <returns>byte array</returns>
        public byte[] ReadFile(string filePath)
        {
            byte[] buffer;
            FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
            try
            {
                int length = (int)fileStream.Length;  // get file length
                buffer = new byte[length];            // create buffer
                int count;                            // actual number of bytes read
                int sum = 0;                          // total number of bytes read

                // read until Read method returns 0 (end of the stream has been reached)
                while ((count = fileStream.Read(buffer, sum, length - sum)) > 0)
                    sum += count;  // sum is a buffer offset for next reading
            }
            finally
            {
                fileStream.Close();
            }
            return buffer;
        }

        /// <summary>
        /// Generated the document path.
        /// </summary>
        /// <param name="stage">The stage.</param>
        /// <param name="state">The state.</param>
        /// <param name="provName">Name of the provider.</param>
        /// <param name="name">The name.</param>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>string name</returns>
        public string GeneratedDocPath(string stage, string state, string provName, string name, string jobID)
        {
            if (!string.IsNullOrEmpty(name) && name.ToLower() == "ces")
                name = provName.ToLower() == "pvd" ? "cespvd.pdf" : "cessw.pdf";
            var documentPath = jobID + "/" + stage + "/" + name;
            var mainDirPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            return mainDirPath;
        }

        /// <summary>
        /// Jobs the notes.
        /// </summary>
        /// <param name="jobNotes">The job notes.</param>
        /// <returns>Redirect To Job Notes</returns>
        [HttpPost]
        [UserAuthorization]
        public PartialViewResult JobNotes(JobNotes jobNotes)
        {
            jobNotes.JobID = 4;
            jobNotes.CreatedBy = ProjectSession.LoggedInUserId;
            this.ShowMessage(SystemEnums.MessageType.Success, "Job Notes has been saved successfully.", true);
            return PartialView(jobNotes);
        }

        /// <summary>
        /// Saves the job notes.
        /// </summary>
        /// <param name="jobNotes">The job notes.</param>
        /// <returns>action result</returns>
        [HttpPost]
        public ActionResult SaveJobNotes(JobNotes jobNotes)
        {
            jobNotes.CreatedBy = ProjectSession.LoggedInUserId;
            if (ModelState.IsValid)
            {
                _job.CreateJobNotes(jobNotes.Notes, jobNotes.JobID, jobNotes.CreatedBy);
                bool isHistorySaved = _jobHistory.LogJobHistory(jobNotes, HistoryCategory.Note);
                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// job notes
        /// </summary>
        /// <param name="jobId">job identifier</param>
        /// <param name="pageIndex">page index</param>
        /// <returns>action result</returns>
        [UserAuthorization]
        public ActionResult JobNotes(string jobId, int pageIndex = 1)
        {
            JobNotes jobNotes = new JobNotes();
            DataSet objDs;
            int jobID = Convert.ToInt32(jobId);
            objDs = _job.GetJobNotesList(pageIndex, jobID);
            if (objDs != null && objDs.Tables.Count > 0)
            {
                jobNotes.PagedList = objDs.Tables[0].AsEnumerable().Select(
                    p => new JobNotes
                    {
                        JobNotesID = (p.Field<int>("JobNotesID")),
                        JobID = (p.Field<int>("JobID")),
                        Notes = Regex.Replace(p.Field<string>("Notes"), @"\r\n?|\n", " <br/> "),
                        Created = (p.Field<string>("Created")),
                        CreatedDate = (p.Field<DateTime>("CreatedDate")),
                    }).ToList();
            }

            return View(jobNotes);
        }

        /// <summary>
        /// Gets the job notes.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <returns>view result</returns>
        [HttpGet]
        [ValidateInput(false)]
        [UserAuthorization]
        public ActionResult GetJobNotes(string jobID, int pageIndex = 1)
        {
            JobNotes jobNotes = new JobNotes();
            int id = 0;

            if (!string.IsNullOrEmpty(jobID))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobID, "id"), out id);
            }

            DataSet objDs = _job.GetJobNotesList(pageIndex, id);
            if (objDs != null && objDs.Tables.Count > 0)
            {
                jobNotes.PagedList = objDs.Tables[0].AsEnumerable().Select(
                    p => new JobNotes
                    {
                        JobNotesID = (p.Field<int>("JobNotesID")),
                        JobID = (p.Field<int>("JobID")),
                        Notes = Regex.Replace(p.Field<string>("Notes"), @"\r\n?|\n", " <br> "),
                        Created = (p.Field<string>("Created")),
                        CreatedDate = (p.Field<DateTime>("CreatedDate")),
                    }).ToList();
            }

            return this.PartialView("JobNotes", jobNotes);
        }

        /// <summary>
        /// Edits the view.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public PartialViewResult EditView(string jobID)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(jobID))
            {
                int.TryParse(QueryString.QueryStringDecode(jobID), out jobId);
            }

            CreateJob createJob = _job.GetJobByID(jobId);
            createJob.BasicDetails.strInstallationDate = createJob.BasicDetails.InstallationDate != null ? createJob.BasicDetails.InstallationDate.Value.ToString("dd/MM/yyyy") : "";
            createJob.BasicDetails.strSoldByDate = createJob.BasicDetails.SoldByDate != null ? createJob.BasicDetails.SoldByDate.Value.ToString("dd/MM/yyyy") : "";
            //var designRole = from SystemEnums.PostalAddressType s in Enum.GetValues(typeof(SystemEnums.PostalAddressType))
            //                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace('_', ' ') };
            ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
            createJob.Guid = Convert.ToString(jobId);
            createJob.JobID = jobId;
            createJob.Signature = createJob.JobElectricians.Signature;
            createJob.lstJobSchedule = _job.GetJobschedulingByJobID(jobId);
            createJob.lstUserDocument = _job.GetJobInstallationPhotoByJobID(jobId);
            createJob.lstSerialDocument = _job.GetJobInstallationSerialByJobID(jobId);
            if (createJob.BasicDetails.JobType == 2)
            {
                createJob.JobSystemDetails.CalculatedSTCForSWH = createJob.JobSystemDetails.CalculatedSTC;
            }

            createJob.UserType = ProjectSession.UserTypeId;
            if (createJob.JobElectricians.IsPostalAddress == true)
            {
                createJob.JobElectricians.AddressID = 2;
            }
            else
            {
                createJob.JobElectricians.AddressID = 1;
            }

            if (createJob.JobOwnerDetails.IsPostalAddress == true)
            {
                createJob.JobOwnerDetails.AddressID = 2;
            }
            else
            {
                createJob.JobOwnerDetails.AddressID = 1;
            }

            if (createJob.JobInstallationDetails.IsPostalAddress == true)
            {
                createJob.JobInstallationDetails.AddressID = 2;
            }
            else
            {
                createJob.JobInstallationDetails.AddressID = 1;
            }

            if (createJob.JobInstallerDetails.IsPostalAddress == true)
            {
                createJob.JobInstallerDetails.AddressID = 2;
            }
            else
            {
                createJob.JobInstallerDetails.AddressID = 1;
            }

            return PartialView("_CreateJob", createJob);
        }

        /// <summary>
        /// Jobs the list.
        /// </summary>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>view result</returns>
        [HttpPost]
        public ActionResult JobList(int pageIndex = 1, int jobID = 1)
        {
            JobNotes jobNotes = new JobNotes();
            DataSet objDs;
            objDs = _job.GetJobNotesList(pageIndex, jobID);
            if (objDs != null && objDs.Tables.Count > 0)
            {
                jobNotes.PagedList = objDs.Tables[0].AsEnumerable().Select(
                    p => new JobNotes
                    {
                        JobNotesID = (p.Field<int>("JobNotesID")),
                        JobID = (p.Field<int>("JobID")),
                        Notes = Regex.Replace((p.Field<string>("Notes")), @"\r\n?|\n", " <br/> "),
                        Created = (p.Field<string>("Created")),
                        strCreatedDate = Convert.ToString(p.Field<DateTime>("CreatedDate")),
                    }).ToList();
            }

            return Json(new { jobNotes.PagedList });
        }

        /// <summary>
        /// Deletes the job notes.
        /// </summary>
        /// <param name="jobNotesId">The job notes identifier.</param>
        /// <returns>Delete result success / error</returns>
        public ActionResult DeleteJobNotes(int jobNotesId)
        {
            _job.DeleteJobNotes(jobNotesId);
            return this.Json(new { success = true });
        }

        /// <summary>
        /// _s the job photo.
        /// </summary>
        /// <returns>action result</returns>
        public ActionResult _JobPhoto()
        {
            CreateJob createJob = new CreateJob();
            return View(createJob);
        }

        /// <summary>
        /// partial page of job create.
        /// </summary>
        /// <returns>view result</returns>
        [HttpGet]
        public ActionResult _CreateJob()
        {
            //var designRole = from SystemEnums.PostalAddressType s in Enum.GetValues(typeof(SystemEnums.PostalAddressType))
            //                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace('_', ' ') };
            ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
            CreateJob createjob = new CreateJob();
            createjob.JobSTCDetails = new JobSTCDetails() { DeemingPeriod = "One year" };
            createjob.UserType = ProjectSession.UserTypeId;
            return View(createjob);
        }

        /// <summary>
        /// Gets the documents list.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="distributorID">The distributor identifier.</param>
        /// <param name="stage">The stage.</param>
        /// <param name="jobTypeId">The job type identifier.</param>
        /// <returns>result objects</returns>
        [HttpGet]
        public JsonResult GetDocumentsList(string id, string distributorID = "", string stage = "PreApprovals", string jobTypeId = "1")
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            }
            string jobType = !string.IsNullOrEmpty(jobTypeId) ? ((SystemEnums.JobType)(Convert.ToInt32(jobTypeId))).ToString() : "";
            stage = (stage.ToLower() == "stc") ? stage + " " + jobType : stage;

            IList<FormBot.Entity.Documents.DocumentsView> lstDocuments = null;
            int totalActiveTabDocumentCount = 0;
            int totalDocumentCount = 0;

            DataSet dsDocument = _documentsBAL.GetDocuments(distributorID, stage, jobId);
            if (dsDocument != null && dsDocument.Tables.Count > 0 && dsDocument.Tables[0] != null && dsDocument.Tables[0].Rows.Count > 0)
            {
                lstDocuments = dsDocument.Tables[0].ToListof<DocumentsView>();
            }
            if (dsDocument != null && dsDocument.Tables.Count > 0 && dsDocument.Tables[1] != null && dsDocument.Tables[1].Rows.Count > 0)
            {
                totalActiveTabDocumentCount = Convert.ToInt32(dsDocument.Tables[1].Rows[0]["TotalActiveTabDocumentCount"]);
            }
            if (dsDocument != null && dsDocument.Tables.Count > 0 && dsDocument.Tables[2] != null && dsDocument.Tables[2].Rows.Count > 0)
            {
                totalDocumentCount = Convert.ToInt32(dsDocument.Tables[2].Rows[0]["TotalDocumentCount"]);
            }
            //IList<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocuments(distributorID, stage, jobId);
            return Json(new { doc = lstDocuments, totalActiveTabDocumentCount = totalActiveTabDocumentCount, totalDocumentCount = totalDocumentCount }, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetDocumentsListAll(string id, string distributorID = "", string stage = "PreApprovals", string jobTypeId = "1")
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(id, out jobId);
            }
            string jobType = !string.IsNullOrEmpty(jobTypeId) ? ((SystemEnums.JobType)(Convert.ToInt32(jobTypeId))).ToString() : "";
            stage = (stage.ToLower() == "stc") ? stage + " " + jobType : stage;

            IList<FormBot.Entity.Documents.DocumentsView> lstDocuments = null;
            Dictionary<string, object> obj = new Dictionary<string, object>();

            DataSet dsDocument = _documentsBAL.GetDocumentsAll(distributorID, stage, jobId, false);

            if (dsDocument != null && dsDocument.Tables.Count > 0 && dsDocument.Tables[1] != null && dsDocument.Tables[1].Rows.Count > 0)
            {
                lstDocuments = dsDocument.Tables[1].ToListof<DocumentsView>();
            }


            #region adding json log files
            //string UserDocuments = "";
            //Dictionary<int, string> logfiles = new Dictionary<int, string>();
            //if (jobId>0 )
            //{
            //        string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "JobDocuments/" + jobId + "/Log/";
            //        //string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "userdocuments/" + ProjectSession.LoggedInUserId + "/";
            //        DirectoryInfo dir = new DirectoryInfo(path);
            //        if (dir.Exists)
            //        {

            //            FileInfo[] Files = dir.GetFiles(); //Getting Text files
            //        int logFileId = 0;
            //            foreach (FileInfo file in Files)
            //            {
            //            string filepath = string.Empty;
            //            logFileId = logFileId + 1;
            //            filepath = "JobDocuments/" + jobId + "/Log/" + file.Name;
            //            DataRow dataRowLogFile = ((dsDocument.Tables.Count > 0 && dsDocument.Tables[0].Rows.Count > 0)) ? dsDocument.Tables[0].NewRow() : GetLogFilesDataTable().NewRow();

            //                dataRowLogFile["JobDocumentId"] = (logFileId + 1);
            //                dataRowLogFile["JobId"] = (jobId);
            //                dataRowLogFile["DocumentId"] = (logFileId + 1);
            //                dataRowLogFile["isUpload"] = (true);
            //                dataRowLogFile["CreatedDate"] = Convert.ToString(DateTime.Now);
            //                dataRowLogFile["CreatedBy"] = Convert.ToString(ProjectSession.LoggedInUserId);
            //                dataRowLogFile["ModifiedDate"] = Convert.ToString(DateTime.Now);
            //                dataRowLogFile["ModifiedBy"] = Convert.ToString(ProjectSession.LoggedInUserId);
            //                dataRowLogFile["IsDeleted"] = (false);
            //                dataRowLogFile["Path"] = filepath;
            //                dataRowLogFile["JsonData"] = string.Empty;
            //                dataRowLogFile["Type"] = "OTHER";
            //                dataRowLogFile["VendorJobDocumentId"] = string.Empty;
            //                dataRowLogFile["IsSPVXml"] = false;
            //                dataRowLogFile["IsRecZip"] = false;
            //                dataRowLogFile["IsCompleted"] = false;
            //                dataRowLogFile["SentEmailStatus"] = 0;
            //                dataRowLogFile["IsLogFile"] = true;
            //            dsDocument.Tables[0].Rows.Add(dataRowLogFile);

            //            logFileId = logFileId + 1;


            //            //logfiles.Add(logFileId, filepath);
            //                /*for server use*/
            //                //UserDocuments = UserDocuments + ", " + ProjectConfiguration.UploadedDocumentPath + "UserDocuments/" + elecID + "/" + file.Name;
            //                /*for local use
            //                 UserDocuments = UserDocuments + ", " + "UserDocuments/" + elecID + "/" + file.Name;
            //             */
            //            }

            //        }



            //}
            ////obj.Add("LogFiles", logfiles);
            #endregion
            obj.Add("Table", dsDocument.Tables[0]);
            obj.Add("Table1", lstDocuments);
            return Serializer.GetJsonResult(Newtonsoft.Json.JsonConvert.SerializeObject(obj));
            //JsonResult json = new JsonResult();
            //json.Data = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
            //json.MaxJsonLength = Int32.MaxValue;
            //json.JsonRequestBehavior = JsonRequestBehavior.AllowGet;
            //return json;
            //return Json(Newtonsoft.Json.JsonConvert.SerializeObject(obj), JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public JsonResult GetStateList()
        {
            DataSet dsState = _documentsBAL.GetStateList();
            return Json(Newtonsoft.Json.JsonConvert.SerializeObject(dsState), JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public JsonResult GetDocumentsByStateId(int stateId)
        {
            DataSet dsState = _documentsBAL.GetDocumentsByStateId(stateId);
            return Json(Newtonsoft.Json.JsonConvert.SerializeObject(dsState), JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the documents list by job identifier.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="distributorID">distributor ID</param>
        /// <param name="stage">stage</param>
        /// <param name="jobTypeId">job TypeId</param>
        /// <returns>json result</returns>
        [HttpGet]
        public JsonResult GetDocumentsListByJobId(string id, string distributorID = "", string stage = "PreApprovals", string jobTypeId = "1")
        {
            string jobType = !string.IsNullOrEmpty(jobTypeId) ? ((SystemEnums.JobType)(Convert.ToInt32(jobTypeId))).ToString() : "";
            string jobStage = (stage.ToLower() == "stc") ? stage + " " + jobType : stage;
            List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocumentsByJobId(distributorID, jobStage, Convert.ToInt32(id));

            lstDocuments.ForEach(d =>
            {
                var documentPath = id + "/" + stage + "/" + d.Name;
                d.PhysicalPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            });
            return Json(lstDocuments, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Post method for job insert and update.
        /// </summary>
        /// <param name="createJob">job object</param>
        /// <param name="panelXml">panel xml</param>
        /// <param name="inverterXml">inverter xml</param>
        /// <returns>view result</returns>
        [HttpPost]
        [UserAuthorization]
        public async Task<JsonResult> Create(CreateJob createJob, string panelXml, string inverterXml, decimal OldStcValue, string stcHistoryMsg, string stcStatusId = "", string OldPanelDetails = "", string NewPanelDetails = "", string OldInverterDetails = "", string NewInverterDetails = "")
        {
            try
            {
                if (!createJob.BasicDetails.IsClassic)
                {
                    List<string> lstNewSerialNumber = new List<string>();
                    List<string> lstDeletedSerialNumber = new List<string>();

                    if (!string.IsNullOrEmpty(createJob.JobSystemDetails.SerialNumbers) && !string.IsNullOrEmpty(createJob.JobSystemDetails.StoredSerialNumber))
                    {
                        var base64EncodedBytes = System.Convert.FromBase64String(createJob.JobSystemDetails.StoredSerialNumber);
                        createJob.JobSystemDetails.StoredSerialNumber = System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
                        lstNewSerialNumber = createJob.JobSystemDetails.SerialNumbers.Split(new string[] { "\r\n" }, StringSplitOptions.None).Except(createJob.JobSystemDetails.StoredSerialNumber.Split(new string[] { "\r\n" }, StringSplitOptions.None)).ToList();
                        lstDeletedSerialNumber = createJob.JobSystemDetails.StoredSerialNumber.Split(new string[] { "\r\n" }, StringSplitOptions.None).Except(createJob.JobSystemDetails.SerialNumbers.Split(new string[] { "\r\n" }, StringSplitOptions.None)).ToList();
                    }

                    createJob.NewlyAddedSerialNumber = string.Join("\r\n", lstNewSerialNumber);
                    createJob.DeletedSerialNumber = string.Join("\r\n", lstDeletedSerialNumber);
                }

                RequiredValidationField(createJob);

                //if (!createJob.BasicDetails.IsClassic)
                //{
                //    ModelState.Remove("BasicDetails.Title");
                //    ModelState.Remove("BasicDetails.Description");
                //}

                if (!string.IsNullOrEmpty(createJob.JobOwnerDetails.CompanyName))
                {
                    createJob.JobOwnerDetails.CompanyName = HttpUtility.HtmlDecode(createJob.JobOwnerDetails.CompanyName);
                }

                if (ModelState.IsValid)
                {
                    if (createJob.BasicDetails.JobID == 0)
                    {
                        createJob.BasicDetails.IsClassic = true;
                    }

                    if (createJob.JobOwnerDetails.OwnerType == "Corporate body" || createJob.JobOwnerDetails.OwnerType == "Trustee")
                    {
                        bool isRegistered = false;
                        string GSTText = string.Empty;
                        string abnURL = "https://abr.business.gov.au/SearchByAbn.aspx?abn=" + createJob.JobOwnerDetails.CompanyABN;
                        try
                        {
                            HttpWebRequest wreq = (HttpWebRequest)WebRequest.Create(abnURL);
                            wreq.Method = "GET";
                            wreq.Timeout = -1;
                            wreq.ContentType = "application/json; charset=UTF-8";
                            var myHttpWebResponse = (HttpWebResponse)wreq.GetResponse();
                            string strResult;
                            using (var reader = new StreamReader(myHttpWebResponse.GetResponseStream(), System.Text.Encoding.UTF8))
                            {
                                strResult = reader.ReadToEnd();
                                myHttpWebResponse.Close();
                            }

                            if (strResult != null)
                            {
                                strResult = WebUtility.HtmlDecode(strResult);
                                HtmlDocument resultat = new HtmlDocument();
                                resultat.LoadHtml(strResult);

                                HtmlNode table = resultat.DocumentNode.SelectSingleNode("//table[1]");
                                if (table != null)
                                {
                                    foreach (var cell in table.SelectNodes(".//tr/th"))
                                    {
                                        string someVariable = cell.InnerText;
                                        if (cell.InnerText.ToLower() == "goods & services tax (gst):")
                                        {
                                            var td = cell.ParentNode.SelectNodes("./td");
                                            string tdValue = td[0].InnerText;
                                            GSTText = tdValue;
                                            if (tdValue.ToLower().Contains("registered from"))
                                            {
                                                isRegistered = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            isRegistered = false;
                        }
                        createJob.JobOwnerDetails.IsOwnerRegisteredWithGST = isRegistered;
                    }
                    DataTable dtIsSPVXMlValid = new DataTable();
                    string IsSPVRequired = string.Empty;
                    if ((stcStatusId == "14" || stcStatusId == "17") && createJob.BasicDetails.JobID > 0)
                    {
                        dtIsSPVXMlValid = _job.GetIsSPVXMlVerificationFlag(createJob.BasicDetails.JobID);
                        if (dtIsSPVXMlValid.Rows.Count > 0)
                        {
                            IsSPVRequired = dtIsSPVXMlValid.Rows[0]["IsSPVRequired"].ToString();
                        }
                    }
                    KeyValuePair<bool, Int32> keyValue = _jobRules.InsertCreateJobData(ref createJob, panelXml, inverterXml, ProjectSession.SolarCompanyId, ProjectSession.LoggedInUserId);
                    Int32 jobID = keyValue.Value;
                    int oldID = createJob.BasicDetails.JobID;
                    //if (createJob.BasicDetails.JobType == 2)
                    //{
                    //    createJob.JobSystemDetails.CalculatedSTC = createJob.JobSystemDetails.CalculatedSTCForSWH;
                    //    //if (createJob.UserType != 1 || createJob.UserType != 3)
                    //    if (!(createJob.UserType == 1 || createJob.UserType == 3))
                    //    {
                    //        createJob.JobSTCDetails.CertificateCreated = "No";
                    //        createJob.JobSTCDetails.FailedAccreditationCode = "";
                    //    }

                    //}

                    //if (createJob.BasicDetails.strInstallationDate != null)
                    //{
                    //    createJob.BasicDetails.InstallationDate = Convert.ToDateTime(createJob.BasicDetails.strInstallationDate);
                    //}
                    //else
                    //{
                    //    createJob.BasicDetails.InstallationDate = null;
                    //}

                    ///* IsPostalAddress */
                    //if (createJob.BasicDetails.strSoldByDate != null)
                    //{
                    //    createJob.BasicDetails.SoldByDate = Convert.ToDateTime(createJob.BasicDetails.strSoldByDate);
                    //}
                    //else
                    //{
                    //    createJob.BasicDetails.SoldByDate = null;
                    //}

                    //if (createJob.JobElectricians.AddressID == 2)
                    //{
                    //    createJob.JobElectricians.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobElectricians.IsPostalAddress = false;
                    //}

                    //if (createJob.JobOwnerDetails.AddressID == 2)
                    //{
                    //    createJob.JobOwnerDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobOwnerDetails.IsPostalAddress = false;
                    //}

                    //if (createJob.JobInstallationDetails.AddressID == 2)
                    //{
                    //    createJob.JobInstallationDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobInstallationDetails.IsPostalAddress = false;
                    //}

                    //if (createJob.JobInstallerDetails.AddressID == 2)
                    //{
                    //    createJob.JobInstallerDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobInstallerDetails.IsPostalAddress = false;
                    //}

                    //Int32 jobID = _job.InsertJob(createJob, panelXml, inverterXml);
                    PanelHistory(OldPanelDetails, NewPanelDetails, jobID);
                    InverterHistory(OldInverterDetails, NewInverterDetails, jobID);
                    InstallationAddressChangeHistory(createJob.JobInstallationDetails.oldInstallationAddress, createJob.JobInstallationDetails.AddressDisplay, jobID);
                    JobStatus jobStatus = new JobStatus();

                    //jobStatus.STCValue = createJob.JobSystemDetails != null ? createJob.JobSystemDetails.CalculatedSTC : 0;
                    jobStatus.STCValue = createJob.JobSystemDetails != null ? createJob.JobSystemDetails.ModifiedCalculatedSTC : 0;
                    jobStatus.IsRecUp = keyValue.Key;

                    if (jobID > 0)
                    {
                        jobStatus.update = true;
                    }
                    else
                    {
                        jobStatus.error = true;
                    }

                    if (createJob.ProfileSignature != null)
                    {
                        //Profile Signature Move
                        string profileSourceDirectory = ProjectSession.ProofDocumentsURL + "\\" + "UserDocuments" + "\\" + createJob.ProfileSignatureID;
                        string profileDestinationDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID;
                        try
                        {
                            DirectoryInfo dir = new DirectoryInfo(profileSourceDirectory);
                            if (!Directory.Exists(profileDestinationDirectory))
                            {
                                Directory.CreateDirectory(profileDestinationDirectory);
                            }
                            FileInfo[] files = dir.GetFiles();
                            foreach (FileInfo file in files)
                            {
                                if (file.Name == createJob.ProfileSignature)
                                {
                                    string temppath = Path.Combine(profileDestinationDirectory, file.Name);
                                    file.CopyTo(temppath, true);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                    }

                    string sourceGSTDir = ProjectSession.ProofDocuments + "JobDocuments" + "\\" + createJob.Guid;
                    string destinationGSTDir = ProjectSession.ProofDocuments + "JobDocuments" + "\\" + jobID;
                    if (!string.IsNullOrEmpty(createJob.BasicDetails.GSTDocument))
                    {
                        if (sourceGSTDir != destinationGSTDir)
                        {
                            try
                            {
                                Directory.Move(sourceGSTDir, destinationGSTDir);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                            }
                        }
                    }

                    string guid = createJob.Guid;
                    string sourceDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + guid;
                    string destinationDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID;
                    if (oldID == 0)
                    {
                        jobStatus.insert = true;
                        if (createJob.Signature != null)
                        {
                            try
                            {
                                Directory.Move(sourceDirectory, destinationDirectory);
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                            }
                        }

                        createJob.JobID = jobID;
                        //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.JobAdded);
                        string JobTitle = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                        string JobAddress = !string.IsNullOrEmpty(createJob.JobOwnerDetails.OwnerAddress) ? createJob.JobOwnerDetails.OwnerAddress : "";
                        string Description = !string.IsNullOrEmpty(createJob.BasicDetails.Description) ? createJob.BasicDetails.Description : "";

                        string JobHistoryMessage = "added the following job: <b class=\"blue-title\">" + JobTitle + "</b>" +
                                      "<p><label style=\"color:black\">Job Address: </label>" + JobAddress + "</p>" +
                                      "<p><label style=\"color:black\">Description: </label>" + Description + "</p>";
                        Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobAdded", ProjectSession.LoggedInName, false);
                        SendMailWhenJobCreate(jobID);
                    }
                    else
                    {
                        createJob.BasicDetails.CurrentJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.JobStage)).Select(s => s.StageName).FirstOrDefault();
                        //if (createJob.BasicDetails.PreviousJobStage != null && createJob.BasicDetails.CurrentJobStage != null && createJob.BasicDetails.PreviousJobStage != createJob.BasicDetails.CurrentJobStage)
                        //{
                        //    createJob.JobID = jobID;
                        //    //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.Stagechanged);
                        //    string Title = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                        //    string PreviousJobStage = !string.IsNullOrEmpty(createJob.BasicDetails.PreviousJobStage) ? createJob.BasicDetails.PreviousJobStage : "";
                        //    string CurrentJobStage = !string.IsNullOrEmpty(createJob.BasicDetails.CurrentJobStage) ? createJob.BasicDetails.CurrentJobStage : "";

                        //    //string JobHistoryMessage = "changed the stage of <b class=\"blue-title\">" + Title + "</b> from <b>" + PreviousJobStage + "</b> to <b>" + CurrentJobStage + "</b>";
                        //    string JobHistoryMessage = "changed Job Status: <b class=\"blue-title\">" + CurrentJobStage + "</b> - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                        //    Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General","Stagechanged", ProjectSession.LoggedInName, false);

                        //}

                        if (createJob.BasicDetails.PreviousJobStage != createJob.BasicDetails.JobStage)
                        {
                            string PreviousJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.PreviousJobStage)).Select(s => s.StageName).FirstOrDefault();
                            string NewJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.JobStage)).Select(s => s.StageName).FirstOrDefault();
                            string JobHistoryMessage = "changed Job Status from " + PreviousJobStage + " to " + NewJobStage;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "Stagechanged", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.BasicDetails.PreviousPriority != null && createJob.BasicDetails.CurrentPriority != null && createJob.BasicDetails.PreviousPriority != createJob.BasicDetails.CurrentPriority)
                        {
                            createJob.JobID = jobID;
                            //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.PriorityChanged);
                            string Title = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                            string CurrentJobPriority = !string.IsNullOrEmpty(createJob.BasicDetails.CurrentPriority) ? createJob.BasicDetails.CurrentPriority : "";

                            string JobHistoryMessage = "changed job priority from " + createJob.BasicDetails.PreviousPriority + " to " + CurrentJobPriority;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "Scheduling", "PriorityChanged", ProjectSession.LoggedInName, false);

                        }

                        if (createJob.BasicDetails.PreviousSSCID != createJob.BasicDetails.SSCID)
                        {
                            if (createJob.BasicDetails.SSCID == null || createJob.BasicDetails.SSCID == 0)
                            {
                                string JobHistoryMessageRemoveSSC = "removed <b style=\"color:black\">" + createJob.BasicDetails.PreviousSSCName + "(SSC)</b> from <b style=\"color:black\">" + createJob.BasicDetails.RefNumber + "(" + jobID + ")</b>";
                                Common.SaveJobHistorytoXML(jobID, JobHistoryMessageRemoveSSC, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                            }
                            else
                            {
                                string JobHistoryMessage = "assigned <b style=\"color:black\">" + createJob.BasicDetails.SSCName + "(SSC)</b> to <b style=\"color:black\">" + createJob.BasicDetails.RefNumber + "(" + jobID + ")</b>";
                                Common.SaveJobHistorytoXML(jobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                            }

                        }
                        if (createJob.BasicDetails.PreviousSCOID != createJob.BasicDetails.ScoID)
                        {
                            if (createJob.BasicDetails.ScoID == null || createJob.BasicDetails.ScoID == 0)
                            {
                                string JobHistoryMessageRemoveSCO = "removed <b style=\"color:black\">" + createJob.BasicDetails.PreviousSCOName + "(SCO)</b> from <b style=\"color:black\">" + createJob.BasicDetails.RefNumber + "(" + jobID + ")</b>";
                                Common.SaveJobHistorytoXML(jobID, JobHistoryMessageRemoveSCO, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                            }
                            else
                            {
                                string JobHistoryMessage = "assigned <b style=\"color:black\">" + createJob.BasicDetails.SCOName + "(SCO)</b> to <b style=\"color:black\">" + createJob.BasicDetails.RefNumber + "(" + jobID + ")</b>";
                                Common.SaveJobHistorytoXML(jobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                            }

                        }
                        if (createJob.BasicDetails.strInstallationDate != createJob.BasicDetails.strInstallationDateTemp)
                        {
                            string PreviousInstallationDate = string.IsNullOrEmpty(createJob.BasicDetails.strInstallationDateTemp) || (createJob.BasicDetails.strInstallationDateTemp == "Invalid date") ? "null" : createJob.BasicDetails.strInstallationDateTemp;
                            string NewInstallationDate = string.IsNullOrEmpty(createJob.BasicDetails.strInstallationDate) || (createJob.BasicDetails.strInstallationDate == "Invalid date") ? "null" : createJob.BasicDetails.strInstallationDate;
                            if (PreviousInstallationDate != NewInstallationDate)
                            {
                                string JobHistoryMessage = "has changed installation date" + "From " + PreviousInstallationDate + " to " + NewInstallationDate;
                                Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                            }
                        }
                        if (createJob.JobSystemDetails.PreviousSystemSize != createJob.JobSystemDetails.SystemSize)
                        {
                            string PreviousSystemSize = createJob.JobSystemDetails.PreviousSystemSize != null ? createJob.JobSystemDetails.PreviousSystemSize.ToString() : "null";
                            string NewSystemSize = createJob.JobSystemDetails.SystemSize != null ? createJob.JobSystemDetails.SystemSize.ToString() : "null";
                            string JobHistoryMessage = "has changed System Size field From " + PreviousSystemSize + " to " + NewSystemSize;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "ModifiedSystemSize", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.BasicDetails.PreviousRefNumber != createJob.BasicDetails.RefNumber)
                        {
                            string JobHistoryMessage = "has changed Reference Number field From " + createJob.BasicDetails.PreviousRefNumber + " to " + createJob.BasicDetails.RefNumber;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobInstallationDetails.PreviousNMI != createJob.JobInstallationDetails.NMI)
                        {
                            string PreviousNMI = !string.IsNullOrEmpty(createJob.JobInstallationDetails.PreviousNMI) ? createJob.JobInstallationDetails.PreviousNMI : "null";
                            string NewNMI = !string.IsNullOrEmpty(createJob.JobInstallationDetails.NMI) ? createJob.JobInstallationDetails.NMI : "null";
                            string JobHistoryMessage = "has changed NMI From " + PreviousNMI + " to " + NewNMI;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false);
                        }
                        if (jobStatus.STCValue != null)
                        {
                            if (jobStatus?.STCValue != OldStcValue)
                            {
                                ModifiedStcValueHistory objModifiedStcValue = new ModifiedStcValueHistory()
                                {
                                    OldStcValue = OldStcValue,
                                    NewStcValue = jobStatus.STCValue.Value,
                                    Name = ProjectSession.LoggedInName,
                                    HistoryMessage = stcHistoryMsg,
                                    JobId = jobID
                                };
                                //bool isHistorySaved = _jobHistory.LogJobHistory(objModifiedStcValue, HistoryCategory.ModifiedStcValue);

                                string JobHistoryMessage = "has changed STC Value From " + objModifiedStcValue.OldStcValue + " to " + objModifiedStcValue.NewStcValue;
                                Common.SaveJobHistorytoXML(objModifiedStcValue.JobId, JobHistoryMessage, "General", "ModifiedStcValue", ProjectSession.LoggedInName, false);
                            }
                        }

                        if (createJob.JobInstallationDetails.PreviousInstallingNewPanel != createJob.JobInstallationDetails.InstallingNewPanel)
                        {
                            string PreviousInstallationNewPanel = !string.IsNullOrEmpty(createJob.JobInstallationDetails.PreviousInstallingNewPanel) ? createJob.JobInstallationDetails.PreviousInstallingNewPanel : "null";
                            string newInstallationPanel = !string.IsNullOrEmpty(createJob.JobInstallationDetails.InstallingNewPanel) ? createJob.JobInstallationDetails.InstallingNewPanel : "null";
                            string JobHistoryMessage = "has changed STC Installing Panel From " + PreviousInstallationNewPanel + " to " + newInstallationPanel;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobInstallationDetails.PreviousLocation != createJob.JobInstallationDetails.Location)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobInstallationDetails.PreviousLocation) ? createJob.JobInstallationDetails.PreviousLocation : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobInstallationDetails.Location) ? createJob.JobInstallationDetails.Location : "null";
                            string JobHistoryMessage = "has changed Installation Location From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobInstallationDetails.PreviousSingleMultipleStory != createJob.JobInstallationDetails.SingleMultipleStory)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobInstallationDetails.PreviousSingleMultipleStory) ? createJob.JobInstallationDetails.PreviousSingleMultipleStory : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobInstallationDetails.SingleMultipleStory) ? createJob.JobInstallationDetails.SingleMultipleStory : "null";
                            string JobHistoryMessage = "has changed STC SingleMultiple Story From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousAdditionalLocationInformation != createJob.JobSTCDetails.AdditionalLocationInformation)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousAdditionalLocationInformation) ? createJob.JobSTCDetails.PreviousAdditionalLocationInformation : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.AdditionalLocationInformation) ? createJob.JobSTCDetails.AdditionalLocationInformation : "null";
                            string JobHistoryMessage = "has changed STC details Additional Location Information From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousAdditionalSystemInformation != createJob.JobSTCDetails.AdditionalSystemInformation)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousAdditionalSystemInformation) ? createJob.JobSTCDetails.PreviousAdditionalSystemInformation : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.AdditionalSystemInformation) ? createJob.JobSTCDetails.AdditionalSystemInformation : "null";
                            string JobHistoryMessage = "has changed STC details Additional System Information From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousCertificateCreated != createJob.JobSTCDetails.CertificateCreated)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousCertificateCreated) ? createJob.JobSTCDetails.PreviousCertificateCreated : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.CertificateCreated) ? createJob.JobSTCDetails.CertificateCreated : "null";
                            string JobHistoryMessage = "has changed STC details created certificate From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousDeemingPeriod != createJob.JobSTCDetails.DeemingPeriod)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousDeemingPeriod) ? createJob.JobSTCDetails.PreviousDeemingPeriod : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.DeemingPeriod) ? createJob.JobSTCDetails.DeemingPeriod : "null";
                            string JobHistoryMessage = "has changed STC details DeemingPeriod From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousFailedAccreditationCode != createJob.JobSTCDetails.FailedAccreditationCode)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousFailedAccreditationCode) ? createJob.JobSTCDetails.PreviousFailedAccreditationCode : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.FailedAccreditationCode) ? createJob.JobSTCDetails.FailedAccreditationCode : "null";
                            string JobHistoryMessage = "has changed STC details FailedAccreditationCode From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousFailedReason != createJob.JobSTCDetails.FailedReason)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousFailedReason) ? createJob.JobSTCDetails.PreviousFailedReason : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason) ? createJob.JobSTCDetails.FailedReason : "null";
                            string JobHistoryMessage = "has changed STC details FailedReason From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousLatitude != createJob.JobSTCDetails.Latitude)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousLatitude) ? createJob.JobSTCDetails.PreviousLatitude : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.Latitude) ? createJob.JobSTCDetails.Latitude : "null";
                            string JobHistoryMessage = "has changed STC details Latitude From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousLocation != createJob.JobSTCDetails.Location)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousLocation) ? createJob.JobSTCDetails.PreviousLocation : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.Location) ? createJob.JobSTCDetails.Location : "null";
                            string JobHistoryMessage = "has changed STC details Location From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousLongitude != createJob.JobSTCDetails.Longitude)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousLongitude) ? createJob.JobSTCDetails.PreviousLongitude : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.Longitude) ? createJob.JobSTCDetails.Longitude : "null";
                            string JobHistoryMessage = "has changed STC details Longitude From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.JobSTCDetails.PreviousMultipleSGUAddress != createJob.JobSTCDetails.MultipleSGUAddress)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousMultipleSGUAddress) ? createJob.JobSTCDetails.PreviousMultipleSGUAddress : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.MultipleSGUAddress) ? createJob.JobSTCDetails.MultipleSGUAddress : "null";
                            string JobHistoryMessage = "has changed multiple SGU address From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }
                        if (createJob.BasicDetails.JobType == 2)
                        {
                            if (createJob.JobSTCDetails.PreviousSecondhandWaterHeater != createJob.JobSTCDetails.SecondhandWaterHeater)
                            {
                                string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousSecondhandWaterHeater) ? createJob.JobSTCDetails.PreviousSecondhandWaterHeater : "null";
                                string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.SecondhandWaterHeater) ? createJob.JobSTCDetails.SecondhandWaterHeater : "null";
                                string JobHistoryMessage = "has changed STC details SecondHandWater From " + OldData + " to " + newData;
                                Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                            }
                            if (createJob.JobSTCDetails.PreviousVolumetricCapacity != createJob.JobSTCDetails.VolumetricCapacity)
                            {
                                string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousVolumetricCapacity) ? createJob.JobSTCDetails.PreviousVolumetricCapacity : "null";
                                string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.VolumetricCapacity) ? createJob.JobSTCDetails.VolumetricCapacity : "null";
                                string JobHistoryMessage = "has changed STC details VolumetricCapacity From " + OldData + " to " + newData;
                                Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                            }
                            if (createJob.JobSTCDetails.PreviousStatutoryDeclarations != createJob.JobSTCDetails.StatutoryDeclarations)
                            {
                                string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousStatutoryDeclarations) ? createJob.JobSTCDetails.PreviousStatutoryDeclarations : "null";
                                string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.StatutoryDeclarations) ? createJob.JobSTCDetails.StatutoryDeclarations : "null";
                                string JobHistoryMessage = "has changed STC details StatutoryDeclarations From " + OldData + " to " + newData;
                                Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                            }
                        }

                        if (createJob.JobSTCDetails.PreviousConnectionType != createJob.JobSTCDetails.TypeOfConnection)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousConnectionType) ? createJob.JobSTCDetails.PreviousConnectionType : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.TypeOfConnection) ? createJob.JobSTCDetails.TypeOfConnection : "null";
                            string JobHistoryMessage = "has changed STC details TypeOfConnection From <b style=\"color:black\">" + OldData + "</b> to <b style=\"color:black\">" + newData + "</b>";
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }

                        if (createJob.JobSTCDetails.PreviousSystemMountingType != createJob.JobSTCDetails.SystemMountingType)
                        {
                            string OldData = !string.IsNullOrEmpty(createJob.JobSTCDetails.PreviousSystemMountingType) ? createJob.JobSTCDetails.PreviousSystemMountingType : "null";
                            string newData = !string.IsNullOrEmpty(createJob.JobSTCDetails.SystemMountingType) ? createJob.JobSTCDetails.SystemMountingType : "null";
                            string JobHistoryMessage = "has changed STC details SystemMountingType From " + OldData + " to " + newData;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                        }

                    }
                    jobStatus.id = QueryString.QueryStringEncode("id=" + Convert.ToString(jobID));

                    if (stcStatusId == "14" || stcStatusId == "17")
                    {
                        if (dtIsSPVXMlValid.Rows.Count > 0)
                        {
                            string IsSPVXMlValid = dtIsSPVXMlValid.Rows[0]["IsValidSPVXml"].ToString();
                            if (IsSPVXMlValid == "False" && IsSPVRequired == "True")
                            {
                                _job.RemoveSPVByXMlVerification(jobID);
                                jobStatus.IsSPVRequired = false;
                                JobHistory jobHistory = new JobHistory();
                                jobHistory.JobID = jobID;
                                jobHistory.Name = ProjectSession.LoggedInName;
                                //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.RemovedSPVAfterXMLVerification);
                                string JobHistoryMessage = "has removed SPV after verification of installation SPV XML -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "RemovedSPVAfterXMLVerification", ProjectSession.LoggedInName, false);
                                SortedList<string, string> data = new SortedList<string, string>();
                                bool isSPVRequired = false;
                                bool? isInstallationVerified = null;
                                //bool isRelease = true;
                                data.Add("IsSPVRequired", Convert.ToString(isSPVRequired));
                                // data.Add("IsRelease", Convert.ToString(isRelease));
                                data.Add("IsSPVInstallationVerified", Convert.ToString(isInstallationVerified));
                                //await CommonBAL.SetCacheDataForSTCSubmission(null, jobID, data);
                            }
                        }
                    }

                    //await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobID);
                    //await CommonBAL.SetCacheDataForPeakPayFromJobId(Convert.ToString(jobID));
                    return Json(jobStatus, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string msg = string.Empty;
                    var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                        .Select(x => new { x.Key, x.Value.Errors });

                    foreach (var erroneousField in erroneousFields)
                    {
                        var fieldKey = erroneousField.Key;
                        var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                        msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                    }

                    return Json(new { error = true, errorMessage = msg }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                //Helper.Logger("jobId = " + createJob.BasicDetails.JobID + " Error : " + ex.Message);
                _log.LogException("jobId = " + createJob.BasicDetails.JobID, ex);
                return Json(new { error = true, errorMessage = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// panel history maintain
        /// </summary>
        /// <param name="OldPanelDetails"></param>
        /// <param name="NewPanelDetails"></param>
        private void PanelHistory(string OldPanelDetails, string NewPanelDetails, int jobID)
        {
            var OldPanel = JsonConvert.DeserializeObject<List<PanelCompare>>(OldPanelDetails);
            var NewPanel = JsonConvert.DeserializeObject<List<PanelCompare>>(NewPanelDetails);
            var lstPanelCompare = from lst1 in NewPanel
                                  join lst2 in OldPanel on lst1.ID equals lst2.ID into yG
                                  from y1 in yG.DefaultIfEmpty()
                                  select new { X = lst1, Y = y1, IsUpdate = y1 != null ? (lst1.Brand != y1.Brand || lst1.Model != y1.Model || lst1.Count != y1.Count) : false };
            foreach (var item in lstPanelCompare)
            {
                item.X.JobID = jobID;
                if (item.Y == null)
                {
                    //_jobHistory.LogJobHistory<PanelCompare>(item.X, HistoryCategory.PanelAdded);
                    string JobHistoryMessage = "has added Panel <b style =\"color: black\"> { Brand : " + item.X.Brand + " , Model : " + item.X.Model + " , No. of Panel : " + item.X.Count + "}" + "</b>" + "for Job";
                    Common.SaveJobHistorytoXML(item.X.JobID, JobHistoryMessage, "General", "PanelAdded", ProjectSession.LoggedInName, false);
                }
                else if (item.X != null && item.Y != null && item.IsUpdate)
                {
                    item.X.Brand = item.X.Brand + "$" + item.Y.Brand;
                    item.X.Model = item.X.Model + "$" + item.Y.Model;
                    item.X.Count = item.X.Count + "$" + item.Y.Count;
                    //_jobHistory.LogJobHistory<PanelCompare>(item.X, HistoryCategory.PanelUpdated);
                    string JobHistoryMessage = "has updated Panel Details.Old panel details <b style =\"color: black\"> {Brand : " + item.X.Brand.Split('$')[1] + " , Model : " + item.X.Model.Split('$')[1] + " , No. of Panel : " + item.X.Count.Split('$')[1] + "}" + "</b>" + " -> New panel details <b style =\"color: black\"> {Brand : " + item.X.Brand.Split('$')[0] + " , Model : " + item.X.Model.Split('$')[0] + " , No. of Panel : " + item.X.Count.Split('$')[0] + " }" + "</b>";
                    Common.SaveJobHistorytoXML(item.X.JobID, JobHistoryMessage, "General", "PanelUpdated", ProjectSession.LoggedInName, false);
                }
            }
            var deletedPanel = OldPanel.Where(x => (OldPanel.Select(m => m.ID).Except(NewPanel.Select(y => y.ID))).Contains(x.ID)).ToList();
            foreach (var item in deletedPanel)
            {
                item.JobID = jobID;
                // _jobHistory.LogJobHistory<PanelCompare>(item, HistoryCategory.PanelRemoved);
                string JobHistoryMessage = "has removed Panel Details: <b style=\"color: black\"> {Brand : " + item.Brand + " , Model : " + item.Model + " , No. of Panel : " + item.Count + "}" + "</b>" + " from job";
                Common.SaveJobHistorytoXML(item.JobID, JobHistoryMessage, "General", "PanelRemoved", ProjectSession.LoggedInName, false);
            }
        }

        /// <summary>
        /// panel history maintain
        /// </summary>
        /// <param name="OldPanelDetails"></param>
        /// <param name="NewPanelDetails"></param>
        private void InverterHistory(string OldInverterDetails, string NewInverterDetails, int jobID)
        {
            var Old = JsonConvert.DeserializeObject<List<InverterCompare>>(OldInverterDetails);
            var New = JsonConvert.DeserializeObject<List<InverterCompare>>(NewInverterDetails);
            var lstInverterCompare = from lst1 in New
                                     join lst2 in Old on lst1.ID equals lst2.ID into yG
                                     from y1 in yG.DefaultIfEmpty()
                                     select new { X = lst1, Y = y1, IsUpdate = y1 != null ? (lst1.Brand != y1.Brand || lst1.Model != y1.Model || lst1.Count != y1.Count || lst1.Series != y1.Series) : false };
            foreach (var item in lstInverterCompare)
            {
                item.X.JobID = jobID;
                if (item.Y == null)
                {
                    //_jobHistory.LogJobHistory<PanelCompare>(item.X, HistoryCategory.PanelAdded);
                    string JobHistoryMessage = "has added Inverter <b style =\"color: black\"> { Brand : " + item.X.Brand + " , Model : " + item.X.Model + " , Series :" + item.X.Series + " , No. of Inverter : " + item.X.Count + "}" + "</b>" + "for Job";
                    Common.SaveJobHistorytoXML(item.X.JobID, JobHistoryMessage, "General", "InverterDetails", ProjectSession.LoggedInName, false);
                }
                else if (item.X != null && item.Y != null && item.IsUpdate)
                {
                    item.X.Brand = item.X.Brand + "$" + item.Y.Brand;
                    item.X.Model = item.X.Model + "$" + item.Y.Model;
                    item.X.Count = item.X.Count + "$" + item.Y.Count;
                    item.X.Series = item.X.Series + "$" + item.X.Series;
                    //_jobHistory.LogJobHistory<PanelCompare>(item.X, HistoryCategory.PanelUpdated);
                    string JobHistoryMessage = "has updated Inverter Details.Old Inverter details <b style =\"color: black\"> {Brand : " + item.X.Brand.Split('$')[1] + " , Model : " + item.X.Model.Split('$')[1] + " , Series :" + item.X.Series.Split('$')[1] + " , No. of Panel : " + item.X.Count.Split('$')[1] + "}" + "</b>" + " -> New Inverter details <b style =\"color: black\"> {Brand : " + item.X.Brand.Split('$')[0] + " , Model : " + item.X.Model.Split('$')[0] + " , Series :" + item.X.Series.Split('$')[0] + " , No. of Inverter : " + item.X.Count.Split('$')[0] + " }" + "</b>";
                    Common.SaveJobHistorytoXML(item.X.JobID, JobHistoryMessage, "General", "InverterDetails", ProjectSession.LoggedInName, false);
                }
            }
            var deletedInverter = Old.Where(x => (Old.Select(m => m.ID).Except(New.Select(y => y.ID))).Contains(x.ID)).ToList();
            foreach (var item in deletedInverter)
            {
                item.JobID = jobID;
                // _jobHistory.LogJobHistory<PanelCompare>(item, HistoryCategory.PanelRemoved);
                string JobHistoryMessage = "has removed Inverter Details: <b style=\"color: black\"> {Brand : " + item.Brand + " , Model : " + item.Model + " , Series :" + item.Series + " , No. of Inverter : " + item.Count + "}" + "</b>" + " from job";
                Common.SaveJobHistorytoXML(item.JobID, JobHistoryMessage, "General", "InverterDetails", ProjectSession.LoggedInName, false);
            }
        }

        /// <summary>
        /// Edits the specified create job.
        /// </summary>
        /// <param name="createJob">The create job.</param>
        /// <param name="panelXml">The panel XML.</param>
        /// <param name="inverterXml">The inverter XML.</param>
        /// <returns>action result</returns>
        [HttpPost]
        [UserAuthorization]
        public async Task<ActionResult> Edit(CreateJob createJob, string panelXml, string inverterXml)
        {
            try
            {
                RequiredValidationField(createJob);

                //if (!createJob.BasicDetails.IsClassic)
                //{
                //    ModelState.Remove("BasicDetails.Title");
                //    ModelState.Remove("BasicDetails.Description");
                //}

                if (ModelState.IsValid)
                {
                    int oldID = createJob.BasicDetails.JobID;
                    DataTable dtIsSPVXMlValid = new DataTable();
                    string IsSPVRequired = string.Empty;
                    if (createJob.BasicDetails.JobID > 0)
                    {
                        dtIsSPVXMlValid = _job.GetIsSPVXMlVerificationFlag(createJob.BasicDetails.JobID);
                        if (dtIsSPVXMlValid.Rows.Count > 0)
                        {
                            IsSPVRequired = dtIsSPVXMlValid.Rows[0]["IsSPVRequired"].ToString();
                        }
                    }
                    //Int32 jobID = InsertCreateJobData(createJob, panelXml, inverterXml);
                    KeyValuePair<bool, Int32> keyValue = _jobRules.InsertCreateJobData(ref createJob, panelXml, inverterXml, ProjectSession.SolarCompanyId, ProjectSession.LoggedInUserId);
                    Int32 jobID = keyValue.Value;

                    //if (createJob.BasicDetails.JobType == 2)
                    //{
                    //    createJob.JobSystemDetails.CalculatedSTC = createJob.JobSystemDetails.CalculatedSTCForSWH;
                    //    if (!(createJob.UserType == 1 || createJob.UserType == 3))
                    //    {
                    //        createJob.JobSTCDetails.CertificateCreated = "No";
                    //        createJob.JobSTCDetails.FailedAccreditationCode = "";
                    //    }

                    //}

                    //if (createJob.BasicDetails.strInstallationDate != null)
                    //{
                    //    createJob.BasicDetails.InstallationDate = Convert.ToDateTime(createJob.BasicDetails.strInstallationDate);
                    //}
                    //else
                    //{
                    //    createJob.BasicDetails.InstallationDate = null;
                    //}

                    //if (createJob.BasicDetails.strSoldByDate != null)
                    //{
                    //    createJob.BasicDetails.SoldByDate = Convert.ToDateTime(createJob.BasicDetails.strSoldByDate);
                    //}
                    //else
                    //{
                    //    createJob.BasicDetails.SoldByDate = null;
                    //}

                    //if (createJob.JobElectricians.AddressID == 2)
                    //{
                    //    createJob.JobElectricians.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobElectricians.IsPostalAddress = false;
                    //}

                    //if (createJob.JobOwnerDetails.AddressID == 2)
                    //{
                    //    createJob.JobOwnerDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobOwnerDetails.IsPostalAddress = false;
                    //}

                    //if (createJob.JobInstallationDetails.AddressID == 2)
                    //{
                    //    createJob.JobInstallationDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobInstallationDetails.IsPostalAddress = false;
                    //}

                    //if (createJob.JobInstallerDetails.AddressID == 2)
                    //{
                    //    createJob.JobInstallerDetails.IsPostalAddress = true;
                    //}
                    //else
                    //{
                    //    createJob.JobInstallerDetails.IsPostalAddress = false;
                    //}
                    //Int32 jobID = _job.InsertJob(createJob, panelXml, inverterXml);

                    JobStatus jobStatus = new JobStatus();

                    jobStatus.STCValue = createJob.JobSystemDetails != null ? createJob.JobSystemDetails.CalculatedSTC : 0;
                    jobStatus.IsRecUp = keyValue.Key;

                    if (jobID > 0)
                    {
                        jobStatus.update = true;
                    }
                    else
                    {
                        jobStatus.error = true;
                    }

                    if (createJob.ProfileSignature != null)
                    {
                        //Profile Signature Move
                        string profileSourceDirectory = ProjectSession.ProofDocumentsURL + "\\" + "UserDocuments" + "\\" + createJob.ProfileSignatureID;
                        string profileDestinationDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID;
                        try
                        {
                            DirectoryInfo dir = new DirectoryInfo(profileSourceDirectory);
                            if (!Directory.Exists(profileDestinationDirectory))
                            {
                                Directory.CreateDirectory(profileDestinationDirectory);
                            }
                            FileInfo[] files = dir.GetFiles();
                            foreach (FileInfo file in files)
                            {
                                if (file.Name == createJob.ProfileSignature)
                                {
                                    string temppath = Path.Combine(profileDestinationDirectory, file.Name);
                                    file.CopyTo(temppath, true);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                    }

                    string guid = createJob.Guid;
                    string sourceDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + guid;
                    string destinationDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID;
                    if (oldID == 0)
                    {
                        jobStatus.insert = true;
                        if (createJob.Signature != null)
                        {
                            try
                            {
                                Directory.Move(sourceDirectory, destinationDirectory);
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                            }
                        }

                        createJob.JobID = jobID;
                        //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.JobAdded);
                        string JobTitle = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                        string JobAddress = !string.IsNullOrEmpty(createJob.JobOwnerDetails.OwnerAddress) ? createJob.JobOwnerDetails.OwnerAddress : "";
                        string Description = !string.IsNullOrEmpty(createJob.BasicDetails.Description) ? createJob.BasicDetails.Description : "";

                        string JobHistoryMessage = "added the following job: < b class=\"blue-title\">" + JobTitle + "</b>" +
                                      "<p><label style=\"color: black\">Job Address: </label>" + JobAddress + "</p>" +
                                      "<p><label style=\"color: black\">Description: </label>" + Description + "</p>";
                        Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobAdded", ProjectSession.LoggedInName, false);
                    }
                    else
                    {
                        //if (createJob.BasicDetails.PreviousJobStage != null && createJob.BasicDetails.CurrentJobStage != null && createJob.BasicDetails.PreviousJobStage != createJob.BasicDetails.CurrentJobStage)
                        //{
                        //    createJob.JobID = jobID;
                        //    //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.Stagechanged);
                        //    string Title = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                        //    string PreviousJobStage = !string.IsNullOrEmpty(createJob.BasicDetails.PreviousJobStage) ? createJob.BasicDetails.PreviousJobStage : "";
                        //    string CurrentJobStage = !string.IsNullOrEmpty(createJob.BasicDetails.CurrentJobStage) ? createJob.BasicDetails.CurrentJobStage : "";

                        //    //string JobHistoryMessage = "changed the stage of <b class=\"blue-title\">" + Title + "</b> from <b>" + PreviousJobStage + "</b> to <b>" + CurrentJobStage + "</b>";
                        //    string JobHistoryMessage = "changed Job Status: <b class=\"blue-title\">" + CurrentJobStage + "</b> - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                        //    Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General","Stagechanged", ProjectSession.LoggedInName, false);

                        //}
                        if (createJob.BasicDetails.PreviousJobStage != createJob.BasicDetails.JobStage)
                        {
                            string PreviousJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.PreviousJobStage)).Select(s => s.StageName).FirstOrDefault();
                            string NewJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.JobStage)).Select(s => s.StageName).FirstOrDefault();
                            string JobHistoryMessage = "changed Job Status: <b class=\"blue-title\">" + NewJobStage + "</b> - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "Stagechanged", ProjectSession.LoggedInName, false);
                        }

                        if (createJob.BasicDetails.strInstallationDate != createJob.BasicDetails.strInstallationDateTemp)
                        {
                            string PreviousInstallationDate = string.IsNullOrEmpty(createJob.BasicDetails.strInstallationDateTemp) || (createJob.BasicDetails.strInstallationDateTemp == "Invalid date") ? "null" : createJob.BasicDetails.strInstallationDateTemp;
                            string NewInstallationDate = string.IsNullOrEmpty(createJob.BasicDetails.strInstallationDate) || (createJob.BasicDetails.strInstallationDate == "Invalid date") ? "null" : createJob.BasicDetails.strInstallationDate;
                            if (PreviousInstallationDate != NewInstallationDate)
                            {
                                string JobHistoryMessage = "has changed installation date - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                                string description = "From " + PreviousInstallationDate + " to " + NewInstallationDate;
                                Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false, description);
                            }
                        }
                        if (createJob.JobSystemDetails.PreviousSystemSize != createJob.JobSystemDetails.SystemSize)
                        {
                            string PreviousSystemSize = createJob.JobSystemDetails.PreviousSystemSize != null ? createJob.JobSystemDetails.PreviousSystemSize.ToString() : "null";
                            string NewSystemSize = createJob.JobSystemDetails.SystemSize != null ? createJob.JobSystemDetails.SystemSize.ToString() : "null";
                            string JobHistoryMessage = "has changed System Size field - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                            string description = "From " + PreviousSystemSize + " to " + NewSystemSize;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "ModifiedSystemSize", ProjectSession.LoggedInName, false, description);
                        }
                        if (createJob.BasicDetails.PreviousRefNumber != createJob.BasicDetails.RefNumber)
                        {
                            string JobHistoryMessage = "has changed Reference Number field - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                            string description = "From " + createJob.BasicDetails.PreviousRefNumber + " to " + createJob.BasicDetails.RefNumber;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobBasicDetails", ProjectSession.LoggedInName, false, description);
                        }
                        if (createJob.JobInstallationDetails.PreviousNMI != createJob.JobInstallationDetails.NMI)
                        {
                            string PreviousNMI = !string.IsNullOrEmpty(createJob.JobInstallationDetails.PreviousNMI) ? createJob.JobInstallationDetails.PreviousNMI : "null";
                            string NewNMI = !string.IsNullOrEmpty(createJob.JobInstallationDetails.NMI) ? createJob.JobInstallationDetails.NMI : "null";
                            string JobHistoryMessage = "has changed NMI - <b class=\"blue-title\"> (" + createJob.BasicDetails.JobID + ") JobRefNo </b>";
                            string description = "From " + PreviousNMI + " to " + NewNMI;
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false, description);
                        }
                        if (createJob.BasicDetails.PreviousPriority != null && createJob.BasicDetails.CurrentPriority != null && createJob.BasicDetails.PreviousPriority != createJob.BasicDetails.CurrentPriority)
                        {
                            createJob.JobID = jobID;
                            //bool isHistorySaved = _jobHistory.LogJobHistory(createJob, HistoryCategory.PriorityChanged);
                            string Title = !string.IsNullOrEmpty(createJob.BasicDetails.Title) ? createJob.BasicDetails.Title : createJob.BasicDetails.RefNumber;
                            string CurrentJobPriority = !string.IsNullOrEmpty(createJob.BasicDetails.CurrentPriority) ? createJob.BasicDetails.CurrentPriority : "";

                            string JobHistoryMessage = "changed job <b class=\"blue-title\">" + Title + "</b> priority to <b>" + CurrentJobPriority + "</b>.";
                            Common.SaveJobHistorytoXML(createJob.BasicDetails.JobID, JobHistoryMessage, "Scheduling", "PriorityChanged", ProjectSession.LoggedInName, false);
                        }

                    }

                    jobStatus.id = QueryString.QueryStringEncode("id=" + Convert.ToString(jobID));
                    await CommonBAL.SetCacheDataForJobID(createJob.BasicDetails.SolarCompanyId, createJob.BasicDetails.JobID);
                    if (dtIsSPVXMlValid.Rows.Count > 0)
                    {
                        string IsSPVXMlValid = dtIsSPVXMlValid.Rows[0]["IsValidSPVXml"].ToString();
                        if (IsSPVXMlValid == "False" && IsSPVRequired == "True")
                        {
                            _job.RemoveSPVByXMlVerification(jobID);
                            jobStatus.IsSPVRequired = false;
                            JobHistory jobHistory = new JobHistory();
                            jobHistory.JobID = jobID;
                            jobHistory.Name = ProjectSession.LoggedInName;
                            //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.RemovedSPVAfterXMLVerification);
                            string JobHistoryMessage = "has removed SPV after verification of installation SPV XML -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                            Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "RemovedSPVAfterXMLVerification", ProjectSession.LoggedInName, false);
                            SortedList<string, string> data = new SortedList<string, string>();
                            bool isSPVRequired = false;
                            bool? isInstallationVerified = null;
                            //bool isRelease = true;
                            data.Add("IsSPVRequired", Convert.ToString(isSPVRequired));
                            //data.Add("IsRelease", Convert.ToString(isRelease));
                            data.Add("IsSPVInstallationVerified", Convert.ToString(isInstallationVerified));
                            //await CommonBAL.SetCacheDataForSTCSubmission(null, jobID, data);
                        }
                    }
                    return Json(jobStatus, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string msg = string.Empty;
                    var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                        .Select(x => new { x.Key, x.Value.Errors });

                    foreach (var erroneousField in erroneousFields)
                    {
                        var fieldKey = erroneousField.Key;
                        var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                        if (!string.IsNullOrEmpty(msg))
                            msg += Environment.NewLine;
                        msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                    }
                    return Json(new { error = true, errorMessage = msg }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                //WriteToLogFile("jobId = " + createJob.BasicDetails.JobID + " Error : " + ex.Message);
                _log.LogException("jobId = " + createJob.BasicDetails.JobID + " Error : ", ex);
                return Json(new { error = true, errorMessage = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// _s the owner signature.
        /// </summary>
        /// <param name="Id">The identifier.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public PartialViewResult _OwnerSignature(string Id, string Type, string SMSOrMail, DateTime LinkSentedDateTime)
        {
            if ((DateTime.Now - LinkSentedDateTime).TotalMinutes > Convert.ToInt32(ConfigurationManager.AppSettings["LinkSendForSignatureExpirationTimeInMinute"]))
            {
                return PartialView("_SignatureLinkExpired");
            }
            else
            {
                CreateJob createJob = GetJobDetailsForInstallerDesignerEleOwnerSignature(Id, SystemEnums.TypeOfSignature.Home_Owner.GetHashCode());
                createJob.Type = Type;
                createJob.SMSOrMail = SMSOrMail;
                return PartialView("_OwnerSignature", createJob);
            }

        }

        /// <summary>
        /// This method used to load view when User click on link for draw signature from mobile  
        /// </summary>
        /// <param name="jobDocId">Job Document Id</param>
        /// <param name="fieldName">Fieldname of Signature in Pdf</param>
        /// <param name="number">Mobile number of user</param>
        /// <returns></returns>
        public PartialViewResult _CaptureUserSignature(string id)
        {
            CaptureUserSign objCaptureUserSign = new CaptureUserSign();
            int CaptureUserSignid = 0;
            //string jobFieldName = "";
            //string mobile = "";
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.QueryStringDecode(id), out CaptureUserSignid);
            }
            //if (!string.IsNullOrEmpty(fieldName))
            //{
            //    jobFieldName =  QueryString.QueryStringDecode(fieldName);
            //}
            //if (!string.IsNullOrEmpty(number))
            //{
            //    mobile = QueryString.QueryStringDecode(number);
            //}

            objCaptureUserSign.id = CaptureUserSignid;
            //objCaptureUserSign.fieldName = jobFieldName;
            //objCaptureUserSign.mobileNumber = mobile;
            return PartialView(objCaptureUserSign);

        }
        /// <summary>
        /// _s the owner signature save.
        /// </summary>
        /// <param name="ownerSignature">ownerSignature</param>
        /// <param name="jobid">jobid</param>
        /// <param name="isUploaded">isUploaded</param>
        /// <param name="stringOwnerBaseSignature">stringOwnerBaseSignature</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="ipAddress">ipAddress</param>
        /// <param name="location">location</param>
        /// <returns>json result</returns>
        [HttpPost]
        public async Task<JsonResult> _OwnerSignatureSave(string Type, string ownerSignature, int jobid, bool isUploaded, string stringOwnerBaseSignature, string latitude, string longitude, string ipAddress, string location, string CompanyName, string Email, string name, string RefNumber, string Base30, string OwnerEmail, string OwnerMobile, string SMSOrMail)
        {
            string path = Path.Combine("JobDocuments" + "\\" + jobid + "\\" + ownerSignature);
            if (isUploaded == false)
            {
                ConvertIntoImage(stringOwnerBaseSignature, jobid);
                if (ownerSignature != "" && ownerSignature != null)
                {
                    _job.GetJobOwnerSignature(jobid, ownerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path);

                }
                else
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }

            }
            else
            {
                if (ownerSignature != "" && ownerSignature != null)
                {
                    _job.GetJobOwnerSignature(jobid, ownerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path);

                }
                else
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }

            }

            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobid);
            FillSignatureAllUser(jobid, "owner_signature", path, Base30, stringOwnerBaseSignature, isUploaded);
            EmailInfo emailInfo = new EmailInfo();

            //live or staging
            emailInfo.TemplateID = 37;

            //local
            //emailInfo.TemplateID = 36;

            emailInfo.SolarCompanyFullName = CompanyName;
            emailInfo.SignatureType = "Owner";
            emailInfo.SignatureCapturedFullName = name;
            emailInfo.ReferenceNumber = RefNumber;

            String[] tempName = name.Split(' ');
            string firstName = tempName[0];
            string lastName = tempName[1];

            _emailBAL.ComposeAndSendEmail(emailInfo, Email, null, null, default(Guid), Convert.ToString(jobid));
            SaveSignatureHistory("Owner", jobid, SMSOrMail, OwnerMobile, OwnerEmail, firstName, lastName);
            _job.SaveSignatureLog(jobid, 1, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? OwnerEmail : OwnerMobile);
            return Json(true, JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// This method is used to fill the signature in pdf 
        /// </summary>
        /// <param name="jobid"></param>
        /// <param name="fieldname"></param>
        /// <param name="path"></param>
        /// <param name="base30"></param>
        /// <param name="base64"></param>
        /// <param name="isUploaded"></param>
        private void FillSignatureAllUser(int jobid, string fieldname, string path, string base30, string base64, bool isUploaded)
        {
            DataSet dsDocument = _documentsBAL.GetDocumentsAll("", "STC", jobid);
            IList<FormBot.Entity.Documents.DocumentsView> lstDocuments = null;
            if (dsDocument != null && dsDocument.Tables.Count > 0 && dsDocument.Tables[1] != null && dsDocument.Tables[1].Rows.Count > 0)
            {
                lstDocuments = dsDocument.Tables[0].ToListof<DocumentsView>();
            }
            var STCDocumentList = lstDocuments.Where(m => m.Type == "STC");
            foreach (var document in STCDocumentList)
            {
                string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + document.Path);

                if (System.IO.File.Exists(documentFullPath))
                {
                    MemoryStream memStream = new MemoryStream();

                    if (System.IO.File.Exists(documentFullPath))
                    {
                        using (FileStream fileStream = System.IO.File.OpenRead(documentFullPath))
                        {

                            memStream.SetLength(fileStream.Length);
                            fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
                        }
                        PdfReader pdfReader = null;
                        PdfStamper pdfStamper = null;
                        try
                        {
                            pdfReader = new PdfReader(memStream);

                            Type type = typeof(PdfReader);
                            FieldInfo info = type.GetField("unethicalreading", BindingFlags.Public | BindingFlags.Static);
                            info.SetValue(pdfReader, true);
                            pdfStamper = new PdfStamper(pdfReader, new FileStream(documentFullPath, FileMode.Create, FileAccess.ReadWrite));
                            AcroFields pdfFormFields = pdfStamper.AcroFields;
                            foreach (var field in pdfFormFields.Fields)
                            {
                                if (field.Key.ToLower() == fieldname)
                                {
                                    PdfItems k = new PdfItems(0, field.Key, pdfFormFields.GetField(Convert.ToString(field.Key)), pdfFormFields.GetFieldType(Convert.ToString(field.Key)));

                                    if (isUploaded)
                                    {
                                        using (System.Drawing.Image image = System.Drawing.Image.FromFile(Path.Combine(ProjectSession.ProofDocuments + "\\" + path)))
                                        {
                                            using (MemoryStream m = new MemoryStream())
                                            {
                                                image.Save(m, image.RawFormat);
                                                byte[] imageBytes = m.ToArray();
                                                string base64String = Convert.ToBase64String(imageBytes);
                                                k.Value = "data:image/png;base64," + base64String;
                                                k.Base64 = "data:image/png;base64," + base64String;
                                            }
                                        }

                                    }
                                    else
                                    {
                                        k.Value = base30;
                                        k.Base64 = base64.Replace(' ', '+');
                                    }
                                    _job.FillSignature(k, null, false, pdfFormFields, pdfStamper);
                                }
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            if (pdfStamper != null)
                                pdfStamper.Close();
                            if (pdfReader != null)
                                pdfReader.Close();
                            memStream.Close();
                            memStream.Dispose();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// This method is used to store history of capture signature
        /// </summary>
        /// <param name="SignatureType"></param>
        /// <param name="JobId"></param>
        /// <param name="Type">SMS or Mobile</param>
        /// <param name="mobile"></param>
        /// <param name="email"></param>
        /// <param name="Firstname"></param>
        /// <param name="Lastname"></param>
        /// <param name="DocName"></param>
        /// <returns></returns>
        private bool SaveSignatureHistory(string SignatureType, int JobId, string Type, string mobile, string email, string Firstname = "", string Lastname = "", string DocName = "")
        {
            try
            {
                SignatureApproved objSigApp = new SignatureApproved();
                objSigApp.SinatureType = SignatureType;
                objSigApp.Type = Type == "S" ? "Sms" : "Email";
                objSigApp.MobileNumber = (Type == "S" ? mobile : email);
                objSigApp.JobId = JobId.ToString();
                //string JobHistoryMessage = objSigApp.SinatureType + " Signature request made through "+objSigApp.Type + " - " +objSigApp.MobileNumber + " is approved.";

                string JobHistoryMessage = "<span class=\"blue-title\">" + Firstname + " " + Lastname + "(" + SignatureType + ")" + " </span>has completed and signed a signature request with <span style=\"color:black\">" + objSigApp.Type + " - " + objSigApp.MobileNumber + "</span> for-<b style=\"color:black\">JobRefNo (" + JobId + ")  </b>";
                //string description = "Signature request made through <span class=\"blue-title\">" + objSigApp.Type + " - " + objSigApp.MobileNumber + "</span> has been completed by the <span class=\"blue-title\">" + objSigApp.SinatureType + "</span>";
                Common.SaveJobHistorytoXML(JobId, JobHistoryMessage, "Signature", "SignatureApproved", ProjectSession.LoggedInName, false, null);
                return true;
            }
            catch (Exception e)
            {
                return false;
            }
            //return _jobHistory.LogJobHistory(objSigApp, HistoryCategory.SignatureApproved);
        }

        /// <summary>
        /// Converts the into image.
        /// </summary>
        /// <param name="ownerBaseSignature">The owner base signature.</param>
        /// <param name="jobid">The job.</param>
        /// <returns>view result</returns>
        [HttpPost]
        public JsonResult ConvertIntoImage(string ownerBaseSignature, int jobid, int typeOfSignature = 0)
        {
            string Signature = ownerBaseSignature;
            byte[] bytIn = null;
            if (Signature != null)
            {
                Signature = Signature.Replace("image/png;base64,", "").Replace(' ', '+');
                bytIn = Convert.FromBase64String(Signature);
            }

            System.Drawing.Image img;
            using (var ms = new MemoryStream(bytIn))
            {
                img = System.Drawing.Image.FromStream(ms);
            }

            string FileName = string.Empty;
            if (typeOfSignature == 0)
            {
                FileName = "OwnerSign" + "_" + jobid + "." + "Png";
            }
            else
            {
                if (typeOfSignature == 3)
                {
                    FileName = "ElectricianSign" + "_" + jobid + "." + "Png";
                }
                if (typeOfSignature == 2)
                {
                    FileName = "InstallerSign" + "_" + jobid + "." + "Png";
                }
                if (typeOfSignature == 4)
                {
                    FileName = "DesignerSign" + "_" + jobid + "." + "Png";
                }
            }

            string proofDocumentsFolder = ProjectSession.ProofDocuments;
            string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + jobid + "\\");
            if (!Directory.Exists(ProofDocumentsFolder))
            {
                Directory.CreateDirectory(ProofDocumentsFolder);
            }

            string path = Path.Combine(ProofDocumentsFolder + "\\" + FileName);
            DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobid, FileName));

            if (typeOfSignature == 0)
            {
                img.Save(path);
            }
            else
            {
                Bitmap bm = new Bitmap(img);
                bm.Save(path, System.Drawing.Imaging.ImageFormat.Png);
            }
            return Json(FileName, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the user.
        /// </summary>
        /// <param name="isInstaller">The is installer.</param>
        /// <param name="existUserId">The exist user identifier.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public JsonResult GetSEUser(string isInstaller, int existUserId)
        {
            List<SelectListItem> Items = _job.GetSEUser(Convert.ToBoolean(isInstaller), ProjectSession.SolarCompanyId, existUserId).Select(a => new SelectListItem { Text = a.Name, Value = a.UserId.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the user WithStatus.
        /// </summary>
        /// <param name="isInstaller">The is installer.</param>
        /// <param name="existUserId">The exist user identifier.</param>
        /// <param name="solarCompanyId">solarCompanyId.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public JsonResult GetSEUserWithStatus(string isInstaller, int existUserId, string solarCompanyId = "")
        {
            int companyId = 0;

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
                companyId = string.IsNullOrEmpty(solarCompanyId) ? 0 : Convert.ToInt32(solarCompanyId);
            else
                companyId = ProjectSession.SolarCompanyId;

            List<SelectListItem> Items = _job.GetSEUserWithStatus(Convert.ToBoolean(isInstaller), companyId, existUserId).Select(a => new SelectListItem { Text = a.Name, Value = a.UserId.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the type of the job.
        /// </summary>
        /// <returns>view result</returns>
        [HttpGet]
        public JsonResult GetJobType()
        {
            Array values = Enum.GetValues(typeof(Helper.SystemEnums.JobType));
            List<SelectListItem> items = new List<SelectListItem>(values.Length);
            items.Add(new SelectListItem() { Text = Helper.SystemEnums.JobType.PVD.ToString(), Value = Convert.ToString((int)Helper.SystemEnums.JobType.PVD) });
            items.Add(new SelectListItem() { Text = Helper.SystemEnums.JobType.SWH.ToString(), Value = Convert.ToString((int)Helper.SystemEnums.JobType.SWH) });
            return Json(items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the job stage.
        /// </summary>
        /// <returns>List of Job Stage</returns>
        [HttpGet]
        public JsonResult GetJobStage()
        {
            List<SelectListItem> Items = null;

            if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9)
            {
                Items = _job.GetJobStage().Where(t => t.JobStageId == 3 || t.JobStageId == 4 || t.JobStageId == 9)
                    .Select(a => new SelectListItem { Text = a.StageName, Value = a.JobStageId.ToString() }).ToList();
            }
            else
            {
                Items = _job.GetJobStage().Select(a => new SelectListItem { Text = a.StageName, Value = a.JobStageId.ToString() }).ToList();
            }

            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the priority.
        /// </summary>
        /// <returns>view result</returns>
        [HttpGet]
        public JsonResult GetPriority()
        {
            List<SelectListItem> Items = new List<SelectListItem>();
            Items.Add(new SelectListItem() { Text = Helper.SystemEnums.JobPriority.High.ToString(), Value = Convert.ToString((int)Helper.SystemEnums.JobPriority.High) });
            Items.Add(new SelectListItem() { Text = Helper.SystemEnums.JobPriority.Normal.ToString(), Value = Convert.ToString((int)Helper.SystemEnums.JobPriority.Normal) });
            Items.Add(new SelectListItem() { Text = Helper.SystemEnums.JobPriority.Low.ToString(), Value = Convert.ToString((int)Helper.SystemEnums.JobPriority.Low) });
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the job number.
        /// </summary>
        /// <param name="jobType">Type of the job.</param>
        /// <returns>object result</returns>
        [HttpGet]
        public JsonResult GetJobNumber(string jobType)
        {
            string jobNumber = string.Empty;
            if (jobType == "1")
            {
                DataSet dataSet = _job.CreateJobNumber((int)Helper.SystemEnums.JobType.PVD, ProjectSession.SolarCompanyId);
                if (dataSet != null && dataSet.Tables.Count > 0)
                {
                    jobNumber = dataSet.Tables[0].Rows[0].ItemArray[0].ToString();
                }

            }
            else if (jobType == "2")
            {
                DataSet dataSet = _job.CreateJobNumber((int)Helper.SystemEnums.JobType.SWH, ProjectSession.SolarCompanyId);
                if (dataSet != null && dataSet.Tables.Count > 0)
                {
                    jobNumber = dataSet.Tables[0].Rows[0].ItemArray[0].ToString();
                }

            }

            return Json(jobNumber, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the electricity provider.
        /// </summary>
        /// <returns>object result</returns>
        [HttpGet]
        public JsonResult GetElectricityProvider()
        {
            List<SelectListItem> Items = _job.GetElectricityProvider().Select(a => new SelectListItem { Text = a.Provider, Value = a.ElectricityProviderId.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the deeming period.
        /// </summary>
        /// <param name="year">The year.</param>
        /// <returns>object result</returns>
        [HttpGet]
        public JsonResult GetDeemingPeriod(string year)
        {
            //int jobYear = DateTime.Now.Year;
            //if (!string.IsNullOrEmpty(year))
            //{
            //    int.TryParse(year, out jobYear);
            //}

            //List<SelectListItem> Items = _job.GetDeemingPeriod(jobYear).Select(a => new SelectListItem { Text = a, Value = a }).ToList();
            List<SelectListItem> Items = _jobRules.GetDeemingPeriod(year);
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Calculates system.
        /// </summary>
        /// <param name="sguType">Type of the system.</param>
        /// <param name="expectedInstallDate">The expected install date.</param>
        /// <param name="deemingPeriod">The deeming period.</param>
        /// <param name="postcode">The postcode.</param>
        /// <param name="systemsize">The system size.</param>
        /// <returns>object result</returns>
        [AllowAnonymous]
        public JsonResult CalculateSTC(string sguType, string expectedInstallDate, string deemingPeriod, string postcode, string systemsize)
        {
            //DateTime dtUtc = Convert.ToDateTime(expectedInstallDate);
            //string resp;
            //System.Net.WebRequest req = System.Net.WebRequest.Create(ProjectSession.CalculateSTCUrl);
            //req.ContentType = "application/json; charset=UTF-8";
            //req.Method = "POST";
            //using (var streamWriter = new StreamWriter(req.GetRequestStream()))
            //{
            //    deemingPeriod = deemingPeriod.Replace(" ", "_");
            //    string json = "{\"sguType\":\"" + sguType + "\",\"expectedInstallDate\":\"" + dtUtc.ToString("yyyy-MM-dd") + "T00:00:00.000Z" + "\",\"ratedPowerOutputInKw\":" + systemsize + ",\"deemingPeriod\":\"" + deemingPeriod.ToUpper() + "\",\"postcode\":\"" + postcode + "\",\"sguDisclaimer\":true}";
            //    streamWriter.Write(json);
            //    streamWriter.Flush();
            //}

            //var httpResponse = (HttpWebResponse)req.GetResponse();
            //using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            //{
            //    resp = streamReader.ReadToEnd();
            //}
            KeyValuePair<bool, string> keyValue = _jobRules.CalculateSTC(sguType, expectedInstallDate, deemingPeriod, postcode, systemsize, ProjectSession.CalculateSTCUrl);
            string resp = keyValue.Key ? keyValue.Value : keyValue.Key.ToString();
            return Json(resp, JsonRequestBehavior.AllowGet);

        }

        /// <summary>
        /// Calculates the SWHSTC.
        /// </summary>
        /// <param name="expectedInstallDate">The expected install date.</param>
        /// <param name="postcode">The postcode.</param>
        /// <param name="systemBrand">The system brand.</param>
        /// <param name="systemModel">The system model.</param>
        /// <returns>calculate size</returns>
        [AllowAnonymous]
        public JsonResult CalculateSWHSTC(string expectedInstallDate, string postcode, string systemBrand, string systemModel)
        {
            //DateTime dtUtc = Convert.ToDateTime(expectedInstallDate);
            //string resp;
            //System.Net.WebRequest req = System.Net.WebRequest.Create(ProjectSession.CalculateSWHSTCUrl);
            //req.ContentType = "application/json; charset=UTF-8";
            //req.Method = "POST";
            //using (var streamWriter = new StreamWriter(req.GetRequestStream()))
            //{
            //    string json = "{\"postcode\":\"" + postcode + "\",\"systemBrand\":\"" + systemBrand + "\",\"systemModel\":\"" + systemModel + "\",\"installationDate\":\"" + dtUtc.ToString("yyyy-MM-dd") + "T00:00:00.000Z\"}";
            //    streamWriter.Write(json);
            //    streamWriter.Flush();
            //}

            //var httpResponse = (HttpWebResponse)req.GetResponse();
            //using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            //{
            //    resp = streamReader.ReadToEnd();
            //}
            KeyValuePair<bool, string> keyValue = _jobRules.CalculateSWHSTC(expectedInstallDate, postcode, systemBrand, systemModel, ProjectSession.CalculateSWHSTCUrl);
            string resp = keyValue.Value;
            return Json(resp, JsonRequestBehavior.AllowGet);

        }

        /// <summary>
        /// Gets the panel brand.
        /// </summary>
        /// <param name="Mode">The mode.</param>
        /// <param name="CertificateHolder">The certificate holder.</param>
        /// <param name="JobType">Type of the job.</param>
        /// <returns>object name</returns>
        [HttpGet]
        public JsonResult GetPanelBrand(string Mode, string CertificateHolder, string JobType)
        {
            List<SelectListItem> Items = new List<SelectListItem>();
            if (JobType == "1")
            {
                Items = _job.GetPanel(Mode, CertificateHolder, JobType).Select(a => new SelectListItem { Text = a.CertificateHolder, Value = a.CertificateHolder.ToString() }).ToList();
            }
            else
            {
                Items = _job.GetHWPanel(Mode, CertificateHolder, JobType).Select(a => new SelectListItem { Text = a.Brand, Value = a.Brand.ToString() }).ToList();
            }

            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the panel model.
        /// </summary>
        /// <param name="mode">The mode.</param>
        /// <param name="certificateHolder">The certificate holder.</param>
        /// <param name="jobType">Type of the job.</param>
        /// <returns>object result</returns>
        [HttpGet]
        public JsonResult GetPanelModel(string mode, string certificateHolder, string jobType)
        {
            List<SelectListItem> Items = new List<SelectListItem>();
            if (jobType == "1")
            {
                Items = _job.GetPanel(mode, certificateHolder, jobType).Select(a => new SelectListItem { Text = a.ModelNumber, Value = a.ModelNumber.ToString() }).ToList();
            }
            else
            {
                Items = _job.GetHWPanel(mode, certificateHolder, jobType).Select(a => new SelectListItem { Text = a.Model, Value = a.Model.ToString() }).ToList();
            }

            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetSupplierByManufacturer(string ManufacturerName)
        {
            List<SelectListItem> lstSupplier = new List<SelectListItem>();
            try
            {
                lstSupplier = _spvVerificationBAL.GetSupplierByManufacturer(ManufacturerName).Select(x => new SelectListItem() { Text = x, Value = x }).ToList();
            }
            catch (Exception ex)
            {
                _log.LogException(SystemEnums.Severity.Error, $"Method Name : GetSupplierByManufacturer Parameters ManufacturerName = {ManufacturerName}", ex);
            }
            return Json(lstSupplier, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// Get Inverter Brand  list
        /// </summary>
        /// <param name="mode">mode field</param>
        /// <param name="search">searchfield</param>
        /// <returns>result object</returns>
        [HttpGet]
        public JsonResult GetInverterBrand(string mode, string search)
        {
            List<SelectListItem> Items = _job.GetJobInverter(mode, search).Select(a => new SelectListItem { Text = a.Manufacturer, Value = a.Manufacturer.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the inverter model.
        /// </summary>
        /// <param name="mode">The mode.</param>
        /// <param name="search">The search.</param>
        /// <returns>object result</returns>
        [HttpGet]
        public JsonResult GetInverterModel(string mode, string search, string Manufacturer)
        {
            List<SelectListItem> Items = _job.GetJobInverter(mode, search, Manufacturer).Select(a => new SelectListItem { Text = a.Series, Value = a.Series.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the inverter series.
        /// </summary>
        /// <param name="mode">The mode.</param>
        /// <param name="search">The search.</param>
        /// <param name="manufacturer">The manufacturer.</param>
        /// <returns>result object</returns>
        [HttpGet]
        public JsonResult GetInverterSeries(string mode, string search, string manufacturer = null)
        {
            List<SelectListItem> Items = _job.GetJobInverter(mode, search, manufacturer).Select(a => new SelectListItem { Text = a.ModelNumber, Value = a.ModelNumber.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Uploads the job sign.
        /// </summary>
        /// <param name="userId">The user identifier.</param>
        /// <returns>result object</returns>
        [HttpPost]
        public JsonResult Upload(string userId)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    uploadStatus.Add(GetFileUpload(Request.Files[i], userId));

                }
            }

            return Json(uploadStatus);
        }

        /// <summary>
        /// This method is used to upload user signature
        /// </summary>
        /// <returns> Base64 string for uploaded image</returns>
        [HttpPost]
        public JsonResult UploadUserSigature()
        {
            string base64String = "";
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    System.IO.Stream fs = Request.Files[i].InputStream;
                    System.IO.BinaryReader br = new System.IO.BinaryReader(fs);
                    Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                    base64String = "data:image/png;base64," + Convert.ToBase64String(bytes, 0, bytes.Length);
                }
            }

            return Json(base64String);
        }

        /// <summary>
        /// This method is used to save the signature of user
        /// </summary>
        /// <param name="jobDocId">JobDocumentId</param>
        /// <param name="signstring">Base30 or Base64 String</param>
        /// <param name="IsImage">Upload or Draw Signature</param>
        /// <param name="fieldName">jobFieldName</param>
        /// <param name="mobileNo">Mobile Number of User who Sign</param>
        /// <returns></returns>

        [HttpPost]
        public JsonResult UserSignatureSave(string id, string signstring, bool IsImage, string base64 = "")
        {
            DataSet ds = _job.InsertUserSignature("0", id, signstring, IsImage);
            int jobDocId = Convert.ToInt32(ds.Tables[0].Rows[0]["JobDocId"]);
            if (ds.Tables[0].Rows.Count > 0)
            {
                DataTable dt = _documentsBAL.GetJobDocumentPath(jobDocId);
                int jobId = Convert.ToInt32(dt.Rows[0][1]);
                string path = Convert.ToString(dt.Rows[0][0]);
                string jsonData = Convert.ToString(dt.Rows[0]["JsonData"]);
                string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + path);
                int SignatureType = Convert.ToInt32(ds.Tables[0].Rows[0]["SignatureType"]);
                if (SignatureType == SystemEnums.SignatureType.Mobile.GetHashCode())
                {
                    SaveSignatureHistory("", jobId, "S", ds.Tables[0].Rows[0]["MobileNumber"].ToString(), ds.Tables[0].Rows[0]["Email"].ToString(), ds.Tables[0].Rows[0]["Firstname"].ToString(), ds.Tables[0].Rows[0]["Lastname"].ToString(), Path.GetFileName(documentFullPath));
                }
                else
                {
                    SaveSignatureHistory("", jobId, "E", ds.Tables[0].Rows[0]["MobileNumber"].ToString(), ds.Tables[0].Rows[0]["Email"].ToString(), ds.Tables[0].Rows[0]["Firstname"].ToString(), ds.Tables[0].Rows[0]["Lastname"].ToString(), Path.GetFileName(documentFullPath));
                }



                MemoryStream memStream = new MemoryStream();
                using (FileStream fileStream = System.IO.File.OpenRead(documentFullPath))
                {

                    memStream.SetLength(fileStream.Length);
                    fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
                }
                PdfReader pdfReader = null;
                PdfStamper pdfStamper = null;
                try
                {
                    pdfReader = new PdfReader(memStream);

                    Type type = typeof(PdfReader);
                    FieldInfo info = type.GetField("unethicalreading", BindingFlags.Public | BindingFlags.Static);
                    info.SetValue(pdfReader, true);
                    pdfStamper = new PdfStamper(pdfReader, new FileStream(documentFullPath, FileMode.Create, FileAccess.ReadWrite));
                    AcroFields pdfFormFields = pdfStamper.AcroFields;

                    foreach (var field in pdfFormFields.Fields)
                    {
                        if (field.Key == ds.Tables[0].Rows[0]["Fieldname"].ToString())
                        {
                            PdfItems k = new PdfItems(0, field.Key, pdfFormFields.GetField(Convert.ToString(field.Key)), pdfFormFields.GetFieldType(Convert.ToString(field.Key)));
                            k.Value = signstring;
                            if (IsImage)
                            {
                                k.Base64 = signstring;
                            }
                            else
                            {
                                k.Base64 = base64;
                            }
                            _job.FillSignature(k, null, false, pdfFormFields, pdfStamper);
                            List<PdfItems> lstPdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(jsonData);
                            var pdfItem = lstPdfItems.Where(m => m.FieldName.Equals(field.Key)).Select(m => { m.Base64 = k.Base64; m.Value = k.Value; return m; }).ToList();
                            DocumentsView objDocumentView = new DocumentsView();
                            objDocumentView.CreatedBy = ProjectSession.LoggedInUserId;
                            objDocumentView.CreatedDate = DateTime.Now;
                            objDocumentView.DocumentId = Convert.ToInt32(0);
                            objDocumentView.JsonData = Newtonsoft.Json.JsonConvert.SerializeObject(lstPdfItems);
                            objDocumentView.JobDocumentId = jobDocId;
                            _job.CreateJobDocuments(objDocumentView, false);
                        }
                    }

                    return Json(true, JsonRequestBehavior.AllowGet);
                }
                catch (Exception ex)
                {
                    return Json(false, JsonRequestBehavior.AllowGet);
                }
                finally
                {
                    if (pdfStamper != null)
                        pdfStamper.Close();
                    if (pdfReader != null)
                        pdfReader.Close();
                    memStream.Close();
                    memStream.Dispose();
                }
            }
            return Json(false, JsonRequestBehavior.AllowGet);
        }



        /// <summary>
        /// This function is used to get detail of signature capture like firstname,mobile etc.
        /// </summary>
        /// <param name="jobDocId"></param>
        /// <param name="fieldname"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GetCaptureUserSignDetail(string jobDocId, string fieldname)
        {
            DataSet ds = _job.GetCaptureUserSignDetail(jobDocId, fieldname);
            try
            {
                var firstname = "";
                var lastname = "";
                var mobilenumber = "";
                var email = "";
                bool isData = false;

                if (ds.Tables[0].Rows.Count > 0)
                {
                    firstname = ds.Tables[0].Rows[0]["Firstname"].ToString();
                    lastname = ds.Tables[0].Rows[0]["Lastname"].ToString();
                    mobilenumber = ds.Tables[0].Rows[0]["MobileNumber"].ToString();
                    email = ds.Tables[0].Rows[0]["Email"].ToString();
                    isData = true;
                }

                return Json(new { status = true, firstname = firstname, lastname = lastname, mobilenumber = mobilenumber, email = email, isData = isData }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception EX)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Uploads the invoice.
        /// </summary>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>result object</returns>
        [HttpPost]
        public JsonResult UploadInvoice(string guid, string jobId, int isGSTDocument = 0)
        {
            string[] allowedType = new string[] { ".png", ".jpg", ".jpeg", ".gif", ".doc", ".docx", ".xls", ".csv", ".pdf", ".txt" };
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    if (allowedType.Contains(Path.GetExtension(((System.Web.HttpPostedFileWrapper)(Request.Files[i])).FileName).ToLower()))
                    {
                        if (isGSTDocument == 0)
                            uploadStatus.Add(GetInvoiceUpload(Request.Files[i], guid, jobId));
                        else
                            uploadStatus.Add(GetGSTDocumentUpload(Request.Files[i], guid, jobId));
                        if (uploadStatus.Count > 0 && uploadStatus.FirstOrDefault().Status != false)
                        {
                            JobHistory objJobHistory = new JobHistory()
                            {
                                JobID = Convert.ToInt32(jobId),
                                HistoryMessage = Request.Files[i].FileName,
                                DocumentName = Request.Files[i].FileName,
                                DocumentPath = isGSTDocument == 0 ? jobId + "\\" + "Invoice" : jobId + "\\" + "GST"
                            };
                            string HistoryMessage = objJobHistory.HistoryMessage;
                            string Documentname = objJobHistory.DocumentName;
                            string Documentpath = objJobHistory.DocumentPath;

                            //string JobHistoryMessage = "has added a new document - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>";
                            string JobHistoryMessage = "has added a new document: <a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> in <span class=\"blue-title\"> " + "GST Document" + "  </span>.";
                            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Uploaded", ProjectSession.LoggedInName, false, null);
                        }
                    }
                    else
                    {
                        HelperClasses.UploadStatus uploadStatusF = new HelperClasses.UploadStatus();
                        uploadStatusF.Status = false;
                        uploadStatusF.Message = "File Type Not Allowed.";
                        uploadStatus.Add(uploadStatusF);
                    }
                }
            }
            return Json(uploadStatus);
        }

        /// <summary>
        /// Gets the invoice upload.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>upload class</returns>
        public HelperClasses.UploadStatus GetInvoiceUpload(HttpPostedFileBase fileUpload, string guid, string jobId)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;
            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);
                    fileName = guid + "_" + fileName;
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;

                    if (!string.IsNullOrEmpty(guid))
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + jobId + "\\" + "Invoice" + "\\");
                        proofDocumentsFolderURL = proofDocumentsFolderURL + "\\" + "JobDocuments" + "\\" + jobId + "\\" + "Invoice" + "\\";
                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));
                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                    i++;
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }
                            }
                            fileName = Path.GetFileName(path);
                        }

                        fileName = fileName.Replace("%", "$");
                        string mimeType = MimeMapping.GetMimeMapping(fileName);
                        fileUpload.SaveAs(path);
                        uploadStatus.Status = true;
                        uploadStatus.Message = "File Uploaded Successfully.";
                        uploadStatus.FileName = fileName;
                        uploadStatus.MimeType = mimeType;
                        uploadStatus.Path = proofDocumentsFolder + uploadStatus.FileName;
                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }
                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }

            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }

        /// <summary>
        /// Gets the file upload.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="userId">The user identifier.</param>
        /// <returns>result class</returns>
        public HelperClasses.UploadStatus GetFileUpload(HttpPostedFileBase fileUpload, string userId)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;
            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;
                    if (userId != null)
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + userId + "\\");
                        proofDocumentsFolderURL = proofDocumentsFolderURL + "\\" + "JobDocuments" + "\\" + userId + "\\";
                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));
                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                {
                                    i++;
                                }
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }
                            }
                            fileName = Path.GetFileName(path);
                        }

                        fileName = fileName.Replace("%", "$");
                        string mimeType = MimeMapping.GetMimeMapping(fileName);
                        fileUpload.SaveAs(path);
                        uploadStatus.Status = true;
                        uploadStatus.Message = "File Uploaded Successfully.";
                        uploadStatus.FileName = fileName;
                        uploadStatus.MimeType = mimeType;
                        uploadStatus.Path = proofDocumentsFolder + uploadStatus.FileName;
                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }
                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }
            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }
            return uploadStatus;
        }

        /// <summary>
        /// Deletes the file from folder.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="FolderName">Folder Name.</param>
        /// <returns>result</returns>
        [AllowAnonymous]
        public JsonResult DeleteFileFromFolder(string fileName, string FolderName)
        {
            DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + FolderName, fileName));
            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the file from folder and electrician.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="folderName">Name of the folder.</param>
        /// <param name="oldEleSign">The old ele sign.</param>
        /// <returns>object result</returns>
        [AllowAnonymous]
        public JsonResult DeleteFileFromFolderAndElectrician(string fileName, string folderName, string oldEleSign)
        {
            if (oldEleSign != fileName && fileName != null)
            {
                DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + folderName, fileName));
            }

            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the file from invoice folder.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="folderName">Name of the folder.</param>
        /// <param name="oldInvoiceFile">The old invoice file.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        public JsonResult DeleteFileFromInvoiceFolder(string fileName, string folderName, string oldInvoiceFile)
        {
            if (oldInvoiceFile != fileName && fileName != null)
            {
                DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + folderName + "\\" + "Invoice", fileName));
            }

            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the file by identifier.
        /// </summary>
        /// <param name="userDocumentID">The user document identifier.</param>
        /// <param name="userId">The user identifier.</param>
        /// <param name="documentpath">The documentpath.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        public JsonResult DeleteFileByID(int userDocumentID, int userId, string documentpath)
        {
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the electrician detail by installer.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        public JsonResult GetElectricianDetailbyInstaller(int id = 0)
        {
            //var dsUsers = _userBAL.GetUserById(id);
            var dsUsers = _userBAL.GetInstallerDesignerById(id);
            string dsUsersTabel = string.Empty;
            if (dsUsers != null && dsUsers.Tables[0] != null && dsUsers.Tables.Count > 0)
            {
                try
                {
                    dsUsers.Tables[0].AsEnumerable().ToList().ForEach(d => dsUsersTabel += (!string.IsNullOrEmpty(dsUsersTabel) ? ",{" : "{") +
                                                                "\"CompanyName\"" + ":\"" + (Convert.ToString(d.Field<string>("CompanyName")) + "\"," +
                                                                "\"FirstName\"" + ":\"" + Convert.ToString(d.Field<string>("FirstName")) + "\"," +
                                                                "\"LastName\"" + ":\"" + Convert.ToString(d.Field<string>("LastName")) + "\"," +
                                                               "\"Email\"" + ":\"" + Convert.ToString(d.Field<string>("Email")) + "\"," +
                                                               "\"Phone\"" + ":\"" + Convert.ToString(d.Field<string>("Phone")) + "\"," +
                                                               "\"Mobile\"" + ":\"" + Convert.ToString(d.Field<string>("Mobile")) + "\"," +
                                                              "\"IsPostalAddress\"" + ":\"" + Convert.ToString(d.Field<bool>("IsPostalAddress")) + "\"," +
                                                               "\"PostalDeliveryNumber\"" + ":\"" + Convert.ToString(d.Field<string>("PostalDeliveryNumber")) + "\"," +
                                                               "\"PostalAddressID\"" + ":\"" + Convert.ToString(d.Field<int>("PostalAddressID")) + "\"," +
                                                               "\"UnitTypeID\"" + ":\"" + Convert.ToString(d.Field<int>("UnitTypeID")) + "\"," +
                                                               "\"UnitNumber\"" + ":\"" + Convert.ToString(d.Field<string>("UnitNumber")) + "\"," +
                                                               "\"StreetNumber\"" + ":\"" + Convert.ToString(d.Field<string>("StreetNumber")) + "\"," +
                                                               "\"StreetName\"" + ":\"" + Convert.ToString(d.Field<string>("StreetName")) + "\"," +
                                                               "\"StreetTypeID\"" + ":\"" + Convert.ToString(d.Field<int>("StreetTypeID")) + "\"," +
                                                               "\"Town\"" + ":\"" + Convert.ToString(d.Field<string>("Town")) + "\"," +
                                                               "\"State\"" + ":\"" + Convert.ToString(d.Field<string>("State")) + "\"," +
                                                               "\"PostCode\"" + ":\"" + Convert.ToString(d.Field<string>("PostCode")) + "\"," +
                                                               "\"UserID\"" + ":\"" + Convert.ToInt32(d.Field<int>("UserID")) + "\"," +
                                                               "\"Signature\"" + ":\"" + Convert.ToString(d.Field<string>("Signature")) + "\"," +
                                                               "\"InstallerID\"" + ":\"" + Convert.ToInt32(d.Field<int>("InstallerDesignerId")) + "\"," +
                                                                "\"ElectricalContractorsLicenseNumber\"" + ":\"" + Convert.ToString(d.Field<string>("ElectricalContractorsLicenseNumber")) + "\"}"));
                    dsUsersTabel = !string.IsNullOrEmpty(dsUsersTabel) ? "[" + dsUsersTabel + "]" : "";
                }
                catch (Exception ex)
                {


                }

                return Json(dsUsersTabel, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Gets the electrician detailb y solarcompany.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        public JsonResult GetElectricianDetailbySolarcompany(int id, int jobType = 1)
        {
            DataSet dataset = _job.GetElectricianBySolarCompanyID(ProjectSession.SolarCompanyId, true, id, 0, jobType);
            string dsUsersTabel = string.Empty;
            if (dataset != null && dataset.Tables[0] != null && dataset.Tables.Count > 0)
            {
                if (jobType == 1)
                {
                    dataset.Tables[0].AsEnumerable().ToList().ForEach(d => dsUsersTabel += (!string.IsNullOrEmpty(dsUsersTabel) ? ",{" : "{") +
                                                                     "\"CompanyName\"" + ":\"" + (Convert.ToString(d.Field<string>("CompanyName")) + "\"," +
                                                                     "\"FirstName\"" + ":\"" + Convert.ToString(d.Field<string>("FirstName")) + "\"," +
                                                                     "\"LastName\"" + ":\"" + Convert.ToString(d.Field<string>("LastName")) + "\"," +
                                                                    "\"Email\"" + ":\"" + Convert.ToString(d.Field<string>("Email")) + "\"," +
                                                                    "\"Phone\"" + ":\"" + Convert.ToString(d.Field<string>("Phone")) + "\"," +
                                                                    "\"Mobile\"" + ":\"" + Convert.ToString(d.Field<string>("Mobile")) + "\"," +
                                                                    "\"IsPostalAddress\"" + ":\"" + Convert.ToString(d.Field<bool?>("IsPostalAddress")) + "\"," +
                                                                    "\"PostalDeliveryNumber\"" + ":\"" + Convert.ToString(d.Field<string>("PostalDeliveryNumber")) + "\"," +
                                                                    "\"PostalAddressID\"" + ":\"" + Convert.ToString(d.Field<int?>("PostalAddressID")) + "\"," +
                                                                    "\"UnitTypeID\"" + ":\"" + Convert.ToString(d.Field<byte?>("UnitTypeID")) + "\"," +
                                                                    "\"UnitNumber\"" + ":\"" + Convert.ToString(d.Field<string>("UnitNumber")) + "\"," +
                                                                    "\"StreetNumber\"" + ":\"" + Convert.ToString(d.Field<string>("StreetNumber")) + "\"," +
                                                                    "\"StreetName\"" + ":\"" + Convert.ToString(d.Field<string>("StreetName")) + "\"," +
                                                                    "\"StreetTypeID\"" + ":\"" + Convert.ToString(d.Field<byte?>("StreetTypeID")) + "\"," +
                                                                    "\"Town\"" + ":\"" + Convert.ToString(d.Field<string>("Town")) + "\"," +
                                                                    "\"State\"" + ":\"" + Convert.ToString(d.Field<string>("State")) + "\"," +
                                                                    "\"PostCode\"" + ":\"" + Convert.ToString(d.Field<string>("PostCode")) + "\"," +
                                                                    "\"Signature\"" + ":\"" + Path.GetFileName(Convert.ToString(d.Field<string>("Signature"))) + "\"," +
                                                                    "\"JobElectricianID\"" + ":\"" + Convert.ToInt32(d.Field<int>("JobElectricianID")) + "\"," +
                                                                     "\"ElectricalContractorsLicenseNumber\"" + ":\"" + Convert.ToString(d.Field<string>("LicenseNumber")) + "\"}"));
                }
                else if (jobType == 2)
                {
                    dataset.Tables[0].AsEnumerable().ToList().ForEach(d => dsUsersTabel += (!string.IsNullOrEmpty(dsUsersTabel) ? ",{" : "{") +
                                                                     "\"FirstName\"" + ":\"" + (Convert.ToString(d.Field<string>("FirstName")) + "\"," +
                                                                     "\"LastName\"" + ":\"" + Convert.ToString(d.Field<string>("LastName")) + "\"," +
                                                                    "\"Email\"" + ":\"" + Convert.ToString(d.Field<string>("Email")) + "\"," +
                                                                    "\"Phone\"" + ":\"" + Convert.ToString(d.Field<string>("Phone")) + "\"," +
                                                                    "\"Mobile\"" + ":\"" + Convert.ToString(d.Field<string>("Mobile")) + "\"," +
                                                                    "\"IsPostalAddress\"" + ":\"" + Convert.ToString(d.Field<bool?>("IsPostalAddress")) + "\"," +
                                                                    "\"PostalDeliveryNumber\"" + ":\"" + Convert.ToString(d.Field<string>("PostalDeliveryNumber")) + "\"," +
                                                                    "\"PostalAddressID\"" + ":\"" + Convert.ToString(d.Field<int?>("PostalAddressID")) + "\"," +
                                                                    "\"UnitTypeID\"" + ":\"" + Convert.ToString(d.Field<byte?>("UnitTypeID")) + "\"," +
                                                                    "\"UnitNumber\"" + ":\"" + Convert.ToString(d.Field<string>("UnitNumber")) + "\"," +
                                                                    "\"StreetNumber\"" + ":\"" + Convert.ToString(d.Field<string>("StreetNumber")) + "\"," +
                                                                    "\"StreetName\"" + ":\"" + Convert.ToString(d.Field<string>("StreetName")) + "\"," +
                                                                    "\"StreetTypeID\"" + ":\"" + Convert.ToString(d.Field<byte?>("StreetTypeID")) + "\"," +
                                                                    "\"Town\"" + ":\"" + Convert.ToString(d.Field<string>("Town")) + "\"," +
                                                                    "\"State\"" + ":\"" + Convert.ToString(d.Field<string>("State")) + "\"," +
                                                                    "\"PostCode\"" + ":\"" + Convert.ToString(d.Field<string>("PostCode")) + "\"," +
                                                                    "\"SESignature\"" + ":\"" + Path.GetFileName(Convert.ToString(d.Field<string>("SESignature"))) + "\"," +
                                                                    "\"JobElectricianID\"" + ":\"" + Convert.ToInt32(d.Field<int>("InstallerDesignerId")) + "\"," +
                                                                    "\"ElectricalContractorsLicenseNumber\"" + ":\"" + Convert.ToString(d.Field<string>("ElectricalContractorsLicenseNumber")) + "\"," +
                                                                    "\"CECAccreditationNumber\"" + ":\"" + Convert.ToString(d.Field<string>("CECAccreditationNumber")) + "\"}"));
                }
                dsUsersTabel = !string.IsNullOrEmpty(dsUsersTabel) ? "[" + dsUsersTabel + "]" : "";
                return Json(dsUsersTabel, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="SmsUrl">The Url send on SMS</param>
        /// <param name="url"></param>
        /// <param name="mobile">Mobile Number</param>
        /// <param name="fieldName"> FieldName For which signature collect</param>
        /// <param name="jobId">JobId</param>
        /// <param name="docId">DocumentId</param>
        /// <returns></returns>
        [AllowAnonymous]
        public JsonResult CaptureUserSignature(string SmsUrl, string smsLink, string mobile, string fieldName, string jobDocId, string Firstname, string Lastname, string type, string Email)
        {
            try
            {
                bool status = false;
                int result = 1;
                if (type.Equals("0"))
                {
                    result = _job.CheckPreviousSmsTime(mobile);
                    if (result == 1)
                    {

                        string SmsContent = string.Empty;
                        DataSet ds = _job.InsertUserSignature(jobDocId, "0", null, false, fieldName, mobile, Firstname, Lastname, SystemEnums.SignatureType.Mobile.GetHashCode(), Email);
                        string link = smsLink + "?id=" + QueryString.QueryStringEncode(ds.Tables[0].Rows[0][0].ToString());
                        SmsContent = "Please click to sign: " + Url.Encode(link);
                        string api = ProjectConfiguration.SMSGlobalURL + "?action=sendsms&user=" + ProjectSession.SMSGlobalUserName + "&password=" + ProjectSession.SMSGlobalPassword + "&&from=" + "Greenbot" + "&to=" + mobile + "&text=" + SmsContent;
                        var webRequest = System.Net.WebRequest.Create(string.Format(api));
                        if (webRequest != null)
                        {
                            webRequest.Method = "GET";
                            webRequest.Timeout = 20000;
                            webRequest.ContentType = "application/json";
                        }
                        HttpWebResponse resp = (HttpWebResponse)webRequest.GetResponse();
                        status = true;
                        return Json(new { status = status }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { status = status, errormsg = "You can not send msg within 3 minute" }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    string SmsContent = string.Empty;
                    DataSet ds = _job.InsertUserSignature(jobDocId, "0", null, false, fieldName, mobile, Firstname, Lastname, SystemEnums.SignatureType.Email.GetHashCode(), Email);
                    string link = smsLink + "?id=" + QueryString.QueryStringEncode(ds.Tables[0].Rows[0][0].ToString());
                    SmsContent = "Please click to sign: " + SmsUrl.Replace(smsLink, link);
                    //FormBot.Entity.User usr = new FormBot.Entity.User();
                    ////usr.Signature = mailUrl.Replace("Type=", "Type=M");
                    //usr.Signature = Email;
                    //usr.FirstName = Firstname;
                    //usr.LastName = Lastname;
                    //EmailInfo emailInfo = new EmailInfo();
                    ////emailInfo.TemplateID = IsClassicJob ? 26 : 36;
                    //emailInfo.FirstName = usr.FirstName;
                    //emailInfo.LastName = usr.LastName;
                    //emailInfo.Signature = usr.Signature;
                    ////emailInfo.Details = mailUrl.Replace("Type=", "Type=M");
                    //emailInfo.Details = Email;

                    //EmailTemplate emailTempalte = _emailBAL.GetEmailTemplateByID(emailInfo.TemplateID);
                    //if (emailTempalte != null && !string.IsNullOrEmpty(emailTempalte.Content))
                    //{
                    //    string FailReason = string.Empty;
                    //    string body = _emailBAL.GetEmailBody(emailInfo, emailTempalte);
                    //    try
                    //    {
                    //        if (body != null && !string.IsNullOrEmpty(body))
                    //        {
                    QueuedEmail objQueuedEmail = new QueuedEmail();
                    objQueuedEmail.FromEmail = ProjectSession.MailFrom;
                    objQueuedEmail.Body = SmsContent;
                    objQueuedEmail.Subject = "Collect Job Document Signature";
                    objQueuedEmail.ToEmail = Email;
                    objQueuedEmail.CreatedDate = DateTime.Now;
                    objQueuedEmail.ModifiedDate = DateTime.Now;
                    _emailBAL.InsertUpdateQueuedEmail(objQueuedEmail);
                    //    }
                    //}
                    //catch (Exception ex)
                    //{
                    //    FailReason = ex.Message;
                    //}

                    //status = MailHelper.SendMail(smtpDetail, mailTo, null, null, emailTempalte.Subject, composeEmail.Body.body, null, true, ref FailReason, false);
                    //}
                }
                status = true;
                return Json(new { status = status }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {

                return Json(new { status = false, errormsg = ex.Message }, JsonRequestBehavior.AllowGet);
            }


        }
        /// <summary>
        /// Mails for collect signature.
        /// </summary>
        /// <param name="mailUrl">The mail URL.</param>
        /// <param name="mailTo">The mail to.</param>
        /// <param name="jobType">Type of the job.</param>
        /// <param name="isOwner">The is owner.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <returns>object result</returns>
        [AllowAnonymous]
        public JsonResult MailForCollectSignature(string mailUrl, string mailTo, string jobType, string isOwner, string FirstName, string LastName, string Type = "M", string url = "", string mobile = "", bool IsClassicJob = true, string jobId = "", string Reseller = "", string solarCompany = "", string installationAddress = "")
        {
            bool status = false;

            Signature objSignature = new Signature();
            objSignature.JobId = jobId;
            objSignature.SinatureType = FirstName + ' ' + LastName;// mailUrl.Contains("Owner") ? "Owner" : mailUrl.Contains("Installer") ? "Installer" : mailUrl.Contains("Electrician") ? "Electrician" : "Designer";
            int JobId = jobId == "" ? 0 : Convert.ToInt32(jobId);

            if (jobType == "1" && isOwner == "No")
            {
                if (IsClassicJob)
                {
                    DataSet ds = _job.GetEmailforPvsSign(Convert.ToInt32(mailTo));
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    {
                        mailTo = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Email"].ToString()) ? ds.Tables[0].Rows[0]["Email"].ToString() : string.Empty;
                        FirstName = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["FirstName"].ToString()) ? ds.Tables[0].Rows[0]["FirstName"].ToString() : string.Empty;
                        LastName = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["LastName"].ToString()) ? ds.Tables[0].Rows[0]["LastName"].ToString() : string.Empty;
                    }
                }
            }

            if (Type == "S")
            {
                string SmsContent = string.Empty;
                //if (isOwner == "Yes")
                //{
                //    SmsContent = "Solar installer request a signature, contact your installer or click to sign:" + url.Replace("Type=", "Type=S");
                //}
                //else
                //{
                //    SmsContent = "Solar Company request a signature, click here to sign: " + Url.Encode(url);
                //}
                // string api = string.Empty;
                //string api = "https://www.smsglobal.com/http-api.php?action=sendsms&user=" + ProjectSession.SMSGlobalUserName + "&password=" + ProjectSession.SMSGlobalPassword + "&&from=" + "Greenbot" + "&to=" + mobile + "&text=" + SmsContent;


                url = url + "&LinkSentedDateTime=" + DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");

                // string shortURL = GenerateTinyURL(url);
                string shortURL = string.Empty;

                url = string.IsNullOrEmpty(shortURL) ? url : shortURL;

                //SmsContent = "Your Solar Company " + solarCompany + "has requested your signature for the recent solar installation you have completed at: " + installationAddress + " for JobId: " + JobId + ", click here to sign: " + Url.Encode(url) + " This link will expire in 24 hour.";
                SmsContent = solarCompany + " request signature for a solar install: " + installationAddress + " JobId:" + JobId + " sign here: " + Url.Encode(url);
                string api = ProjectConfiguration.SMSGlobalURL + "?action=sendsms&user=" + ProjectSession.SMSGlobalUserName + "&password=" + ProjectSession.SMSGlobalPassword + "&&from=" + "Greenbot" + "&to=" + mobile + "&text=" + Url.Encode(SmsContent) + "&maxsplit=" + "6";

                HttpWebRequest req = (HttpWebRequest)WebRequest.Create(string.Format(api));
                req.Method = "POST";
                req.ContentType = "application/x-www-form-urlencoded";
                byte[] postData = Encoding.ASCII.GetBytes(string.Format(api));
                req.ContentLength = postData.Length;

                // Send HTTP request.
                Stream PostStream = req.GetRequestStream();
                PostStream.Write(postData, 0, postData.Length);
                HttpWebResponse res = (HttpWebResponse)req.GetResponse();

                //var webRequest = System.Net.WebRequest.Create(string.Format(api));

                //if (webRequest != null)
                //{
                //    webRequest.Method = "GET";
                //    webRequest.Timeout = 20000;
                //    webRequest.ContentType = "application/json";
                //    //webRequest.ContentLength = Encoding.ASCII.GetBytes(string.Format(api)).Length;
                //}
                objSignature.Type = "SMS";
                objSignature.MobileNumber = mobile;

                //HttpWebResponse resp = (HttpWebResponse)webRequest.GetResponse();
                status = true;
                // return Json(status, JsonRequestBehavior.AllowGet);

            }
            else
            {

                FormBot.Entity.User usr = new FormBot.Entity.User();
                //usr.Signature = mailUrl.Replace("Type=", "Type=M");
                //string shortURL = GenerateTinyURL(mailUrl);
                usr.Signature = mailUrl;
                usr.FirstName = FirstName;
                usr.LastName = LastName;
                EmailInfo emailInfo = new EmailInfo();

                emailInfo.TemplateID = IsClassicJob ? 26 : 36;
                emailInfo.FirstName = usr.FirstName;
                emailInfo.LastName = usr.LastName;
                emailInfo.Signature = usr.Signature;
                //emailInfo.Details = mailUrl.Replace("Type=", "Type=M");
                emailInfo.Details = mailUrl;
                emailInfo.SolarCompanyFullName = solarCompany;
                emailInfo.ResellerFullName = Reseller;
                emailInfo.JobID = jobId == "" ? 0 : Convert.ToInt32(jobId);
                emailInfo.InstallationAddress = installationAddress;

                EmailTemplate emailTempalte = _emailBAL.GetEmailTemplateByID(emailInfo.TemplateID);
                if (emailTempalte != null && !string.IsNullOrEmpty(emailTempalte.Content))
                {
                    string FailReason = string.Empty;
                    //SMTPDetails smtpDetail = new SMTPDetails();
                    //smtpDetail.MailFrom = ProjectSession.MailFrom;
                    //smtpDetail.SMTPUserName = ProjectSession.SMTPUserName;
                    //smtpDetail.SMTPPassword = ProjectSession.SMTPPassword;
                    //smtpDetail.SMTPHost = ProjectSession.SMTPHost;
                    //smtpDetail.SMTPPort = Convert.ToInt32(ProjectSession.SMTPPort);
                    //smtpDetail.IsSMTPEnableSsl = ProjectSession.IsSMTPEnableSsl;
                    string body = _emailBAL.GetEmailBody(emailInfo, emailTempalte);
                    //ComposeEmail composeEmail = new Email.ComposeEmail();
                    //composeEmail.Subject = emailTempalte.Subject;
                    //composeEmail.Body = new innerBody();
                    //composeEmail.Body.body = body;
                    try
                    {
                        if (body != null && !string.IsNullOrEmpty(body))
                        {
                            QueuedEmail objQueuedEmail = new QueuedEmail();
                            objQueuedEmail.FromEmail = ProjectSession.MailFrom;
                            objQueuedEmail.Body = body;
                            objQueuedEmail.Subject = emailTempalte.Subject;
                            objQueuedEmail.ToEmail = mailTo;
                            objQueuedEmail.CreatedDate = DateTime.Now;
                            objQueuedEmail.ModifiedDate = DateTime.Now;
                            objQueuedEmail.JobId = jobId;
                            _emailBAL.InsertUpdateQueuedEmail(objQueuedEmail);
                            status = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        FailReason = ex.Message;
                    }

                    //status = MailHelper.SendMail(smtpDetail, mailTo, null, null, emailTempalte.Subject, composeEmail.Body.body, null, true, ref FailReason, false);
                    objSignature.EmailFrom = ProjectSession.MailFrom;
                    objSignature.MobileNumber = mailTo;
                    objSignature.Type = "Email";
                }
            }
            string signaturerequestto = "";
            if (mailUrl.ToLower().Contains("owner"))
            {
                signaturerequestto = "system owner";
            }
            if (mailUrl.ToLower().Contains("installer"))
            {
                signaturerequestto = "installer";
            }
            if (mailUrl.ToLower().Contains("electrician"))
            {
                signaturerequestto = "electrician";
            }
            if (mailUrl.ToLower().Contains("designer"))
            {
                signaturerequestto = "designer";
            }
            //bool s = _jobHistory.LogJobHistory(objSignature, HistoryCategory.Signature);
            //string JobHistoryMessage = "Sent signature request to "+objSignature.SinatureType+" through " + objSignature.Type + " - " +  objSignature.MobileNumber;
            //string JobHistoryMessage = "sent a " + signaturerequestto + " signature request - <b class=\"blue-title\"> (" + objSignature.JobId + ") JobRefNo </b>"; 
            string JobHistoryMessage = "sent a signature request to <span style=\"color:black\"> " + signaturerequestto + " - " + objSignature.SinatureType + "</span> : through <span style=\"color:black\">" + objSignature.Type + " -" + objSignature.MobileNumber + "</span> for <span style=\"color:black\"> JobRefNo (" + objSignature.JobId + ")</span>";
            Common.SaveJobHistorytoXML(Convert.ToInt32(objSignature.JobId), JobHistoryMessage, "Signature", "Signature", ProjectSession.LoggedInName, false, null);
            //_emailService.ComposeAndSendEmail(emailInfo, mailTo);

            ////EmailTemplate eTemplate = _emailService.PrepareEmailTemplate(26, null, usr, null, null);
            //_emailService.GeneralComposeAndSendMail(eTemplate, mailTo);

            if (status == false)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Saves the invoice detail.
        /// </summary>
        /// <param name="jobInvoiceDetail">The job invoice detail.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        [HttpPost]
        public JsonResult SaveInvoiceDetail(JobInvoiceDetail jobInvoiceDetail)
        {
            RemoveRequiredValidationField(jobInvoiceDetail);
            if (ModelState.IsValid)
            {
                if (jobInvoiceDetail.Signature != null && jobInvoiceDetail.Signature != "")
                {
                    jobInvoiceDetail.FileName = jobInvoiceDetail.Signature;
                }

                if (jobInvoiceDetail.OldFileName != jobInvoiceDetail.FileName)
                {
                    DeleteFile(Convert.ToString(jobInvoiceDetail.JobId), jobInvoiceDetail.JobInvoiceDetailID + "_" + jobInvoiceDetail.OldFileName);
                }

                jobInvoiceDetail.TimeStart = Convert.ToDateTime(jobInvoiceDetail.InvoiceStartDate);
                jobInvoiceDetail.TimeStart = jobInvoiceDetail.TimeStart.Add(TimeSpan.Parse(jobInvoiceDetail.InvoiceStartTime));
                if (!string.IsNullOrEmpty(jobInvoiceDetail.InvoiceEndDate))
                {
                    jobInvoiceDetail.TimeEnd = Convert.ToDateTime(jobInvoiceDetail.InvoiceEndDate);
                }

                if (!string.IsNullOrEmpty(jobInvoiceDetail.InvoiceEndTime))
                {
                    jobInvoiceDetail.TimeEnd = jobInvoiceDetail.TimeEnd.Value.Add(TimeSpan.Parse(jobInvoiceDetail.InvoiceEndTime));
                }

                if (ProjectSession.UserTypeId == 4)
                {
                    jobInvoiceDetail.OwnerUsername = jobInvoiceDetail.OwnerUsername;
                    jobInvoiceDetail.SentTo = null;
                }
                else
                {
                    jobInvoiceDetail.OwnerUsername = null;
                    jobInvoiceDetail.SentTo = Convert.ToInt32(jobInvoiceDetail.OwnerUsername);
                }

                int? solarCompanyId;
                if (ProjectSession.UserTypeId == 9 || ProjectSession.UserTypeId == 7)
                {
                    solarCompanyId = null;
                }
                else
                {
                    solarCompanyId = ProjectSession.SolarCompanyId;
                }

                SettingsBAL settingsBAL = new SettingsBAL();
                Entity.Settings.Settings settings = new Entity.Settings.Settings();
                settings = settingsBAL.GetChargesPartsPaymentCodeAndSettings(ProjectSession.LoggedInUserId,
                    ProjectSession.UserTypeId, solarCompanyId, ProjectSession.ResellerId);
                DataSet dataset = _jobInvoiceDetail.InsertJobInvoiceDetail(jobInvoiceDetail.JobInvoiceDetailID, jobInvoiceDetail.JobInvoiceID, null,
                    jobInvoiceDetail.IsBillable, jobInvoiceDetail.JobScheduleID, ProjectSession.LoggedInUserId, jobInvoiceDetail.Sale,
                    jobInvoiceDetail.TimeStart, null, jobInvoiceDetail.Quantity, jobInvoiceDetail.Purchase, jobInvoiceDetail.Margin,
                    jobInvoiceDetail.Description, jobInvoiceDetail.FileName, jobInvoiceDetail.TimeEnd, jobInvoiceDetail.PaymentType,
                    null, (int)SystemEnums.JobInvoiceType.Time, false, ProjectSession.LoggedInUserId, ProjectSession.LoggedInUserId,
                    false, ProjectSession.SolarCompanyId, false, jobInvoiceDetail.InvoiceNumber, jobInvoiceDetail.JobId,
                    jobInvoiceDetail.OwnerUsername, jobInvoiceDetail.SentTo, settings);
                int jobInvoiceDetailID = 0, jobInvoiceID = 0;
                if (dataset.Tables.Count > 0)
                {
                    if (dataset.Tables[0].Rows[0].ItemArray.Count() > 0)
                    {
                        jobInvoiceDetailID = Convert.ToInt32(dataset.Tables[0].Rows[0].ItemArray[0].ToString());
                        jobInvoiceID = Convert.ToInt32(dataset.Tables[1].Rows[0].ItemArray[0].ToString());
                    }

                }

                string guid = jobInvoiceDetail.Guid;
                string sourceDirectory = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobInvoiceDetail.JobId + "\\" + "Invoice" + "\\" + jobInvoiceDetail.Guid + "_" + jobInvoiceDetail.FileName;
                string destinationDirectory = ProjectSession.ProofDocumentsURL + "JobDocuments" + "\\" + jobInvoiceDetail.JobId + "\\" + "Invoice" + "\\" + jobInvoiceDetailID + "_" + jobInvoiceDetail.FileName;
                if (!string.IsNullOrEmpty(jobInvoiceDetail.Guid) && System.IO.File.Exists(sourceDirectory))
                {
                    System.IO.File.Move(sourceDirectory, destinationDirectory);
                }

                return Json(new { status = jobInvoiceID, fileName = jobInvoiceDetail.FileName }, JsonRequestBehavior.AllowGet);
            }
            return Json("failure", JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Removes the required validation field.
        /// </summary>
        /// <param name="jobInvoiceDetail">The job invoice detail.</param>
        public void RemoveRequiredValidationField(JobInvoiceDetail jobInvoiceDetail)
        {
            ModelState.Remove("TimeStart");
            ModelState.Remove("TimeAdded");
            ModelState.Remove("PaymentType");
            ModelState.Remove("PaymentAmount");
            ModelState.Remove("ItemCode");
            ModelState.Remove("InvoiceStartTime");
            ModelState.Remove("InvoiceStartDate");
            ModelState.Remove("Description");
            ModelState.Remove("DateAdded");
            ModelState.Remove("JobInvoiceID");
            ModelState.Remove("JobInvoiceDetailID");
        }

        /// <summary>
        /// Show the job history.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>result object</returns>
        [HttpGet]
        [ValidateInput(false)]
        [UserAuthorization]
        public PartialViewResult ShowHistory(string jobID)
        {
            return this.PartialView("~/Views/JobHistory/_JobHistoryDetail.cshtml", GetHistory(jobID, 0, false, "DESC", null, null));
        }


        /// <summary>
        /// Shows the filtered history.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <param name="categoryID">The category identifier.</param>
        /// <param name="order">The order.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <returns>action result</returns>
        [HttpGet]
        [ValidateInput(false)]
        public ActionResult ShowFilteredHistory(int jobID, int categoryID, string order, string fromDate, string toDate, int pageIndex = 1)
        {
            DateTime? dtfromDate = null;
            DateTime? dttoDate = null;
            if (!string.IsNullOrEmpty(fromDate))
            {
                dtfromDate = Convert.ToDateTime(fromDate);
            }

            if (!string.IsNullOrEmpty(toDate))
            {
                dttoDate = Convert.ToDateTime(toDate);
            }

            return this.PartialView("~/Views/JobHistory/_HistoryList.cshtml", GetHistory(jobID.ToString(), categoryID, true, order, dtfromDate, dttoDate, pageIndex));
        }

        public ActionResult ShowFilteredJobHistory(int jobID, int categoryID, string order, int PostVisibility, int IsDeletedJobNote, bool IsImportant = false)
        {
            return this.PartialView("~/Views/JobHistory/_JobHistoryList.cshtml", GetJobHistory(jobID.ToString(), categoryID, true, order, PostVisibility, IsDeletedJobNote, IsImportant));
        }
        /// <summary>
        /// Show the warning notes.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>result object</returns>

        public ActionResult LoadWarningNotes(int jobID, int categoryID, string order, int PostVisibility, int IsDeletedJobNote, bool IsImportant = false)
        {
            var warningNotes = GetWarningNotes(jobID.ToString(), categoryID, true, order, PostVisibility, IsDeletedJobNote, IsImportant);
            return this.PartialView("~/Views/Job/_WarningNotes.cshtml", warningNotes);
        }

        [HttpPost]
        public async Task<ActionResult> ChangeSCA(string jobId, string gbSCACode, string resellerID, string oldSCAName, string solarCompanyId, string jobInstallationYear)
        {
            if (!(string.IsNullOrEmpty(jobId) || string.IsNullOrEmpty(gbSCACode) || string.IsNullOrEmpty(resellerID) || string.IsNullOrEmpty(oldSCAName) || string.IsNullOrEmpty(solarCompanyId) || string.IsNullOrEmpty(jobInstallationYear)))
            {
                //string newCompanyName = _userBAL.ChangeSCA(Int32.Parse(jobId), gbSCACode, Int32.Parse(resellerID));
                DataSet newCompanyData = _userBAL.ChangeSCA(Int32.Parse(jobId), gbSCACode, Int32.Parse(resellerID));
                string newCompanyName = newCompanyData.Tables[0].Rows[0]["CompanyName"].ToString();
                int newCompanyID = Convert.ToInt32(newCompanyData.Tables[0].Rows[0]["SolarCompanyId"].ToString());
                if (!string.IsNullOrEmpty(newCompanyName))
                {
                    string installerAccNumber = "", designerAccNumber = "", electricianAccNumber = "";
                    string installerName = "", designerName = "", electricianName = "";

                    DataSet ds = _userBAL.GetCECAccreditationNumberForInstallerDesignerElectrician(Int32.Parse(jobId));

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        installerAccNumber = ds.Tables[0].Rows[0]["CECAccreditationNumber"].ToString();
                        installerName = ds.Tables[0].Rows[0]["Name"].ToString();
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        designerAccNumber = ds.Tables[1].Rows[0]["CECAccreditationNumber"].ToString();
                        designerName = ds.Tables[1].Rows[0]["Name"].ToString();
                    }
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        electricianAccNumber = ds.Tables[2].Rows[0]["LicenseNumber"].ToString();
                        electricianName = ds.Tables[2].Rows[0]["Name"].ToString();
                    }
                    string HistoryMessage;
                    if (string.IsNullOrEmpty(oldSCAName))
                    {
                        HistoryMessage = "has changed sca to " + newCompanyName + "(" + gbSCACode + ")" + " - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    }
                    else
                    {
                        HistoryMessage = "has changed sca from " + oldSCAName + " to " + newCompanyName + "(" + gbSCACode + ")" + " - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    }

                    string description = $"<p><b style=\"color: black\">Old Installer: </b> {installerName} - {installerAccNumber}</p>";
                    description += $"<p><b style=\"color: black\">Designer: </b> {designerName} - {designerAccNumber}</p>";
                    description += $"<p><b style=\"color: black\">Electrician: </b> {electricianName} - {electricianAccNumber}</p>";

                    Common.SaveJobHistorytoXML(Int32.Parse(jobId), HistoryMessage, "General", "SCAChangeDetails", ProjectSession.LoggedInName, false, description);

                    //await CommonBAL.SetCacheDataForJobID(Int32.Parse(solarCompanyId), Int32.Parse(jobId));
                    await CommonBAL.SetCacheDataForJobID(newCompanyID, Int32.Parse(jobId));
                    IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
                    CommonBAL.JobsDistributedCacheHashSet(cache, new List<int> { Convert.ToInt32(solarCompanyId) }, Int32.Parse(jobInstallationYear));
                    //await CommonBAL.SetCacheDataForSTCSubmissionFromSolarCompanyId(Int32.Parse(resellerID), solarCompanyId, Int32.Parse(jobInstallationYear));
                    //await CommonBAL.SetCacheDataForSTCSubmissionFromSolarCompanyId(Int32.Parse(resellerID), newCompanyID.ToString(), Int32.Parse(jobInstallationYear));

                    return Json(new { success = true, message = "SCA Changed Successfully" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { success = false, message = "GB SCA Code is not valid" }, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(new { success = false, message = "Something is wrong" }, JsonRequestBehavior.AllowGet);

        }

        /// <summary>
        /// system submission.
        /// </summary>
        /// <returns>action result</returns>
        [HttpGet]
        [UserAuthorization]
        public ActionResult STCSubmission(string IsKendoStcSubmissionPage = null, string id = null)
        {
            //if (!string.IsNullOrEmpty(IsKendoStcSubmissionPage))
            //    ProjectSession.IsStaticSTCSubmission = !Convert.ToBoolean(IsKendoStcSubmissionPage);
            //if (ProjectSession.IsStaticSTCSubmission)
            //    return RedirectToAction("StaticSTCSubmission");
            UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
            {
                IsKendoGrid = true,
                PageSize = 10,
                UserId = ProjectSession.LoggedInUserId,
                ViewPageId = SystemEnums.ViewPageId.STCSubmissionView.GetHashCode(),
                UserWiseGridConfigurationId = 0
            };
            UserWiseGridConfiguration sessionObjUserWiseGridConfiguration = null;
            List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = new List<UserWiseGridConfiguration>();
            var index = -1;
            try
            {
                lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
                sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.STCSubmissionView.GetHashCode()).FirstOrDefault();
                index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
            }
            catch (Exception ex) { }

            if (!string.IsNullOrEmpty(IsKendoStcSubmissionPage))
            {
                objUserWiseGridConfiguration.IsKendoGrid = Convert.ToBoolean(IsKendoStcSubmissionPage);
                objUserWiseGridConfiguration.PageSize = sessionObjUserWiseGridConfiguration == null ? 10 : sessionObjUserWiseGridConfiguration.PageSize;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            }
            else if (sessionObjUserWiseGridConfiguration == null)
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            if (index != -1)
            {
                lstUserWiseGridConfigurations[index] = sessionObjUserWiseGridConfiguration;
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            else
            {
                lstUserWiseGridConfigurations.Add(sessionObjUserWiseGridConfiguration);
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            if (!sessionObjUserWiseGridConfiguration.IsKendoGrid)
                return RedirectToAction("StaticSTCSubmission");
            FormBot.Entity.JobList job = new FormBot.Entity.JobList();

            Type enumType = typeof(FormBot.Helper.SystemEnums.STCSettlementTerm);
            Type descriptionAttributeType = typeof(DescriptionAttribute);
            Dictionary<int, string> dict = new Dictionary<int, string>();
            foreach (string memberName in Enum.GetNames(enumType))
            {
                MemberInfo member = enumType.GetMember(memberName).Single();

                string memberDescription = ((DescriptionAttribute)Attribute.GetCustomAttribute(member, descriptionAttributeType)).Description;
                dict.Add((int)Enum.Parse(typeof(FormBot.Helper.SystemEnums.STCSettlementTerm), memberName), memberDescription);

            }
            job.DictSettlementTerm = dict;
            int year = 0;
            if (!string.IsNullOrEmpty(id) && id.ToLower().Trim() == "archive")
            {
                ViewBag.Archive = true;
                year = DateTime.Now.Year - 1;
            }
            job.UserTypeID = ProjectSession.UserTypeId;
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
            {
                job.lstSTCJobStages = CommonBAL.GetSTCCount(0, 0, ProjectSession.SolarCompanyId, "", "", year);
                // _job.GetSTCJobStagesWithCountByYear(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, ProjectSession.SolarCompanyId, "", "", year);
            }
            else
            {
                job.lstSTCJobStages = CommonBAL.GetSTCCount(0, 0, 0, "", "", year);
                //job.lstSTCJobStages = _job.GetSTCJobStagesWithCountByYear(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, 0, "", "", year);
            }

            var jobType = from SystemEnums.JobType j in Enum.GetValues(typeof(SystemEnums.JobType))
                          select new { ID = j, Name = j.ToString() };
            var jobPriority = from SystemEnums.JobPriority j in Enum.GetValues(typeof(SystemEnums.JobPriority))
                              select new { ID = j, Name = j.ToString() };
            ViewData["colPriority"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobPriority);
            ViewData["colJobType"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobType);
            List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.STCSubmissionView.GetHashCode());
            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));

            //as per discussion with hus. He gave the wrong requirement. and now he has given the changes for current requirement. 
            //ViewBag.GlobalisAllowedSPV = Convert.ToBoolean(_gbSettingsBAL.GetGBsettingValueByKeyName(ProjectConfiguration.GlobalLevelSpvRequiredKeyName).Value);


            return View("STCSubmission", job);
        }

        /// <summary>
        /// Old STC submission page without kendo 
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [UserAuthorization]
        public ActionResult StaticSTCSubmission(string IsKendoStcSubmissionPage = null, string id = null)
        {
            //if (!string.IsNullOrEmpty(IsKendoStcSubmissionPage))
            //    ProjectSession.IsStaticSTCSubmission = !Convert.ToBoolean(IsKendoStcSubmissionPage);
            //if (ProjectSession.IsStaticSTCSubmission)
            //    return RedirectToAction("StaticSTCSubmission");
            UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
            {
                IsKendoGrid = true,
                PageSize = 10,
                UserId = ProjectSession.LoggedInUserId,
                ViewPageId = SystemEnums.ViewPageId.STCSubmissionView.GetHashCode(),
                UserWiseGridConfigurationId = 0
            };
            UserWiseGridConfiguration sessionObjUserWiseGridConfiguration = null;
            List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = new List<UserWiseGridConfiguration>();
            var index = -1;
            try
            {
                lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
                sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.STCSubmissionView.GetHashCode()).FirstOrDefault();
                index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
            }
            catch (Exception ex) { }
            if (!string.IsNullOrEmpty(IsKendoStcSubmissionPage))
            {
                objUserWiseGridConfiguration.IsKendoGrid = Convert.ToBoolean(IsKendoStcSubmissionPage);
                objUserWiseGridConfiguration.PageSize = sessionObjUserWiseGridConfiguration == null ? 10 : sessionObjUserWiseGridConfiguration.PageSize;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            }
            else if (sessionObjUserWiseGridConfiguration == null)
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            if (index != -1)
            {
                lstUserWiseGridConfigurations[index] = sessionObjUserWiseGridConfiguration;
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            else
            {
                lstUserWiseGridConfigurations.Add(sessionObjUserWiseGridConfiguration);
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            if (!sessionObjUserWiseGridConfiguration.IsKendoGrid)
                return RedirectToAction("StaticSTCSubmission");
            FormBot.Entity.JobList job = new FormBot.Entity.JobList();

            Type enumType = typeof(FormBot.Helper.SystemEnums.STCSettlementTerm);
            Type descriptionAttributeType = typeof(DescriptionAttribute);
            Dictionary<int, string> dict = new Dictionary<int, string>();
            foreach (string memberName in Enum.GetNames(enumType))
            {
                MemberInfo member = enumType.GetMember(memberName).Single();

                string memberDescription = ((DescriptionAttribute)Attribute.GetCustomAttribute(member, descriptionAttributeType)).Description;
                dict.Add((int)Enum.Parse(typeof(FormBot.Helper.SystemEnums.STCSettlementTerm), memberName), memberDescription);

            }

            job.DictSettlementTerm = dict;
            int year = 0;
            if (!string.IsNullOrEmpty(id) && id.ToLower().Trim() == "archive")
            {
                ViewBag.Archive = true;
                year = DateTime.Now.Year - 1;
            }
            job.UserTypeID = ProjectSession.UserTypeId;
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
            {
                job.lstSTCJobStages = CommonBAL.GetSTCCount(0, 0, ProjectSession.SolarCompanyId, "", "", year);
                // _job.GetSTCJobStagesWithCountByYear(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, ProjectSession.SolarCompanyId, "", "", year);
            }
            else
            {
                job.lstSTCJobStages = CommonBAL.GetSTCCount(0, 0, 0, "", "", year);
                //job.lstSTCJobStages = _job.GetSTCJobStagesWithCountByYear(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, 0, "", "", year);
            }

            var jobType = from SystemEnums.JobType j in Enum.GetValues(typeof(SystemEnums.JobType))
                          select new { ID = j, Name = j.ToString() };
            var jobPriority = from SystemEnums.JobPriority j in Enum.GetValues(typeof(SystemEnums.JobPriority))
                              select new { ID = j, Name = j.ToString() };
            ViewData["colPriority"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobPriority);
            ViewData["colJobType"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobType);
            List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.STCSubmissionView.GetHashCode());
            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));

            //as per discussion with hus. He gave the wrong requirement. and now he has given the changes for current requirement. 
            //ViewBag.GlobalisAllowedSPV = Convert.ToBoolean(_gbSettingsBAL.GetGBsettingValueByKeyName(ProjectConfiguration.GlobalLevelSpvRequiredKeyName).Value);


            return View("StaticSTCSubmissionNew", job);
        }


        /// <summary>
        /// Old STC submission page without kendo 
        /// </summary>
        /// <returns></returns>
        //[HttpGet]
        //[UserAuthorization]
        //public ActionResult StaticSTCSubmission(string IsKendoStcSubmissionPage = null)
        //{
        //    UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
        //    {
        //        IsKendoGrid = true,
        //        PageSize = 10,
        //        UserId = ProjectSession.LoggedInUserId,
        //        ViewPageId = SystemEnums.ViewPageId.STCSubmissionView.GetHashCode(),
        //        UserWiseGridConfigurationId = 0
        //    };
        //    UserWiseGridConfiguration sessionObjUserWiseGridConfiguration = null;
        //    List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = new List<UserWiseGridConfiguration>();
        //    var index = -1;
        //    try
        //    {
        //        lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
        //        sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.STCSubmissionView.GetHashCode()).FirstOrDefault();
        //        index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
        //    }
        //    catch (Exception ex) { }
        //    if (!string.IsNullOrEmpty(IsKendoStcSubmissionPage))
        //    {
        //        objUserWiseGridConfiguration.IsKendoGrid = Convert.ToBoolean(IsKendoStcSubmissionPage);
        //        objUserWiseGridConfiguration.PageSize = sessionObjUserWiseGridConfiguration == null ? 10 : sessionObjUserWiseGridConfiguration.PageSize;
        //        objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
        //        objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
        //        sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
        //    }
        //    else if (sessionObjUserWiseGridConfiguration == null)
        //        sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
        //    if (index != -1)
        //    {
        //        lstUserWiseGridConfigurations[index] = sessionObjUserWiseGridConfiguration;
        //        ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
        //    }
        //    else
        //    {
        //        lstUserWiseGridConfigurations.Add(sessionObjUserWiseGridConfiguration);
        //        ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
        //    }
        //    if (sessionObjUserWiseGridConfiguration.IsKendoGrid)
        //        return RedirectToAction("STCSubmission");
        //    FormBot.Entity.JobList job = new FormBot.Entity.JobList();

        //    Type enumType = typeof(FormBot.Helper.SystemEnums.STCSettlementTerm);
        //    Type descriptionAttributeType = typeof(DescriptionAttribute);
        //    Dictionary<int, string> dict = new Dictionary<int, string>();
        //    foreach (string memberName in Enum.GetNames(enumType))
        //    {
        //        MemberInfo member = enumType.GetMember(memberName).Single();

        //        string memberDescription = ((DescriptionAttribute)Attribute.GetCustomAttribute(member, descriptionAttributeType)).Description;
        //        dict.Add((int)Enum.Parse(typeof(FormBot.Helper.SystemEnums.STCSettlementTerm), memberName), memberDescription);

        //    }

        //    job.DictSettlementTerm = dict;

        //    job.UserTypeID = ProjectSession.UserTypeId;
        //    if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
        //    {
        //        job.lstSTCJobStages = _job.GetSTCJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, ProjectSession.SolarCompanyId);
        //    }
        //    else
        //    {
        //        job.lstSTCJobStages = _job.GetSTCJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, 0);
        //    }
        //    return View("StaticSTCSubmission", job);
        //}

        /// <summary>
        /// Gets the description with using annotation.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>string name</returns>
        public string GetDescription(Enum value)
        {
            string description = value.ToString();
            FieldInfo fieldInfo = value.GetType().GetField(description);
            DescriptionAttribute[] attributes = (DescriptionAttribute[])fieldInfo.GetCustomAttributes(typeof(DescriptionAttribute), false);
            if (attributes != null && attributes.Length > 0)
            {
                description = attributes[0].Description;
            }

            return description;
        }

        /// <summary>
        /// Accepts the reject job to SSC.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <param name="role">The role.</param>
        /// <returns>result object</returns>
        public async Task<JsonResult> AcceptRejectJobToSSC(string jobID, string role)
        {
            int id = 0;
            if (!string.IsNullOrEmpty(jobID))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobID, "id"), out id);
            }

            _job.AcceptRejectJobToSSC(id, role);
            ContractorHistory objContractor = new ContractorHistory()
            {
                JobID = id,
                SolarCompanyName = "Solar Company",
                Action = role
            };
            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, id);
            //bool isHistorySaved = _jobHistory.LogJobHistory(objContractor, HistoryCategory.AcceptedRejectedBySSC);
            string action = objContractor.Action;
            string solarcompanyname = objContractor.SolarCompanyName;
            string JobHistoryMessage = action + "JobID " + objContractor.JobID + " from " + solarcompanyname + " .";
            Common.SaveJobHistorytoXML(objContractor.JobID, JobHistoryMessage, "Notifications", "AcceptedRejectedBySSC", ProjectSession.LoggedInName, false);
            return this.Json(new { success = role }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// job popup.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <param name="IsSubmissionScreen">The is submission screen.</param>
        /// <returns>action result</returns>
        public ActionResult _STCJobPopup(int jobId, int IsSubmissionScreen)
        {
            STCDetailsModel model = GetSTCDetailsModel(jobId, IsSubmissionScreen);
            return PartialView("_STCJobPopup", model);
        }

        /// <summary>
        /// Edits the specified identifier.
        /// </summary>
        /// <param name="Id">The identifier.</param>
        /// <returns>edit view</returns>
        [UserAuthorization]
        public ActionResult Edit(string Id)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(Id, "id"), out jobId);
            }

            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(jobId));
            createJob.Guid = Convert.ToString(jobId);
            createJob.JobID = jobId;
            createJob.BasicDetails.strInstallationDate = createJob.BasicDetails.InstallationDate != null ? createJob.BasicDetails.InstallationDate.Value.ToString("yyyy/MM/dd") : "";
            createJob.BasicDetails.strSoldByDate = createJob.BasicDetails.SoldByDate != null ? createJob.BasicDetails.SoldByDate.Value.ToString("yyyy/MM/dd") : "";
            //var designRole = from SystemEnums.PostalAddressType s in Enum.GetValues(typeof(SystemEnums.PostalAddressType))
            //                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace('_', ' ') };
            ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
            createJob.JobID = jobId;
            createJob.Signature = createJob.JobElectricians.Signature;
            createJob.lstJobSchedule = _job.GetJobschedulingByJobID(createJob.JobID);
            createJob.lstUserDocument = _job.GetJobInstallationPhotoByJobID(createJob.JobID);
            createJob.lstSerialDocument = _job.GetJobInstallationSerialByJobID(createJob.JobID);
            createJob.lstJobOtherDocument = _job.GetJobOtherDocumentByJobID(createJob.JobID);
            createJob.BasicDetails.ScoID = _job.GetSCOIdByJobId(createJob.JobID);
            if (createJob.BasicDetails.JobType == 2)
            {
                createJob.JobSystemDetails.CalculatedSTCForSWH = createJob.JobSystemDetails.CalculatedSTC;
            }

            createJob.UserType = ProjectSession.UserTypeId;
            if (createJob.JobElectricians.IsPostalAddress == true)
            {
                createJob.JobElectricians.AddressID = 2;
            }
            else
            {
                createJob.JobElectricians.AddressID = 1;
            }

            if (createJob.JobOwnerDetails.IsPostalAddress == true)
            {
                createJob.JobOwnerDetails.AddressID = 2;
            }
            else
            {
                createJob.JobOwnerDetails.AddressID = 1;
            }

            if (createJob.JobInstallationDetails.IsPostalAddress == true)
            {
                createJob.JobInstallationDetails.AddressID = 2;
            }
            else
            {
                createJob.JobInstallationDetails.AddressID = 1;
            }

            if (createJob.JobInstallerDetails.IsPostalAddress == true)
            {
                createJob.JobInstallerDetails.AddressID = 2;
            }
            else
            {
                createJob.JobInstallerDetails.AddressID = 1;
            }

            //createJob.BasicDetails.PreviousJobStage = _job.GetJobStage().Where(x => x.JobStageId == Convert.ToInt32(createJob.BasicDetails.JobStage)).Select(s => s.StageName).FirstOrDefault();
            createJob.BasicDetails.PreviousJobStage = createJob.BasicDetails.JobStage;
            Helper.SystemEnums.JobPriority jobPriority;
            if (Enum.TryParse(createJob.BasicDetails.Priority.ToString(), out jobPriority))
            {
                createJob.BasicDetails.PreviousPriority = jobPriority.ToString();
            }

            createJob.BasicDetails.PreviousSSCID = createJob.BasicDetails.SSCID;
            DataSet headerDetails = _job.GetHeaderDetails(jobId);
            if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
            {
                DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                createJob.Header = dr["Header"].ToString();
            }
            Account acct = new Account();
            if (Session[FormBot.Email.Constants.sessionAccount] == null)
            {
                FormBot.Entity.Email.EmailSignup emailModel = new Entity.Email.EmailSignup();
                string xmlString = string.Empty;
                DataSet lstEmail = _user.LoginUserEmailDetails(ProjectSession.LoggedInUserId);
                if (lstEmail.Tables[0].Rows.Count > 0)
                {
                    Session[FormBot.Email.Constants.sessionAccount] = null;
                    DataRow dr = (DataRow)lstEmail.Tables[0].Rows[0];
                    emailModel.Login = dr["email"].ToString();
                    emailModel.ConfigurationEmail = dr["email"].ToString();
                    emailModel.ConfigurationPassword = Utils.DecodePassword(Convert.ToString(dr["mail_inc_pass"]));
                    emailModel.IncomingMail = dr["mail_inc_host"].ToString();
                    emailModel.IncomingMailPort = Convert.ToInt32(dr["mail_inc_port"]);
                    emailModel.Login = dr["email"].ToString();
                    emailModel.OutgoingMail = dr["mail_out_host"].ToString();
                    emailModel.OutgoingMailPort = Convert.ToInt32(dr["mail_out_port"]);
                    xmlString = "<?xml version='1.0' encoding='UTF-8'?><webmail><param name='action' value='login' /><param name='request' value='' /><param name='email'><![CDATA[" + emailModel.ConfigurationEmail
                        + "]]></param><param name='mail_inc_login'><![CDATA[" + emailModel.Login + "]]></param><param name='mail_inc_pass'><![CDATA[" + emailModel.ConfigurationPassword + "]]></param><param name='mail_inc_host'><![CDATA[" + emailModel.IncomingMail
                        + "]]></param><param name='mail_inc_port' value='" + emailModel.IncomingMailPort + "' /><param name='mail_protocol' value='0' /><param name='mail_out_host'><![CDATA[" + emailModel.OutgoingMail
                        + "]]></param><param name='mail_out_port' value='" + emailModel.OutgoingMailPort + "' /><param name='mail_out_auth' value='1' /><param name='sign_me' value='0' /><param name='language' /><param name='advanced_login' value='1' /></webmail>";
                    CheckMail checkMail = new CheckMail();
                    var result = checkMail.GetMessages(xmlString);
                }
            }
            acct = Session[FormBot.Email.Constants.sessionAccount] as Account;
            ViewBag.JobId = jobId;
            List<JobWiseUsers> lstJobWiseUsers = _emailService.GetJobWiseUsers(jobId, ProjectSession.LoggedInUserId);
            Session["JobWiseUsers"] = lstJobWiseUsers;
            List<SelectListItem> jobWiseUsers = new List<SelectListItem>();
            if (lstJobWiseUsers.Count > 0)
            {
                lstJobWiseUsers = lstJobWiseUsers.Where(w => w.Email != null && w.Email != "" && w.Email != acct.Email).ToList();
                if (lstJobWiseUsers != null)
                {
                    foreach (var item in lstJobWiseUsers)
                    {
                        if (!string.IsNullOrEmpty(item.Email))
                        {
                            jobWiseUsers.Add(new SelectListItem
                            {
                                Text = !string.IsNullOrEmpty(item.FullName) ? item.FullName.First().ToString().ToUpper() + item.FullName.Substring(1) : item.FullName,
                                Value = item.Email
                            });
                        }

                    }

                }

                jobWiseUsers.Add(new SelectListItem { Text = "Other", Value = "other" });
            }

            ViewBag.JobWiseUsers = jobWiseUsers;
            var stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(jobId), ProjectSession.UserTypeId);
            if (stcBasicDetails != null)
            {
                ViewBag.STCStatusName = stcBasicDetails.Status;
                ViewBag.STCDescription = stcBasicDetails.STCDescription;
            }

            return View("Edit", createJob);
        }

        /// <summary>
        /// Gets the bulk upload CSV.
        /// </summary>
        /// <param name="JobID">The job identifier.</param>
        public void GetBulkUploadCSV(string JobID)
        {
            DataSet dsCSV_JobID = new DataSet();
            DataTable dtSPVXmlPath = new DataTable();
            StringBuilder csv = _commonBulkUploadToCER.GetBulkUploadCSV_PVD(JobID, null, ref dsCSV_JobID, ref dtSPVXmlPath, true, true);
            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment;filename=Jobs" + DateTime.Now.Ticks.ToString() + ".csv");
            Response.Charset = "";
            Response.ContentType = "application/text";
            Response.Output.Write(csv.ToString());
            Response.Flush();
            Response.End();
        }

        [HttpPost]
        public ActionResult CheckInstallationDate(string JobID)
        {
            if (!_job.CheckInstallationDate(JobID))
            {
                return this.Json(new { status = "false", message = "Select jobs which have installation date either before april or from april." }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { status = "true" });
            }
        }

        //[HttpPost]
        public async Task<ActionResult> GetBulkUploadCSV_ImportExportRECEntry(string JobID, string ResellerId, string JobType)
        {
            string FilePath = string.Empty;
            string UploadURL = string.Empty;
            string referer = string.Empty;
            string paramname = string.Empty;
            string spvParamName = string.Empty;
            string spvFilePath = string.Empty;
            bool IsPVDJob = false;
            string sguBulkUploadDocumentsParamName = string.Empty;
            string sguBulkUploadDocumentsFilePath = string.Empty;
            string ZipName = string.Empty;
            DataTable historytable = new DataTable();

            //clsUploadedFileJsonResponseObject JsonResponseObj = new clsUploadedFileJsonResponseObject();
            try
            {
                List<string> lstJobIds = JobID.Split(',').ToList();
                int BatchRecUploadCount = Convert.ToInt32(ProjectConfiguration.BatchRecUploadCountForCsv);
                List<string> lstBatches = SplitList<string>(lstJobIds, BatchRecUploadCount);
                DataTable dtBatches = ListToDataTable(lstBatches);

                // For caching purpose
                DataSet dsStcJobDetailsId = _job.InsertGBBatchRECUploadId(dtBatches, Convert.ToInt32(ResellerId));
                string stcjobids = string.Empty;
                if (dsStcJobDetailsId.Tables.Count > 0)
                {
                    foreach (DataRow dr in dsStcJobDetailsId.Tables[0].Rows)
                    {
                        stcjobids = stcjobids + dr["StcJobDetailsId"].ToString() + ",";
                        // CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(dr["StcJobDetailsId"]), 0);
                    }
                    stcjobids = stcjobids.Remove(stcjobids.Length - 1);
                    DataTable dt = _job.GetSTCDetailsAndJobDataForCache(stcjobids, null);
                    historytable = dt;
                    if (dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            SortedList<string, string> data = new SortedList<string, string>();
                            string gbBatchRecUploadId = dt.Rows[i]["GBBatchRECUploadId"].ToString();
                            // string RECBulkUploadTimeDate = dt.Rows[i]["RECBulkUploadTime"].ToString();
                            data.Add("GBBatchRECUploadId", gbBatchRecUploadId);
                            //data.Add("RECBulkUploadTimeDate", RECBulkUploadTimeDate);
                            //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(dt.Rows[i]["StcJobDetailsId"].ToString()), null, data);
                            Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from ImportExportRecEntry: " + (dt.Rows[i]["StcJobDetailsId"].ToString()) + " BulkUploadId: " + gbBatchRecUploadId);
                        }
                    }

                }


                foreach (var JobIds in lstBatches)
                {
                    DataSet ds = _job.GetJobsForRecInsertOrUpdate(JobIds);
                    if (stcjobids != null)
                    {
                        DataTable dt = _job.GetSTCDetailsAndJobDataForCache(stcjobids, null);

                        if (dt.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                SortedList<string, string> data = new SortedList<string, string>();
                                // string gbBatchRecUploadId = dt.Rows[i]["GBBatchRECUploadId"].ToString();
                                string RECBulkUploadTimeDate = dt.Rows[i]["RECBulkUploadTime"].ToString();
                                //data.Add("GBBatchRECUploadId", gbBatchRecUploadId);
                                data.Add("RECBulkUploadTimeDate", RECBulkUploadTimeDate);
                                //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(dt.Rows[i]["StcJobDetailsId"].ToString()), null, data);
                            }
                        }
                    }
                    if (ds.Tables.Count > 0)
                    {
                        string RecJobIds = "";
                        string RECBulkuploadId = null;

                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            List<string> UniqueBatchId = ds.Tables[0].AsEnumerable().Select(s => s.Field<string>("GBBatchRECUploadId")).Distinct().ToList();
                            if (UniqueBatchId.Count == 1)
                            {
                                var tempRECBulkUploadId = UniqueBatchId[0].Split('-');
                                RECBulkuploadId = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;

                                RecJobIds = string.Join(",", ds.Tables[0].AsEnumerable().Select(s => s.Field<int>("JobID")).ToArray());

                            }

                        }
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            List<string> UniqueBatchId = ds.Tables[1].AsEnumerable().Select(s => s.Field<string>("GBBatchRECUploadId")).Distinct().ToList();
                            if (UniqueBatchId.Count == 1)
                            {
                                var tempRECBulkUploadId = UniqueBatchId[0].Split('-');
                                RECBulkuploadId = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;
                                RecJobIds = string.Join(",", ds.Tables[1].AsEnumerable().Select(s => s.Field<int>("JobID")).ToArray());

                            }

                        }
                        DataSet dsCSV_JobID = new DataSet();
                        DataTable dtSPVXmlPath = new DataTable();


                        long dateTimeTicks = DateTime.Now.Ticks;
                        string strdateTime = DateTime.Now.ToString("yyyyddM_HHmmss");

                        FilePath = ProjectSession.ProofDocuments + "\\UserDocuments\\" + strdateTime + ".csv";

                        if (JobType == "1") // PVD Jobs
                            _commonBulkUploadToCER.GetBulkUploadCSV_PVD(RecJobIds, FilePath, ref dsCSV_JobID, ref dtSPVXmlPath, true);
                        else  // SWH Jobs
                            _commonBulkUploadToCER.GetBulkUploadSWHCSV(RecJobIds, FilePath, ref dsCSV_JobID, true);
                        #region create zip for SPV data XML file
                        // PVD Jobs
                        if (JobType == "1")
                        {
                            paramname = "sguBulkUploadFile";
                            //spvParamName = "sguBulkUploadSdpZip";
                            sguBulkUploadDocumentsParamName = "sguBulkUploadDocumentsZip";
                            IsPVDJob = true;

                            // Zip files for SPV Jobs
                            int spvDataCount = 0;
                            if (dsCSV_JobID.Tables[0] != null)
                            {
                                spvDataCount = dsCSV_JobID.Tables[0].Select("[Signed data package] <> ''").Count();
                            }
                            if (spvDataCount > 0)
                            {
                                spvParamName = "sguBulkUploadSdpZip";
                                spvFilePath = Server.MapPath("~/UserDocuments/" + "SPVXML_" + strdateTime + ".zip");
                                using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                                {
                                    foreach (DataRow dr in dtSPVXmlPath.Rows)
                                    {
                                        //zip.AddFile("D:\\Projects\\FormBot\\SourceCode\\FormBot01082017\\FormBot.Main\\" + dr["Path"].ToString());
                                        zip.AddFile(Path.Combine(ProjectSession.ProofDocuments, dr["Path"].ToString()), "");
                                        zip.Save(spvFilePath);
                                        //zip.AddFile(Path.Combine(ProjectConfiguration.ProofDocumentsURL,dr["Path"].ToString()));
                                    }
                                }
                            }

                        }
                        #endregion
                        string SpvFileName = null;
                        string destSPVPath = null;
                        string srcPath = null;
                        string destFolder = ProjectSession.ProofDocuments + "\\UserDocuments\\" + strdateTime;
                        #region make csv file and add spvxml zip file and csv in folder of zip for rec data
                        if (JobType == "1")
                        {
                            if (dsCSV_JobID.Tables.Count > 0 && dsCSV_JobID.Tables[0] != null)
                            {
                                foreach (DataRow dr in dsCSV_JobID.Tables[0].Rows)
                                {
                                    srcPath = ProjectSession.ProofDocuments + "\\JobDocuments\\" + Convert.ToString(dr["JobId"]) + "\\" + dr["Documents Zip File"].ToString();
                                    string fileName = System.IO.Path.GetFileName(srcPath);
                                    string csvName = System.IO.Path.GetFileName(FilePath);

                                    if (!string.IsNullOrEmpty(spvFilePath))
                                    {
                                        SpvFileName = System.IO.Path.GetFileName(spvFilePath);
                                        destSPVPath = Path.Combine(destFolder + "\\" + SpvFileName);
                                    }

                                    //string destFolder = Server.MapPath("~/UserDocuments/" + dateTimeTicks);
                                    string destPath = Path.Combine(destFolder + "\\" + fileName);
                                    string destCsvPath = Path.Combine(destFolder + "\\" + csvName);
                                    if (!Directory.Exists(destFolder))
                                    {
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();
                                        Directory.CreateDirectory(destFolder);
                                    }

                                    if (System.IO.File.Exists(srcPath))
                                    {
                                        System.IO.File.Copy(srcPath, destPath, true);
                                    }
                                    if (System.IO.File.Exists(FilePath))
                                        System.IO.File.Copy(FilePath, destCsvPath, true);
                                    if (System.IO.File.Exists(spvFilePath))
                                        System.IO.File.Copy(spvFilePath, destSPVPath, true);
                                }
                            }
                        }
                        else if (JobType == "2")
                        {
                            if (dsCSV_JobID.Tables.Count > 0 && dsCSV_JobID.Tables[0] != null)
                            {
                                foreach (DataRow dr in dsCSV_JobID.Tables[0].Rows)
                                {

                                    string csvName = System.IO.Path.GetFileName(FilePath);


                                    string destCsvPath = Path.Combine(destFolder + "\\" + csvName);
                                    if (!System.IO.File.Exists(destFolder))
                                    {
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();
                                        Directory.CreateDirectory(destFolder);
                                    }


                                    if (System.IO.File.Exists(FilePath))
                                        System.IO.File.Copy(FilePath, destCsvPath, true);

                                }
                            }
                        }

                        #endregion
                        #region Creating zip file

                        string InputDirectory = ProjectSession.ProofDocuments + "\\UserDocuments\\" + strdateTime;

                        sguBulkUploadDocumentsFilePath = ProjectSession.ProofDocuments + "\\UserDocuments\\" + strdateTime + "_REC_" + RECBulkuploadId + ".zip";
                        ZipName = Path.GetFileName(sguBulkUploadDocumentsFilePath);



                        using (Stream zipStream = new FileStream(Path.GetFullPath(sguBulkUploadDocumentsFilePath), FileMode.Create, FileAccess.Write))
                        using (System.IO.Compression.ZipArchive archive = new System.IO.Compression.ZipArchive(zipStream, System.IO.Compression.ZipArchiveMode.Create))
                        {
                            bool IsAnyFileExists = false;
                            DirectoryInfo di = new DirectoryInfo(destFolder);
                            FileInfo[] files = di.GetFiles("*.*");
                            if (files.Length > 0)
                            {
                                foreach (var filePath in System.IO.Directory.GetFiles(InputDirectory, "*.*", System.IO.SearchOption.AllDirectories))
                                {
                                    var relativePath = Path.GetFileName(filePath);//filePath.Replace(InputDirectory, string.Empty);
                                    using (Stream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                                    using (Stream fileStreamInZip = archive.CreateEntry(relativePath).Open())
                                        fileStream.CopyTo(fileStreamInZip);

                                    IsAnyFileExists = true;
                                }
                                if (!IsAnyFileExists)
                                {
                                    sguBulkUploadDocumentsFilePath = "";
                                    ZipName = "";
                                }
                            }
                            else
                            {
                                Response.Write("File doesn't exist!");
                            }

                        }
                        #endregion Creating zip file

                        if (System.IO.File.Exists(FilePath))
                            System.IO.File.Delete(FilePath);
                        if (System.IO.File.Exists(spvFilePath))
                            System.IO.File.Delete(spvFilePath);
                        if (System.IO.Directory.Exists(destFolder))
                        {
                            DirectoryInfo directory = new DirectoryInfo(destFolder);
                            GC.Collect();
                            GC.WaitForPendingFinalizers();
                            foreach (FileInfo file in directory.GetFiles())
                            {
                                file.Delete();
                            }
                            Directory.Delete(destFolder);
                        }

                        if (dsStcJobDetailsId.Tables.Count > 0)
                        {
                            if (historytable.Rows.Count > 0)
                            {
                                for (int i = 0; i < historytable.Rows.Count; i++)
                                {
                                    int STCJobDetailID = Convert.ToInt32(historytable.Rows[i]["StcJobDetailsId"]);
                                    int STCStatusID = 19;
                                    string fileName = strdateTime + ".csv";
                                    string RecBulkUploadID = RECBulkuploadId;
                                    string Description = "exported a zip file " + Path.GetFileName(sguBulkUploadDocumentsFilePath) + " fileName: " + fileName + " RecBulkUploadID: " + RecBulkUploadID;
                                    _job.SaveSTCJobHistory(STCJobDetailID, STCStatusID, ProjectSession.LoggedInUserId, Description, DateTime.Now, ProjectSession.LoggedInUserId);
                                }
                            }
                        }
                    }
                    else
                    {
                        Response.Write("File Doesn't exists!");
                    }

                }
                if (System.IO.File.Exists(sguBulkUploadDocumentsFilePath))
                {
                    byte[] fileBytes = System.IO.File.ReadAllBytes(sguBulkUploadDocumentsFilePath);
                    //delete zip file from UserDocument folder
                    System.IO.File.Delete(sguBulkUploadDocumentsFilePath);
                    return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, ZipName);
                }

                else
                    Response.Write("File Doesn't exists!");

            }
            catch (Exception ex)
            {
                _log.Log(SystemEnums.Severity.Error, ex.Message.ToString());
                Response.Write(ex.Message.ToString());
            }
            return null;

        }

        /// <summary>
        /// Gets the bulk upload CSV.
        /// </summary>
        /// <param name="JobID">The job identifier.</param>
        public async Task GetBulkUploadCSVAll(string reseller = "", string ram = "", string stageid = "", string RecCode = "", string solarcompanyid = "", string refJobId = "", string installationaddress = "", string ownername = "", int page = 0, int pageSize = 10, List<KendoGridSorting> sort = null, KendoGridData filter = null, string ResellerName = "", string RamName = "", string complianceOfficername = "", string solarcompanyname = "", string JobID = "", string isAllScaJobView = "", string submissionfromdate = "", string submissiontodate = "", string settlementfromdate = "", string settlementtodate = "", string isShowOnlyAssignJobsSCO = "", int isSPVRequired = -1, int? isSPVInstallationVerified = -1, int year = 0)
        {
            //CommonBAL.ValidateYearForGridData(ref year);
            int ResellerId = 0;
            int RamId = 0;
            int SolarCompanyId = 0;
            int total = 0;
            int StageId = 0;
            string SettlementTermname = "";
            string NotInvoiced = "YES";
            string HasBeenInvoiced = "YES";
            string isSPVReq = isSPVRequired == -1 ? "All" : isSPVRequired == 1 ? "Yes" : "No";
            string isInstallationVerified = isSPVInstallationVerified == -1 ? "All" : isSPVInstallationVerified == null || isSPVInstallationVerified == -2 ? "Not Yet Verified" : isSPVInstallationVerified == 1 ? "Verified" : "Verify Failed";
            List<STCSubmissionView> lstSTCFull = new List<STCSubmissionView>();
            List<STCSubmissionView> lstSTCPreparedToReturn = new List<STCSubmissionView>();
            if (!string.IsNullOrEmpty(Request["filter"]))
            {
                filter = JsonConvert.DeserializeObject<KendoGridFilter>(Request["filter"]);
            }
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
            {
                ResellerId = !string.IsNullOrEmpty(reseller) ? Convert.ToInt32(reseller) : 0;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 2)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 5)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = ProjectSession.LoggedInUserId;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else
            {
                if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                {
                    SolarCompanyId = ProjectSession.SolarCompanyId;
                }
                else
                {
                    SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
                }
            }
            StageId = !string.IsNullOrEmpty(stageid) ? Convert.ToInt32(stageid) : 0;
            //int cOfficerId = !string.IsNullOrEmpty(complianceOfficerId) ? Convert.ToInt32(complianceOfficerId) : 0;
            DataSet dsAllColumnsData = new DataSet();
            IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
            //string mainSTCCacheKey = string.Format(RedisCacheConfiguration.dsSTCAllKeysInfoHashKey, year);
            string mainSTCCacheKey = year > 0 ? string.Format(RedisCacheConfiguration.dsSTCAllKeysInfoHashKey, year) : RedisCacheConfiguration.dsSTCCERApprovedNotInvoicedAllKeysInfoHashKey;
            List<DistributedCacheAllKeysInfoForHashSetView> mainSTCCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainSTCCacheKey);
            if (SolarCompanyId == -1)
            {
                #region SolarCompanyID value is "All"
                //ISolarCompanyBAL _solarCompanyService = new SolarCompanyBAL();
                if ((ProjectSession.UserTypeId == 2) && ResellerId == 0)
                    ResellerId = ProjectSession.ResellerId;
                List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                if (ProjectSession.UserTypeId == 5 && !Convert.ToBoolean(isAllScaJobView))
                    lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByRAMID(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
                {
                    #region Call SP for those SolarCompanyId which are not found in CacheData
                    List<int> lstSolarCompanyIdForCachingData = lstSolarCompanyId.Where(X => mainSTCCache == null || !mainSTCCache.Any(R => R.PID == X)).Select(X => X).ToList();
                    if (lstSolarCompanyIdForCachingData != null && lstSolarCompanyIdForCachingData.Count > 0)
                        CommonBAL.STCDistributedCacheHashSet(cache, lstSolarCompanyIdForCachingData, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                    #endregion
                    #region Fetch SolarCompanyWise JobList Data From Cache
                    lstSolarCompanyId = lstSolarCompanyId.Except(lstSolarCompanyIdForCachingData).ToList();
                    CommonBAL.STCDistributedCacheHashGet(cache, lstSolarCompanyId, year, ref lstSTCFull);
                    #endregion
                    DataTable newDatatable = CommonBAL.ToDataTable<STCSubmissionView>(lstSTCFull);
                    newDatatable = FilteringAndSortingStcSubmissionDatatale(newDatatable, filter, sort, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                    total = newDatatable.Rows.Count;

                    if (dsAllColumnsData.Tables.Count == 0)
                        dsAllColumnsData.Tables.Add(new DataTable());

                    if (total > 0)
                    {
                        dsAllColumnsData.Tables[0].Clear();
                        dsAllColumnsData.Tables[0].Merge(newDatatable);
                    }
                    else
                    {
                        dsAllColumnsData.Tables[0].Clear();
                    }
                }
                #endregion
            }
            else
            {
                #region Selected specific SolarCompanyId
                if (mainSTCCache.Any(j => j.PID == SolarCompanyId))
                {
                    CommonBAL.STCDistributedCacheHashGet(cache, new List<int> { SolarCompanyId }, year, ref lstSTCFull);
                    DataTable dtSTCView = CommonBAL.ToDataTable<STCSubmissionView>(lstSTCFull);
                    DataSet ds = new DataSet();
                    ds.Tables.Add(dtSTCView);
                    DataTable dt = FilteringAndSortingStcSubmissionDatatale(ds.Tables[0], filter, sort, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                    {
                        DataRow[] dr = dt.Select("ScoUserId =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId);
                        if (dr.Length > 0)
                            dt = dr.CopyToDataTable();
                    }
                    total = dt.Rows.Count;
                    if (total > 0)
                        dsAllColumnsData.Tables.Add(dt);
                    else
                        dsAllColumnsData.Tables.Add(new DataTable());
                }
                else
                {
                    CommonBAL.STCDistributedCacheHashSet(cache, new List<int> { SolarCompanyId }, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                    //CommonBAL.STCDataSplitInGroupRedisSet(cache, new List<int> { SolarCompanyId }, ResellerId, ref dsAllColumnsData);
                    DataTable newDatatable = new DataTable();
                    newDatatable = dsAllColumnsData.Tables[0];
                    newDatatable = FilteringAndSortingStcSubmissionDatatale(newDatatable, filter, sort, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                    {
                        DataRow[] dr = newDatatable.Select("ScoUserId =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId);
                        if (dr.Length > 0)
                            newDatatable = dr.CopyToDataTable();
                    }
                    total = newDatatable.Rows.Count;
                    if (total > 0)
                    {
                        dsAllColumnsData.Tables[0].Clear();
                        dsAllColumnsData.Tables[0].Merge(newDatatable);
                    }
                    else
                    {
                        dsAllColumnsData.Tables[0].Clear();
                    }
                }

                #endregion
            }
            if (!string.IsNullOrEmpty(installationaddress))
            {
                DataTable finalDt = dsAllColumnsData.Tables[0].Select("InstallationAddress like '%" + installationaddress + "%'").CopyToDataTable();
                dsAllColumnsData.Tables[0].Clear();
                dsAllColumnsData.Tables[0].Merge(finalDt);
            }
            if (!string.IsNullOrEmpty(submissionfromdate))
            {
                DataTable finalDt = dsAllColumnsData.Tables[0].Select("StcSubmissionDate >= '" + submissionfromdate + "'").CopyToDataTable();
                dsAllColumnsData.Tables[0].Clear();
                dsAllColumnsData.Tables[0].Merge(finalDt);
            }
            if (!string.IsNullOrEmpty(submissiontodate))
            {
                DataTable finalDt = dsAllColumnsData.Tables[0].Select("StcSubmissionDate <= '" + Convert.ToDateTime(submissiontodate).AddDays(1) + "'").CopyToDataTable();
                dsAllColumnsData.Tables[0].Clear();
                dsAllColumnsData.Tables[0].Merge(finalDt);
            }
            if (!string.IsNullOrEmpty(settlementfromdate))
            {
                DataTable finalDt = dsAllColumnsData.Tables[0].Select("STCSettlementDate >= '" + settlementfromdate + "'").CopyToDataTable();
                dsAllColumnsData.Tables[0].Clear();
                dsAllColumnsData.Tables[0].Merge(finalDt);
            }
            if (!string.IsNullOrEmpty(settlementtodate))
            {
                DataTable finalDt = dsAllColumnsData.Tables[0].Select("STCSettlementDate <= '" + Convert.ToDateTime(settlementtodate).AddDays(1) + "'").CopyToDataTable();
                dsAllColumnsData.Tables[0].Clear();
                dsAllColumnsData.Tables[0].Merge(finalDt);
            }
            IList<dynamic> lstJobsSTCSubmission = new List<dynamic>();
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            DataTable exportdt = new DataTable();
            UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
            {
                IsKendoGrid = true,
                PageSize = 10,
                UserId = ProjectSession.LoggedInUserId,
                ViewPageId = SystemEnums.ViewPageId.STCSubmissionView.GetHashCode(),
                UserWiseGridConfigurationId = 0
            };
            List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
            var sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.STCSubmissionView.GetHashCode()).FirstOrDefault();
            if (sessionObjUserWiseGridConfiguration == null)
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            if (sessionObjUserWiseGridConfiguration.IsKendoGrid)
            {
                listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.STCSubmissionView.GetHashCode());
                string[] columnns = listUserWiseColumns.Select(x => x.Name).ToArray();
                if (!string.IsNullOrEmpty(JobID))
                {
                    DataTable newDT = dsAllColumnsData.Tables[0].Select("JobId in (" + JobID + ")").CopyToDataTable();
                    dsAllColumnsData.Tables[0].Clear();
                    dsAllColumnsData.Tables[0].Merge(newDT);
                }
                exportdt = new DataView(dsAllColumnsData.Tables[0]).ToTable(false, columnns);
            }
            else
            {
                lstJobsSTCSubmission = DataTableExtension.ToDynamicList(dsAllColumnsData.Tables[0], "JobList");
            }

            if (!string.IsNullOrEmpty(JobID))
                lstJobsSTCSubmission = lstJobsSTCSubmission.Where(x => JobID.Split(',').ToList().Contains(x.JobID.ToString())).ToList();
            //IList<FormBot.Entity.JobList> lstJobsSTCSubmission = _job.GetJobSTCSubmission(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0, 0, "", "", StageId, cOfficerId, ResellerId, RamId, SolarCompanyId, pvdswhcode, refJobId, ownername, installationaddress, SubmissionFromDate, SubmissionToDate, SettlementFromDate, SettlementToDate, Invoiced, sTermId, string.IsNullOrEmpty(JobID) ? "-1" : JobID);
            StringBuilder csv = new StringBuilder();
            csv.Append(@"Reseller:" + ResellerName);
            csv.Append("\r\n");
            csv.Append(@"RAM:" + RamName);
            csv.Append("\r\n");
            csv.Append(@"Compliance Officer:" + complianceOfficername);
            csv.Append("\r\n");
            csv.Append(@"Solar Company:" + solarcompanyname);
            csv.Append("\r\n");
            if (filter != null && filter.Filters != null && filter.Filters.Count > 0)
            {

                for (int i = 0; i < filter.Filters.Count; i++)
                {
                    if (filter.Filters[i] != null)
                    {
                        if (filter.Filters[i].Filters != null)
                        {
                            for (int j = 0; j < filter.Filters[i].Filters.Count; j++)
                            {
                                GetAllValueForUploadCSV(filter.Filters[i], j, ref RecCode, ref installationaddress, ref SettlementTermname, ref NotInvoiced, ref HasBeenInvoiced, ref submissionfromdate, ref submissiontodate, ref settlementfromdate, ref settlementtodate);
                            }
                        }
                        else
                        {
                            GetAllValueForUploadCSV(filter, i, ref RecCode, ref installationaddress, ref SettlementTermname, ref NotInvoiced, ref HasBeenInvoiced, ref submissionfromdate, ref submissiontodate, ref settlementfromdate, ref settlementtodate);
                        }
                    }

                }
            }
            csv.Append(@"PVD/SWH Code:" + RecCode);
            csv.Append("\r\n");
            csv.Append(@"Reference Number/Job ID Number:" + refJobId);
            csv.Append("\r\n");
            csv.Append(@"Owner Name:" + ownername);
            csv.Append("\r\n");
            csv.Append(@"Installation Address:" + installationaddress);
            csv.Append("\r\n");
            csv.Append(@"Submission Start Date:" + submissionfromdate);
            csv.Append("\r\n");
            csv.Append(@"Submission End Date:" + submissiontodate);
            csv.Append("\r\n");
            csv.Append(@"Settlement Start Date:" + settlementfromdate);
            csv.Append("\r\n");
            csv.Append(@"Settlement End Date:" + settlementtodate);
            csv.Append("\r\n");
            csv.Append(@"Settlement Term:" + SettlementTermname);
            csv.Append("\r\n");
            csv.Append(@"Not Yet Invoiced:" + NotInvoiced);
            csv.Append("\r\n");
            csv.Append(@"Has Been Invoiced:" + HasBeenInvoiced);
            csv.Append("\r\n");
            ////csv.Append(@"Panel / Inverter Details: " + PanelInverterDetails);
            ////csv.Append("\r\n");
            csv.Append(@"Is SPV Required: " + isSPVReq);
            csv.Append("\r\n");
            csv.Append(@"Is Installation Verified: " + isInstallationVerified);
            csv.Append("\r\n");
            csv.Append("\r\n");
            objUserWiseGridConfiguration = new UserWiseGridConfiguration()
            {
                IsKendoGrid = true,
                PageSize = 10,
                UserId = ProjectSession.LoggedInUserId,
                ViewPageId = SystemEnums.ViewPageId.STCSubmissionView.GetHashCode(),
                UserWiseGridConfigurationId = 0
            };
            lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
            sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.STCSubmissionView.GetHashCode()).FirstOrDefault();
            if (sessionObjUserWiseGridConfiguration == null)
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            if (!sessionObjUserWiseGridConfiguration.IsKendoGrid)
            {
                csv.Append(@"JobId,JobNumber,REF No - Company Name - Owner Name,Installation Address,STC Status,GBRECBulkId,RECBulkUploadTime,Solar Company,PVD/SWH Code,STC,STC Price,Settlement Term,Submission Date,Settlement Date,C. Officer,Invoiced?");
                csv.Append("\r\n");
                if (lstJobsSTCSubmission.Count > 0)
                {
                    foreach (dynamic obj in lstJobsSTCSubmission)
                    {
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.JobID.ToString()) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.JobNumber) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.RefNumberOwnerName) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.InstallationAddress) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.STCStatus) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.GBBatchRECUploadId) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.RECBulkUploadTimeDate != null ? obj.RECBulkUploadTimeDate.ToString("dd/MM/yyyy") : "") + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.SolarCompany) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.PVDSWHCode) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(Convert.ToString(obj.STC)) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(Convert.ToString(obj.STCPrice)) + ",");
                        if (obj.STCSettlementTerm == 10)
                            csv.Append(Helper.Helper.Common.StringToCSVCell("Custom - " + Common.GetDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)obj.CustomSettlementTerm, "")) + ",");
                        else
                            csv.Append(Helper.Helper.Common.StringToCSVCell(Common.GetDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)obj.STCSettlementTerm, "")) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.STCSubmissionDate.ToString()) + ",");

                        //As per the discussion with hus, We have to check null settlementdate allow in export csv.
                        //csv.Append(Helper.Helper.Common.StringToCSVCell(obj.STCSettlementDate.ToString()) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.STCSettlementDate != null ? obj.STCSettlementDate.ToString() : "") + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.ComplianceOfficer) + ",");
                        csv.Append(Helper.Helper.Common.StringToCSVCell(obj.IsInvoiced == true ? "Yes" : "No") + ",");
                        csv.Remove(csv.ToString().Length - 1, 1);
                        csv.Append("\r\n");
                    }
                }
            }
            else
            {
                csv.Append(string.Join(",", listUserWiseColumns.Select(x => x.Name).ToArray()));
                csv.Append("\r\n");
                int index = exportdt.Columns["STCSettlementTerm"].Ordinal;
                int jobTypeIndex = -1;
                if (exportdt.Columns["JobTypeId"] != null)
                    jobTypeIndex = exportdt.Columns["JobTypeId"].Ordinal;
                foreach (DataRow row in exportdt.Rows)
                {
                    string[] fields = row.ItemArray.Select(field => field.ToString().Contains(",") ? String.Format("\"{0}\"", field) : field.ToString()).
                                                    ToArray();
                    fields[index] = SystemEnums.GetDescription((SystemEnums.STCSettlementTerm)Convert.ToInt32(fields[index]));
                    if (jobTypeIndex != -1)
                        fields[jobTypeIndex] = Convert.ToInt32(fields[jobTypeIndex]) == 1 ? "PVD" : "SWH";
                    csv.Append(string.Join(",", fields));
                    csv.Append("\r\n");
                }
            }

            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment;filename=Jobs" + DateTime.Now.Ticks.ToString() + ".csv");
            Response.Charset = "";
            Response.ContentType = "application/text";
            Response.Output.Write(csv.ToString());
            Response.Flush();
            Response.End();
        }



        public void GetAllValueForUploadCSV(KendoGridData filter, int i, ref string RecCode, ref string installationaddress, ref string SettlementTermname, ref string NotInvoiced, ref string HasBeenInvoiced, ref string submissionfromdate, ref string submissiontodate, ref string settlementfromdate, ref string settlementtodate)
        {
            if (filter.Filters[i].Field.ToLower() == "pvdswhcode")
            {
                RecCode = filter.Filters[i].Value;
            }
            if (filter.Filters[i].Field.ToLower() == "installationaddress")
            {
                installationaddress = filter.Filters[i].Value;
            }
            if (filter.Filters[i].Field.ToLower() == "stcsettlementterm")
            {
                SettlementTermname = SystemEnums.GetDescription((SystemEnums.STCSettlementTerm)Convert.ToInt32(filter.Filters[i].Value));
            }
            if (filter.Filters[i].Field.ToLower() == "invoiced")
            {
                var filterValue = Convert.ToInt32(filter.Filters[i].Value);
                if (filterValue == 0)
                {
                    NotInvoiced = "YES";
                    HasBeenInvoiced = "NO";
                }
                else if (filterValue == 1)
                {
                    NotInvoiced = "NO";
                    HasBeenInvoiced = "YES";
                }
            }
            if (filter.Filters[i].Field.ToLower() == "stcsubmissiondate" && filter.Filters[i].Operator == "gte")
            {
                submissionfromdate = filter.Filters[i].Value;
            }
            if (filter.Filters[i].Field.ToLower() == "stcsubmissiondate" && filter.Filters[i].Operator == "lte")
            {
                submissiontodate = filter.Filters[i].Value;
            }
            if (filter.Filters[i].Field.ToLower() == "stcsettlementdate" && filter.Filters[i].Operator == "gte")
            {
                settlementfromdate = filter.Filters[i].Value;
            }
            if (filter.Filters[i].Field.ToLower() == "stcsettlementdate" && filter.Filters[i].Operator == "gte")
            {
                settlementtodate = filter.Filters[i].Value;
            }
        }
        /// <summary>
        /// Gets the bulk upload SWHCSV.
        /// </summary>
        /// <param name="JobID">The job identifier.</param>
        public void GetBulkUploadSWHCSV(string JobID)
        {
            DataSet dsCSV_JobID = new DataSet();
            StringBuilder csv = _commonBulkUploadToCER.GetBulkUploadSWHCSV(JobID, null, ref dsCSV_JobID, true, true);
            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment;filename=SWHJobs" + DateTime.Now.Ticks.ToString() + ".csv");
            Response.Charset = "";
            Response.ContentType = "application/text";
            Response.Output.Write(csv.ToString());
            Response.Flush();
            Response.End();
        }

        /// <summary>
        /// Checks the duplicate serial numbers.
        /// </summary>
        /// <param name="serialNumbers">The serial numbers.</param>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>result object</returns>
        [HttpPost]
        public JsonResult CheckDuplicateSerialNumbers(string serialNumbers, string jobID)
        {
            serialNumbers = serialNumbers.Replace("\n", "\r\n");
            DataSet dataset = _job.CheckSerialNnumbers(serialNumbers, ProjectSession.SolarCompanyId, Convert.ToInt32(jobID));
            if (dataset.Tables.Count > 0)
            {
                return Json(Newtonsoft.Json.JsonConvert.SerializeObject(dataset.Tables[0]), JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json("data", JsonRequestBehavior.AllowGet);
            }
        }
        [UserAuthorization]

        [HttpGet]
        public async Task<JsonResult> DeleteCheckListPhotos(string checkListIds, string sigIds, string pdelete, int jobId = 0)
        {
            DataSet dsData = _job.DeleteCheckListPhotos(checkListIds, sigIds, pdelete, jobId);
            //DataTable dtPhoto = dsData.Tables[0];
            //DataTable dtSignature = dsData.Tables[1];


            //foreach (DataRow dr in dtPhoto.Rows)
            //{
            //    try
            //    {
            //        DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL, Convert.ToString(dr["Path"])));
            //    }
            //    catch (Exception) { }
            //}

            //foreach (DataRow dr in dtSignature.Rows)
            //{
            //    try
            //    {
            //        DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL, Convert.ToString(dr["Path"])));
            //    }
            //    catch (Exception) { }
            //}
            bool isSPVRequired = false;
            if (dsData != null && dsData.Tables.Count > 0 && dsData.Tables[0] != null && dsData.Tables[0].Rows.Count > 0)
            {
                isSPVRequired = Convert.ToBoolean(dsData.Tables[0].Rows[0]["IsSPVRequired"]);
            }


            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
            if (jobId > 0)
            {
                SortedList<string, string> data = new SortedList<string, string>();
                data.Add("IsSPVRequired", Convert.ToString(isSPVRequired));
                //await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(jobId), data);

                //DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, jobId.ToString());
                //if (dt.Rows.Count > 0)
                //{
                //    string spvRequired = dt.Rows[0]["IsSPVRequired"].ToString();

                //    SortedList<string, string> data = new SortedList<string, string>();

                //    data.Add("IsSPVRequired", spvRequired);
                //    CommonBAL.SetCacheDataForSTCSubmission(null, jobId, data);
                //}

            }
            //return Json("true", JsonRequestBehavior.AllowGet);
            if (dsData != null && dsData.Tables.Count > 0 && dsData.Tables[1] != null && dsData.Tables[1].Rows.Count > 0)
            {
                //  int JobID = Convert.ToInt32(dsData.Tables[1].Rows[0]["JobId"].ToString());
                List<string> lstphotoname = new List<string>();
                foreach (DataRow dr in dsData.Tables[1].Rows)
                {

                    string path = dr["path"].ToString();
                    string photoname = Path.GetFileName(path);
                    lstphotoname.Add(photoname);
                }
                string JobHistoryMessage = "has removed photos: <b style=\"color:black\">" + string.Join(",", lstphotoname) + "</b>";
                Common.SaveJobHistorytoXML(jobId, JobHistoryMessage, "General", "DeletePhotos", ProjectSession.LoggedInName, false);
            }
            return this.Json(new { status = "true", isSPVRequired = isSPVRequired }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the directory.
        /// </summary>
        /// <param name="path">The path.</param>
        private void DeleteDirectory(string path)
        {
            if (System.IO.File.Exists(path))
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                System.IO.File.Delete(path);
            }

        }

        /// <summary>
        /// Deletes the file.
        /// </summary>
        /// <param name="FolderName">Name of the folder.</param>
        /// <param name="fileName">Name of the file.</param>
        private void DeleteFile(string FolderName, string fileName)
        {
            DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + FolderName + "\\" + "Invoice", fileName));
        }


        ///// <summary>
        ///// Moves the deleted documents.
        ///// </summary>
        ///// <param name="path">The path.</param>
        //private string MoveDeletedDocuments(string sourcePath)
        //{
        //    string fileName = Path.GetFileName(sourcePath);
        //    string pathInfo = sourcePath.Split(new string[] { "JobDocuments\\" }, StringSplitOptions.None)[1].ToString();
        //    string JobId = Convert.ToString(Directory.GetParent(pathInfo).Parent);
        //    string destPath = string.Empty;
        //    if (System.IO.File.Exists(sourcePath))
        //    {
        //        string destinationDirectory = ProjectSession.ProofDocumentsURL + "JobDocuments" + "\\" + JobId + "\\" + "DeletedDocuments";

        //        GC.Collect();
        //        GC.WaitForPendingFinalizers();
        //        if (!Directory.Exists(destinationDirectory))
        //        {
        //            Directory.CreateDirectory(destinationDirectory);
        //        }
        //        destPath = System.IO.Path.Combine(destinationDirectory, fileName);
        //        System.IO.File.Copy(sourcePath, destPath, true);

        //        System.IO.File.Delete(sourcePath);
        //    }
        //    if (!string.IsNullOrEmpty(destPath))
        //        return (destPath.Split(new string[] { "JobDocuments\\" }, StringSplitOptions.None)[1].ToString());
        //    else
        //        return "";
        //}
        #endregion Event

        #region Methods

        /// <summary>
        /// Gets the job list.
        /// </summary>
        /// <param name="stageid">The stageid.</param>
        /// <param name="solarcompanyid">The solarcompanyid.</param>
        /// <param name="isarchive">if set to <c>true</c> [isarchive].</param>
        /// <param name="scheduletype">The scheduletype.</param>
        /// <param name="jobtype">The jobtype.</param>
        /// <param name="jobpriority">The jobpriority.</param>
        /// <param name="searchtext">The searchtext.</param>
        /// <param name="fromdate">The fromdate.</param>
        /// <param name="todate">The todate.</param>
        /// <param name="jobref">if set to <c>true</c> [jobref].</param>
        /// <param name="jobdescription">if set to <c>true</c> [jobdescription].</param>
        /// <param name="jobaddress">if set to <c>true</c> [jobaddress].</param>
        /// <param name="jobclient">if set to <c>true</c> [jobclient].</param>
        /// <param name="jobstaff">if set to <c>true</c> [jobstaff].</param>
        /// <param name="invoiced">if set to <c>true</c> [invoiced].</param>
        /// <param name="notinvoiced">if set to <c>true</c> [notinvoiced].</param>
        /// <param name="readytotrade">if set to <c>true</c> [readytotrade].</param>
        /// <param name="notreadytotrade">if set to <c>true</c> [notreadytotrade].</param>
        /// <param name="traded">if set to <c>true</c> [traded].</param>
        /// <param name="nottraded">if set to <c>true</c> [nottraded].</param>
        /// <param name="preapprovalnotapproved">if set to <c>true</c> [preapprovalnotapproved].</param>
        /// <param name="preapprovalapproved">if set to <c>true</c> [preapprovalapproved].</param>
        /// <param name="connectioncompleted">if set to <c>true</c> [connectioncompleted].</param>
        /// <param name="connectionnotcompleted">if set to <c>true</c> [connectionnotcompleted].</param>
        /// <param name="ACT">if set to <c>true</c> [act].</param>
        /// <param name="NSW">if set to <c>true</c> [NSW].</param>
        /// <param name="NT">if set to <c>true</c> [nt].</param>
        /// <param name="QLD">if set to <c>true</c> [QLD].</param>
        /// <param name="SA">if set to <c>true</c> [sa].</param>
        /// <param name="TAS">if set to <c>true</c> [tas].</param>
        /// <param name="WA">if set to <c>true</c> [wa].</param>
        /// <param name="VIC">if set to <c>true</c> [vic].</param>
        /// <param name="preapprovalstatusid">The preapprovalstatusid.</param>
        /// <param name="connectionstatusid">The connectionstatusid.</param>
        public void GetJobList(string stageid, string solarcompanyid = "", bool isarchive = false, string scheduletype = "", string jobtype = "", string jobpriority = "", string searchtext = "",
            string fromdate = "", string todate = "", bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false,
            bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true,
            bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true,
            bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true,
            string preapprovalstatusid = "", string connectionstatusid = "", string fromdateinstalling = "", string todateinstalling = "", string sResellerId = "")
        {

            GridParam gridParam = Grid.ParseParams(HttpContext.Request);
            int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
            string SolarCompanyId = "0";
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
            {
                SolarCompanyId = Convert.ToString(ProjectSession.SolarCompanyId);
            }
            else
            {
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? solarcompanyid : "0";
            }

            if (SolarCompanyId == "-1")
            {
                List<int> lstSolarCompanyId = new List<int>();
                int ResellerId = !string.IsNullOrEmpty(sResellerId) ? Convert.ToInt32(sResellerId) : ProjectSession.ResellerId;
                if (ProjectSession.UserTypeId == 5)
                {
                    IRAMSolarCompanyMappingBAL _ramSolarCompanyMappingBAL = new RAMSolarCompanyMappingBAL();
                    lstSolarCompanyId = _ramSolarCompanyMappingBAL.GetAssignedSolarCompanyToRAM(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                }
                else
                {
                    //ISolarCompanyBAL _solarCompanyService = new SolarCompanyBAL();
                    lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                }
                if (lstSolarCompanyId.Count > 0)
                    SolarCompanyId = string.Join(",", lstSolarCompanyId.Select(X => Convert.ToString(X)));
            }

            int ScheduleType = !string.IsNullOrEmpty(scheduletype) ? Convert.ToInt32((SystemEnums.JobScheduleType)Enum.Parse(typeof(SystemEnums.JobScheduleType), scheduletype).GetHashCode()) : 0;
            int JobType = !string.IsNullOrEmpty(jobtype) ? Convert.ToInt32((SystemEnums.JobType)Enum.Parse(typeof(SystemEnums.JobType), jobtype).GetHashCode()) : 0;
            int JobPriority = !string.IsNullOrEmpty(jobpriority) ? Convert.ToInt32((SystemEnums.JobPriority)Enum.Parse(typeof(SystemEnums.JobPriority), jobpriority).GetHashCode()) : 0;
            int StageId = Convert.ToInt32(stageid);
            DateTime? FromDate = null, ToDate = null;
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                FromDate = Convert.ToDateTime(fromdate);
                ToDate = Convert.ToDateTime(todate);
            }

            DateTime? FromDateInstalling = null, ToDateInstalling = null;
            if (!string.IsNullOrEmpty(fromdateinstalling) && !string.IsNullOrEmpty(todateinstalling))
            {
                FromDateInstalling = Convert.ToDateTime(fromdateinstalling);
                ToDateInstalling = Convert.ToDateTime(todateinstalling);
            }

            int PreApprovalStatusId = !string.IsNullOrEmpty(preapprovalstatusid) ? Convert.ToInt32(preapprovalstatusid) : 0;
            int ConnectionStatusId = !string.IsNullOrEmpty(connectionstatusid) ? Convert.ToInt32(connectionstatusid) : 0;
            IList<FormBot.Entity.JobList> lstJobs = _job.GetJobList(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, pageNumber, gridParam.PageSize, gridParam.SortCol, gridParam.SortDir, Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()), StageId, SolarCompanyId, isarchive, ScheduleType, JobType, JobPriority, searchtext, FromDate, ToDate, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, PreApprovalStatusId, ConnectionStatusId, FromDateInstalling, ToDateInstalling);
            if (lstJobs.Count > 0)
            {
                gridParam.TotalDisplayRecords = lstJobs.FirstOrDefault().TotalRecords;
                gridParam.TotalRecords = lstJobs.FirstOrDefault().TotalRecords;
                lstJobs.ToList().ForEach(a => a.UserID = ProjectSession.LoggedInUserId);
            }

            HttpContext.Response.Write(Grid.PrepareDataSet(lstJobs, gridParam));

        }


        [HttpPost]
        public ActionResult GetJobStageCount(string sId)
        {

            int SolarCompanyId = 0;
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 5)
            {
                SolarCompanyId = !string.IsNullOrEmpty(sId) ? Convert.ToInt32(sId) : 0;
            }
            else
            {
                SolarCompanyId = ProjectSession.SolarCompanyId;
            }

            var lstJobStagesCount = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, SolarCompanyId);
            return this.Json(new { lstJobStagesCount, success = true });
        }

        /// <summary>
        /// Deletes the selected jobs.
        /// </summary>
        /// <param name="jobs">The jobs.</param>
        /// <returns>Action result</returns>
        [UserAuthorization]
        public async Task<ActionResult> DeleteSelectedJobs(List<JobDeleteViewModel> jobs)
        {
            StringBuilder sb = new StringBuilder();
            clsUploadedFileJsonResponseObject JsonResponseObj = new clsUploadedFileJsonResponseObject();
            List<int> lstJobs = new List<int>();
            List<BasicDetails> jobBasicDetails = new List<BasicDetails>();
            foreach (JobDeleteViewModel job in jobs)
            {
                int jID = 0;
                if (!string.IsNullOrEmpty(job.Id))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(job.Id, "id"), out jID);
                    lstJobs.Add(jID);

                    BasicDetails jobDetail = new BasicDetails()
                    {
                        JobID = jID,
                        Title = job.JobTitle
                    };
                    jobBasicDetails.Add(jobDetail);
                }

            }

            List<DeleteJob_Failed> lstNotDeletedJob = new List<DeleteJob_Failed>();
            lstNotDeletedJob = _job.DeleteSelectedJobs(lstJobs, DateTime.Now, ProjectSession.LoggedInUserId, ProjectSession.UserTypeId);
            var deletedJobs = from dj in lstJobs
                              where !(from ndj in lstNotDeletedJob select ndj.JobID).Contains(dj)
                              select dj;
            List<int> lstdeletedJobs = deletedJobs.ToList();
            SendMailWhenJobsDeleted(lstdeletedJobs);
            foreach (BasicDetails objBasicDetail in jobBasicDetails)
            {
                //bool isHistorySaved = false;
                if (!lstNotDeletedJob.Any(s => s.JobID == objBasicDetail.JobID))
                {
                    //isHistorySaved = _jobHistory.LogJobHistory(objBasicDetail, HistoryCategory.JobDeleted);
                    string JobTitle = !string.IsNullOrEmpty(objBasicDetail.Title) ? objBasicDetail.Title : objBasicDetail.RefNumber;

                    string JobHistoryMessage = "deleted the job: <b class=\"blue-title\">" + JobTitle + "</b>";
                    Common.SaveJobHistorytoXML(objBasicDetail.JobID, JobHistoryMessage, "General", "JobDeleted", ProjectSession.LoggedInName, false);
                }
            }

            if (lstNotDeletedJob != null && lstNotDeletedJob.Count > 0)
            {
                JsonResponseObj.status = "Failed";
                sb.Append("<ul>");
                sb.Append("<li>Below jobs are not deleted</li>");
                foreach (var item in lstNotDeletedJob)
                    sb.Append("<li>" + item.Title + " - " + item.Reason + "</li>");
                sb.Append("</ul>");
            }
            else
            {
                string strEmailConfigureMsg = string.Empty;
                strEmailConfigureMsg = !ProjectSession.IsUserEmailAccountConfigured ? "(Can not send mail for deleted jobs because email account is not configured)" : string.Empty;
                JsonResponseObj.status = "Completed";

                sb.Append("<ul>");
                sb.Append("<li>" + jobs.Count() + " Job(s) deleted successfully. " + strEmailConfigureMsg + " </li>");
                sb.Append("</ul>");
            }

            foreach (int jid in lstJobs)
            {
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jid);
            }

            string jobids = string.Join(",", lstJobs.Select(n => n.ToString()).ToArray());
            DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, jobids);

            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    SortedList<string, string> data = new SortedList<string, string>();
                    string Isdeleted = dt.Rows[i]["IsDeleted"].ToString();
                    // string RECBulkUploadTimeDate = dt.Rows[i]["RECBulkUploadTime"].ToString();
                    data.Add("IsDeleted", Isdeleted);
                    //data.Add("RECBulkUploadTimeDate", RECBulkUploadTimeDate);
                    //await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(dt.Rows[i]["JobId"].ToString()), data);
                }
            }
            JsonResponseObj.strErrors = sb.ToString();
            return this.Json(new { JsonResponseObj });
        }

        /// <summary>
        /// Deletes the selected jobs.
        /// </summary>
        /// <param name="jobs">The jobs.</param>
        /// <returns>Action result</returns>      
        [HttpPost]
        public async Task<ActionResult> OpenDeletedJobs(List<JobDeleteViewModel> jobs)
        {
            clsUploadedFileJsonResponseObject JsonResponseObj = new clsUploadedFileJsonResponseObject();
            List<int> lstJobs = new List<int>();
            foreach (JobDeleteViewModel job in jobs)
            {
                int jID = 0;
                if (!string.IsNullOrEmpty(job.Id))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(job.Id, "id"), out jID);
                    lstJobs.Add(jID);
                }
            }

            _job.OpenDeletedJobs(lstJobs, DateTime.Now, ProjectSession.LoggedInUserId);

            foreach (int jid in lstJobs)
            {
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jid);
            }

            JsonResponseObj.status = "Completed";
            JsonResponseObj.strErrors = "<ul>" + "<li>" + jobs.Count() + " Job(s) opened successfully. </li>" + "</ul>";
            return this.Json(new { JsonResponseObj });
        }

        /// <summary>
        /// Uploads the photo.
        /// </summary>
        /// <param name="userId">The user identifier.</param>
        /// <returns>status true false.</returns>
        [HttpPost]
        public async Task<JsonResult> UploadPhoto(string userId)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    uploadStatus.Add(GetFileUploadPhoto(Request.Files[i], userId));
                    if (uploadStatus[i].Status == true)
                    {
                        string filename = uploadStatus[i].FileName.Replace("%", "$");
                        _job.InsertPhoto(Convert.ToInt32(userId), filename, 1);
                    }
                }
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(userId));
            }

            return Json(uploadStatus);
        }

        [UserAuthorization]
        [HttpPost]
        //public async Task<JsonResult> UploadReferencePhoto(string JobId, string UserId, string jobScId = "", string folder = "", bool isRef = false, bool IsDefault = false, string ClassType = "", string PdfLocationId = "", string ClassTypeId = "", string PdfName = "", bool IsAllowAccesstoUploadGPSPhoto = false)
        public JsonResult UploadReferencePhoto(string JobId, string UserId, string jobScId = "", string folder = "", bool isRef = false, bool IsDefault = false, string ClassType = "", string PdfLocationId = "", string ClassTypeId = "", string PdfName = "", bool IsAllowAccesstoUploadGPSPhoto = false)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            bool isSPVRequired = false;
            string latitude = null;
            string longitude = null;
            string isUnderInstallationArea = string.Empty;
            int PhotoTypeId = 0;
            List<string> lstPhotoName = new List<string>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                int length = Request.Files.Count;
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    string RefPath = string.Empty;
                    uploadStatus.Add(GetReferenceFileUploadPhoto(Request.Files[i], JobId, isRef, folder, IsDefault, ref RefPath));
                    lstPhotoName.Add(Path.GetFileName(RefPath));
                    if (uploadStatus[i].Status == true)
                    {
                        uploadStatus[i].Path = uploadStatus[i].Path.Replace("\\", "\\\\");
                        //if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
                        if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || IsAllowAccesstoUploadGPSPhoto)
                        {
                            Common.GetLatitudeLongitudeValueFromImage(Path.Combine(ProjectSession.ProofDocuments, RefPath), ref latitude, ref longitude);
                        }

                        DataSet jobPhoto = _job.InsertReferencePhoto(Convert.ToInt32(JobId), RefPath, Convert.ToInt32(UserId), isRef ? "" : jobScId, isRef ? "" : folder, IsDefault, ClassType, null, "", latitude, longitude);


                        if (jobPhoto != null && jobPhoto.Tables.Count > 0)
                        {
                            if (jobPhoto.Tables[0] != null && jobPhoto.Tables[0].Rows.Count > 0)
                            {
                                uploadStatus[i].AttachmentID = Convert.ToInt32(jobPhoto.Tables[0].Rows[0][0]);
                            }
                            if (jobPhoto.Tables[1] != null && jobPhoto.Tables[1].Rows.Count > 0)
                            {
                                isSPVRequired = Convert.ToBoolean(jobPhoto.Tables[1].Rows[0]["IsSPVRequired"]);
                                uploadStatus[i].isUnderInstallationArea = jobPhoto.Tables[1].Rows[0]["IsUnderInstallationArea"] == null ? "" : Convert.ToString(jobPhoto.Tables[1].Rows[0]["IsUnderInstallationArea"]);
                                uploadStatus[i].latitude = string.IsNullOrEmpty(latitude) ? "" : latitude;
                                uploadStatus[i].longitude = string.IsNullOrEmpty(longitude) ? "" : longitude;
                                uploadStatus[i].createdDate = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                            }
                            if (jobPhoto.Tables[2] != null && jobPhoto.Tables[2].Rows.Count > 0)
                            {
                                PhotoTypeId = !string.IsNullOrEmpty(jobPhoto.Tables[2].Rows[0]["CheckListPhotoTypeId"].ToString()) ? Convert.ToInt32(jobPhoto.Tables[2].Rows[0]["CheckListPhotoTypeId"].ToString()) : 0;
                            }
                        }
                        //uploadStatus[i].AttachmentID = _job.InsertReferencePhoto(Convert.ToInt32(JobId), RefPath, Convert.ToInt32(UserId), isRef ? "" : jobScId, isRef ? "" : folder, IsDefault, ClassType, null, "", latitude, longitude);
                    }

                    if (ClassTypeId == "4" && length == (i + 1) && !string.IsNullOrEmpty(PdfName))
                    {
                        UploadPdfAndSave(PdfLocationId, JobId, folder, PdfName, RefPath, UserId);
                    }
                }
                #region add log in xml for upload photo
                int VisitCheckListItemId = !string.IsNullOrEmpty(folder) ? Convert.ToInt32(folder) : 0;
                DataSet dataForUploadPhotoLog = _job.GetCheckListItemDetailsFromIdForLog(VisitCheckListItemId);
                if ((isRef == true || IsDefault == true) || (dataForUploadPhotoLog != null && dataForUploadPhotoLog.Tables.Count > 0 && dataForUploadPhotoLog.Tables[0].Rows.Count > 0))
                {
                    string itemname = string.Empty;
                    if (IsDefault == true)
                    {
                        if (ClassType == "1")
                            itemname = "Serial Photos (Default Photos)";
                        else if (ClassType == "2")
                            itemname = "Installation Photos (Default Photos)";
                    }
                    if (isRef == true)
                    {
                        itemname = "Reference Photos";
                    }
                    if (isRef == false && IsDefault == false)
                        itemname = dataForUploadPhotoLog.Tables[0].Rows[0]["ItemName"].ToString();
                    JobHistory objJobHistory = new JobHistory()
                    {
                        JobID = Convert.ToInt32(JobId),
                        UniqueVisitId = (isRef == false && IsDefault == false) ? (" (" + dataForUploadPhotoLog.Tables[0].Rows[0]["VisitUniqueId"].ToString() + ")") : "",
                        ItemName = itemname,
                        PhotoName = string.Join(",", lstPhotoName)
                    };
                    //20.Upload photos and upload GST document are not recorded. Hus Lam has uploaded 12312.jpg, 3242.jpg, 1232151.jpg into pv serial numbers(220120001)
                    //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
                    string JobHistoryMessage = "has uploaded <b style=\"color:black\">" + objJobHistory.PhotoName + " </b> into <b style=\"color:black\"> " + objJobHistory.ItemName + objJobHistory.UniqueVisitId + "</b>.";
                    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "UploadPhoto", ProjectSession.LoggedInName, false);
                }
                #endregion
                //await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(JobId));
                if (Convert.ToInt32(JobId) > 0)
                {
                    SortedList<string, string> data = new SortedList<string, string>();
                    data.Add("IsSPVRequired", Convert.ToString(isSPVRequired));
                    //await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(JobId), data);

                    //DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, JobId);
                    //if (dt.Rows.Count > 0)
                    //{
                    //    string spvRequired = dt.Rows[0]["IsSPVRequired"].ToString();
                    //    SortedList<string, string> data = new SortedList<string, string>();
                    //    data.Add("IsSPVRequired", spvRequired);
                    //    CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(JobId), data);
                    //}
                }
            }
            //return Json(uploadStatus);
            return this.Json(new { uploadStatus = uploadStatus, isSPVRequired = isSPVRequired, isUnderInstallationArea = isUnderInstallationArea, latitude = latitude, longitude = longitude, PhotoTypeId = PhotoTypeId }, JsonRequestBehavior.AllowGet);
        }

        public void UploadPdfAndSave(string type, string JobId, string VisitChecklistItemId, string PDFName, string ImagePath, string UserId)
        {
            string Type = type == "2" ? "CES" : "OTHER";
            string DocPath = Path.Combine("JobDocuments", JobId, Type, VisitChecklistItemId, PDFName.ToLower().Contains(".pdf") ? PDFName : (PDFName + ".pdf"));

            string JsonData = string.Empty;

            string Source = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), ImagePath);
            string Destination = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), DocPath);

            //string FolderPath = Path.Combine("JobDocuments", JobId, Type, VisitChecklistItemId);
            //string DestinationFolder = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), FolderPath);
            //bool isFolderExists = Directory.Exists(DestinationFolder);

            bool isFileExists = System.IO.File.Exists(Destination);
            DataSet dsFiles = _job.GetCesPhotosByVisitCheckListId(Convert.ToInt32(VisitChecklistItemId));
            Helper.Helper.Common.generatePDFfromImage(dsFiles.Tables[0], Destination);

            //delete pdf file
            if (dsFiles.Tables[0].Rows.Count < 1)
            {

            }

            if (!isFileExists)
            {
                //if (!isFolderExists)
                {
                    _job.InsertCESDocuments(Convert.ToInt32(JobId), DocPath, Convert.ToInt32(UserId), Type, JsonData);
                }
            }
        }

        //[HttpPost]
        //public JsonResult UploadDocuments(string JobId, string UserId, string Type)
        //{
        //    List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
        //    if (Request.Files != null && Request.Files.Count != 0)
        //    {
        //        for (var i = 0; i < Request.Files.Count; i++)
        //        {
        //            string RefPath = string.Empty;
        //            uploadStatus.Add(GetReferenceFileUploadPhoto(Request.Files[i], JobId, ref RefPath));
        //            if (uploadStatus[i].Status == true)
        //            {
        //                _job.InsertReferencePhoto(Convert.ToInt32(JobId), RefPath, Convert.ToInt32(UserId));
        //            }

        //        }

        //    }

        //    return Json(uploadStatus);
        //}

        /// <summary>
        /// Uploads the document other.
        /// </summary>
        /// <param name="userId">The user identifier.</param>
        /// <returns>Action result</returns>
        [UserAuthorization]
        public async Task<JsonResult> UploadDocumentOther(string userId)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    uploadStatus.Add(GetFileUploadOtherDocument(Request.Files[i], userId));
                    if (uploadStatus[i].Status == true)
                    {
                        string filename = uploadStatus[i].FileName.Replace("%", "$");
                        _job.InsertOtherDocuments(Convert.ToInt32(userId), filename, ProjectSession.LoggedInUserId);
                        await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(userId));
                    }
                }
            }
            return Json(uploadStatus);
        }


        /// <summary>
        /// Uploads the document other.
        /// </summary>
        /// <param name="userId">The user identifier.</param>
        /// <returns>Action result</returns>
        [UserAuthorization]
        [GeneralAuthorization]
        public async Task<JsonResult> UploadDocumentCES(string UserId, string JobId, string Type)
        {
            int jobid = Convert.ToInt32(JobId);

            bool isAllowUserForDocumentRights = false;
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5 || ProjectSession.UserTypeId == 4)
                isAllowUserForDocumentRights = true;
            else
                isAllowUserForDocumentRights = _job.CheckDocumentRightsFromJobStcStatus(jobid);

            string[] allowedType = new string[] { ".png", ".jpg", ".jpeg", ".gif", ".doc", ".docx", ".xls", ".csv", ".pdf", ".txt", ".zip", ".heic" };
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (isAllowUserForDocumentRights)
            {
                if (Request.Files != null && Request.Files.Count != 0)
                {
                    for (var i = 0; i < Request.Files.Count; i++)
                    {
                        string RefPath = string.Empty;

                        if (allowedType.Contains(Path.GetExtension(((System.Web.HttpPostedFileWrapper)(Request.Files[i])).FileName).ToLower()))
                        {
                            uploadStatus.Add(GetFileUploadDocuments(Request.Files[i], JobId, Type, ref RefPath));
                            if (uploadStatus[i].Status == true)
                            {
                                int id = _job.InsertCESDocuments(Convert.ToInt32(JobId), RefPath, Convert.ToInt32(UserId), Type, "");
                                uploadStatus[i].AttachmentID = id;

                                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(JobId));

                                JobHistory objJobHistory = new JobHistory()
                                {
                                    JobID = Convert.ToInt32(JobId),
                                    HistoryMessage = Type.ToLower() == "ces" ? "CES form" : Type.ToLower() == "other" ? "Other document" : "",
                                    DocumentName = uploadStatus[i].FileName,
                                    DocumentPath = Directory.GetParent(uploadStatus[i].Path).Parent.ToString() + "\\" + new DirectoryInfo(Path.GetDirectoryName(uploadStatus[i].Path)).Name
                                };
                                //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Uploaded);
                                string HistoryMessage = objJobHistory.HistoryMessage;
                                string Documentname = objJobHistory.DocumentName;
                                string Documentpath = objJobHistory.DocumentPath;
                                string Form = Type.ToLower() == "other" ? "Document Manager" : Type;
                                //string JobHistoryMessage = "has added a new document - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>";
                                string JobHistoryMessage = "has added a new document: <a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> has  in <span class=\"blue-title\">" + Form + " form </span>.";
                                Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Uploaded", ProjectSession.LoggedInName, false, null);
                                CommonMethods.DocumentCreatedLog(id, _documentSignatureLogBAL);
                            }
                        }
                        else
                        {
                            HelperClasses.UploadStatus uploadStatusF = new HelperClasses.UploadStatus();
                            uploadStatusF.Status = false;
                            uploadStatusF.Message = "File Type Not Allowed.";
                            uploadStatus.Add(uploadStatusF);
                        }
                    }
                }

            }

            return Json(uploadStatus);
        }

        /// <summary>
        /// Uploads the serial.
        /// </summary>
        /// <param name="userId">The user identifier.</param>
        /// <returns>status true false.</returns>
        [HttpPost]
        public async Task<JsonResult> UploadSerial(string userId)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    uploadStatus.Add(GetFileUploadPhoto(Request.Files[i], userId));
                    if (uploadStatus[i].Status == true)
                    {
                        string filename = uploadStatus[i].FileName.Replace("%", "$");
                        _job.InsertPhoto(Convert.ToInt32(userId), filename, 2);
                    }
                }
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(userId));
            }

            return Json(uploadStatus);
        }

        /// <summary>
        /// Gets the file upload photo.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="userId">The user identifier.</param>
        /// <returns>status true false.</returns>
        public HelperClasses.UploadStatus GetFileUploadPhoto(HttpPostedFileBase fileUpload, string userId)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;
            string uploadMimeType = fileUpload.ContentType.Split('/')[0];
            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;
                    if (userId != null)
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + userId + "\\");
                        proofDocumentsFolderURL = proofDocumentsFolderURL + "\\" + "JobDocuments" + "\\" + userId + "\\";
                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));
                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                {
                                    i++;
                                }
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }

                            }

                            fileName = Path.GetFileName(path);
                        }

                        string mimeType = MimeMapping.GetMimeMapping(fileName);
                        if (uploadMimeType != "image")
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "NotImage";

                        }
                        else if (fileUpload.FileName.Length > 50)
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "BigName";

                        }
                        else
                        {
                            fileUpload.SaveAs(path);
                            uploadStatus.Status = true;
                            uploadStatus.Message = "File Uploaded Successfully.";
                            uploadStatus.FileName = fileName;
                            uploadStatus.MimeType = mimeType;
                            uploadStatus.Path = proofDocumentsFolder + uploadStatus.FileName;
                        }

                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }

                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }

            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }



        /// <summary>
        /// Gets the file upload photo.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="userId">The user identifier.</param>
        /// <returns>status true false.</returns>
        public HelperClasses.UploadStatus GetReferenceFileUploadPhoto(HttpPostedFileBase fileUpload, string JobId, bool isRef, string cId, bool isDefault, ref string RefPath)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;
            string uploadMimeType = fileUpload.ContentType.Split('/')[0];
            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);
                    string fileextension = Path.GetExtension(fileUpload.FileName);
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;
                    if (JobId != null)
                    {
                        if (isRef)
                        {
                            proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\JobDocuments\\" + JobId + "\\ReferencePhotos");
                            proofDocumentsFolderURL = proofDocumentsFolderURL + "\\JobDocuments\\" + JobId + "\\ReferencePhotos";
                        }
                        else if (isDefault)
                        {
                            proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\JobDocuments\\" + JobId + "\\DefaultFolder");
                            proofDocumentsFolderURL = proofDocumentsFolderURL + "\\JobDocuments\\" + JobId + "\\DefaultFolder";
                        }
                        else
                        {
                            proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\JobDocuments\\" + JobId + "\\checklistitem\\" + cId);
                            proofDocumentsFolderURL = proofDocumentsFolderURL + "\\JobDocuments\\" + JobId + "\\checklistitem\\" + cId;
                        }

                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));

                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                {
                                    i++;
                                }
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }

                            }

                            fileName = Path.GetFileName(path);
                        }

                        if (isRef)
                        {
                            RefPath = "JobDocuments" + "\\" + JobId + "\\ReferencePhotos\\" + fileName.Replace("%", "$");
                        }
                        else if (isDefault)
                        {
                            RefPath = "JobDocuments" + "\\" + JobId + "\\DefaultFolder\\" + fileName.Replace("%", "$");
                        }
                        else
                        {
                            RefPath = "JobDocuments" + "\\" + JobId + "\\checklistitem\\" + cId + "\\" + fileName.Replace("%", "$");
                        }


                        string mimeType = MimeMapping.GetMimeMapping(fileName);
                        if (uploadMimeType != "image" && fileextension.ToLower() != ".heic")
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "NotImage";

                        }
                        else if (fileUpload.FileName.Length > 50)
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "BigName";

                        }
                        else
                        {
                            fileUpload.SaveAs(path);
                            uploadStatus.Status = true;
                            uploadStatus.Message = "File Uploaded Successfully.";
                            uploadStatus.FileName = fileName;
                            uploadStatus.MimeType = mimeType;
                            uploadStatus.Path = RefPath;
                        }



                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }

                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }

            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }


        /// <summary>
        /// Gets the file upload other document.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="userId">The user identifier.</param>
        /// <returns>Action result</returns>
        public HelperClasses.UploadStatus GetFileUploadOtherDocument(HttpPostedFileBase fileUpload, string userId)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;

            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);

                    string proofDocumentsFolder = ProjectConfiguration.JobDocumentsToSaveFullPath;

                    if (userId != null)
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + userId + "\\" + "Other" + "\\");
                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));
                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                {
                                    i++;
                                }
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }

                            }

                            fileName = Path.GetFileName(path);
                        }

                        if (fileUpload.FileName.Length > 50)
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "BigName";
                        }
                        else
                        {
                            string mimeType = MimeMapping.GetMimeMapping(fileName);
                            fileUpload.SaveAs(path);
                            uploadStatus.Status = true;
                            uploadStatus.Message = "File Uploaded Successfully.";
                            uploadStatus.FileName = fileName;
                            uploadStatus.MimeType = mimeType;
                            uploadStatus.Path = proofDocumentsFolder + uploadStatus.FileName;
                        }

                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }
                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }
            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }

        /// <summary>
        /// Gets the file upload other document.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="userId">The user identifier.</param>
        /// <returns>Action result</returns>
        public HelperClasses.UploadStatus GetFileUploadDocuments(HttpPostedFileBase fileUpload, string JobId, string type, ref string RefPath)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;

            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);

                    string proofDocumentsFolder = ProjectSession.ProofDocuments;

                    if (JobId != null)
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + JobId + "\\" + type);

                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));

                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                {
                                    i++;
                                }
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }

                            }

                            fileName = Path.GetFileName(path);
                        }
                        RefPath = Path.Combine("JobDocuments" + "\\" + JobId + "\\" + type + "\\" + fileName.Replace("%", "$")).Replace(@"\", @"\\");


                        if (fileUpload.FileName.Length > 50)
                        {
                            uploadStatus.Status = false;
                            uploadStatus.Message = "BigName";
                        }
                        else
                        {
                            string mimeType = MimeMapping.GetMimeMapping(fileName);
                            fileUpload.SaveAs(path);
                            uploadStatus.Status = true;
                            uploadStatus.Message = "File Uploaded Successfully.";
                            uploadStatus.FileName = fileName;
                            uploadStatus.MimeType = mimeType;
                            uploadStatus.Path = RefPath;
                        }

                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }
                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }
            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }

        /// <summary>
        /// Deletes the file from folder.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="FolderName">The user identifier.</param>
        /// <returns>json result</returns>
        [AllowAnonymous]
        public async Task<JsonResult> DeleteFileFromFolderPhoto(string fileName, string FolderName)
        {
            //string[] values = fileName.Split('?');
            //for (int i = 0; i < values.Length; i++)
            //{
            //    values[i] = values[i].Trim();
            //    DeleteDirectoryPhoto(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + FolderName, values[i]));
            //}

            _job.DeletePhoto(fileName, Convert.ToInt32(FolderName));
            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(FolderName));
            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the file from folder document.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="FolderName">Name of the folder.</param>
        /// <returns>Action result</returns>
        [AllowAnonymous]
        public async Task<JsonResult> DeleteFileFromFolderDocument(string fileName, string FolderName)
        {
            DeleteDirectoryPhoto(Path.Combine(ProjectConfiguration.JobDocumentsToSaveFullPath + "\\" + FolderName + "\\" + "Other", fileName));
            _job.DeleteOtherDocument(fileName, Convert.ToInt32(FolderName));
            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(FolderName));
            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Saves the job to SSC.
        /// </summary>
        /// <param name="ramId">The ram identifier.</param>
        /// <returns>Action result</returns>
        [HttpGet]
        public async Task<ActionResult> SaveJobToSSC(string ramId)
        {
            if (Convert.ToInt32(ramId) > 0)
            {
                int jobID = 4;
                _job.CreateJobSSCMapping(Convert.ToInt32(ramId), jobID);
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobID);
                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Views the download file.
        /// </summary>
        /// <param name="FileName">Name of the file.</param>
        /// <param name="FolderName">Name of the folder.</param>
        /// <returns>action result</returns>
        public ActionResult ViewDownloadFile(string FileName, string FolderName)
        {
            string proofDocumentsFolder = ProjectConfiguration.JobDocumentsToSaveFullPath;
            var path = Path.Combine(proofDocumentsFolder + "\\" + FolderName + "\\" + "Other" + "\\", FileName);
            if (System.IO.File.Exists(path))
            {
                var fileData = System.IO.File.ReadAllBytes(path);

                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.ContentType = "application/octet-stream";
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename=" + FileName));
                Response.BinaryWrite(fileData);

                //Response.ContentType = "application/octet-stream";
                //Response.AddHeader("content-disposition", "attachment;  filename=\"" + FileName + "\"");
                //Response.BinaryWrite(fileData);
                //Response.End();
            }

            return Json("", JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Cancels the removal request.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>Action result</returns>
        public async Task<ActionResult> CancelRemovalRequest(string jobId)
        {
            try
            {
                int sscJOBID = 0;
                if (!string.IsNullOrEmpty(jobId))
                    int.TryParse(QueryString.GetValueFromQueryString(jobId, "id"), out sscJOBID);
                int jobID = sscJOBID;
                _job.CancelRemovalRequest(jobID);

                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobID);

                ContractorHistory objContractor = new ContractorHistory()
                {
                    JobID = sscJOBID
                };
                //bool isHistorySaved = _jobHistory.LogJobHistory(objContractor, HistoryCategory.CancelSSCRemoveRequest);
                string JobHistoryMessage = "has cancelled requested to remove SSC from JobID " + objContractor.JobID + " .";
                Common.SaveJobHistorytoXML(objContractor.JobID, JobHistoryMessage, "General", "CancelSSCRemoveRequest", ProjectSession.LoggedInName, false);

                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return this.Json(new { success = false, errormessage = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Gets the electrician.
        /// </summary>
        /// <param name="JobID">Job ID</param>
        /// <param name="solarCompanyId">solarCompanyId</param>
        /// <returns>json result</returns>
        public JsonResult GetElectrician(string JobID, string solarCompanyId = "", int JobType = 1)
        {
            int companyId = 0;

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5 || ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9)
                companyId = string.IsNullOrEmpty(solarCompanyId) ? 0 : Convert.ToInt32(solarCompanyId);
            else
                companyId = ProjectSession.SolarCompanyId;

            DataSet dataset = _job.GetElectricianBySolarCompanyID(companyId, false, 0, Convert.ToInt32(JobID), JobType);
            List<ElectricianList> Items = new List<ElectricianList>();
            if (dataset.Tables.Count > 0)
            {
                foreach (DataRow item in dataset.Tables[0].Rows)
                {
                    Items.Add(new ElectricianList() { Value = item["JobElectricianID"].ToString(), Text = item["Name"].ToString(), IsSystemUser = Convert.ToBoolean(item["IsSystemUser"]), UserId = Convert.ToInt32(item["UserId"]) });
                }
            }
            //List<SelectListItem> Items = new List<SelectListItem>();
            //if (dataset.Tables.Count > 0)
            //{
            //    foreach (DataRow item in dataset.Tables[0].Rows)
            //    {
            //        Items.Add(new SelectListItem() { Value = item["JobElectricianID"].ToString(), Text = item["Name"].ToString(), Disabled = Convert.ToBoolean(item["IsSystemUser"])});
            //    }
            //}

            return Json(Items, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// Gets the electrician.
        /// </summary>
        /// <returns>Action result</returns>
        public JsonResult GetSoldBy()
        {
            DataSet dataset = _job.GetSoldBySolarCompanyID(ProjectSession.SolarCompanyId);
            List<SelectListItem> Items = new List<SelectListItem>();
            if (dataset.Tables.Count > 0)
            {
                foreach (DataRow item in dataset.Tables[0].Rows)
                {
                    Items.Add(new SelectListItem() { Value = item["Name"].ToString(), Text = item["Name"].ToString() });
                }
            }

            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the destributors.
        /// </summary>
        /// <returns>Action result</returns>
        public JsonResult GetDestributors()
        {
            DataSet dataset = _job.GetDistributor();
            List<SelectListItem> Items = new List<SelectListItem>();
            if (dataset.Tables.Count > 0)
            {
                foreach (DataRow item in dataset.Tables[0].Rows)
                {
                    Items.Add(new SelectListItem() { Value = item["DistributorID"].ToString(), Text = item["DistributorName"].ToString() });
                }
            }

            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the job stages
        /// </summary>
        /// <param name="usertypeid">usertypeid</param>
        /// <returns>JsonResult</returns>
        [HttpPost]
        public JsonResult GetJobStages(string usertypeid)
        {
            List<SelectListItem> items = GetJobAllStage(Convert.ToInt32(usertypeid));
            //int UserTypeId = ;
            //if (UserTypeId == 7 || UserTypeId == 9 || UserTypeId == 10)
            //{
            //    items = _job.GetJobStages().Where(t => t.JobStageID == 3 || t.JobStageID == 4 || t.JobStageID == 9)
            //                               .Select(a => new SelectListItem { Text = a.JobStageName, Value = a.JobStageID.ToString() }).ToList();
            //}
            //else
            //{
            //    items = _job.GetJobStages().Select(a => new SelectListItem { Text = a.JobStageName, Value = a.JobStageID.ToString() }).ToList();
            //}
            return Json(items, JsonRequestBehavior.AllowGet);
        }

        public List<SelectListItem> GetJobAllStage(int userTypeId)
        {
            List<SelectListItem> items = null;
            if (userTypeId == 7 || userTypeId == 9)
            {
                items = _job.GetJobStages().Where(t => t.JobStageID == 3 || t.JobStageID == 4 || t.JobStageID == 9)
                                           .Select(a => new SelectListItem { Text = a.JobStageName, Value = a.JobStageID.ToString() }).ToList();
            }
            else
            {
                items = _job.GetJobStages().Select(a => new SelectListItem { Text = a.JobStageName, Value = a.JobStageID.ToString() }).ToList();
            }
            return items;
        }

        /// <summary>
        /// Adds the other documents.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns></returns>
        [UserAuthorization]
        [HttpPost]
        public async Task<JsonResult> AddOtherDocuments(Entity.Documents.DocObject obj)
        {
            int JobId = 0;
            //if (!string.IsNullOrEmpty(obj.jobId))
            //    int.TryParse(QueryString.GetValueFromQueryString(obj.jobId, "id"), out JobId);

            int.TryParse(obj.jobId, out JobId);
            List<FileStatus> objFileStatus = new List<FileStatus>();
            foreach (Entity.Documents.Doc d in obj.docs)
            {
                FileStatus objStatus = new FileStatus();
                string sourcePath = string.Empty;
                //if (obj.UseNewDocTemplate)
                sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL, d.path);
                //else
                //    sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL, "JobDocuments", "DocumentsTemplate", d.stage == "PreApprovals" ? "Pre Approvals" : d.stage, d.abbr, d.sp, d.name);

                string targetDir = Path.Combine(ProjectSession.ProofDocumentsURL, "JobDocuments", JobId.ToString(), obj.type);
                string destPath = Path.Combine(targetDir, d.TemplateName);
                string dPath = Path.Combine("JobDocuments", JobId.ToString(), obj.type, d.TemplateName);
                objStatus.name = d.TemplateName;
                if (System.IO.File.Exists(sourcePath))
                {
                    objStatus.isSourceExists = true;
                    if (!System.IO.Directory.Exists(targetDir))
                    {
                        System.IO.Directory.CreateDirectory(targetDir);
                    }

                    //else
                    {
                        try
                        {

                            if (System.IO.File.Exists(destPath))
                            {
                                string renameFileName = string.Empty;
                                string fileName = Path.GetFileNameWithoutExtension(d.TemplateName);
                                string fileExtension = Path.GetExtension(d.path);
                                int i = 0;
                                while (true)
                                {
                                    if (i == 0)
                                        renameFileName = targetDir + "/" + fileName + fileExtension;
                                    else
                                        renameFileName = targetDir + "/" + fileName + "(" + i + ")" + fileExtension;

                                    if (System.IO.File.Exists(renameFileName))
                                        i++;
                                    else
                                        break;
                                }
                                string name = Path.GetFileName(renameFileName);

                                targetDir = Path.Combine(targetDir, name);
                                if (System.IO.File.Exists(targetDir))
                                {
                                    System.IO.File.Delete(targetDir);
                                }
                                sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL, d.path);

                                if (System.IO.File.Exists(sourcePath))
                                {
                                    destPath = targetDir;
                                    dPath = dPath.Replace(objStatus.name, name);
                                    objStatus.name = d.name = name;
                                }
                                //objStatus.isFileCopied = false;
                                //                  objStatus.isAlreadyExists = true;
                                //                  objStatus.message += d.name + " is already Exists.";
                            }

                            System.IO.File.Copy(sourcePath, destPath, true);

                            if (obj.fillData)
                            {
                                //if (obj.UseNewDocTemplate)
                                PreFillItems(Path.Combine(ProjectSession.ProofDocuments, dPath), JobId, string.Empty, false);
                                //else
                                //    PreFillItems(Path.Combine(ProjectSession.ProofDocuments, dPath), JobId, d.stage == "Connections" ? "CONN" : d.stage);
                            }

                            List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(Path.Combine(ProjectSession.ProofDocumentsURL, destPath));
                            string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);

                            objStatus.JobDocumentId = _job.InsertCESDocuments(Convert.ToInt32(JobId), dPath, Convert.ToInt32(obj.UserId), obj.type.ToUpper(), jsonPDFData);
                            objStatus.Path = dPath;
                            objStatus.isFileCopied = true;

                            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, JobId);
                            string Form = "";
                            if (obj.type.ToLower().Contains("ces"))
                            {
                                Form = "CES";
                            }
                            if (obj.type.ToLower().Contains("stc"))
                            {
                                Form = "STC";
                            }
                            if (obj.type.ToLower().Contains("other"))
                            {
                                Form = "Document Manager";
                            }
                            JobHistory objJobHistory = new JobHistory()
                            {
                                JobID = Convert.ToInt32(JobId),
                                HistoryMessage = obj.type.ToLower() == "ces" ? "CES form" : obj.type.ToLower() == "other" ? "Other document" : "",
                                DocumentName = d.name,
                                DocumentPath = Directory.GetParent(destPath).Parent.ToString() + "\\" + new DirectoryInfo(Path.GetDirectoryName(destPath)).Name
                            };
                            //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Uploaded);
                            string HistoryMessage = objJobHistory.HistoryMessage;
                            string Documentname = objJobHistory.DocumentName;
                            string Documentpath = objJobHistory.DocumentPath;
                            //string JobHistoryMessage = "has uploaded a " + HistoryMessage + " <br><b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>&nbsp;&nbsp;Document</a></b>";
                            //string JobHistoryMessage = "has added a new document - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>"; 
                            string JobHistoryMessage = "has added a new document: <a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> in <span class=\"blue-title\">" + Form + " Form</span>.";
                            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Uploaded", ProjectSession.LoggedInName, false, null);
                            CommonMethods.DocumentCreatedLog(objStatus.JobDocumentId, _documentSignatureLogBAL);
                        }
                        catch (Exception ex)
                        {
                            objStatus.isFileCopied = false;
                            objStatus.message += d.name + " is not copied.";
                        }
                    }
                }
                else
                {
                    objStatus.isFileCopied = false;
                    objStatus.isSourceExists = false;
                    objStatus.message += d.name + " is not exists.";
                }
                objFileStatus.Add(objStatus);
            }
            return Json(objFileStatus, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Bulks the change job stage.
        /// </summary>
        /// <param name="jobstage">The job stage.</param>
        /// <param name="jobids">The job.</param>
        /// <returns>action result</returns>
        [HttpPost]
        public async Task<ActionResult> BulkChangeJobStage(string jobstage, string jobids)
        {
            int JobStageID = Convert.ToInt32(jobstage);
            _job.BulkChangeJobStage(JobStageID, jobids);

            if (!string.IsNullOrEmpty(jobids))
            {
                foreach (string jid in jobids.Split(','))
                {
                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(jid));
                }
            }

            return this.Json(new { success = true });
        }

        /// <summary>
        /// Bulks the change STC job stage.
        /// </summary>
        /// <param name="stcjobstage">The stcjobstage.</param>
        /// <param name="stcjobids">The stcjobids.</param>
        /// <returns>ActionResult</returns>
        [HttpPost]
        public async Task<ActionResult> BulkChangeSTCJobStage(string stcjobstage, string stcjobids, List<CheckSPVrequired> checkSPVrequired = null)
        {
            try
            {
                Guid guid = Guid.NewGuid();
                Helper.Log.WriteLog(DateTime.Now.ToString() + " BulkChanegStatus method called: stcjobids = " + stcjobids + ", guid: " + guid);

                int STCJobStageID = Convert.ToInt32(stcjobstage);
                DataSet ds = _job.BulkChangeSTCJobStage(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, STCJobStageID, stcjobids, DateTime.Now);
                List<int> peakpayJobIds = new List<int>();

                DataSet dsUpdatedSTCJobIDs = _job.UpdateUrgentStatusFlagForSTCIds(stcjobids);
                if (dsUpdatedSTCJobIDs != null && dsUpdatedSTCJobIDs.Tables.Count > 0 && dsUpdatedSTCJobIDs.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsUpdatedSTCJobIDs.Tables[0].Rows)
                    {
                        SortedList<string, string> data = new SortedList<string, string>();
                        string stcid = dr["STCJobDetailsID"].ToString();
                        string isUrgentSubmission = !string.IsNullOrEmpty(dr["IsUrgentSubmission"].ToString()) ? dr["IsUrgentSubmission"].ToString() : Convert.ToString(false);
                        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                        data.Add("IsUrgentSubmission", isUrgentSubmission);
                        data.Add("STCStatus", stcStatus);
                        data.Add("ColorCode", colorCode);
                        data.Add("STCStatusId", STCJobStageID.ToString());
                        //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data, true, true);
                        Helper.Log.WriteLog(DateTime.Now.ToString() + " setcachedataForStcId: " + stcid + " data: " + data.ToList()[1]);
                    }
                }


                #region save stcJobHistory into xml
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                {
                    if (STCJobStageID == 20 || STCJobStageID == 22 || STCJobStageID == 14)
                        peakpayJobIds = ds.Tables[1].AsEnumerable().Where(r => r.Field<int>("STCSettlementTerm") == 12 || (r.Field<int>("STCSettlementTerm") == 10 && r.Field<int>("CustomSettlementTerm") == 12)).Select(dr => dr.Field<int>("JobID")).Distinct().ToList();
                    foreach (DataRow drBulkChangeSTCJobStage in ds.Tables[1].Rows)
                    {
                        int JobID = Convert.ToInt32(drBulkChangeSTCJobStage["JobID"]);
                        int STCStatusID = Convert.ToInt32(drBulkChangeSTCJobStage["STCStatusID"]);
                        string Description = drBulkChangeSTCJobStage["Description"].ToString();
                        string CreatedByID = drBulkChangeSTCJobStage["CreatedBy"].ToString();
                        string CreatedBy = "";
                        if (CreatedByID.ToString() == "-1")
                        {
                            CreatedBy = "System";
                        }
                        else
                        {
                            CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                        }
                        string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID);
                        Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                    }
                }
                #endregion
                #region update cache for peakpay
                if (peakpayJobIds.Count > 0)
                    await CommonBAL.SetCacheDataForPeakPayFromJobId(string.Join(",", peakpayJobIds), "");
                #endregion
                //if (STCJobStageID == 14 || STCJobStageID == 22)
                //{
                //    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                //    {
                //        _jobRules.CreateSTCInvoicePDFForRECData(ds.Tables[0], false);
                //    }
                //}



                if (STCJobStageID == 17)
                {
                    SendMailOnComplianceIssue(stcjobids, 33);
                }
                if (STCJobStageID == 18)
                {
                    SendMailOnComplianceIssue(stcjobids, 42);
                }
                if (STCJobStageID == 14)
                {
                    _jobRules.SendMailOnCERFailed(stcjobids);
                }

                //Spv allow global level or SC specific level
                List<CheckSPVrequired> lstSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCAOrGlobalLevelOrManufacturer(JobIds: string.Join(",", checkSPVrequired.Select(a => a.JobId))).ToList();
                // List<string> lststcjobids = stcjobids.Split(',').ToList();
                List<int> lststcjobids = new List<int>();
                List<int> lstjobIds = new List<int>();
                checkSPVrequired.ForEach(x => lstSpvRequiredSolarCompanyWise.First(y => y.JobId == x.JobId).STCJobDetailsID = x.STCJobDetailsID);

                if (lstSpvRequiredSolarCompanyWise != null)
                {
                    if (lstSpvRequiredSolarCompanyWise.Any())
                    {
                        lststcjobids = lstSpvRequiredSolarCompanyWise.Where(x => x.IsSPVRequired == true).Select(x => x.STCJobDetailsID).ToList();
                        lstjobIds = lstSpvRequiredSolarCompanyWise.Where(x => x.IsSPVRequired == true).Select(x => x.JobId).ToList();
                    }
                }

                // lststcjobids = lststcjobids.Where(x => checkSPVrequired.Where(z => z.IsSPVRequired == true).Select(y => y.STCJobDetailsID.ToString()).ToArray().Contains(x)).ToList();
                int reSPVVerified = 0;
                foreach (var jid in lstjobIds)
                {
                    if (STCJobStageID == 19)
                    {
                        bool? IsSPVVerified = _job.GetProductVerificationStatusByJobId(jid);
                        if (IsSPVVerified == null || IsSPVVerified == false)
                        {
                            reSPVVerified = ReProductVerificationForCertChanges(jid, true);
                            if (reSPVVerified == 1)
                                return Json(new { success = false, message = "JobId- " + jid + " already Installation Verified,So cant do re-Product Verification." }, JsonRequestBehavior.AllowGet);
                            else if (reSPVVerified == 2)
                                return Json(new { success = false, message = "JobId- " + jid + " having photo not available issue." }, JsonRequestBehavior.AllowGet);
                        }
                    }
                }
                if (reSPVVerified == 3 || reSPVVerified == 0)
                {
                    foreach (var id in lststcjobids)
                    {
                        if (STCJobStageID == 19)
                        {
                            SPVInstallationVerification(Convert.ToInt32(id));
                        }

                    }
                }

                //List<string> stcjobidlst = stcjobids.Split(',').ToList();
                //foreach (var stcid in stcjobidlst)
                //{
                //    if (!string.IsNullOrEmpty(stcid))
                //    {
                //        SortedList<string, string> data = new SortedList<string, string>();
                //        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                //        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                //        if (STCJobStageID==15 || STCJobStageID == 22)
                //        {
                //            string isUrgentSubmission = Convert.ToString(false);
                //            data.Add("IsUrgentSubmission", isUrgentSubmission);
                //        }

                //        data.Add("STCStatus", stcStatus);
                //        data.Add("ColorCode", colorCode);
                //        data.Add("STCStatusId", STCJobStageID.ToString());
                //        CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data);
                //        Helper.Log.WriteLog(DateTime.Now.ToString() + " setcachedataForStcId: " + stcid + " data: " + data.ToList()[1]);
                //    }
                //}

                Helper.Log.WriteLog(DateTime.Now.ToString() + " BulkChanegStatus method called: stcjobids = " + stcjobids + ", guid: " + guid);
                return this.Json(new { success = true });
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in BulkChangeSTCJobSTage:");
                return this.Json(new { success = false });
            }
        }
        [HttpPost]
        public async Task<ActionResult> InstallationVerifyAgain(string stcjobids)
        {
            Helper.Log.WriteLog("start InstallationVerifyAgain for stcId: " + stcjobids);
            List<string> lststcjobids = stcjobids.Split(',').ToList();
            bool? IsError = null;
            foreach (var id in lststcjobids)
            {
                Helper.Log.WriteLog("start for loop InstallationVerifyAgain for stcId: " + id);
                var data = SPVInstallationVerification(Convert.ToInt32(id), true).Data;
                var iserror = JToken.Parse(JsonConvert.SerializeObject(data))["iserror"].ToString();
                IsError = iserror.ToLower() == "true" ? true : false;
                Helper.Log.WriteLog("end for loop InstallationVerifyAgain for stcId: " + id);
                //CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(id), 0);
            }
            DataTable dt = _job.GetSTCDetailsAndJobDataForCache(stcjobids.ToString(), null);
            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string isSPvInstallationVerified = dt.Rows[i]["IsSPVInstallationVerified"].ToString() == null ? string.Empty : dt.Rows[i]["IsSPVInstallationVerified"].ToString();
                    SortedList<string, string> IsInstallationVerified = new SortedList<string, string>();
                    IsInstallationVerified.Add("IsSPVInstallationVerified", isSPvInstallationVerified);
                    //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(dt.Rows[i]["STCJobDetailsID"].ToString()), null, IsInstallationVerified);
                }

            }
            _log.Log(SystemEnums.Severity.Debug, "end  InstallationVerifyAgain for stcids: " + stcjobids);
            return this.Json(new { success = true, IsError = IsError });

        }
        /// <summary>
        /// Deletes the directory.
        /// </summary>
        /// <param name="path">The path.</param>
        private void DeleteDirectoryPhoto(string path)
        {
            if (System.IO.File.Exists(path))
            {
                ////Delete all files from the Directory
                System.IO.File.Delete(path);
            }
        }

        /// <summary>
        /// Sends the mail on compliance issue.
        /// </summary>
        /// <param name="stcjobids">The stcjobids.</param>
        public void SendMailOnComplianceIssue(string stcjobids, int TemplateId)
        {
            foreach (string id in stcjobids.Split(','))
            {
                int STCJobDetailsId = Convert.ToInt32(id);
                DataSet ds = _job.GetDetailsOfComplianceIssueJobForMail(STCJobDetailsId);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = ds.Tables[0].Rows[0];
                    decimal tmpvalue;
                    decimal? systemSize = decimal.TryParse(Convert.ToString(dr["SystemSize"]), out tmpvalue) ? tmpvalue : (decimal?)null;

                    //////////////////
                    string failReason = string.Empty;
                    EmailInfo emailInfo = new EmailInfo();
                    emailInfo.TemplateID = TemplateId;
                    emailInfo.ReferenceNumber = Convert.ToString(dr["ReferenceNumber"]);
                    emailInfo.OwnerName = Convert.ToString(dr["OwnerName"]);
                    emailInfo.CompanyName = Convert.ToString(dr["CompanyName"]);
                    emailInfo.InstallationAddress = Convert.ToString(dr["InstallationAddress"]);
                    emailInfo.SystemSize = systemSize;
                    emailInfo.STCsValue = DBNull.Value == dr["STCsValue"] ? null : Convert.ToString(dr["STCsValue"]);
                    emailInfo.TotalValue = Convert.ToDecimal(dr["TotalValue"]);
                    emailInfo.ResellerFullName = Convert.ToString(dr["ResellerFullName"]);
                    emailInfo.AutomatedErrors = Convert.ToString(dr["AutomatedErrors"]);
                    emailInfo.ComplianceNotes = DBNull.Value == dr["ComplianceNotes"] ? null : Convert.ToString(dr["ComplianceNotes"]);
                    emailInfo.ComplianceOfficerName = Convert.ToString(dr["ComplianceOfficerName"]);
                    emailInfo.JobID = Convert.ToInt32(dr["JobId"]);
                    emailInfo.Date = DateTime.Now;

                    //SMTPDetails smtpDetail = new SMTPDetails();
                    //smtpDetail.MailFrom = ConfigurationManager.AppSettings["MailFrom"].ToString();
                    //smtpDetail.SMTPPassword = ConfigurationManager.AppSettings["SMTPPassword"].ToString();
                    //smtpDetail.SMTPUserName = ConfigurationManager.AppSettings["SMTPUserName"].ToString();
                    //smtpDetail.SMTPHost = ConfigurationManager.AppSettings["SMTPHost"].ToString();
                    //smtpDetail.SMTPPort = Convert.ToInt32(ConfigurationManager.AppSettings["SMTPPort"]);
                    //smtpDetail.IsSMTPEnableSsl = Convert.ToBoolean(ConfigurationManager.AppSettings["IsSMTPEnableSsl"]);

                    EmailTemplate emailTempalte = _emailBAL.GetEmailTemplateByID(emailInfo.TemplateID);
                    string body = _emailBAL.GetEmailBody(emailInfo, emailTempalte);

                    bool status = false;
                    if (body != null && !string.IsNullOrEmpty(body))
                    {
                        QueuedEmail objQueuedEmail = new QueuedEmail();
                        objQueuedEmail.FromEmail = ProjectSession.MailFrom;
                        objQueuedEmail.Body = body;
                        objQueuedEmail.Subject = emailTempalte.Subject;
                        if (TemplateId == 42)
                            objQueuedEmail.ToEmail = Convert.ToString(dr["CompanyEmail"]);
                        else
                            objQueuedEmail.ToEmail = Convert.ToString(dr["EmailAddresses"]);

                        objQueuedEmail.CreatedDate = DateTime.Now;
                        objQueuedEmail.ModifiedDate = DateTime.Now;
                        objQueuedEmail.JobId = id;
                        _emailBAL.InsertUpdateQueuedEmail(objQueuedEmail);
                        status = true;
                    }

                    //MailHelper.SendMail(smtpDetail, Convert.ToString(dr["EmailAddresses"]), null, null, emailTempalte.Subject, body, null, true, ref failReason, false);

                    //////////////////

                    //EmailInfo emailInfo = new EmailInfo();
                    //emailInfo.TemplateID = 33;
                    //emailInfo.ReferenceNumber = Convert.ToString(dr["ReferenceNumber"]);
                    //emailInfo.OwnerName = Convert.ToString(dr["OwnerName"]);
                    //emailInfo.InstallationAddress = Convert.ToString(dr["InstallationAddress"]);
                    //emailInfo.SystemSize = systemSize;
                    //emailInfo.STCsValue = DBNull.Value == dr["STCsValue"] ? null : Convert.ToString(dr["STCsValue"]);
                    //emailInfo.TotalValue = Convert.ToDecimal(dr["TotalValue"]);
                    //emailInfo.ResellerFullName = Convert.ToString(dr["ResellerFullName"]);
                    //emailInfo.AutomatedErrors = Convert.ToString(dr["AutomatedErrors"]);
                    //emailInfo.ComplianceNotes = DBNull.Value == dr["ComplianceNotes"] ? null : Convert.ToString(dr["ComplianceNotes"]);
                    //emailInfo.ComplianceOfficerName = Convert.ToString(dr["ComplianceOfficerName"]);
                    //emailInfo.Date = DateTime.Now;
                    //_emailBAL.ComposeAndSendEmail(emailInfo, Convert.ToString(dr["EmailAddresses"]));
                }
            }
        }

        /// <summary>
        /// Sends the mail on cer failed.
        /// </summary>
        /// <param name="stcjobids">The stcjobids.</param>
        //public void SendMailOnCERFailed(string stcjobids)
        //{
        //    foreach (string id in stcjobids.Split(','))
        //    {
        //        int STCJobDetailsId = Convert.ToInt32(id);
        //        DataSet ds = _job.GetDetailsOfCERFailedJobForMail(STCJobDetailsId);
        //        if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
        //        {
        //            DataRow dr = ds.Tables[0].Rows[0];
        //            EmailInfo emailInfo = new EmailInfo();
        //            emailInfo.TemplateID = 34;
        //            emailInfo.ReferenceNumber = Convert.ToString(dr["ReferenceNumber"]);
        //            emailInfo.OwnerName = Convert.ToString(dr["OwnerName"]);
        //            emailInfo.InstallationAddress = Convert.ToString(dr["InstallationAddress"]);
        //            // emailInfo.SystemSize = Convert.ToDecimal(dr["SystemSize"]);
        //            emailInfo.SystemSize = (dr["SystemSize"]).ToString() != "" ? Convert.ToDecimal(dr["SystemSize"]) : Convert.ToDecimal(0);
        //            emailInfo.STCsValue = Convert.ToString(dr["STCsValue"]);
        //            // emailInfo.TotalValue = Convert.ToDecimal(dr["TotalValue"]);
        //            emailInfo.TotalValue = (dr["TotalValue"]).ToString() != "" ? Convert.ToDecimal(dr["TotalValue"]) : Convert.ToDecimal(0);
        //            emailInfo.ResellerFullName = Convert.ToString(dr["ResellerFullName"]);
        //            emailInfo.FailureNotice = Convert.ToString(dr["FailureNotice"]);
        //            emailInfo.Date = DateTime.Now;
        //            _emailBAL.ComposeAndSendEmail(emailInfo, Convert.ToString(dr["EmailAddresses"]));
        //        }
        //    }
        //}

        [HttpPost]
        public JsonResult GetSTCJobStages()
        {
            List<SelectListItem> items = null;
            items = _job.GetSTCJobStage().Select(a => new SelectListItem { Text = a.StageName, Value = a.JobStageId.ToString() }).ToList();

            return Json(items, JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public ActionResult GetData(List<CommonData> cData)
        {
            DataSet Data = _job.GetData(cData);
            return Json(new { success = true, data = Newtonsoft.Json.JsonConvert.SerializeObject(Data) }, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region PDF Code

        /// <summary>
        /// Gets the history.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        /// <param name="categoryID">The category identifier.</param>
        /// <param name="isFilter">if set to <c>true</c> [is filter].</param>
        /// <param name="order">The order.</param>
        /// <param name="from">From.</param>
        /// <param name="to">To.</param>
        /// <returns>job history</returns>
        public List<JobHistory> GetHistory(string jobID, int? categoryID, bool isFilter, string order, DateTime? from, DateTime? to, int pageIndex = 1)
        {
            List<JobHistory> jobHistory = new List<JobHistory>();
            int Id = 0;
            if (!isFilter)
            {
                if (!string.IsNullOrEmpty(jobID))
                    int.TryParse(QueryString.GetValueFromQueryString(jobID, "id"), out Id);
            }
            else
            {
                Id = Convert.ToInt32(jobID);
            }

            DataSet objDs = _job.GetJobHistoryList(Id, order, from, to, categoryID, pageIndex);
            if (objDs != null && objDs.Tables.Count > 0)
            {
                if (ProjectSession.UserTypeId != 1)
                {
                    //Hide STC submission history for all users except FSA
                    jobHistory = objDs.Tables[0].AsEnumerable().Where(p => p.Field<int>("CategoryID") != 35 && p.Field<int>("CategoryID") != 34 && p.Field<int>("CategoryID") != 39 && p.Field<int>("CategoryID") != 40 && p.Field<int>("CategoryID") != 41 && p.Field<int>("CategoryID") != 43 && p.Field<int>("CategoryID") != 44).Select(
                        p => new JobHistory
                        {
                            CategoryID = (p.Field<int>("CategoryID")),
                            HistoryCategory = (p.Field<string>("HistoryCategory")),
                            HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                            IsSSC = (p.Field<bool>("IsSSC")),
                            JobHistoryID = (p.Field<int>("JobHistoryID")),
                            JobID = (p.Field<int>("JobID")),
                            ModifiedBy = (p.Field<int>("ModifiedBy")),
                            CreateDate = (p.Field<string>("CreateDate")),
                            ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                            Modifier = (p.Field<string>("Modifier")),
                            Title = (p.Field<string>("Title")),
                            RefNumber = (p.Field<string>("RefNumber")),
                            currentPage = (p.Field<int>("currentPage")),
                            TotalRecords = (p.Field<int>("TotalRecords"))

                        }).ToList();
                    return jobHistory;
                }
                else if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
                {
                    //Hide Gst history for all users except FSA/FCO
                    jobHistory = objDs.Tables[0].AsEnumerable().Where(p => p.Field<int>("CategoryID") != 34 && p.Field<int>("CategoryID") != 39 && p.Field<int>("CategoryID") != 40 && p.Field<int>("CategoryID") != 41 && p.Field<int>("CategoryID") != 43 && p.Field<int>("CategoryID") != 44).Select(
                    p => new JobHistory
                    {
                        CategoryID = (p.Field<int>("CategoryID")),
                        HistoryCategory = (p.Field<string>("HistoryCategory")),
                        HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                        IsSSC = (p.Field<bool>("IsSSC")),
                        JobHistoryID = (p.Field<int>("JobHistoryID")),
                        JobID = (p.Field<int>("JobID")),
                        ModifiedBy = (p.Field<int>("ModifiedBy")),
                        CreateDate = (p.Field<string>("CreateDate")),
                        ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                        Modifier = (p.Field<string>("Modifier")),
                        Title = (p.Field<string>("Title")),
                        RefNumber = (p.Field<string>("RefNumber")),
                        currentPage = (p.Field<int>("currentPage")),
                        TotalRecords = (p.Field<int>("TotalRecords"))
                    }).ToList();
                }
                else
                {
                    jobHistory = objDs.Tables[0].AsEnumerable().Select(
                    p => new JobHistory
                    {
                        CategoryID = (p.Field<int>("CategoryID")),
                        HistoryCategory = (p.Field<string>("HistoryCategory")),
                        HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                        IsSSC = (p.Field<bool>("IsSSC")),
                        JobHistoryID = (p.Field<int>("JobHistoryID")),
                        JobID = (p.Field<int>("JobID")),
                        ModifiedBy = (p.Field<int>("ModifiedBy")),
                        CreateDate = (p.Field<string>("CreateDate")),
                        ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                        Modifier = (p.Field<string>("Modifier")),
                        Title = (p.Field<string>("Title")),
                        RefNumber = (p.Field<string>("RefNumber")),
                        currentPage = (p.Field<int>("currentPage")),
                        TotalRecords = (p.Field<int>("TotalRecords"))
                    }).ToList();
                }
            }

            return jobHistory;
        }

        public List<JobHistory> GetJobHistory(string jobID, int? categoryID, bool isFilter, string order, int PostVisibility, int IsDeletedJobNote, bool IsImportant = false)
        {

            //int NotesType = !string.IsNullOrEmpty(notestype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), notestype).GetHashCode()) : 0;

            List<JobHistory> jobHistory = new List<JobHistory>();
            int Id = 0;
            if (!isFilter)
            {
                if (!string.IsNullOrEmpty(jobID))
                    int.TryParse(QueryString.GetValueFromQueryString(jobID, "id"), out Id);
            }
            else
            {
                Id = Convert.ToInt32(jobID);
            }
            string JobRefNo = _job.GetRefNumberByJobId(Id);
            DataSet objDs = _job.GetJobHistoryForJobDetail(Id, order, categoryID);
            #region Add database history in job history
            if ((PostVisibility == 1 || PostVisibility == 0) && IsDeletedJobNote != 2)
            {
                if (objDs != null && objDs.Tables.Count > 0)
                {
                    if (ProjectSession.UserTypeId != 1)
                    {
                        //Hide STC submission history for all users except FSA
                        jobHistory = objDs.Tables[0].AsEnumerable().Where(p => p.Field<int>("CategoryID") != 35 && p.Field<int>("CategoryID") != 34 && p.Field<int>("CategoryID") != 39 && p.Field<int>("CategoryID") != 40 && p.Field<int>("CategoryID") != 41 && p.Field<int>("CategoryID") != 43 && p.Field<int>("CategoryID") != 44).Select(
                            p => new JobHistory
                            {
                                NoteId = 0,
                                CategoryID = (p.Field<int>("CategoryID")),
                                HistoryCategory = (p.Field<string>("HistoryCategory")),
                                HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                                IsSSC = (p.Field<bool>("IsSSC")),
                                JobHistoryID = (p.Field<int>("JobHistoryID")),
                                JobID = (p.Field<int>("JobID")),
                                ModifiedBy = (p.Field<int>("ModifiedBy")),
                                CreateDate = (p.Field<DateTime>("ModifiedDate")).ToString("dd/MM/yyyy hh:mmtt"),
                                ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                                Modifier = (p.Field<string>("Modifier")),
                                Title = (p.Field<string>("Title")),
                                RefNumber = (p.Field<string>("RefNumber")),
                                        //currentPage = (p.Field<int>("currentPage")),
                                        TotalRecords = (p.Field<int>("TotalRecords")),
                                FilterID = (p.Field<int>("FilterID")),
                                IsImportant = false

                            }).ToList();

                    }
                    else if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
                    {
                        //Hide Gst history for all users except FSA/FCO
                        jobHistory = objDs.Tables[0].AsEnumerable().Where(p => p.Field<int>("CategoryID") != 34 && p.Field<int>("CategoryID") != 39 && p.Field<int>("CategoryID") != 40 && p.Field<int>("CategoryID") != 41 && p.Field<int>("CategoryID") != 43 && p.Field<int>("CategoryID") != 44).Select(
                        p => new JobHistory
                        {
                            NoteId = 0,
                            CategoryID = (p.Field<int>("CategoryID")),
                            HistoryCategory = (p.Field<string>("HistoryCategory")),
                            HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                            IsSSC = (p.Field<bool>("IsSSC")),
                            JobHistoryID = (p.Field<int>("JobHistoryID")),
                            JobID = (p.Field<int>("JobID")),
                            ModifiedBy = (p.Field<int>("ModifiedBy")),
                            CreateDate = (p.Field<DateTime>("ModifiedDate")).ToString("dd/MM/yyyy hh:mmtt"),
                            ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                            Modifier = (p.Field<string>("Modifier")),
                            Title = (p.Field<string>("Title")),
                            RefNumber = (p.Field<string>("RefNumber")),
                                    //currentPage = (p.Field<int>("currentPage")),
                                    TotalRecords = (p.Field<int>("TotalRecords")),
                            FilterID = (p.Field<int>("FilterID")),
                            IsImportant = false
                        }).ToList();
                    }
                    else
                    {
                        jobHistory = objDs.Tables[0].AsEnumerable().Select(
                        p => new JobHistory
                        {
                            NoteId = 0,
                            CategoryID = (p.Field<int>("CategoryID")),
                            HistoryCategory = (p.Field<string>("HistoryCategory")),
                            HistoryMessage = (p.Field<string>("HistoryMessage")).Replace("DownloadDocument(this)", "DownloadHistoryDocument(this)"),
                            IsSSC = (p.Field<bool>("IsSSC")),
                            JobHistoryID = (p.Field<int>("JobHistoryID")),
                            JobID = (p.Field<int>("JobID")),
                            ModifiedBy = (p.Field<int>("ModifiedBy")),
                            CreateDate = (p.Field<DateTime>("ModifiedDate")).ToString("dd/MM/yyyy hh:mmtt"),
                            ModifiedDate = (p.Field<DateTime>("ModifiedDate")),
                            Modifier = (p.Field<string>("Modifier")),
                            Title = (p.Field<string>("Title")),
                            RefNumber = (p.Field<string>("RefNumber")),
                                    //currentPage = (p.Field<int>("currentPage")),
                                    TotalRecords = (p.Field<int>("TotalRecords")),
                            FilterID = (p.Field<int>("FilterID")),
                            IsImportant = false
                        }).ToList();
                    }
                }
            }
            #endregion
            #region add notes history in job history
            string xmlPath = ProjectConfiguration.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID + "\\" + "Notes";
            bool AccessToInstallerNotes = false;
            if (ProjectSession.UserTypeId == 4)
            {
                AccessToInstallerNotes = _job.CheckAccessForInstallerNotes(ProjectSession.LoggedInUserId);
            }
            if (System.IO.Directory.Exists(xmlPath))
            {
                string[] files = Directory.GetFiles(xmlPath, "*.xml");
                if (files.Length > 0)
                {
                    for (int i = 0; i < files.Length; i++)
                    {
                        XmlDocument doc = new XmlDocument();
                        doc.Load(files[i]);

                        XmlNodeList Notes = doc.DocumentElement.SelectNodes("/Notes/Note");
                        foreach (XmlNode node in Notes)
                        {
                            string noteid = node.SelectSingleNode("NoteID").InnerText;
                            string notestype = node.SelectSingleNode("NotesType").InnerText;
                            bool IsDeleted = Convert.ToBoolean(node.SelectSingleNode("IsDeleted").InnerText);

                            int NotesTypeValue = !string.IsNullOrEmpty(notestype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), notestype).GetHashCode()) : 0;
                            bool IsEdit = Convert.ToBoolean(node.SelectSingleNode("IsEdit").InnerText);
                            if ((PostVisibility == 0 || PostVisibility == NotesTypeValue))
                            {
                                string TaggedUsers = node.SelectSingleNode("NotesDescription").InnerText;
                                //List<string> matchvalue = new List<string>();
                                //foreach (Match match in Regex.Matches(TaggedUsers, @"(?<!\w)@\w+"))
                                //{
                                //    matchvalue.Add(match.Value);
                                //}
                                //matchvalue = matchvalue.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                //string taggeduserlist = string.Join(",", matchvalue.ToArray());
                                HtmlDocument notesdoc = new HtmlDocument();
                                notesdoc.LoadHtml(TaggedUsers);
                                var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");
                                //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                                //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name")); 
                                List<string> AllTaggedUsers = new List<string>();
                                if (SelectTaggedUsers != null)
                                {
                                    for (int j = 0; j < SelectTaggedUsers.Count; j++)
                                    {
                                        AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                                    }
                                    AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                    for (int m = 0; m < AllTaggedUsers.Count; m++)
                                    {
                                        if (AllTaggedUsers[m].Contains('@'))
                                        {

                                            string[] TaggedList = AllTaggedUsers[m].Split('@');
                                            AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                            foreach (string tagged in TaggedList)
                                            {
                                                AllTaggedUsers.Add(tagged);
                                            }
                                        }
                                    }
                                }
                                string taggeduserlist = string.Join(",", AllTaggedUsers.ToArray());
                                JobHistory objjobhistory = new JobHistory();
                                objjobhistory.HistoryCategory = "Add Note";
                                objjobhistory.NoteId = !string.IsNullOrEmpty((noteid)) ? Convert.ToInt32(noteid) : 0;
                                objjobhistory.JobID = Convert.ToInt32(node.SelectSingleNode("JobID").InnerText);
                                objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText);
                                objjobhistory.IsImportant = Convert.ToBoolean(node.SelectSingleNode("IsImportantNote").InnerText);
                                objjobhistory.NotesTypeValue = NotesTypeValue;
                                objjobhistory.strNotesTypeValue = NotesTypeValue == 1 ? "public" : NotesTypeValue == 2 ? "private" : NotesTypeValue == 3 ? "internalNotes" : NotesTypeValue == 4 ? "installerNotes" : "";
                                objjobhistory.Modifier = node.SelectSingleNode("CreatedBy").InnerText;
                                if (IsDeleted)
                                {
                                    objjobhistory.IsDeletedJobNote = 2;
                                }
                                else
                                {
                                    objjobhistory.IsDeletedJobNote = 3;
                                }

                                string Replies = "";
                                XmlNodeList replylist = node.SelectNodes("NotesReply/Reply");
                                foreach (XmlNode notesreplynode in replylist)
                                {
                                    int replyID = Convert.ToInt32(notesreplynode.SelectSingleNode("ReplyID").InnerText);
                                    string ReplyBy = notesreplynode.SelectSingleNode("ReplyBy").InnerText;
                                    string ReplyDescription = notesreplynode.SelectSingleNode("ReplyDescription").InnerText;
                                    if (replyID == 1)
                                    {
                                        if (!string.IsNullOrEmpty(ReplyBy) && !string.IsNullOrEmpty(ReplyDescription))
                                        {
                                            string ReplyTime = Convert.ToDateTime(notesreplynode.SelectSingleNode("ReplyTime").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            Replies = "<p style=\"margin-left:20px\"> <span class=\"blue-title\">" + ReplyBy + "</span> replied on <span class=\"blue-title\">" + ReplyTime + "</span><div style=\"margin-left:20px\">" + ReplyDescription + "</div></p>";
                                        }
                                    }
                                    else
                                    {
                                        string ReplyTime = Convert.ToDateTime(notesreplynode.SelectSingleNode("ReplyTime").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        Replies = "<p style=\"margin-left:20px\"> <span class=\"blue-title\">" + ReplyBy + "</span> replied on <span class=\"blue-title\">" + ReplyTime + "</span><div style=\"margin-left:20px\">" + ReplyDescription + "</div></p>" + Replies;
                                    }
                                }
                                string repliestxt = !string.IsNullOrEmpty(Replies) ? "<p><b class=\"blue-title\">Replies:</b></p>" : "";
                                string noteDescription = node.SelectSingleNode("NotesDescription").InnerText + repliestxt + Replies;

                                if (AllTaggedUsers.Count == 0)
                                {
                                    objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
                                    noteDescription = noteDescription.Replace("<a", "<a class=\"disabledLink\"");
                                    //objjobhistory.HistoryMessage = "left note " + node.SelectSingleNode("NotesDescription").InnerText ;
                                    if (!IsDeleted)
                                    {

                                        if (!IsEdit)
                                        {
                                            objjobhistory.HistoryMessage = "added a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b><a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none;\" onclick=\"ReplyNote(this)\"></a>  <a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px; text-decoration:none;display:none\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;display:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\"></a> " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                        }
                                        else
                                        {
                                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                            objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                            objjobhistory.HistoryMessage = "edited a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b><a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none;\" onclick=\"ReplyNote(this)\"></a> <a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px; text-decoration:none;display:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;display:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\"></a> " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                        }
                                    }
                                    else
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        objjobhistory.HistoryMessage = "deleted a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b>" + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                    }
                                }
                                else
                                {
                                    // noteDescription = noteDescription.Replace("<a", "<a class=\"disabledLink tagged\"");
                                    objjobhistory.CategoryID = HistoryCategory.AddNotesWithMention.GetHashCode();
                                    //objjobhistory.HistoryMessage = "left note for <b class='tagged-users'>" + taggeduserlist + "</b>" + node.SelectSingleNode("NotesDescription").InnerText ;
                                    if (!IsDeleted)
                                    {
                                        if (!IsEdit)
                                        {
                                            objjobhistory.HistoryMessage = "added a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b><span class=\"notesfunction\"><a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none\" onclick=\"ReplyNote(this)\"></a> <a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px; text-decoration:none;display:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;display:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\"></a></span> " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                        }
                                        else
                                        {
                                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                            objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                            objjobhistory.HistoryMessage = "edited a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b> <span class=\"notesfunction\"> <a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none\" onclick=\"ReplyNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px; text-decoration:none;display:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;display:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\"></a></span>" + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                        }
                                    }
                                    else
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        objjobhistory.HistoryMessage = "deleted a " + notestype + " note - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b>" + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + noteDescription;
                                    }
                                }
                                string JobSchedulingID = node.SelectSingleNode("JobSchedulingID").InnerText;
                                if (!string.IsNullOrEmpty(JobSchedulingID))
                                {
                                    objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
                                    //objjobhistory.HistoryMessage = "<p>left note for JobSchedulingID: " + JobSchedulingID + "<p>" + node.SelectSingleNode("NotesDescription").InnerText + "</p></p>";
                                    if (!IsDeleted)
                                    {
                                        if (!IsEdit)
                                        {
                                            objjobhistory.HistoryMessage = "<p> added a " + notestype + " note for JobSchedulingID: " + JobSchedulingID + " - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b><span class=\"notesfunction\"><a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none\" onclick=\"ReplyNote(this)\"></a> <a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px; text-decoration:none;display:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;display:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\"></a></span> " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NotesDescription").InnerText + Replies;
                                        }
                                        else
                                        {
                                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                            objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                            objjobhistory.HistoryMessage = "<p> edited a " + notestype + " note for JobSchedulingID: " + JobSchedulingID + " - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b><span class=\"notesfunction\"><a data-noteid=" + noteid + " class=\"fa-solid fa-reply IconsEditDelete\" title=\"Reply\"  href=\"javascript: void(0)\" style=\"font-size:17px;margin-left: 5px;cursor: pointer;display:none\" onclick=\"ReplyNote(this)\"></a> <a data-noteid=" + noteid + " class=\"fa-solid fa-pencil IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px; text-decoration:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer;display:none\" onclick=\"EditNote(this)\"></a><a data-noteid=" + noteid + " class=\"fa-solid fa-trash IconsEditDelete\" style=\"font-size: 17px;margin-left: 5px;text-decoration:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer;display:none\" onclick=\"DeleteNote(this)\"></a></span> " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NotesDescription").InnerText + Replies;
                                        }
                                    }
                                    else
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        objjobhistory.HistoryMessage = "<p> deleted a " + notestype + " note for JobSchedulingID: " + JobSchedulingID + " - <b class=\"blue-title\">(" + objjobhistory.JobID + ") " + JobRefNo + "</b>" + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NotesDescription").InnerText + Replies;
                                    }
                                }


                                objjobhistory.RefNumber = node.SelectSingleNode("JobRefNo").InnerText;
                                objjobhistory.FilterID = objjobhistory.CategoryID == 64 ? 2 : 4;
                                if (NotesTypeValue != 4)
                                {
                                    if ((IsDeletedJobNote == 1) || (IsDeletedJobNote != 1 && IsDeletedJobNote == objjobhistory.IsDeletedJobNote))
                                        jobHistory.Add(objjobhistory);
                                }
                                if (NotesTypeValue == 4)
                                {
                                    if ((IsDeletedJobNote == 1) || (IsDeletedJobNote != 1 && IsDeletedJobNote == objjobhistory.IsDeletedJobNote))
                                    {
                                        {
                                            if ((ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3 && AccessToInstallerNotes == true) || (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3))
                                            {
                                                jobHistory.Add(objjobhistory);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
            #region Add JobHistory from xml
            string JobHistoryDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", Id.ToString(), "JobHistory");
            string JobHistoryFilePath = Path.Combine(JobHistoryDirectoryPath, "JobHistory_" + Id.ToString() + ".xml");

            if (System.IO.File.Exists(JobHistoryFilePath))
            {
                XmlDocument doc = new XmlDocument();
                doc.Load(JobHistoryFilePath);
                XmlNodeList History = doc.DocumentElement.SelectNodes("/JobHistory/History");

                foreach (XmlNode node in History)
                {
                    string Category = node.SelectSingleNode("Category").InnerText;
                    string Filter = node.SelectSingleNode("Filter").InnerText;
                    int CategoryID = !string.IsNullOrEmpty(Category) ? Convert.ToInt32((HistoryCategory)Enum.Parse(typeof(HistoryCategory), Category).GetHashCode()) : 0;
                    int FilterID = !string.IsNullOrEmpty(Filter) ? Convert.ToInt32((SystemEnums.JobHistoryFilter)Enum.Parse(typeof(SystemEnums.JobHistoryFilter), Filter).GetHashCode()) : 0;
                    string Historytype = node.SelectSingleNode("HistoryType").InnerText;
                    int HistoryTypeValue = !string.IsNullOrEmpty(Historytype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), Historytype).GetHashCode()) : 0;
                    JobHistory objjobhistory = new JobHistory();
                    objjobhistory.HistoryCategory = Category;
                    objjobhistory.CategoryID = CategoryID;
                    string HistoryMessage = node.SelectSingleNode("JobHistoryMessage").InnerText;
                    string Description = "<p>" + node.SelectSingleNode("Description").InnerText + "</p>";
                    string JobHistoryMessage = HistoryMessage + Description;
                    bool IsDeleted = Convert.ToBoolean(node.SelectSingleNode("IsDeleted").InnerText);
                    JobHistoryMessage = JobHistoryMessage.Replace("JobRefNo", JobRefNo);
                    objjobhistory.HistoryMessage = JobHistoryMessage;
                    objjobhistory.JobID = Convert.ToInt32(node.SelectSingleNode("JobID").InnerText);
                    objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                    objjobhistory.IsImportant = Convert.ToBoolean(node.SelectSingleNode("IsImportant").InnerText);
                    objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText);
                    objjobhistory.Modifier = node.SelectSingleNode("CreatedBy").InnerText;
                    objjobhistory.FilterID = FilterID;
                    objjobhistory.NoteId = 0;
                    if (IsDeleted)
                    {
                        objjobhistory.IsDeletedJobNote = 2;
                    }
                    else
                    {
                        objjobhistory.IsDeletedJobNote = 3;
                    }
                    if ((HistoryTypeValue == PostVisibility || PostVisibility == 0) && objjobhistory.HistoryCategory != "EditNote")
                    {
                        if ((IsDeletedJobNote == 1) || (IsDeletedJobNote != 1 && IsDeletedJobNote == objjobhistory.IsDeletedJobNote))
                        {
                            jobHistory.Add(objjobhistory);
                        }
                    }
                }
            }
            #endregion
            #region add stc job history with job history
            string STCJobHistoryFilePath = Path.Combine(JobHistoryDirectoryPath, "STCJobHistory_" + Id.ToString() + ".xml");
            if (PostVisibility == 1 || PostVisibility == 0)
            {
                if (System.IO.File.Exists(STCJobHistoryFilePath))
                {
                    XmlDocument doc = new XmlDocument();
                    doc.Load(STCJobHistoryFilePath);
                    XmlNodeList History = doc.DocumentElement.SelectNodes("/JobSTCHistory/History");

                    foreach (XmlNode node in History)
                    {
                        string Category = node.SelectSingleNode("Category").InnerText;
                        string Filter = node.SelectSingleNode("Filter").InnerText;
                        int CategoryID = !string.IsNullOrEmpty(Category) ? Convert.ToInt32((HistoryCategory)Enum.Parse(typeof(HistoryCategory), Category).GetHashCode()) : 0;
                        int FilterID = !string.IsNullOrEmpty(Filter) ? Convert.ToInt32((SystemEnums.JobHistoryFilter)Enum.Parse(typeof(SystemEnums.JobHistoryFilter), Filter).GetHashCode()) : 0;
                        JobHistory objjobhistory = new JobHistory();
                        objjobhistory.HistoryCategory = Category;
                        objjobhistory.CategoryID = CategoryID;
                        objjobhistory.JobID = Convert.ToInt32(node.SelectSingleNode("JobID").InnerText);
                        string HistoryMessage = node.SelectSingleNode("JobHistoryMessage").InnerText;
                        string Description = "<p>" + node.SelectSingleNode("Description").InnerText + "</p>";
                        string JobHistoryMessage = HistoryMessage + Description;
                        JobHistoryMessage = Regex.Replace(HttpUtility.HtmlDecode(JobHistoryMessage), "&lt;br&gt;", Environment.NewLine);
                        JobHistoryMessage = JobHistoryMessage.Replace("JobRefNo", JobRefNo);
                        objjobhistory.HistoryMessage = JobHistoryMessage;
                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                        objjobhistory.IsImportant = Convert.ToBoolean(node.SelectSingleNode("IsImportant").InnerText);
                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText);
                        objjobhistory.Modifier = node.SelectSingleNode("CreatedBy").InnerText;
                        objjobhistory.FilterID = FilterID;
                        objjobhistory.NoteId = 0;
                        if (IsDeletedJobNote != 2)
                        {
                            jobHistory.Add(objjobhistory);
                        }
                    }
                }
            }
            #endregion
            #region Add Warning Notes in JobHistory
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
            {
                if (PostVisibility == 5 || PostVisibility == 0)
                {
                    DataSet ds = _job.GetUserIDofSolarCompanyandSolarElectricianByJobID(Convert.ToInt32(jobID));
                    int SolarCompanyUserID = 0;
                    int AssignedJobElectricianID = 0;
                    int VisitElectricianID = 0;
                    if (ds != null && ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataRow dr = ds.Tables[0].Rows[0];
                            SolarCompanyUserID = Convert.ToInt32(dr["UserId"]);
                            AssignedJobElectricianID = Convert.ToInt32(dr["JobElectricianID"]);
                        }
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            DataRow dr = ds.Tables[1].Rows[0];
                            VisitElectricianID = Convert.ToInt32(dr["UserId"]);
                        }
                    }
                    string UserWarningNoteDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "UserDocuments", "WarningNotes");
                    string UserWarningNoteFile = Path.Combine(UserWarningNoteDirectoryPath, "WarningNotes.xml");
                    if (System.IO.File.Exists(UserWarningNoteFile))
                    {
                        XmlDocument doc = new XmlDocument();
                        doc.Load(UserWarningNoteFile);
                        XmlNodeList Notes = doc.DocumentElement.SelectNodes("/UserNotes/Note");
                        foreach (XmlNode node in Notes)
                        {
                            JobHistory objjobhistory = new JobHistory();
                            objjobhistory.HistoryCategory = "Add Note";
                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText);
                            objjobhistory.IsImportant = false;
                            objjobhistory.NotesTypeValue = 5;
                            objjobhistory.strNotesTypeValue = "Warning";
                            objjobhistory.Modifier = node.SelectSingleNode("CreatedBy").InnerText;
                            objjobhistory.IsImportant = Convert.ToBoolean(node.SelectSingleNode("IsImportant").InnerText);
                            int UserID = Convert.ToInt32(node.SelectSingleNode("UserID").InnerText);
                            string noteid = node.SelectSingleNode("NoteID").InnerText;
                            bool IsEdit = Convert.ToBoolean(node.SelectSingleNode("IsEdit").InnerText);
                            string TaggedUsers = node.SelectSingleNode("NoteDescription").InnerText;
                            bool IsDeleted = Convert.ToBoolean(node.SelectSingleNode("IsDeleted").InnerText);
                            objjobhistory.NoteId = !string.IsNullOrEmpty((noteid)) ? Convert.ToInt32(noteid) : 0;
                            if (IsDeleted)
                            {
                                objjobhistory.IsDeletedJobNote = 2;
                            }
                            else
                            {
                                objjobhistory.IsDeletedJobNote = 3;
                            }
                            HtmlDocument notesdoc = new HtmlDocument();
                            notesdoc.LoadHtml(TaggedUsers);
                            var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");

                            List<string> AllTaggedUsers = new List<string>();
                            if (SelectTaggedUsers != null)
                            {
                                for (int j = 0; j < SelectTaggedUsers.Count; j++)
                                {
                                    AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                                }
                                AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                for (int m = 0; m < AllTaggedUsers.Count; m++)
                                {
                                    if (AllTaggedUsers[m].Contains('@'))
                                    {

                                        string[] TaggedList = AllTaggedUsers[m].Split('@');
                                        AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                        foreach (string tagged in TaggedList)
                                        {
                                            AllTaggedUsers.Add(tagged);
                                        }
                                    }
                                }
                            }

                            string taggeduserlist = string.Join(",", AllTaggedUsers.ToArray());
                            if (AllTaggedUsers.Count == 0)
                            {
                                objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
                                //objjobhistory.HistoryMessage = "added a warning note " + node.SelectSingleNode("NoteDescription").InnerText;
                                if (!IsDeleted)
                                {
                                    if (!IsEdit)
                                    {
                                        string ModifiedBy = node.SelectSingleNode("ModifiedBy").InnerText;
                                        if (!string.IsNullOrEmpty(ModifiedBy))
                                        {
                                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                            objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        }
                                        objjobhistory.HistoryMessage = "published a Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                    }
                                    else
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        objjobhistory.HistoryMessage = "edited a published Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                    }
                                }
                                else
                                {
                                    objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                    objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                    objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    objjobhistory.HistoryMessage = "unpublished Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                            }
                            else
                            {
                                objjobhistory.CategoryID = HistoryCategory.AddNotesWithMention.GetHashCode();
                                //objjobhistory.HistoryMessage = "added a warning note for <b class='tagged-users'>" + taggeduserlist + "</b>" + node.SelectSingleNode("NoteDescription").InnerText;
                                if (!IsDeleted)
                                {
                                    if (!IsEdit)
                                    {
                                        string ModifiedBy = node.SelectSingleNode("ModifiedBy").InnerText;
                                        if (!string.IsNullOrEmpty(ModifiedBy))
                                        {
                                            objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                            objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                            objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        }
                                        objjobhistory.HistoryMessage = "published a Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                    }
                                    else
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                        objjobhistory.HistoryMessage = "edited a published Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                    }
                                }
                                else
                                {
                                    objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                    objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                    objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    objjobhistory.HistoryMessage = "unpublished Warning note " + "<span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                            }

                            if (((IsDeletedJobNote == 1) || (IsDeletedJobNote != 1 && IsDeletedJobNote == objjobhistory.IsDeletedJobNote)) && (UserID == SolarCompanyUserID || UserID == AssignedJobElectricianID || UserID == VisitElectricianID))
                            {
                                jobHistory.Add(objjobhistory);
                            }
                        }
                    }
                }
            }

            #endregion
            if (ProjectSession.UserTypeId != 1)
            {
                jobHistory = jobHistory.Where(m => m.CategoryID != 35 && m.CategoryID != 34 && m.CategoryID != 39 && m.CategoryID != 40 && m.CategoryID != 41 && m.CategoryID != 43 && m.CategoryID != 44).ToList();
                jobHistory = jobHistory.Where(m => m.NotesTypeValue != 3).ToList();
            }
            else if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
            {
                jobHistory = jobHistory.Where(m => m.CategoryID != 34 && m.CategoryID != 39 && m.CategoryID != 40 && m.CategoryID != 41 && m.CategoryID != 43 && m.CategoryID != 44).ToList();
                jobHistory = jobHistory.Where(m => m.NotesTypeValue != 3).ToList();
            }


            //if (PostVisibility == 3)
            //{
            //    List<JobNotes> lstJobNotes = _job.GetComplianceNotes(Convert.ToInt32(jobID));
            //    if (lstJobNotes.Count > 0)
            //    {
            //        for (int i = 0; i < lstJobNotes.Count; i++)
            //        {
            //            JobHistory objjobhistory = new JobHistory();
            //            objjobhistory.HistoryCategory = "Add Note";
            //            objjobhistory.JobID = lstJobNotes[i].JobID;
            //            objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
            //            objjobhistory.HistoryMessage = "added a InternalSystem note - <b class=\"blue-title\"> (" + objjobhistory.JobID + ")" + JobRefNo + "</b> <p>" + lstJobNotes[i].Notes + "</p></p></p>";
            //            objjobhistory.CreateDate = lstJobNotes[i].CreatedDate.ToString("dd/MM/yyyy hh:mmtt");
            //            objjobhistory.ModifiedDate = lstJobNotes[i].CreatedDate;
            //            objjobhistory.Modifier = lstJobNotes[i].Created;
            //            objjobhistory.FilterID = 4;
            //            objjobhistory.IsImportant = false;
            //            jobHistory.Add(objjobhistory);
            //        }
            //    }

            //}

            if (PostVisibility == 4 || PostVisibility == 0)
            {
                List<JobNotes> lstJobNotes = _job.GetJobNotesListOnVisit(Convert.ToInt32(jobID));
                if (lstJobNotes.Count > 0)
                {
                    for (int i = 0; i < lstJobNotes.Count; i++)
                    {
                        JobHistory objjobhistory = new JobHistory();
                        objjobhistory.HistoryCategory = "Add Note";
                        objjobhistory.JobID = lstJobNotes[i].JobID;
                        objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
                        if (!string.IsNullOrEmpty(lstJobNotes[i].JobSchedulingId.ToString()))
                        {
                            objjobhistory.HistoryMessage = objjobhistory.HistoryMessage = "<p>added a Installer note for JobSchedulingID: " + lstJobNotes[i].JobSchedulingId.ToString() + " - <b class=\"blue-title\">(" + objjobhistory.JobID + ")" + JobRefNo + "</b>  <p>" + lstJobNotes[i].Notes + "</p></p>";
                        }
                        else
                        {
                            objjobhistory.HistoryMessage = "<p>added a Installer note - <b class=\"blue-title\"> (" + objjobhistory.JobID + ")" + JobRefNo + "</b> <p>" + lstJobNotes[i].Notes + "</p></p>";
                        }
                        objjobhistory.CreateDate = lstJobNotes[i].CreatedDate.ToString("dd/MM/yyyy hh:mmtt");
                        objjobhistory.ModifiedDate = lstJobNotes[i].CreatedDate;
                        objjobhistory.Modifier = lstJobNotes[i].Created;
                        objjobhistory.FilterID = objjobhistory.CategoryID == 64 ? 2 : 4;
                        objjobhistory.IsImportant = false;
                        if ((ProjectSession.UserTypeId == 4 && AccessToInstallerNotes == true) || (ProjectSession.UserTypeId != 4))
                        {
                            jobHistory.Add(objjobhistory);
                        }
                    }
                }
            }
            List<JobHistory> importantHistorynotes = new List<JobHistory>();
            List<JobHistory> nonImportantHistorynotes = new List<JobHistory>();

            if (categoryID > 0)
            {
                jobHistory = jobHistory.Where(m => m.FilterID == categoryID).ToList();
            }

            nonImportantHistorynotes = jobHistory.Where(m => m.IsImportant == false).ToList();
            importantHistorynotes = jobHistory.Where(m => m.IsImportant == true).ToList();

            if (IsImportant)
            {
                jobHistory = importantHistorynotes.OrderByDescending(m => m.ModifiedDate).ToList();
            }
            else
            {
                nonImportantHistorynotes = nonImportantHistorynotes.OrderByDescending(m => m.ModifiedDate).ToList();
                jobHistory = importantHistorynotes.Concat(nonImportantHistorynotes).ToList<JobHistory>();
            }

            return jobHistory;
        }
        /// <summary>
        /// get warning notes from xml file 
        /// </summary>
        /// <param name="jobID"></param>
        /// <param name="categoryID"></param>
        /// <param name="isFilter"></param>
        /// <param name="order"></param>
        /// <param name="PostVisibility"></param>
        /// <param name="IsDeletedJobNote"></param>
        /// <param name="IsImportant"></param>
        /// <returns></returns>
        public List<JobHistory> GetWarningNotes(string jobID, int? categoryID, bool isFilter, string order, int PostVisibility, int IsDeletedJobNote, bool IsImportant = false)
        {

            //int NotesType = !string.IsNullOrEmpty(notestype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), notestype).GetHashCode()) : 0;

            List<JobHistory> jobHistory = new List<JobHistory>();
            int Id = 0;
            if (!isFilter)
            {
                if (!string.IsNullOrEmpty(jobID))
                    int.TryParse(QueryString.GetValueFromQueryString(jobID, "id"), out Id);
            }
            else
            {
                Id = Convert.ToInt32(jobID);
            }
            // string JobRefNo = _job.GetRefNumberByJobId(Id);
            #region Add Warning Notes in JobHistory
            if (PostVisibility == 5 || PostVisibility == 0)
            {
                DataSet ds = _job.GetUserIDofSolarCompanyandSolarElectricianByJobID(Convert.ToInt32(jobID));
                int SolarCompanyUserID = 0;
                int AssignedJobElectricianID = 0;
                int VisitElectricianID = 0;
                if (ds != null && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        DataRow dr = ds.Tables[0].Rows[0];
                        SolarCompanyUserID = Convert.ToInt32(dr["UserId"]);
                        AssignedJobElectricianID = Convert.ToInt32(dr["JobElectricianID"]);
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        DataRow dr = ds.Tables[1].Rows[0];
                        VisitElectricianID = Convert.ToInt32(dr["UserId"]);
                    }
                }
                string UserWarningNoteDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "UserDocuments", "WarningNotes");
                string UserWarningNoteFile = Path.Combine(UserWarningNoteDirectoryPath, "WarningNotes.xml");
                if (System.IO.File.Exists(UserWarningNoteFile))
                {
                    XmlDocument doc = new XmlDocument();
                    doc.Load(UserWarningNoteFile);
                    XmlNodeList Notes = doc.DocumentElement.SelectNodes("/UserNotes/Note");
                    foreach (XmlNode node in Notes)
                    {
                        JobHistory objjobhistory = new JobHistory();
                        objjobhistory.HistoryCategory = "Add Note";
                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("CreatedDate").InnerText);
                        objjobhistory.IsImportant = false;
                        objjobhistory.NotesTypeValue = 5;
                        objjobhistory.strNotesTypeValue = "Warning";
                        objjobhistory.Modifier = node.SelectSingleNode("CreatedBy").InnerText;
                        objjobhistory.IsImportant = Convert.ToBoolean(node.SelectSingleNode("IsImportant").InnerText);
                        int UserID = Convert.ToInt32(node.SelectSingleNode("UserID").InnerText);
                        string noteid = node.SelectSingleNode("NoteID").InnerText;
                        bool IsEdit = Convert.ToBoolean(node.SelectSingleNode("IsEdit").InnerText);
                        string TaggedUsers = node.SelectSingleNode("NoteDescription").InnerText;
                        bool IsDeleted = Convert.ToBoolean(node.SelectSingleNode("IsDeleted").InnerText);
                        if (IsDeleted)
                        {
                            objjobhistory.IsDeletedJobNote = 2;
                        }
                        else
                        {
                            objjobhistory.IsDeletedJobNote = 3;
                        }
                        HtmlDocument notesdoc = new HtmlDocument();
                        notesdoc.LoadHtml(TaggedUsers);
                        var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");

                        List<string> AllTaggedUsers = new List<string>();
                        if (SelectTaggedUsers != null)
                        {
                            for (int j = 0; j < SelectTaggedUsers.Count; j++)
                            {
                                AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                            }
                            AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                            for (int m = 0; m < AllTaggedUsers.Count; m++)
                            {
                                if (AllTaggedUsers[m].Contains('@'))
                                {

                                    string[] TaggedList = AllTaggedUsers[m].Split('@');
                                    AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                    foreach (string tagged in TaggedList)
                                    {
                                        AllTaggedUsers.Add(tagged);
                                    }
                                }
                            }
                        }
                        string userName = string.Empty;
                        DataSet dsUserName = _userBAL.GetUserByUserId(UserID);
                        if (dsUserName != null && dsUserName.Tables.Count > 0 && dsUserName.Tables[0].Rows.Count > 0)
                        {
                            userName = dsUserName.Tables[0].Rows[0]["name"].ToString();
                        }
                        string taggeduserlist = string.Join(",", AllTaggedUsers.ToArray());
                        if (AllTaggedUsers.Count == 0)
                        {
                            objjobhistory.CategoryID = HistoryCategory.AddNote.GetHashCode();
                            //objjobhistory.HistoryMessage = "added a warning note " + node.SelectSingleNode("NoteDescription").InnerText;
                            if (!IsDeleted)
                            {
                                if (!IsEdit)
                                {
                                    string ModifiedBy = node.SelectSingleNode("ModifiedBy").InnerText;
                                    if (!string.IsNullOrEmpty(ModifiedBy))
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    }
                                    objjobhistory.HistoryMessage = "published a Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                                else
                                {
                                    objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                    objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                    objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    objjobhistory.HistoryMessage = "edited a published Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                            }
                            else
                            {
                                objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                objjobhistory.HistoryMessage = "unpublished Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                            }
                        }
                        else
                        {
                            objjobhistory.CategoryID = HistoryCategory.AddNotesWithMention.GetHashCode();
                            //objjobhistory.HistoryMessage = "added a warning note for <b class='tagged-users'>" + taggeduserlist + "</b>" + node.SelectSingleNode("NoteDescription").InnerText;
                            if (!IsDeleted)
                            {
                                if (!IsEdit)
                                {
                                    string ModifiedBy = node.SelectSingleNode("ModifiedBy").InnerText;
                                    if (!string.IsNullOrEmpty(ModifiedBy))
                                    {
                                        objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                        objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                        objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    }
                                    objjobhistory.HistoryMessage = "published a Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                                else
                                {
                                    objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                    objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                    objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                    objjobhistory.HistoryMessage = "edited a published Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                                }
                            }
                            else
                            {
                                objjobhistory.CreateDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                objjobhistory.ModifiedDate = Convert.ToDateTime(node.SelectSingleNode("ModifiedDate").InnerText);
                                objjobhistory.Modifier = node.SelectSingleNode("ModifiedBy").InnerText;
                                objjobhistory.HistoryMessage = "unpublished Warning note for <span class=\"blue-title\">" + userName + "</span><span style=\"float:right;display:none\">NoteID: " + noteid + "</span>" + node.SelectSingleNode("NoteDescription").InnerText;
                            }
                        }

                        if (((IsDeletedJobNote == 1) || (IsDeletedJobNote != 1 && IsDeletedJobNote == objjobhistory.IsDeletedJobNote)) && (UserID == SolarCompanyUserID || UserID == AssignedJobElectricianID || UserID == VisitElectricianID))
                        {
                            jobHistory.Add(objjobhistory);
                        }
                    }
                }
            }
            #endregion

            List<JobHistory> importantHistorynotes = new List<JobHistory>();
            List<JobHistory> nonImportantHistorynotes = new List<JobHistory>();

            if (categoryID > 0)
            {
                jobHistory = jobHistory.Where(m => m.FilterID == categoryID).ToList();
            }

            nonImportantHistorynotes = jobHistory.Where(m => m.IsImportant == false).ToList();
            importantHistorynotes = jobHistory.Where(m => m.IsImportant == true).ToList();

            if (IsImportant)
            {
                jobHistory = importantHistorynotes.OrderByDescending(m => m.ModifiedDate).ToList();
            }
            else
            {
                nonImportantHistorynotes = nonImportantHistorynotes.OrderByDescending(m => m.ModifiedDate).ToList();
                jobHistory = importantHistorynotes.Concat(nonImportantHistorynotes).ToList<JobHistory>();
            }

            return jobHistory;
        }
        /// <summary>
        /// Binds the job price view.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <param name="IsGridView">if set to <c>true</c> [is grid view].</param>
        /// <returns>action result</returns>
        public ActionResult BindJobSTCPriceView(string jobId, bool IsGridView = false, bool IsTradedFromJobIndex = false)
        {
            FormBot.Entity.PricingManager result = _jobDetails.GetJobSTCPrice(Convert.ToString(jobId));
            result.IsGridView = IsGridView;
            result.jobIDS = jobId;

            if (IsTradedFromJobIndex)
                result.IsShowInDashboard = false;
            else
                result.IsShowInDashboard = true;

            result.IsTradedFromJobIndex = IsTradedFromJobIndex;

            ViewBag.CurrentSTCJobStatus = SystemEnums.STCJobStatus.SubmittoTrade.GetHashCode();
            result.STCStatus = SystemEnums.STCJobStatus.SubmittoTrade.GetHashCode();

            return this.PartialView("_SettlementBlock", result);
        }

        /// <summary>
        /// Gets the job submission.
        /// </summary>
        /// <param name="stageid">The stage.</param>
        /// <param name="reseller">The reseller.</param>
        /// <param name="ram">The ram.</param>
        /// <param name="complianceOfficerId">The compliance officer identifier.</param>
        /// <param name="solarcompanyid">The solarcompanyid.</param>
        /// <param name="pvdswhcode">The pvdswhcode.</param>
        /// <param name="refJobId">The reference job identifier.</param>
        /// <param name="ownername">The ownername.</param>
        /// <param name="installationaddress">The installationaddress.</param>
        /// <param name="submissionfromdate">The submissionfromdate.</param>
        /// <param name="submissiontodate">The submissiontodate.</param>
        /// <param name="settlementfromdate">The settlementfromdate.</param>
        /// <param name="settlementtodate">The settlementtodate.</param>
        /// <param name="isInvoiced">The is invoiced.</param>
        public async Task<JsonResult> GetJobSTCSubmissionKendo(string reseller = "", string ram = "", string stageid = "", string RecCode = "", string solarcompanyid = "", string refJobId = "", string ownername = "", int page = 0, int pageSize = 10, List<KendoSort> sort = null, KendoFilter filter = null, string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", int isSPVRequired = -1, int isSPVInstallationVerified = -1, int year = 0, bool defaultGrid = false)
        {
            int pageNumber = page;
            int ResellerId = 0;
            int RamId = 0;
            int SolarCompanyId = 0;
            List<STCSubmissionView> lstSTCFull = null;
            List<STCSubmissionView> lstSTCPreparedToReturn = new List<STCSubmissionView>();
            if (sort == null || sort.Count == 0)
                sort = sort.AddItem(new KendoSort() { Field = "STCSubmissionDate", Dir = "Desc" }).ToList();
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
            {
                ResellerId = !string.IsNullOrEmpty(reseller) ? Convert.ToInt32(reseller) : 0;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 2)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 5)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = ProjectSession.LoggedInUserId;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else
            {
                if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                {
                    SolarCompanyId = ProjectSession.SolarCompanyId;
                }
                else
                {
                    SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
                }
            }

            Int32.TryParse(stageid, out int StageId);
            int total = 0;
            DataSet dsAllColumnsData = null;
            IDatabase cache = null;
            string mainSTCCacheKey = "";
            List<DistributedCacheAllKeysInfoForHashSetView> mainSTCCache = null;

            if (!defaultGrid)
            {
                lstSTCFull = new List<STCSubmissionView>();
                dsAllColumnsData = new DataSet();
                cache = await RedisCacheConfiguration.GetDatabaseAsync();
                mainSTCCacheKey = year > 0 ? string.Format(RedisCacheConfiguration.dsSTCAllKeysInfoHashKey, year) : RedisCacheConfiguration.dsSTCCERApprovedNotInvoicedAllKeysInfoHashKey;
                mainSTCCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainSTCCacheKey);
            }

            if (SolarCompanyId == 0)
            {
                #region SolarCompanyID value is "All"
                if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && ResellerId == 0)
                    ResellerId = ProjectSession.ResellerId;
                List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                if (ProjectSession.UserTypeId == 5 && !Convert.ToBoolean(isAllScaJobView))
                    lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByRAMID(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
                {
                    if (defaultGrid)
                    {
                        PrepareFilterForSTC(ref filter, RamId, RecCode, StageId: 0, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                        DataTable dtFilter = getDataTableFromKendoFilter(filter);
                        DataTable dtSort = getDataTableFromKendoSort(sort);
                        string sStageId = "";
                        if (StageId == -1)
                        {
                            sStageId = "11,13,14,16,17,18,19,20,21";
                        }
                        CommonBAL.STCDistributedWithoutCache(lstSolarCompanyId, ResellerId, year, ref lstSTCPreparedToReturn, page, pageSize, dtFilter, dtSort, StageId, sStageId);
                        total = lstSTCPreparedToReturn != null && lstSTCPreparedToReturn.Count > 0 ? lstSTCPreparedToReturn[0].Totalcount : 0;
                    }
                    else
                    {
                        #region Call SP for those SolarCompanyId which are not found in CacheData
                        List<int> lstSolarCompanyIdForCachingData = lstSolarCompanyId.Where(X => mainSTCCache == null || !mainSTCCache.Any(R => R.PID == X)).Select(X => X).ToList();
                        if (lstSolarCompanyIdForCachingData != null && lstSolarCompanyIdForCachingData.Count > 0)
                            CommonBAL.STCDistributedCacheHashSet(cache, lstSolarCompanyIdForCachingData, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                        #endregion
                        #region Fetch SolarCompanyWise JobList Data From Cache
                        lstSolarCompanyId = lstSolarCompanyId.Except(lstSolarCompanyIdForCachingData).ToList();
                        if (lstSolarCompanyId.Count > 0)
                            CommonBAL.STCDistributedCacheHashGet(cache, lstSolarCompanyId, year, ref lstSTCFull);
                        #endregion

                        PrepareFilterForSTC(ref filter, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                        lstSTCPreparedToReturn = lstSTCFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                        total = lstSTCPreparedToReturn.Count;
                        if (total > 0)
                            lstSTCPreparedToReturn = lstSTCPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                    }
                }
                #endregion
            }
            else if (defaultGrid)
            {
                PrepareFilterForSTC(ref filter, RamId, RecCode, StageId: 0, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                DataTable dtFilter = getDataTableFromKendoFilter(filter);
                DataTable dtSort = getDataTableFromKendoSort(sort);
                string sStageId = "";
                if (StageId == -1)
                {
                    sStageId = "11,13,14,16,17,18,19,20,21";
                }
                CommonBAL.STCDistributedWithoutCache(new List<int> { SolarCompanyId }, ResellerId, year, ref lstSTCPreparedToReturn, page, pageSize, dtFilter, dtSort, StageId, sStageId);
                total = lstSTCPreparedToReturn != null && lstSTCPreparedToReturn.Count > 0 ? lstSTCPreparedToReturn[0].Totalcount : 0;
            }
            else
            {
                #region Selected specific SolarCompanyId
                if (mainSTCCache != null && mainSTCCache.Any(j => j.PID == SolarCompanyId))
                {
                    CommonBAL.STCDistributedCacheHashGet(cache, new List<int> { SolarCompanyId }, year, ref lstSTCFull);

                    PrepareFilterForSTC(ref filter, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                    lstSTCPreparedToReturn = lstSTCFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstSTCPreparedToReturn = lstSTCPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    total = lstSTCPreparedToReturn.Count;
                    if (total > 0)
                        lstSTCPreparedToReturn = lstSTCPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                }
                else
                {
                    CommonBAL.STCDistributedCacheHashSet(cache, new List<int> { SolarCompanyId }, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                    PrepareFilterForSTC(ref filter, RamId, RecCode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified);
                    lstSTCPreparedToReturn = lstSTCFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstSTCPreparedToReturn = lstSTCPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    total = lstSTCPreparedToReturn.Count;
                    if (total > 0)
                        lstSTCPreparedToReturn = lstSTCPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                }

                #endregion
            }
            if (lstSTCPreparedToReturn.Count > 0)
                lstSTCPreparedToReturn.AsEnumerable().Where(a => a.STCSettlementTerm == 10).Select(a => a.CustomTermLabel = "Custom - " + Common.GetDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)a.CustomSettlementTerm, "")).ToList();
            Helper.Log.WriteLog("end of GetJobSTCSubmissionKendo and ResellerIds are = " + reseller + " Total Time : ");
            return Json(new { total = total, data = lstSTCPreparedToReturn }, JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// Gets the job submission without kendo.
        /// </summary>
        /// <param name="stageid">The stage.</param>
        /// <param name="reseller">The reseller.</param>
        /// <param name="ram">The ram.</param>
        /// <param name="complianceOfficerId">The compliance officer identifier.</param>
        /// <param name="solarcompanyid">The solarcompanyid.</param>
        /// <param name="pvdswhcode">The pvdswhcode.</param>
        /// <param name="refJobId">The reference job identifier.</param>
        /// <param name="ownername">The ownername.</param>
        /// <param name="installationaddress">The installationaddress.</param>
        /// <param name="submissionfromdate">The submissionfromdate.</param>
        /// <param name="submissiontodate">The submissiontodate.</param>
        /// <param name="settlementfromdate">The settlementfromdate.</param>
        /// <param name="settlementtodate">The settlementtodate.</param>
        /// <param name="isInvoiced">The is invoiced.</param>
        public async Task GetJobSTCSubmission(string stageid, string reseller = "", string ram = "", string complianceOfficerId = "", string solarcompanyid = "", string pvdswhcode = "", string refJobId = "", string ownername = "", string installationaddress = "", string submissionfromdate = "", string submissiontodate = "", string settlementfromdate = "", string settlementtodate = "", string isInvoiced = "", string SettlementTermId = "", string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", int isSPVRequired = -1, int isSPVInstallationVerified = -1, int year = 0)
        {
            CommonBAL.ValidateYearForGridData(ref year);
            GridParam gridParam = Grid.ParseParams(HttpContext.Request);
            int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
            int StageId = Convert.ToInt32(stageid);
            int Invoiced = Convert.ToInt32(isInvoiced);
            int ResellerId = 0;
            int RamId = 0;
            int SolarCompanyId = 0;
            List<STCSubmissionView> lstSTCFull = new List<STCSubmissionView>();
            List<STCSubmissionView> lstSTCPreparedToReturn = new List<STCSubmissionView>();

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
            {
                ResellerId = !string.IsNullOrEmpty(reseller) ? Convert.ToInt32(reseller) : 0;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 2)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else if (ProjectSession.UserTypeId == 5)
            {
                ResellerId = ProjectSession.ResellerId;
                RamId = ProjectSession.LoggedInUserId;
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            }
            else
            {
                if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                {
                    SolarCompanyId = ProjectSession.SolarCompanyId;
                }
                else
                {
                    SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
                }
            }
            IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
            int cOfficerId = !string.IsNullOrEmpty(complianceOfficerId) ? Convert.ToInt32(complianceOfficerId) : 0;
            DateTime? SubmissionFromDate = null, SubmissionToDate = null, SettlementFromDate = null, SettlementToDate = null;
            if (!string.IsNullOrEmpty(submissionfromdate) && !string.IsNullOrEmpty(submissiontodate))
            {
                SubmissionFromDate = Convert.ToDateTime(submissionfromdate);
                SubmissionToDate = Convert.ToDateTime(submissiontodate);
            }

            if (!string.IsNullOrEmpty(settlementfromdate) && !string.IsNullOrEmpty(settlementtodate))
            {
                SettlementFromDate = Convert.ToDateTime(settlementfromdate);
                SettlementToDate = Convert.ToDateTime(settlementtodate);
            }

            int sTermId = !string.IsNullOrEmpty(SettlementTermId) ? Convert.ToInt32(SettlementTermId) : 0;
            int total = 0;
            int pageSize = gridParam.PageSize;
            DataSet dsAllColumnsData = new DataSet();
            string mainKey = year > 0 ? string.Format(RedisCacheConfiguration.dsSTCAllKeysInfoHashKey, year) : RedisCacheConfiguration.dsSTCCERApprovedNotInvoicedAllKeysInfoHashKey;
            if (SolarCompanyId == 0)
            {
                #region SolarCompanyID value is "All"
                if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && ResellerId == 0)
                    ResellerId = ProjectSession.ResellerId;
                List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                if (ProjectSession.UserTypeId == 5 && !Convert.ToBoolean(isAllScaJobView))
                    lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByRAMID(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
                {
                    #region Call SP for those SolarCompanyId which are not found in CacheData
                    List<DistributedCacheAllKeysInfoForHashSetView> mainSTCCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainKey);
                    List<int> lstSolarCompanyIdForCachingData = lstSolarCompanyId.Where(X => mainSTCCache == null || !mainSTCCache.Any(R => R.PID == X)).Select(X => X).ToList();
                    if (lstSolarCompanyIdForCachingData != null && lstSolarCompanyIdForCachingData.Count > 0)
                        CommonBAL.STCDistributedCacheHashSet(cache, lstSolarCompanyIdForCachingData, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                    #endregion
                    #region Fetch SolarCompanyWise JobList Data From Cache
                    lstSolarCompanyId = lstSolarCompanyId.Except(lstSolarCompanyIdForCachingData).ToList();
                    CommonBAL.STCDistributedCacheHashGet(cache, lstSolarCompanyId, year, ref lstSTCFull);
                    #endregion
                }
                #endregion
            }
            else
            {
                #region Selected specific SolarCompanyId
                List<DistributedCacheAllKeysInfoForHashSetView> mainSTCCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainKey);
                if (mainSTCCache.Any(j => j.PID == SolarCompanyId))
                {
                    CommonBAL.STCDistributedCacheHashGet(cache, new List<int> { SolarCompanyId }, year, ref lstSTCFull);

                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstSTCFull = lstSTCFull.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                }
                else
                {
                    CommonBAL.STCDistributedCacheHashSet(cache, new List<int> { SolarCompanyId }, ResellerId, year, ref dsAllColumnsData, ref lstSTCFull);
                    if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstSTCFull = lstSTCFull.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                }
                List<KendoSort> sort = new List<KendoSort>();
                KendoFilter filter = new KendoFilter();
                PrepareFilterForSTCStatistics(ref filter, ref sort, RamId, pvdswhcode, StageId, refJobId, ownername, isAllScaJobView, isSPVRequired, isSPVInstallationVerified, complianceOfficerId, submissionfromdate, submissiontodate, settlementfromdate, settlementtodate, isInvoiced, SettlementTermId, installationaddress, gridParam.SortCol, gridParam.SortDir);
                lstSTCPreparedToReturn = lstSTCFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                total = lstSTCPreparedToReturn.Count;
                if (total > 0)
                    lstSTCPreparedToReturn = lstSTCPreparedToReturn.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
                #endregion
            }
            if (total > 0)
            {
                if (lstSTCPreparedToReturn.Count > 0)
                {
                    gridParam.TotalDisplayRecords = total;
                    gridParam.TotalRecords = total;
                }
                HttpContext.Response.Write(Grid.PrepareDataSet(lstSTCPreparedToReturn, gridParam));
            }
            else
            {
                HttpContext.Response.Write(Grid.PrepareDataSet(lstSTCPreparedToReturn, gridParam));
            }
        }


        //public void GetJobSTCSubmission(string stageid, string reseller = "", string ram = "", string complianceOfficerId = "", string solarcompanyid = "", string pvdswhcode = "", string refJobId = "", string ownername = "", string installationaddress = "", string submissionfromdate = "", string submissiontodate = "", string settlementfromdate = "", string settlementtodate = "", string isInvoiced = "", string SettlementTermId = "", string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", int? isSPVRequired = null, int? isSPVInstallationVerified = null)
        //{
        //    GridParam gridParam = Grid.ParseParams(HttpContext.Request);
        //    int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
        //    int StageId = Convert.ToInt32(stageid);
        //    int Invoiced = Convert.ToInt32(isInvoiced);
        //    int ResellerId = 0;
        //    int RamId = 0;
        //    int SolarCompanyId = 0;

        //    if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
        //    {
        //        ResellerId = !string.IsNullOrEmpty(reseller) ? Convert.ToInt32(reseller) : 0;
        //        RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
        //        SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
        //    }
        //    else if (ProjectSession.UserTypeId == 2)
        //    {
        //        ResellerId = ProjectSession.ResellerId;
        //        RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
        //        SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
        //    }
        //    else if (ProjectSession.UserTypeId == 5)
        //    {
        //        ResellerId = ProjectSession.ResellerId;
        //        RamId = ProjectSession.LoggedInUserId;
        //        SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
        //    }
        //    else
        //    {
        //        if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
        //        {
        //            SolarCompanyId = ProjectSession.SolarCompanyId;
        //        }
        //        else
        //        {
        //            SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
        //        }
        //    }

        //    int cOfficerId = !string.IsNullOrEmpty(complianceOfficerId) ? Convert.ToInt32(complianceOfficerId) : 0;
        //    DateTime? SubmissionFromDate = null, SubmissionToDate = null, SettlementFromDate = null, SettlementToDate = null;
        //    if (!string.IsNullOrEmpty(submissionfromdate) && !string.IsNullOrEmpty(submissiontodate))
        //    {
        //        SubmissionFromDate = Convert.ToDateTime(submissionfromdate);
        //        SubmissionToDate = Convert.ToDateTime(submissiontodate);
        //    }

        //    if (!string.IsNullOrEmpty(settlementfromdate) && !string.IsNullOrEmpty(settlementtodate))
        //    {
        //        SettlementFromDate = Convert.ToDateTime(settlementfromdate);
        //        SettlementToDate = Convert.ToDateTime(settlementtodate);
        //    }

        //    int sTermId = !string.IsNullOrEmpty(SettlementTermId) ? Convert.ToInt32(SettlementTermId) : 0;

        //    IList<FormBot.Entity.JobList> lstJobsSTCSubmission = _job.GetJobSTCSubmission(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, pageNumber, gridParam.PageSize, gridParam.SortCol, gridParam.SortDir, StageId, cOfficerId, ResellerId, RamId, SolarCompanyId, pvdswhcode, refJobId, ownername, installationaddress, SubmissionFromDate, SubmissionToDate, SettlementFromDate, SettlementToDate, Invoiced, sTermId, isAllScaJobView, isShowOnlyAssignJobsSCO, "", isSPVRequired, isSPVInstallationVerified);


        //    lstJobsSTCSubmission.AsEnumerable().Where(a => a.STCSettlementTerm == 10).Select(a => a.CustomTermLabel = "Custom - " + Common.GetDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)a.CustomSettlementTerm, "")).ToList();


        //    if (lstJobsSTCSubmission.Count > 0)
        //    {
        //        gridParam.TotalDisplayRecords = lstJobsSTCSubmission.FirstOrDefault().TotalRecords;
        //        gridParam.TotalRecords = lstJobsSTCSubmission.FirstOrDefault().TotalRecords;
        //    }

        //    HttpContext.Response.Write(Grid.PrepareDataSet(lstJobsSTCSubmission, gridParam));
        //}

        private DataTable FilteringAndSortingStcSubmissionDatatale(DataTable dt, KendoGridData filter, List<KendoGridSorting> sort, int RamId, string RecCode, int StageId, string refJobId, string ownerName, string isAllSCAjobView, int isSPVRequired = -1, int? isSPVInstallationVerified = -1)
        {
            string searchQuery = "";
            if (string.IsNullOrEmpty(searchQuery))
            {
                searchQuery += "(IsDeleted=False)";
            }
            else
                searchQuery += "and (IsDeleted=False)";
            if (!(ProjectSession.UserTypeId == 5 && Convert.ToBoolean(isAllSCAjobView)))
            {
                if (RamId != 0)
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(RamId = " + RamId + ")";
                    else
                        searchQuery += " AND (RamId = " + RamId + ")";
                }
            }
            if (!string.IsNullOrEmpty(RecCode))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(PVDSWHCode Like '%" + RecCode.Trim() + "%')";
                else
                    searchQuery += " AND (PVDSWHCode like '%" + RecCode.Trim() + "%')";
            }
            if (StageId != 0)
            {
                if (StageId == -1)
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(IsUrgentSubmission = True) AND STCStatusId IN (11,13,14,16,17,18,19,20,21)";
                    else
                        searchQuery += " AND (IsUrgentSubmission = True) AND STCStatusId IN (11,13,14,16,17,18,19,20,21)";
                }
                else
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(StcStatusId = " + StageId + ")";
                    else
                        searchQuery += " AND (StcStatusId = " + StageId + ")";
                }
            }

            if (!string.IsNullOrEmpty(refJobId) && int.TryParse(refJobId, out int jobId))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "((JobID = " + refJobId.Trim() + ") OR (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' ))";
                else
                    searchQuery += " AND ((JobID = " + refJobId.Trim() + ") OR (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' ))";

            }
            else if (!string.IsNullOrEmpty(refJobId))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(RefNumberOwnerName Like '%" + refJobId.Trim() + "%' )";
                else
                    searchQuery += " AND (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' )";
            }
            if (!string.IsNullOrEmpty(ownerName))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "((OwnerName Like '%" + ownerName.Trim() + "%') OR (InstallationAddress Like '%" + ownerName.Trim() + "%' ))";
                else
                    searchQuery += " AND ((OwnerName Like '%" + ownerName.Trim() + "%') OR (InstallationAddress Like '%" + ownerName.Trim() + "%' ))";
            }
            ////if (!string.IsNullOrEmpty(PanelInverterDetails))
            ////{
            ////    if (string.IsNullOrEmpty(searchQuery))
            ////        searchQuery += "((Panelbrand Like '%" + PanelInverterDetails.Trim() + "%') OR (PanelModel Like '%" + PanelInverterDetails.Trim() + "%' ) OR (InverterBrand Like '%" + PanelInverterDetails.Trim() + "%' ) OR (InverterModel Like '%" + PanelInverterDetails.Trim() + "%' ))";
            ////    else
            ////        searchQuery += " AND ((Panelbrand Like '%" + PanelInverterDetails.Trim() + "%') OR (PanelModel Like '%" + PanelInverterDetails.Trim() + "%' ) OR (InverterBrand Like '%" + PanelInverterDetails.Trim() + "%' ) OR (InverterModel Like '%" + PanelInverterDetails.Trim() + "%' ))";
            ////}
            if (isSPVInstallationVerified != -1)
            {
                if (isSPVInstallationVerified == -2)
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(IsSPVInstallationVerified is NULL)";
                    else
                        searchQuery += " AND (IsSPVInstallationVerified is NULL)";
                }
                else
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(IsSPVInstallationVerified = " + isSPVInstallationVerified + ")";
                    else
                        searchQuery += " AND (IsSPVInstallationVerified = " + isSPVInstallationVerified + ")";
                }
            }
            if (isSPVRequired != -1)
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(IsSPVRequired = " + isSPVRequired + ")";
                else
                    searchQuery += " AND (IsSPVRequired = " + isSPVRequired + ")";
            }

            string query = "";
            if (filter != null && filter.Filters != null && filter.Filters.Count > 0)
            {
                query += "(";

                for (int i = 0; i < filter.Filters.Count; i++)
                {
                    if (filter.Filters[i] != null)
                    {
                        if (i > 0)
                        {
                            query += " " + filter.Logic + " ";
                        }
                        if (filter.Filters[i].Filters != null)
                        {
                            query = query + "(";
                            for (int j = 0; j < filter.Filters[i].Filters.Count; j++)
                            {
                                if (j > 0)
                                {
                                    query += " " + filter.Filters[i].Logic + " ";
                                }
                                query = FilterSubmissionValue(filter.Filters[i], query, j);
                            }
                            query = query + ")";
                            //query = query.Substring(0, query.LastIndexOf(filter.Filters[i].Logic));
                        }
                        else
                        {
                            query = FilterSubmissionValue(filter, query, i);
                        }
                    }

                }

                query = query + ")";
                //query = query.Substring(0,query.LastIndexOf(filter.Logic));
                //dv.RowFilter = query;
                //string expression = "Modul =" + value;

            }

            string sortQuery = "STCSubmissionDate desc";
            if (sort != null && sort.Count > 0)
            {
                for (int i = 0; i < sort.Count; i++)
                {
                    if (!string.IsNullOrEmpty(sort[i].Field))
                    {
                        sortQuery = sort[i].Field + " " + sort[i].Dir;
                    }
                }
            }
            if (!string.IsNullOrEmpty(searchQuery) && !string.IsNullOrEmpty(query))
            {
                query = query + " AND " + searchQuery;
            }
            else if (string.IsNullOrEmpty(query))
            {
                query = searchQuery;
            }
            if (sortQuery.Length > 0 || query.Length > 0)
            {
                dt = dt.Select(query, sortQuery).Length > 0 ? dt.Select(query, sortQuery).CopyToDataTable() : new DataTable();
            }

            return dt;
        }
        private DataTable FilteringAndSortingStaticStcSubmissionDatatale(DataTable dt, int RamId, string RecCode, int StageId, string refJobId, string ownerName, string isAllSCAjobView, int? isSPVRequired = -1, int? isSPVInstallationVerified = -1, string SortCol = "", string SortDir = "", string ComplianceOfficerId = "", string submissionfromdate = "", string submissiontodate = "", string settlementfromdate = "", string settlementtodate = "", string isInvoiced = "", string SettlementTermId = "", string installationAddress = "")
        {
            string searchQuery = "";
            if (string.IsNullOrEmpty(searchQuery))
            {
                searchQuery += "(IsDeleted=False)";
            }
            else
                searchQuery += "and (IsDeleted=False)";
            if (!(ProjectSession.UserTypeId == 5 && Convert.ToBoolean(isAllSCAjobView)))
            {
                if (RamId != 0)
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(RamId = " + RamId + ")";
                    else
                        searchQuery += " AND (RamId = " + RamId + ")";
                }
            }
            if (!string.IsNullOrEmpty(RecCode))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(PVDSWHCode Like '%" + RecCode.Trim() + "%')";
                else
                    searchQuery += " AND (PVDSWHCode Like '%" + RecCode.Trim() + "%')";
            }
            if (StageId != 0)
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(StcStatusId = " + StageId + ")";
                else
                    searchQuery += " AND (StcStatusId = " + StageId + ")";
            }
            if (!string.IsNullOrEmpty(refJobId) && int.TryParse(refJobId, out int jobId))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "((JobID = " + refJobId.Trim() + ") OR (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' ))";
                else
                    searchQuery += " AND ((JobID = " + refJobId.Trim() + ") OR (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' ))";

            }
            else if (!string.IsNullOrEmpty(refJobId))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(RefNumberOwnerName Like '%" + refJobId.Trim() + "%' )";
                else
                    searchQuery += " AND (RefNumberOwnerName Like '%" + refJobId.Trim() + "%' )";
            }
            if (!string.IsNullOrEmpty(ownerName))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(OwnerName Like '%" + ownerName.Trim() + "%')";
                else
                    searchQuery += " AND (OwnerName Like '%" + ownerName.Trim() + "%')";
            }
            if (!string.IsNullOrEmpty(installationAddress))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(InstallationAddress Like '%" + installationAddress.Trim() + "%')";
                else
                    searchQuery += " AND (InstallationAddress Like '%" + installationAddress.Trim() + "%') ";
            }


            if (isSPVInstallationVerified != -1)
            {
                if (isSPVInstallationVerified == -2)
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(IsSPVInstallationVerified is NULL)";
                    else
                        searchQuery += " AND (IsSPVInstallationVerified is NULL)";
                }
                else
                {
                    if (string.IsNullOrEmpty(searchQuery))
                        searchQuery += "(IsSPVInstallationVerified = " + isSPVInstallationVerified + ")";
                    else
                        searchQuery += " AND (IsSPVInstallationVerified = " + isSPVInstallationVerified + ")";
                }
            }
            if (isSPVRequired != -1)
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(IsSPVRequired = " + isSPVRequired + ")";
                else
                    searchQuery += " AND (IsSPVRequired = " + isSPVRequired + ")";
            }
            if (!string.IsNullOrEmpty(ComplianceOfficerId) && Convert.ToInt32(ComplianceOfficerId) != 0)
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(ComplianceBy = " + Convert.ToInt32(ComplianceOfficerId) + ")";
                else
                    searchQuery += " AND (ComplianceBy = " + Convert.ToInt32(ComplianceOfficerId) + ")";
            }
            if (!string.IsNullOrEmpty(submissionfromdate) && !string.IsNullOrEmpty(submissiontodate))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(STCSubmissionDate > '" + Convert.ToDateTime(submissionfromdate) + "' and STCSubmissionDate < '" + Convert.ToDateTime(submissiontodate) + "')";
                else
                    searchQuery += " AND (STCSubmissionDate > '" + Convert.ToDateTime(submissionfromdate) + "' and STCSubmissionDate < '" + Convert.ToDateTime(submissiontodate) + "')";
            }
            if (!string.IsNullOrEmpty(settlementfromdate) && !string.IsNullOrEmpty(settlementtodate))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(STCSettlementDate > '" + Convert.ToDateTime(settlementfromdate) + "' and STCSettlementDate< '" + Convert.ToDateTime(settlementtodate) + "')";
                else
                    searchQuery += " AND (STCSettlementDate > '" + Convert.ToDateTime(settlementfromdate) + "' and STCSettlementDate< '" + Convert.ToDateTime(settlementtodate) + "')";
            }
            if (!string.IsNullOrEmpty(SettlementTermId))
            {
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(STCSettlementTerm = " + Convert.ToInt32(SettlementTermId) + ")";
                else
                    searchQuery += " AND (STCSettlementTerm = " + Convert.ToInt32(SettlementTermId) + ")";
            }
            if (!string.IsNullOrEmpty(isInvoiced) && isInvoiced != "0")
            {
                bool bit_isInvoiced = Convert.ToInt32(isInvoiced) == 1 ? true : false;
                if (string.IsNullOrEmpty(searchQuery))
                    searchQuery += "(IsInvoiced = " + bit_isInvoiced + ")";
                else
                    searchQuery += " AND (IsInvoiced = " + bit_isInvoiced + ")";
            }
            string query = "";
            #region filter section

            //if (filter != null && filter.Filters != null && filter.Filters.Count > 0)
            //{
            //    query += "(";

            //    for (int i = 0; i < filter.Filters.Count; i++)
            //    {
            //        if (filter.Filters[i] != null)
            //        {
            //            if (i > 0)
            //            {
            //                query += " " + filter.Logic + " ";
            //            }
            //            if (filter.Filters[i].Filters != null)
            //            {
            //                query = query + "(";
            //                for (int j = 0; j < filter.Filters[i].Filters.Count; j++)
            //                {
            //                    if (j > 0)
            //                    {
            //                        query += " " + filter.Filters[i].Logic + " ";
            //                    }
            //                    query = FilterSubmissionValue(filter.Filters[i], query, j);
            //                }
            //                query = query + ")";
            //                //query = query.Substring(0, query.LastIndexOf(filter.Filters[i].Logic));
            //            }
            //            else
            //            {
            //                query = FilterSubmissionValue(filter, query, i);
            //            }
            //        }

            //    }

            //    query = query + ")";
            //    //query = query.Substring(0,query.LastIndexOf(filter.Logic));
            //    //dv.RowFilter = query;
            //    //string expression = "Modul =" + value;

            //}
            #endregion filter section
            string sortQuery = "STCSubmissionDate desc";
            if (SortCol != "" && SortCol.ToLower() == "id")
            {
                sortQuery = "STCSubmissionDate desc";
            }
            else
            {
                sortQuery = SortCol + " " + SortDir;
            }
            if (!string.IsNullOrEmpty(searchQuery) && !string.IsNullOrEmpty(query))
            {
                query = query + " AND " + searchQuery;
            }
            else if (string.IsNullOrEmpty(query))
            {
                query = searchQuery;
            }
            if (sortQuery.Length > 0 || query.Length > 0)
            {
                dt = dt.Select(query, sortQuery).Length > 0 ? dt.Select(query, sortQuery).CopyToDataTable() : new DataTable();
            }


            return dt;
        }



        public string FilterSubmissionValue(KendoGridData filter, string query, int i)
        {

            var op = "LIKE";
            if (filter.Filters[i].Operator != "contains")
            {
                int result = 0;
                DateTime date;
                double value = 0;
                var isInt = int.TryParse(filter.Filters[i].Value, out result);
                var isDouble = double.TryParse(filter.Filters[i].Value, out value);
                var isDate = DateTime.TryParse(filter.Filters[i].Value, out date);
                var isNull = filter.Filters[i].Value.ToLower() == "null";
                if (filter.Filters[i].Field == "SolarCompany")
                {
                    filter.Filters[i].Field = "SolarCompanyId";
                }
                if (filter.Filters[i].Field == "STCStatus")
                {
                    filter.Filters[i].Field = "StcStatusId";
                }
                if (filter.Filters[i].Field == "ComplianceOfficer")
                {
                    filter.Filters[i].Field = "ComplianceBy";
                }
                if (filter.Filters[i].Field == "AccountManager")
                {
                    filter.Filters[i].Field = "RamId";
                }
                if (isDate)
                {
                    if (filter.Filters[i].Operator == "gte")
                    {
                        op = ">=";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "')";
                    }
                    else if (filter.Filters[i].Operator == "lte")
                    {
                        op = "<";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + Convert.ToDateTime(filter.Filters[i].Value.Trim()).AddDays(1) + "')";
                    }

                }
                if (filter.Filters[i].Operator == "eq")
                {
                    if (isInt || isDouble)
                    {
                        op = "=";
                        query += filter.Filters[i].Field + " " + op + " " + filter.Filters[i].Value.Trim();
                    }
                    else if (isNull)
                    {
                        query += filter.Filters[i].Field + " is null";
                    }
                    else if (isDate)
                    {
                        op = ">=";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "'" + " AND " + filter.Filters[i].Field + " " + "<" + " '" + date.AddDays(1).ToString("dd-MM-yyyy") + "')";
                    }
                    else if (filter.Filters[i].Field.ToLower().Equals("jobstage"))
                    {
                        query += filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "'";
                    }
                    else
                    {
                        query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim() + "%'";
                    }
                }

                if (filter.Filters[i].Operator == "neq")
                {
                    if (isInt || isDouble)
                    {
                        op = "<>";
                        query += filter.Filters[i].Field + " " + op + " " + filter.Filters[i].Value.Trim();
                    }
                    else if (isDate)
                    {
                        op = "<";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "'" + " OR " + filter.Filters[i].Field + " " + ">" + " '" + date.AddDays(1).ToString("dd-MM-yyyy") + "')";
                    }
                    else
                    {
                        op = "NOT LIKE";
                        query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim() + "%'";
                    }

                }

            }
            else
            {
                query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim() + "%'";
            }


            return query;

        }

        /// <summary>
        /// Apply TradeStc
        /// </summary>
        /// <param name="jobId">jobId</param>
        /// <param name="interval">interval</param>
        /// <param name="price">price</param>
        /// <param name="settlementterm">settlementterm</param>
        /// <param name="isGst">isGst</param>
        /// <returns>action result</returns>
        [CheckSession]
        public async Task<ActionResult> ApplyTradeStc(string jobId, int interval, decimal? price, int settlementterm, string isGst, string stcAmt, string CustomSettlementTerm, decimal? peakPayGst, int? peakPayTimeperiod, decimal? peakPayFee, string TradeType, string STCRemark = null)//,bool IsGenerateRecZip)
        {
            try
            {
                string jobIds = _job.CheckSpecialCharInSerialNumbers(jobId);
                if (string.IsNullOrEmpty(jobIds))
                {
                    string Days = string.Empty;
                    int finalSettlementTerm = (settlementterm == FormBot.Helper.SystemEnums.STCSettlementTerm.Custom.GetHashCode()) ? Convert.ToInt32(CustomSettlementTerm) : settlementterm;

                    DateTime? STCSettlementDate = Common.GetSettlementDate(finalSettlementTerm, ref Days);

                    if (finalSettlementTerm == 6)
                    {
                        DataSet dsSettelmentDaysToAdd = _job.GetSettlementDaysToAddForUpFrontSettlementterm(jobId);

                        if (dsSettelmentDaysToAdd != null && dsSettelmentDaysToAdd.Tables.Count > 0 && dsSettelmentDaysToAdd.Tables[0].Rows.Count > 0)
                        {
                            if (Convert.ToBoolean(dsSettelmentDaysToAdd.Tables[0].Rows[0]["isUpFrontSettelmentDay"]) == true)
                            {
                                STCSettlementDate = DateTime.Now.AddDays(Convert.ToInt32(dsSettelmentDaysToAdd.Tables[0].Rows[0]["UpFrontSettelmentDay"]));
                            }
                            else if (Convert.ToBoolean(dsSettelmentDaysToAdd.Tables[0].Rows[0]["isUpFrontSettelmentDate"]) == true)
                            {
                                STCSettlementDate = Convert.ToDateTime(dsSettelmentDaysToAdd.Tables[0].Rows[0]["UpFrontSettelmentDate"]);
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(Days))
                    {
                        Days = "Settlement Term " + Days;
                        Days += " - " + "if there are no compliance issues then payment settlement will be on " + STCSettlementDate;
                    }

                    int customTerm = !string.IsNullOrEmpty(CustomSettlementTerm) ? Convert.ToInt32(CustomSettlementTerm) : 0;

                    if (settlementterm == FormBot.Helper.SystemEnums.STCSettlementTerm.InvoiceStc.GetHashCode())
                    {
                        price = null;
                    }

                    if (TradeType == "SAAS")
                    {
                        DataSet PricingTerm_SAAS = _jobDetails.GetGlobalBillableTermsSAAS_PricingTerm(Convert.ToInt32(jobId), 0);
                        if (PricingTerm_SAAS.Tables.Count > 0 && PricingTerm_SAAS.Tables[0].Rows.Count > 0)
                        {
                            settlementterm = Convert.ToInt32(PricingTerm_SAAS.Tables[0].Rows[0][0]);
                        }
                    }

                    DataSet dsJobDetailsID = _jobDetails.ApplyTradeStc(ProjectSession.LoggedInUserId, jobId, settlementterm, STCSettlementDate, price, true, FormBot.Helper.SystemEnums.STCJobStatus.NewSubmission.GetHashCode(), customTerm, peakPayGst, peakPayTimeperiod, peakPayFee,STCRemark);//,IsGenerateRecZip);
                    #region save stcJobHistory into xml
                    if (dsJobDetailsID != null && dsJobDetailsID.Tables.Count > 0 && dsJobDetailsID.Tables[1].Rows.Count > 0)
                    {
                        foreach (DataRow drJobDetailsID in dsJobDetailsID.Tables[1].Rows)
                        {
                            int JobID = Convert.ToInt32(drJobDetailsID["JobID"]);
                            int STCStatusID = Convert.ToInt32(drJobDetailsID["STCStatusID"]);
                            string Description = drJobDetailsID["Description"].ToString();
                            string CreatedByID = drJobDetailsID["CreatedBy"].ToString();
                            string CreatedBy = "";
                            if (CreatedByID.ToString() == "-1")
                            {
                                CreatedBy = "System";
                            }
                            else
                            {
                                CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                            }
                            string JobHistoryMessage;
                            if (STCRemark == null)
                            {
                                JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                            }
                            else
                            {
                                JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " with reason for trade " + STCRemark + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";

                            }
                            Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                        }
                    }
                    #endregion

                    #region send to SAAS Invoice Builder table
                    //if (dsJobDetailsID != null && dsJobDetailsID.Tables.Count > 0 && dsJobDetailsID.Tables[0].Rows.Count > 0 && dsJobDetailsID.Tables[1].Rows.Count > 0)
                    //{
                    //    int stcJobDetailsId = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[0]["STCJobDetailsId"]);
                    //    int jobIdSI = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[0]["JobID"]);
                    //    int resellerId = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[0]["ResellerID"]);
                    //    int userId = Convert.ToInt32(dsJobDetailsID.Tables[1].Rows[0]["CreatedBy"]);

                    //    DateTime stcSubmissionDate = DateTime.Now;
                    //    _job.SendToSAASInvoiceBuilder(stcJobDetailsId, jobIdSI, resellerId, userId, stcSubmissionDate);
                    //}
                    #endregion
                    int modifiedBy;
                    if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 5)
                        modifiedBy = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[0]["UserId"]);
                    else
                        modifiedBy = ProjectSession.LoggedInUserId;
                    if (dsJobDetailsID != null && dsJobDetailsID.Tables.Count > 0 && dsJobDetailsID.Tables[0].Rows.Count > 0)
                    {
                        dsJobDetailsID.Tables[0].AsEnumerable().ToList().ForEach(async d =>
                        {
                            var intJobDetailsID = d.Field<int>("STCJobDetailsID");
                            var intJobId = d.Field<int>("JobID");
                            bool hasMultipleRecord = d.Field<int>("STCStatus") == SystemEnums.STCJobStatus.Resubmission.GetHashCode() ? true : false;
                            if (d.Field<int>("STCStatus") == SystemEnums.STCJobStatus.NewSubmission.GetHashCode())
                            {
                                await CommonBAL.SetCacheDataForNewStcSubmission(intJobDetailsID);
                            }
                            else
                            {
                                SortedList<string, string> data = new SortedList<string, string>();
                                if (d.Field<int>("STCStatus") == SystemEnums.STCJobStatus.Resubmission.GetHashCode())
                                {
                                    data.Add("PVDSWHCode", "");
                                    data.Add("RECBulkUploadTimeDate", "");
                                    data.Add("GBBatchRECUploadId", "");
                                    Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from ApplyTradeSTC and set as blank for Re-submission: " + (intJobDetailsID.ToString()));
                                }

                                data.Add("STCSettlementTerm", settlementterm.ToString());
                                data.Add("STC", stcAmt);
                                data.Add("STCPrice", price.ToString());
                                data.Add("STCSubmissionDate", Convert.ToString(DateTime.Now));
                                data.Add("STCSettlementDate", Convert.ToString(STCSettlementDate));
                                data.Add("STCStatusId", d.Field<int>("STCStatus").ToString());
                                data.Add("STCStatus", d.Field<string>("Status").ToString());
                                data.Add("ColorCode", d.Field<string>("Color").ToString());
                                data.Add("STCJobDetailsID", intJobDetailsID.ToString());
                                        //data.Add("PeakPayGst",peakPayGst.ToString());
                                        //data.Add("PeakPayTimePeriod", peakPayTimeperiod.ToString());
                                        //data.Add("PeakPayFee", peakPayFee.ToString());
                                        data.Add("CustomSettlementTerm", customTerm.ToString());
                                data.Add("HasMultipleRecords", hasMultipleRecord.ToString());
                                data.Add("IsDeleted", d.Field<bool>("IsDeleted").ToString());
                                        //await CommonBAL.SetCacheDataForSTCSubmission(intJobDetailsID, null, data);
                                        //Helper.Log.WriteLog(DateTime.Now + " 7 Going to create new stc submission : ");
                                    }

                                    //CommonBAL.SetCacheDataForSTCSubmission(intJobDetailsID, 0);
                                    var stcDocumentPath = ProjectConfiguration.JobDocumentsToSaveFullPath + intJobId + "/" + (Helper.SystemEnums.JobStage.STC.ToString());
                            if (Directory.Exists(stcDocumentPath))
                            {
                                var files = Directory.GetFiles(stcDocumentPath);
                                foreach (var file in files)
                                {
                                    string stcDocumentPathToSave = ProjectConfiguration.JobDocumentsToSaveFullPath + intJobId + "/" + (Helper.SystemEnums.JobStage.STCTrade.ToString());
                                    CheckAndCreateDir(stcDocumentPathToSave);
                                    stcDocumentPathToSave += "/" + intJobDetailsID;
                                    CheckAndCreateDir(stcDocumentPathToSave);
                                    stcDocumentPathToSave += "/" + new FileInfo(file).Name;
                                    MakeReadOnlyePDF(file, stcDocumentPathToSave, jobId);
                                }
                            }
                        });

                        if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 5)
                        {
                            for (int i = 0; i < dsJobDetailsID.Tables[0].Rows.Count; i++)
                            {
                                STCHistory objSTCHistory = new STCHistory()
                                {
                                    JobID = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[i]["JobID"]),
                                    STCPrice = price.ToString() + ((isGst == "True") ? "+Gst" : ""),
                                    Message = Days,
                                    DT = DateTime.Now.ToString(),
                                    stcAmt = Convert.ToString(dsJobDetailsID.Tables[0].Rows[i]["CalculatedSTC"]),
                                    UserType = Common.GetDescription((FormBot.Helper.SystemEnums.UserType)ProjectSession.UserTypeId, ""),
                                    ModifiedBy = ProjectSession.LoggedInUserId
                                };
                                //bool isHistorySaved = _jobHistory.LogJobHistory(objSTCHistory,HistoryCategory.FSAStcSubmission);
                                string JobHistoryMessage = "traded Job <b class=\"blue-title\"> (" + objSTCHistory.JobID + ") JobRefNo </b>" + " with  <b class=\"blue-title\">" + objSTCHistory.stcAmt + "</b> STCs at <b class=\"blue-title\">$" + objSTCHistory.STCPrice + "</b> Successfully " + " " + objSTCHistory.Message;
                                Common.SaveJobHistorytoXML(objSTCHistory.JobID, JobHistoryMessage, "Invoicing", "FSAStcSubmission", ProjectSession.LoggedInName, false);
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dsJobDetailsID.Tables[0].Rows.Count; i++)
                            {
                                STCHistory objSTCHistory = new STCHistory()
                                {
                                    JobID = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[i]["JobID"]),
                                    STCPrice = price.ToString() + ((isGst == "True") ? "+Gst" : ""),
                                    Message = Days,
                                    DT = DateTime.Now.ToString(),
                                    stcAmt = Convert.ToString(dsJobDetailsID.Tables[0].Rows[i]["CalculatedSTC"]),
                                    ModifiedBy = modifiedBy
                                };
                                //bool isHistorySaved = _jobHistory.LogJobHistory(objSTCHistory, HistoryCategory.STCSubmission);
                                string createdby = _job.GetUsernameByUserID(objSTCHistory.ModifiedBy);
                                string JobHistoryMessage = "traded Job <b class=\"blue-title\"> (" + objSTCHistory.JobID + ") JobRefNo </b>" + " with <b class=\"blue-title\">" + objSTCHistory.stcAmt + "</b> STCs at <b class=\"blue-title\">$" + objSTCHistory.STCPrice + "</b> Successfully" + " " + objSTCHistory.Message;
                                Common.SaveJobHistorytoXML(objSTCHistory.JobID, JobHistoryMessage, "Invoicing", "STCSubmission", createdby, false);
                            }
                        }
                        #region do automatic product verification after trade job
                        int reSPVVerified = 0;
                        foreach (var jid in jobId.Split(','))
                        {

                            bool? IsSPVVerified = _job.GetProductVerificationStatusByJobId(Convert.ToInt32(jid));
                            if (IsSPVVerified == null || IsSPVVerified == false)
                            {
                                reSPVVerified = ReProductVerificationForCertChanges(Convert.ToInt32(jid), true);
                                if (reSPVVerified == 1)
                                    return Json(new { success = false, message = "JobId- " + jid + " already Installation Verified,So cant do re-Product Verification." }, JsonRequestBehavior.AllowGet);
                                else if (reSPVVerified == 2)
                                    return Json(new { success = false, message = "JobId- " + jid + " having photo not available issue." }, JsonRequestBehavior.AllowGet);
                            }

                        }
                        #endregion
                        #region auto rec upload
                        //send email to installer for new submission
                        bool isAutoRECUpload = false;
                        string stcJobDetailsId = "";
                        int ResellerId = 0;

                        ResellerId = Convert.ToInt32(dsJobDetailsID.Tables[0].Rows[0]["ResellerID"]);
                        isAutoRECUpload = _user.GetAutoRECUploadAccess(ResellerId);
                        List<CheckSPVrequired> chkspvRequired = new List<CheckSPVrequired>();
                        dsJobDetailsID.Tables[0].AsEnumerable().ToList().ForEach(d =>
                        {
                            int stcStatus = d.Field<int>("STCStatus");
                            if (stcStatus == SystemEnums.STCJobStatus.NewSubmission.GetHashCode())
                            {
                                        //prepare template for notification
                                        PrepareTemplateToSendEmailToInstaller(d.Field<int>("JobID"));
                                if (isAutoRECUpload)
                                {
                                    stcJobDetailsId += d.Field<int>("STCJobDetailsID").ToString() + ",";
                                    CheckSPVrequired chkspv = new CheckSPVrequired();
                                    chkspv.IsSPVRequired = d.Field<bool>("IsSPVRequired");
                                    chkspv.JobId = d.Field<int>("JobID");
                                    chkspv.STCJobDetailsID = d.Field<int>("STCJobDetailsID");
                                    chkspvRequired.Add(chkspv);
                                }
                            }
                        });
                        _log.Log(SystemEnums.Severity.Info, "Auto REC Insert: " + stcJobDetailsId);
                        _log.Log(SystemEnums.Severity.Info, "Auto REC Access: " + isAutoRECUpload.ToString());
                        if (!string.IsNullOrWhiteSpace(stcJobDetailsId) && chkspvRequired.Count > 0)
                        {
                            stcJobDetailsId = stcJobDetailsId.Remove(stcJobDetailsId.Length - 1, 1);
                            BulkChangeSTCJobStage("19", stcJobDetailsId, chkspvRequired).Wait();
                        }
                        #endregion
                    }

                    foreach (string job in jobId.Split(','))
                    {
                        await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(job));
                    }

                    //CommonBAL.SetCacheDataForPeakPayFromJobId(jobId, "");
                    return Json("", JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { jobIds = jobIds }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "ApplyTradeSTC catch: ");
                return Json("", JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Updates the settlement date.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <param name="sDate">The date.</param>
        /// <returns>action result</returns>
        public async Task<ActionResult> UpdateSettlementDate(string jobId, string sDate, int isMultipleRecords)
        {
            if (!string.IsNullOrEmpty(jobId) && !string.IsNullOrEmpty(sDate))
            {
                int jId = Convert.ToInt32(jobId);
                DateTime sdt = Convert.ToDateTime(sDate);
                _job.UpdateSettlementDate(jId, sdt);
                if (isMultipleRecords == 0)
                {
                    SortedList<string, string> data = new SortedList<string, string>();

                    data.Add("STCSettlementDate", sDate);
                    //await CommonBAL.SetCacheDataForSTCSubmission(jId, null, data);
                }
                // CommonBAL.SetCacheDataForSTCSubmission(jId, 0);
                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { success = false, errormessage = "Please select valid date." }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Updates the code.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <param name="pvdswhCode">The code.</param>
        /// <returns>action result</returns>
        public async Task<ActionResult> UpdatePVDSWHCode(string jobId, string pvdswhCode, int isMultipleRecords)
        {
            if (!string.IsNullOrEmpty(jobId) && !string.IsNullOrEmpty(pvdswhCode))
            {
                int jId = Convert.ToInt32(jobId);
                _job.UpdatePVDSWHCode(jId, pvdswhCode);
                if (isMultipleRecords == 0)
                {
                    SortedList<string, string> data = new SortedList<string, string>();

                    data.Add("PVDSWHCode", pvdswhCode);
                    //await CommonBAL.SetCacheDataForSTCSubmission(jId, null, data);
                }
                // CommonBAL.SetCacheDataForSTCSubmission(jId, 0);
                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { success = false, errormessage = "Please enter valid PVD/SWH code." }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Update Complaince Note from stc submission kendo grid
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="pvdswhCode"></param>
        /// <param name="isMultipleRecords"></param>
        /// <returns></returns>
        public async Task<ActionResult> UpdateComplianceNote(string STCJobdetailsId, string Complaincenote, int isMultipleRecords)
        {
            if (!string.IsNullOrEmpty(STCJobdetailsId))
            {
                int stcJobDetailId = Convert.ToInt32(STCJobdetailsId);
                _job.UpdateComplianceNote(stcJobDetailId, Complaincenote);
                if (isMultipleRecords == 0)
                {
                    SortedList<string, string> data = new SortedList<string, string>();

                    data.Add("ComplianceNotes", Complaincenote);
                    //await CommonBAL.SetCacheDataForSTCSubmission(stcJobDetailId, null, data);
                }
                //CommonBAL.SetCacheDataForSTCSubmission(stcJobDetailId, 0);
                return this.Json(new { success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return this.Json(new { success = false, errormessage = "Please enter valid compliance note" }, JsonRequestBehavior.AllowGet);
            }

        }


        /// <summary>
        /// Gets the message for job email conversation for pre and connection.
        /// </summary>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>Action result</returns>
        [UserAuthorization]
        public ActionResult GetMessageForJobEmailConversationForPreAndConn(int jobId)
        {
            CheckMail checkMail = new CheckMail();
            Account acct = Session[Constants.sessionAccount] as Account;
            List<JobEmailMessageInfo> result = _emailService.GetMessageForJobEmailConversationForPreAndConn(jobId);
            if (result.Count > 0)
            {
                foreach (var item in result)
                {
                    Dictionary<string, string> shortAndFullDate = checkMail.GetShortAndFullDate(acct, item.msg_date);
                    item.FullDate = Convert.ToString(shortAndFullDate["FullDate"]);
                }
            }

            return this.PartialView("_EmailConverationForPreAndConn", result);
        }

        /// <summary>
        /// Get STCStatus Description
        /// </summary>
        /// <param name="id">id</param>
        /// <returns>json result</returns>
        public JsonResult GetSTCStatusDescription(string id)
        {
            var stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(id), ProjectSession.UserTypeId);
            BusinessRuleStatus businessRule = new BusinessRuleStatus();
            if (stcBasicDetails != null)
            {
                businessRule.STCStatusId = Convert.ToString(stcBasicDetails.STCStatusId);
                businessRule.STCStatusName = Convert.ToString(stcBasicDetails.Status);
                businessRule.STCDescription = HttpUtility.HtmlDecode(Convert.ToString(stcBasicDetails.STCDescription));
            }

            businessRule.IsSuccess = true;
            return Json(businessRule, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Checks the business rules.
        /// </summary>
        /// <param name="createJob">The create job.</param>
        /// <param name="panelXml">The panel XML.</param>
        /// <param name="inverterXml">The inverter XML.</param>
        /// <returns>json result</returns>
        [HttpPost]
        public JsonResult CheckBusinessRules(CreateJob createJob, string panelXml, string inverterXml)
        {
            RequiredValidationField(createJob);

            //if (!createJob.BasicDetails.IsClassic)
            //{
            //    ModelState.Remove("BasicDetails.Title");
            //    ModelState.Remove("BasicDetails.Description");
            //}

            if (ModelState.IsValid)
            {
                if (createJob.BasicDetails.JobType == 2)
                {
                    createJob.JobSystemDetails.CalculatedSTC = createJob.JobSystemDetails.CalculatedSTCForSWH;
                    if (!(createJob.UserType == 1 || createJob.UserType == 3 || createJob.UserType == 2 || createJob.UserType == 4))
                    {
                        createJob.JobSTCDetails.CertificateCreated = "No";
                        createJob.JobSTCDetails.FailedAccreditationCode = "";
                    }
                }

                if (createJob.BasicDetails.strInstallationDate != null)
                {
                    createJob.BasicDetails.InstallationDate = Convert.ToDateTime(createJob.BasicDetails.strInstallationDate);
                }
                else
                {
                    createJob.BasicDetails.InstallationDate = null;
                }

                if (createJob.JobInstallationDetails.AddressID == 2)
                {
                    createJob.JobInstallationDetails.IsPostalAddress = true;
                }
                else
                {
                    createJob.JobInstallationDetails.IsPostalAddress = false;
                }

                BusinessRuleStatus businessRuleStatus = new BusinessRuleStatus();

                if (createJob.BasicDetails.IsClassic)
                {
                    businessRuleStatus = GetValidationSummary(createJob, panelXml, inverterXml, createJob.BasicDetails.JobID, false, true);
                }
                else
                {
                    businessRuleStatus = GetBusinessRuleStatus(createJob.BasicDetails.JobID, false, true, true, createJob, panelXml, inverterXml);
                }
                return Json(businessRuleStatus, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string msg = string.Empty;
                var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                        .Select(x => new { x.Key, x.Value.Errors });

                foreach (var erroneousField in erroneousFields)
                {
                    var fieldKey = erroneousField.Key;
                    var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                    if (!string.IsNullOrEmpty(msg))
                        msg += Environment.NewLine;
                    msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                }

                return Json(new BusinessRuleStatus() { IsError = true, IsSuccess = false, ValidationSummary = msg }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult CheckBusinessRulesTabular(CreateJob createJob, string panelXml = "", string inverterXml = "")
        {
            if (createJob.BasicDetails == null)
            {
                createJob.BasicDetails = new BasicDetails();
            }
            if (createJob.JobSTCDetails == null)
            {
                createJob.JobSTCDetails = new JobSTCDetails();
            }
            if (createJob.JobSystemDetails == null)
            {
                createJob.JobSystemDetails = new JobSystemDetails();
            }
            if (createJob.JobInstallationDetails == null)
            {
                createJob.JobInstallationDetails = new JobInstallationDetails();
            }
            if(createJob.JobOwnerDetails == null)
            {
                createJob.JobOwnerDetails = new JobOwnerDetails();
            }
            RequiredValidationField(createJob);

            //if (!createJob.BasicDetails.IsClassic)
            //{
            //    ModelState.Remove("BasicDetails.Title");
            //    ModelState.Remove("BasicDetails.Description");
            //}

            if (ModelState.IsValid)
            {
                if (createJob.BasicDetails.JobType == 2)
                {
                    createJob.JobSystemDetails.CalculatedSTC = createJob.JobSystemDetails.CalculatedSTCForSWH;
                    if (!(createJob.UserType == 1 || createJob.UserType == 3 || createJob.UserType == 2 || createJob.UserType == 4))
                    {
                        createJob.JobSTCDetails.CertificateCreated = "No";
                        createJob.JobSTCDetails.FailedAccreditationCode = "";
                    }
                }

                if (createJob.BasicDetails.strInstallationDate != null)
                {
                    createJob.BasicDetails.InstallationDate = Convert.ToDateTime(createJob.BasicDetails.strInstallationDate);
                }
                else
                {
                    createJob.BasicDetails.InstallationDate = null;
                }

                if (createJob.JobInstallationDetails.AddressID == 2)
                {
                    createJob.JobInstallationDetails.IsPostalAddress = true;
                }
                else
                {
                    createJob.JobInstallationDetails.IsPostalAddress = false;
                }
                var istabular = createJob.isTabular;
                BusinessRuleStatus businessRuleStatus = new BusinessRuleStatus();

                if (createJob.BasicDetails.IsClassic)
                {
                    businessRuleStatus = GetValidationSummary(createJob, panelXml, inverterXml, createJob.BasicDetails.JobID, false, true);
                }
                else
                {
                    businessRuleStatus = GetBusinessRuleStatus(createJob.BasicDetails.JobID, true, true, true, createJob, panelXml, inverterXml);
                }
                return Json(businessRuleStatus, JsonRequestBehavior.AllowGet);
            }
            else
            {
                string msg = string.Empty;
                var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                        .Select(x => new { x.Key, x.Value.Errors });

                foreach (var erroneousField in erroneousFields)
                {
                    var fieldKey = erroneousField.Key;
                    var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                    if (!string.IsNullOrEmpty(msg))
                        msg += Environment.NewLine;
                    msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                }

                return Json(new BusinessRuleStatus() { IsError = true, IsSuccess = false, ValidationSummary = msg }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Sends the mail for duplicate address.
        /// </summary>
        /// <param name="jobid">The job.</param>
        /// <param name="mailList">The mail list.</param>
        /// <returns>action result</returns>
        [HttpGet]
        public ActionResult SendMailForDuplicateAddress(int jobid, string mailList)
        {
            DataSet ds = new JobDetailsBAL().GetJobDuplicationDetailsByJobID((int)jobid);
            StringBuilder str = new StringBuilder();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            {
                str.Append("Creation Date: " + Convert.ToString(ds.Tables[0].Rows[0]["CreatedDate"]) + "<br/>");
                str.Append("Installation Date: " + Convert.ToString(ds.Tables[0].Rows[0]["InstallationDate"]) + "<br/>");
                str.Append("Reseller Account: " + Convert.ToString(ds.Tables[0].Rows[0]["ResellerName"]) + "<br/>");
                str.Append("Solar Company Account: " + Convert.ToString(ds.Tables[0].Rows[0]["CompanyName"]) + "<br/>");
                str.Append("User: " + Convert.ToString(ds.Tables[0].Rows[0]["UserFullName"]) + "<br/>");
                str.Append("<br/>");
                str.Append("Reference: <a href=\"" + ProjectSession.SiteUrlBase + "Job/Index/" + QueryString.QueryStringEncode(Convert.ToString(ds.Tables[0].Rows[0]["JobID"])) + "\">" + Convert.ToString(ds.Tables[0].Rows[0]["RefNumber"]) + "</a><br/>");
                str.Append("Owner Details: " + Convert.ToString(ds.Tables[0].Rows[0]["OwnerFullName"]) + " - " + Convert.ToString(ds.Tables[0].Rows[0]["OwnerAddress"]) + Convert.ToString(ds.Tables[0].Rows[0]["OwnerContactNumber"]) + "<br/>");
                str.Append("Installation Address: " + Convert.ToString(ds.Tables[0].Rows[0]["InstallationAddress"]) + "<br/>");
                str.Append("Installation Type: " + Convert.ToString(ds.Tables[0].Rows[0]["InstallationType"]) + "<br/>");
                str.Append("System Size: " + Convert.ToString(ds.Tables[0].Rows[0]["SystemSize"]) + "<br/>");
            }

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
            {
                str.Append("<br/><br/>");
                str.Append("*************************************<br/>");
                str.Append("Previous recorded submissions:<br/>");
                str.Append("*************************************<br/>");
                for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                {
                    str.Append(i + 1 + ": Creation Date: " + Convert.ToString(ds.Tables[1].Rows[i]["CreatedDate"]) + "<br/>");
                    str.Append("Installation Date: " + Convert.ToString(ds.Tables[1].Rows[i]["InstallationDate"]) + "<br/>");
                    str.Append("Reseller Account: " + Convert.ToString(ds.Tables[1].Rows[i]["ResellerName"]) + "<br/>");
                    str.Append("Solar Company Account: " + Convert.ToString(ds.Tables[1].Rows[i]["CompanyName"]) + "<br/>");
                    str.Append("User: " + Convert.ToString(ds.Tables[1].Rows[i]["UserFullName"]) + "<br/>");
                    str.Append("<br/>");
                    str.Append("Reference: <a href=\"" + ProjectSession.SiteUrlBase + "Job/Index/" + QueryString.QueryStringEncode(Convert.ToString(ds.Tables[1].Rows[i]["JobID"])) + "\">" + Convert.ToString(ds.Tables[1].Rows[i]["RefNumber"]) + "</a><br/>");
                    str.Append("Owner Details: " + Convert.ToString(ds.Tables[i].Rows[i]["OwnerFullName"]) + " - " + Convert.ToString(ds.Tables[1].Rows[i]["OwnerAddress"]) + Convert.ToString(ds.Tables[1].Rows[i]["OwnerContactNumber"]) + "<br/>");
                    str.Append("Installation Address: " + Convert.ToString(ds.Tables[1].Rows[i]["InstallationAddress"]) + "<br/>");
                    str.Append("Installation Type: " + Convert.ToString(ds.Tables[1].Rows[i]["InstallationType"]) + "<br/>");
                    str.Append("System Size: " + Convert.ToString(ds.Tables[1].Rows[i]["SystemSize"]) + "<br/>");
                    str.Append("<br/>");
                }

            }

            //EmailInfo emailInfo = new EmailInfo();
            //emailInfo.TemplateID = 28;
            //emailInfo.JobDuplicationDetails = str.ToString();
            //EmailBAL objEmailBAL = new EmailBAL();
            //objEmailBAL.ComposeAndSendEmail(emailInfo, mailList);
            bool status = SendEmailOnDuplicateAddress(mailList, str.ToString());
            if (status)
                return Json("Mail Sent Success", JsonRequestBehavior.AllowGet);
            else
                return Json("Mail not Sent", JsonRequestBehavior.AllowGet);
        }

        public bool SendEmailOnDuplicateAddress(string mailList, string str)
        {
            string FailReason = string.Empty;
            EmailInfo emailInfo = new EmailInfo();
            //var usr = _userBAL.GetUserById(sscID);
            //FormBot.Entity.User uv = DBClient.ToListof<FormBot.Entity.User>(usr.Tables[0]).FirstOrDefault();
            emailInfo.TemplateID = 28;
            emailInfo.JobDuplicationDetails = str.ToString();
            //emailInfo.FirstName = uv.FirstName;
            //emailInfo.LastName = uv.LastName;
            //SMTPDetails smtpDetail = new SMTPDetails();
            //smtpDetail.MailFrom = ProjectSession.MailFrom;
            //smtpDetail.SMTPUserName = ProjectSession.SMTPUserName;
            //smtpDetail.SMTPPassword = ProjectSession.SMTPPassword;
            //smtpDetail.SMTPHost = ProjectSession.SMTPHost;
            //smtpDetail.SMTPPort = Convert.ToInt32(ProjectSession.SMTPPort);
            //smtpDetail.IsSMTPEnableSsl = ProjectSession.IsSMTPEnableSsl;

            EmailTemplate eTemplate = _emailBAL.GetEmailTemplateByID(28);
            eTemplate.Content = _emailBAL.GetEmailBody(emailInfo, eTemplate);
            bool status = false;
            try
            {
                if (eTemplate != null && !string.IsNullOrEmpty(eTemplate.Content))
                {
                    QueuedEmail objQueuedEmail = new QueuedEmail();
                    objQueuedEmail.FromEmail = ProjectSession.MailFrom;
                    objQueuedEmail.Body = eTemplate.Content;
                    objQueuedEmail.Subject = eTemplate.Subject;
                    objQueuedEmail.ToEmail = mailList;
                    objQueuedEmail.CreatedDate = DateTime.Now;
                    objQueuedEmail.ModifiedDate = DateTime.Now;
                    _emailBAL.InsertUpdateQueuedEmail(objQueuedEmail);
                    status = true;
                }
            }
            catch (Exception ex)
            {
                FailReason = ex.Message;
            }


            //bool status = MailHelper.SendMail(smtpDetail, mailList, null, null, eTemplate.Subject, eTemplate.Content, null, true, ref FailReason, false);
            return status;
        }

        /// <summary>
        /// job list
        /// </summary>
        /// <param name="jobids">solar job</param>
        /// <param name="solarCompanyId">solar company</param>
        public void GetJobListForTradeSTCPopUp(string jobids, string solarCompanyId)
        {
            GridParam gridParam = Grid.ParseParams(HttpContext.Request);
            int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
            IList<FormBot.Entity.PricingManager> lstJobs = _job.GetJobListForTradeSTCPopUp(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, gridParam.SortCol, gridParam.SortDir, jobids, Convert.ToInt32(solarCompanyId));
            if (lstJobs.Count > 0)
            {
                gridParam.TotalDisplayRecords = lstJobs.FirstOrDefault().TotalRecords;
                gridParam.TotalRecords = lstJobs.FirstOrDefault().TotalRecords;
            }

            HttpContext.Response.Write(Grid.PrepareDataSet(lstJobs, gridParam));
        }

        //public void CreateSTCInvoicePDFForRECData(DataTable dt)
        //{
        //    try
        //    {
        //        DataTable dtUpdate = new DataTable();
        //        dtUpdate.Columns.Add("STCInvoiceNumber", typeof(string));
        //        dtUpdate.Columns.Add("STCInvoiceFilePath", typeof(string));

        //        foreach (DataRow dr in dt.Rows)
        //        {
        //            try
        //            {
        //                string filepath = string.Empty;
        //                STCInvoiceController objSTCInvoice = new STCInvoiceController(_stcInvoiceServiceBAL, _job);

        //                if (objSTCInvoice != null)
        //                    //filepath = objSTCInvoice.CreateStcReport("CreateStcReport", "Pdf", Convert.ToInt32(dr["STCJobDetailsID"]), Convert.ToString(dr["STCInvoiceNumber"]), Convert.ToString(dr["SolarCompanyId"]));
        //                    filepath = _generateStcReportBAL.CreateStcReportNew("CreateStcReport", "Pdf", Convert.ToInt32(dr["STCJobDetailsID"]), Convert.ToString(dr["STCInvoiceNumber"]), Convert.ToString(dr["SolarCompanyId"]), "4", ProjectSession.LoggedInUserId, ProjectSession.ResellerId, false);
        //                else
        //                    filepath = _generateStcReportBAL.CreateStcReportNew("CreateStcReport", "Pdf", Convert.ToInt32(dr["STCJobDetailsID"]), Convert.ToString(dr["STCInvoiceNumber"]), Convert.ToString(dr["SolarCompanyId"]), "2", Convert.ToInt32(dr["ResellerUserId"]), Convert.ToInt32(dr["ResellerID"]), false);
        //                //filepath = CreateStcReport("CreateStcReport", "Pdf", Convert.ToInt32(dr["STCJobDetailsID"]), Convert.ToString(dr["STCInvoiceNumber"]), Convert.ToString(dr["SolarCompanyId"]), Convert.ToInt32(dr["ResellerUserId"]), Convert.ToInt32(dr["ResellerID"]));

        //                DataRow drUpdate = dtUpdate.NewRow();
        //                drUpdate["STCInvoiceNumber"] = Convert.ToString(dr["STCInvoiceNumber"]);
        //                drUpdate["STCInvoiceFilePath"] = filepath;
        //                dtUpdate.Rows.Add(drUpdate);
        //            }
        //            catch (Exception ex)
        //            {
        //                //Log("An error has occured while generating STCInvioce file for " + Convert.ToString(dr["STCInvoiceNumber"]) + ": " + ex.Message);
        //            }

        //        }

        //        var values = _stcInvoiceServiceBAL.UpdateRecGeneratedInvoiceFilePath(dtUpdate);
        //    }
        //    catch (Exception ex)
        //    {
        //        //Log("An error has occured while generating STCInvoice files: " + ex.Message);
        //    }

        //}

        //public String CreateStcReport(string Filename, string ExportType, int STCJobDetailsID, string InvoiceNo, string solarCompanyId, int ResellerUserId, int ResellerID)
        //{
        //    Microsoft.Reporting.WebForms.Warning[] warnings;
        //    string[] streamIds;
        //    string mimeType = string.Empty;
        //    string encoding = string.Empty;
        //    string extension = string.Empty;
        //    ReportViewer viewer = new ReportViewer();
        //    XmlDocument oXD = new XmlDocument();
        //    oXD.Load(Server.MapPath("/Reports/InvoiceSTC.rdlc"));
        //    STCInvoice stcinvoice = new STCInvoice();
        //    DataSet ds = new DataSet();
        //    string RefNumber = string.Empty;
        //    string CompanyABN = string.Empty;
        //    string InoviceDate = string.Empty;
        //    string InvoiceNumber = string.Empty;
        //    string AmountDue = string.Empty;
        //    string Total = string.Empty;
        //    string DueDate = string.Empty;
        //    string FromAddressLine1 = string.Empty;
        //    string FromAddressLine2 = string.Empty;
        //    string FromAddressLine3 = string.Empty;
        //    string ToAddressLine1 = string.Empty;
        //    string ToAddressLine2 = string.Empty;
        //    string ToAddressLine3 = string.Empty;
        //    string LogoPath = string.Empty;
        //    string InvoiceFooter = string.Empty;
        //    string JobDescription = string.Empty;
        //    string JobDate = string.Empty;
        //    string JobAddress = string.Empty;
        //    string JobTitle = string.Empty;
        //    string Logo = string.Empty;
        //    string ItemCode = string.Empty;
        //    string jobid = string.Empty;
        //    string IsStcInvoice = string.Empty;
        //    string ToName = string.Empty;
        //    string FromName = string.Empty;
        //    string FromCompanyName = string.Empty;
        //    string ToCompanyName = string.Empty;
        //    bool IsJobDescription, IsJobAddress, IsJobDate, IsTitle, IsName, IsTaxInclusive;
        //    decimal? TaxRate = 0;
        //    int SettingUserId = 0;
        //    string path = string.Empty;
        //    Settings settings = new Settings();
        //    settings = GetSettingsData(solarCompanyId, ResellerUserId, 2, ResellerID);
        //    Logo = settings.Logo;
        //    InvoiceFooter = settings.InvoiceFooter;
        //    IsJobDescription = settings.IsJobDescription;
        //    IsJobAddress = settings.IsJobAddress;
        //    IsJobDate = settings.IsJobDate;
        //    IsTitle = settings.IsTitle;
        //    IsName = settings.IsName;
        //    IsTaxInclusive = settings.IsTaxInclusive;
        //    TaxRate = settings.TaxRate;
        //    SettingUserId = settings.UserId;
        //    if (Logo != "" && Logo != null)
        //    {
        //        string LogoP = Convert.ToString(ProjectSession.UploadedDocumentPath) + "\\UserDocuments" + "\\" + SettingUserId + "\\" + Logo;
        //        LogoPath = new Uri(LogoP).AbsoluteUri;
        //    }
        //    else
        //    {
        //        LogoPath = "";
        //    }

        //    ds = _stcInvoiceServiceBAL.GetStcInvoice(STCJobDetailsID, IsJobAddress, IsJobDate, IsJobDescription, IsTitle, IsName, DateTime.Now, InvoiceNo);
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        if (ds != null && ds.Tables.Count > 0)
        //        {
        //            if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
        //            {
        //                RefNumber = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["RefNumber"].ToString()) ? ds.Tables[0].Rows[0]["RefNumber"].ToString() : string.Empty;
        //            }

        //            if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
        //            {
        //                CompanyABN = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["CompanyABN"].ToString()) ? ds.Tables[1].Rows[0]["CompanyABN"].ToString() : string.Empty;
        //            }

        //            if (ds.Tables[2] != null && ds.Tables[2].Rows.Count > 0)
        //            {
        //                InoviceDate = !string.IsNullOrEmpty(ds.Tables[2].Rows[0]["InoviceDate"].ToString()) ? Convert.ToDateTime(ds.Tables[2].Rows[0]["InoviceDate"]).ToString("dd MMMM yyyy") : string.Empty;
        //                InvoiceNumber = InvoiceNo;
        //                jobid = !string.IsNullOrEmpty(ds.Tables[2].Rows[0]["jobid"].ToString()) ? ds.Tables[2].Rows[0]["jobid"].ToString() : string.Empty;
        //                DueDate = !string.IsNullOrEmpty(ds.Tables[2].Rows[0]["DueDate"].ToString()) ? Convert.ToDateTime(ds.Tables[2].Rows[0]["DueDate"]).ToString("dd MMMM yyyy") : string.Empty;
        //            }

        //            if (ds.Tables[3] != null && ds.Tables[3].Rows.Count > 0)
        //            {
        //                dt = ds.Tables[3];
        //            }

        //            if (ds.Tables[4] != null && ds.Tables[4].Rows.Count > 0)
        //            {
        //                ToAddressLine1 = !string.IsNullOrEmpty(ds.Tables[4].Rows[0]["ToAddressLine1"].ToString()) ? ds.Tables[4].Rows[0]["ToAddressLine1"].ToString() : string.Empty;
        //                ToAddressLine2 = !string.IsNullOrEmpty(ds.Tables[4].Rows[0]["ToAddressLine2"].ToString()) ? ds.Tables[4].Rows[0]["ToAddressLine2"].ToString() : string.Empty;
        //                ToAddressLine3 = !string.IsNullOrEmpty(ds.Tables[4].Rows[0]["ToAddressLine3"].ToString()) ? ds.Tables[4].Rows[0]["ToAddressLine3"].ToString() : string.Empty;
        //                ToCompanyName = !string.IsNullOrEmpty(ds.Tables[4].Rows[0]["ToCompanyName"].ToString()) ? ds.Tables[4].Rows[0]["ToCompanyName"].ToString() : string.Empty;
        //            }

        //            if (ds.Tables[5] != null && ds.Tables[5].Rows.Count > 0)
        //            {
        //                FromAddressLine1 = (ds.Tables[5].Rows[0]["FormAddressline1"].ToString() == "") ? "" : ds.Tables[5].Rows[0]["FormAddressline1"].ToString();
        //                FromAddressLine2 = (ds.Tables[5].Rows[0]["FormAddressline2"].ToString() == "") ? "" : ds.Tables[5].Rows[0]["FormAddressline2"].ToString();
        //                FromAddressLine3 = (ds.Tables[5].Rows[0]["FormAddressline3"].ToString() == "") ? "" : ds.Tables[5].Rows[0]["FormAddressline3"].ToString();
        //                FromCompanyName = (ds.Tables[5].Rows[0]["FromCompanyName"].ToString() == "") ? "" : ds.Tables[5].Rows[0]["FromCompanyName"].ToString();
        //            }

        //            if (ds.Tables[6] != null && ds.Tables[6].Rows.Count > 0)
        //            {
        //                JobDate = !string.IsNullOrEmpty(ds.Tables[6].Rows[0][0].ToString()) ? Convert.ToDateTime(ds.Tables[6].Rows[0][0]).ToString("dd MMMM yyyy") : string.Empty;
        //            }

        //            if (ds.Tables[7] != null && ds.Tables[7].Rows.Count > 0)
        //            {
        //                JobDescription = !string.IsNullOrEmpty(ds.Tables[7].Rows[0][0].ToString()) ? ds.Tables[7].Rows[0][0].ToString() : string.Empty;
        //            }

        //            if (ds.Tables[8] != null && ds.Tables[8].Rows.Count > 0)
        //            {
        //                JobTitle = !string.IsNullOrEmpty(ds.Tables[8].Rows[0][0].ToString()) ? ds.Tables[8].Rows[0][0].ToString() : string.Empty;
        //            }

        //            if (ds.Tables[9] != null && ds.Tables[9].Rows.Count > 0)
        //            {
        //                JobAddress = !string.IsNullOrEmpty(ds.Tables[9].Rows[0][0].ToString()) ? ds.Tables[9].Rows[0][0].ToString() : string.Empty;
        //            }

        //            viewer.LocalReport.ReportPath = @"Reports//InvoiceSTC.rdlc";
        //            viewer.LocalReport.EnableExternalImages = true;
        //            ReportDataSource rds1 = new ReportDataSource("dt", dt);
        //            viewer.LocalReport.DataSources.Add(rds1);
        //            viewer.LocalReport.SetParameters(new ReportParameter("RefNumber", RefNumber));
        //            viewer.LocalReport.SetParameters(new ReportParameter("CompanyABN", CompanyABN));
        //            viewer.LocalReport.SetParameters(new ReportParameter("InoviceDate", InoviceDate));
        //            viewer.LocalReport.SetParameters(new ReportParameter("InvoiceNumber", InvoiceNumber));
        //            viewer.LocalReport.SetParameters(new ReportParameter("AmountDue", AmountDue));
        //            viewer.LocalReport.SetParameters(new ReportParameter("Total", Total));
        //            viewer.LocalReport.SetParameters(new ReportParameter("DueDate", DueDate));
        //            viewer.LocalReport.SetParameters(new ReportParameter("ToAddressLine2", ToAddressLine2));
        //            viewer.LocalReport.SetParameters(new ReportParameter("ToAddressLine3", ToAddressLine3));
        //            viewer.LocalReport.SetParameters(new ReportParameter("FromAddressLine1", FromAddressLine1));
        //            viewer.LocalReport.SetParameters(new ReportParameter("FromAddressLine2", FromAddressLine2));
        //            viewer.LocalReport.SetParameters(new ReportParameter("FromAddressLine3", FromAddressLine3));
        //            viewer.LocalReport.SetParameters(new ReportParameter("JobDate", JobDate));
        //            viewer.LocalReport.SetParameters(new ReportParameter("JobDescription", JobDescription));
        //            viewer.LocalReport.SetParameters(new ReportParameter("JobTitle", JobTitle));
        //            viewer.LocalReport.SetParameters(new ReportParameter("JobAddress", JobAddress));
        //            viewer.LocalReport.SetParameters(new ReportParameter("LogoPath", LogoPath));
        //            viewer.LocalReport.SetParameters(new ReportParameter("InvoiceFooter", InvoiceFooter));
        //            viewer.LocalReport.SetParameters(new ReportParameter("ToName", ToName));
        //            viewer.LocalReport.SetParameters(new ReportParameter("FromName", FromName));
        //            viewer.LocalReport.SetParameters(new ReportParameter("IsStcInvoice", IsStcInvoice));
        //            viewer.LocalReport.SetParameters(new ReportParameter("FromCompanyName", FromCompanyName));
        //            viewer.LocalReport.SetParameters(new ReportParameter("ToCompanyName", ToCompanyName));
        //            viewer.LocalReport.Refresh();
        //            byte[] bytes = viewer.LocalReport.Render(ExportType, null, out mimeType, out encoding, out extension, out streamIds, out warnings);
        //            path = ByteArrayToFile(InvoiceNo, bytes, jobid);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        //Log("An error occured while generating STCInvioce file for " + ex.Message);
        //    }
        //    return path;
        //}

        //public Settings GetSettingsData(string SolarCompanyId, int ResellerUserId, int UserTypeId, int ResellerID)
        //{
        //    SettingsBAL settingsBAL = new SettingsBAL();
        //    Settings settings = new Settings();
        //    int? solarCompanyId = Convert.ToInt32(SolarCompanyId);

        //    settings = settingsBAL.GetChargesPartsPaymentCodeAndSettings(ResellerUserId, UserTypeId, solarCompanyId, ResellerID);
        //    return settings;
        //}

        //public String ByteArrayToFile(string _FileName, byte[] _ByteArray, string jobID)
        //{
        //    try
        //    {
        //        string physicalPath = ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID + "\\" + "Invoice\\Report" + "\\" + _FileName;
        //        string filePath = "JobDocuments" + "\\" + jobID + "\\" + "Invoice\\Report" + "\\" + _FileName + ".pdf";

        //        if (!Directory.Exists(Path.GetDirectoryName(physicalPath)))
        //        {
        //            Directory.CreateDirectory(Path.GetDirectoryName(physicalPath));
        //        }

        //        System.IO.File.WriteAllBytes(physicalPath + ".pdf", _ByteArray);
        //        return filePath;
        //    }
        //    catch (Exception _Exception)
        //    {
        //        //Log("Exception caught in process: " + _Exception.ToString());
        //    }
        //    return string.Empty;
        //}

        #endregion

        #region PDF Code

        /// <summary>
        /// Viewer partial result to open pdf. This will return an object with pdf items and path.
        /// </summary>
        /// <param name="jobid">jobid</param>
        /// <param name="docId">docId</param>
        /// <returns>partial view result</returns>
        [HttpGet]
        public PartialViewResult _Viewer(string jobid, string docId, bool isClassic = true, string jobDocumentPath = "", string jobDocumentId = "")
        {
            //int jobId = 0;
            //int documentId = 0;
            //if (!string.IsNullOrEmpty(jobid))
            //{
            //    int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out jobId);
            //}

            //if (!string.IsNullOrEmpty(docId))
            //{
            //    int.TryParse(QueryString.GetValueFromQueryString(docId, "id"), out documentId);
            //}

            //string documentPath = string.Empty;
            //string documentFullPath = string.Empty;

            //if (isClassic)
            //{
            //    List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocument(documentId);
            //    string name = (lstDocuments.Count > 0 ? lstDocuments[0].Name : "");
            //    if (name.ToLower() == "ces")
            //    {
            //        name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == (lstDocuments.Count > 0 ? lstDocuments[0].ServiceProviderName.ToLower() : "") ? "pvd.pdf" : "sw.pdf");
            //    }

            //    documentPath = jobId + "/" + (lstDocuments.Count > 0 ? lstDocuments[0].Stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "/" + name;
            //    documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            //}
            //else
            //{
            //    documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + jobDocumentPath);
            //}

            ////WriteToLogFile("1: " + documentFullPath);

            //FormBot.Entity.Documents.DocumentCollectionView documentCollectionView = new Entity.Documents.DocumentCollectionView();
            //if (System.IO.File.Exists(documentFullPath))
            //{
            //    DocumentsView objDocumentsView = _job.GetJobDocumentByJobDocumentId(Convert.ToInt32(jobDocumentId));
            //    if (objDocumentsView.JsonData != null)
            //    {
            //        documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(objDocumentsView.JsonData);
            //    }
            //    else
            //    {
            //        documentCollectionView.PdfItems = new List<PdfItems>();
            //    }

            //    if (isClassic)
            //        documentCollectionView.PDFURL = ProjectSession.UploadedDocumentPath + ProjectConfiguration.JobDocumentsToSavePath + documentPath.Replace("'", @"\'");
            //    else
            //    {
            //        string path = ProjectSession.UploadedDocumentPath + jobDocumentPath;
            //        path = path.Replace("\\", "/").Replace(@"\", "/");
            //        documentCollectionView.PDFURL = path.Replace("'",@"\'");
            //    }


            //    //WriteToLogFile("2: " + documentCollectionView.PDFURL);

            //    documentCollectionView.PDFSource = documentFullPath;
            //    documentCollectionView.Data = documentCollectionView.ParsedData;
            //    documentCollectionView.Data = documentCollectionView.Data.Replace(@"\\", @"\").Replace(@"\", @"\\").Replace(System.Environment.NewLine, @"<br />");
            //}

            //documentCollectionView.JobId = jobid;
            //documentCollectionView.DocId = docId;
            //documentCollectionView.JobDocId = jobDocumentId;

            //return PartialView(documentCollectionView);
            ViewBag.PageFrom = "JobDetails";
            var documentCollectionView = GetPdfDetails(jobid, docId, isClassic, jobDocumentPath, jobDocumentId);
            var Data = _documentSignatureRequestBAL.GetByJobDocumentId(Convert.ToInt32(jobDocumentId));
            if (Data != null)
            {
                ViewBag.DocumentStatusMessage = Data.IsCompleted ? "<span style='color: #49cc00;' >Document Completed</span>" : (Data.SentEmailStatus == 1 ? "<span style='color: #e49b16;' >Email request sent</span>" : "<span style='color: #ff0000;'>Email request not sent</span>");
                ViewBag.IsCompleted = Data.IsCompleted;
                ViewBag.SentEmailStatus = Data.SentEmailStatus;
            }
            else
            {
                ViewBag.DocumentStatusMessage = "<span style='color: #ff0000;'>Email request not sent</span>";
                ViewBag.IsCompleted = false;
                ViewBag.SentEmailStatus = 0;
            }
            if (ProjectSession.IsNewViewer)
                return PartialView("_Viewer", documentCollectionView);
            else
                return PartialView("_ViewerOld", documentCollectionView);
        }

        [HttpGet]
        public PartialViewResult _OnPageViewer(string jobid, string docId, bool isClassic = true, string jobDocumentPath = "", string jobDocumentId = "")
        {
            ViewBag.PageFrom = "JobDetails";
            var documentCollectionView = GetPdfDetails(jobid, docId, isClassic, jobDocumentPath, jobDocumentId);
            var Data = _documentSignatureRequestBAL.GetByJobDocumentId(Convert.ToInt32(jobDocumentId));
            if (Data != null)
            {
                ViewBag.DocumentStatusMessage = Data.IsCompleted ? "<span style='color: #49cc00;' >Document Completed</span>" : (Data.SentEmailStatus == 1 ? "<span style='color: #e49b16;' >Email request sent</span>" : "<span style='color: #ff0000;'>Email request not sent</span>");
                ViewBag.IsCompleted = Data.IsCompleted;
                ViewBag.SentEmailStatus = Data.SentEmailStatus;
            }
            else
            {
                ViewBag.DocumentStatusMessage = "<span style='color: #ff0000;'>Email request not sent</span>";
                ViewBag.IsCompleted = false;
                ViewBag.SentEmailStatus = 0;
            }
            if (ProjectSession.IsNewViewer)
                return PartialView("_OnPageViewerNew", documentCollectionView);
            else
                return PartialView("_OnPageViewer", documentCollectionView);
        }
        [HttpPost]
        public JsonResult SaveIsNewViewerUserWise(bool IsNewViewer)
        {
            try
            {
                if (ProjectSession.LoggedInUserId > 0)
                {
                    _userBAL.UpdateUsers_SaveIsNewViewerUserWise(IsNewViewer, ProjectSession.LoggedInUserId);
                    ProjectSession.IsNewViewer = IsNewViewer;
                    return Json("true");
                }
                else
                    return Json("false");
            }
            catch (Exception ex)
            {
                return Json("false");
            }
        }
        [NonAction]
        public DocumentCollectionView GetPdfDetails(string jobid, string docId, bool isClassic = true, string jobDocumentPath = "", string jobDocumentId = "")
        {
            int jobId = 0;
            int documentId = 0;
            if (!string.IsNullOrEmpty(jobid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out jobId);
            }

            if (!string.IsNullOrEmpty(docId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(docId, "id"), out documentId);
            }

            string documentPath = string.Empty;
            string documentFullPath = string.Empty;

            if (isClassic)
            {
                List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocument(documentId);
                string name = (lstDocuments.Count > 0 ? lstDocuments[0].Name : "");
                if (name.ToLower() == "ces")
                {
                    name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == (lstDocuments.Count > 0 ? lstDocuments[0].ServiceProviderName.ToLower() : "") ? "pvd.pdf" : "sw.pdf");
                }

                documentPath = jobId + "/" + (lstDocuments.Count > 0 ? lstDocuments[0].Stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "/" + name;
                documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            }
            else
            {
                documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + jobDocumentPath);
            }

            //WriteToLogFile("1: " + documentFullPath);

            FormBot.Entity.Documents.DocumentCollectionView documentCollectionView = new Entity.Documents.DocumentCollectionView();
            if (System.IO.File.Exists(documentFullPath))
            {
                DocumentsView objDocumentsView = _job.GetJobDocumentByJobDocumentId(Convert.ToInt32(jobDocumentId));

                if (!string.IsNullOrEmpty(objDocumentsView.JsonData))
                {
                    documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(objDocumentsView.JsonData);
                }
                else
                {
                    List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(documentFullPath);
                    string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                    if (!string.IsNullOrEmpty(jsonPDFData))
                    {
                        documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(jsonPDFData);

                    }
                    else
                    {
                        documentCollectionView.PdfItems = new List<PdfItems>();
                    }
                }

                if (isClassic)
                    documentCollectionView.PDFURL = ProjectSession.UploadedDocumentPath + ProjectConfiguration.JobDocumentsToSavePath + documentPath;
                else
                {
                    string path = ProjectSession.UploadedDocumentPath + jobDocumentPath;
                    path = path.Replace("\\", "/").Replace(@"\", "/");
                    documentCollectionView.PDFURL = path.Replace("'", @"\'");
                }


                //WriteToLogFile("2: " + documentCollectionView.PDFURL);

                documentCollectionView.PDFSource = documentFullPath;
                documentCollectionView.Data = documentCollectionView.ParsedData;
                documentCollectionView.Data = documentCollectionView.Data.Replace(@"\\", @"\").Replace(@"\", @"\\").Replace(System.Environment.NewLine, @"<br />");
            }

            documentCollectionView.JobId = jobid;
            documentCollectionView.DocId = docId;
            documentCollectionView.JobDocId = jobDocumentId;
            return documentCollectionView;
        }
        [HttpGet]
        public PartialViewResult _ViewerForBulkUpload(string jobid, string docId, bool isClassic = true, string jobDocumentPath = "", string jobDocumentId = "")
        {
            int jobId = 0;
            int documentId = 0;
            if (!string.IsNullOrEmpty(jobid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out jobId);
            }

            if (!string.IsNullOrEmpty(docId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(docId, "id"), out documentId);
            }

            string documentPath = string.Empty;
            string documentFullPath = string.Empty;

            if (isClassic)
            {
                List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocument(documentId);
                string name = (lstDocuments.Count > 0 ? lstDocuments[0].Name : "");
                if (name.ToLower() == "ces")
                {
                    name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == (lstDocuments.Count > 0 ? lstDocuments[0].ServiceProviderName.ToLower() : "") ? "pvd.pdf" : "sw.pdf");
                }

                documentPath = jobId + "/" + (lstDocuments.Count > 0 ? lstDocuments[0].Stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "/" + name;
                documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            }
            else
            {
                documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + jobDocumentPath);
            }

            //WriteToLogFile("1: " + documentFullPath);

            FormBot.Entity.Documents.DocumentCollectionView documentCollectionView = new Entity.Documents.DocumentCollectionView();
            if (System.IO.File.Exists(documentFullPath))
            {
                DocumentsView objDocumentsView = _job.GetJobDocumentByJobDocumentId(Convert.ToInt32(jobDocumentId));
                if (objDocumentsView.JsonData != null)
                {
                    documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(objDocumentsView.JsonData);
                }
                else
                {
                    List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(documentFullPath);
                    string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                    if (!string.IsNullOrEmpty(jsonPDFData))
                    {
                        documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(jsonPDFData);

                    }
                    else
                    {
                        documentCollectionView.PdfItems = new List<PdfItems>();
                    }
                }

                if (isClassic)
                    documentCollectionView.PDFURL = ProjectSession.UploadedDocumentPath + ProjectConfiguration.JobDocumentsToSavePath + documentPath;
                else
                {
                    string path = ProjectSession.UploadedDocumentPath + jobDocumentPath;
                    path = path.Replace("\\", "/").Replace(@"\", "/");
                    documentCollectionView.PDFURL = path;
                }


                //WriteToLogFile("2: " + documentCollectionView.PDFURL);

                documentCollectionView.PDFSource = documentFullPath;
                documentCollectionView.Data = documentCollectionView.ParsedData;
                documentCollectionView.Data = documentCollectionView.Data.Replace(@"\\", @"\").Replace(@"\", @"\\").Replace(System.Environment.NewLine, @"<br />");
            }

            documentCollectionView.JobId = jobid;
            documentCollectionView.DocId = docId;
            documentCollectionView.JobDocId = jobDocumentId;

            return PartialView(documentCollectionView);
        }

        private static void WriteToLogFile2(string content)
        {
            FileStream fs = null;
            try
            {
                //set up a filestream
                //fs = new FileStream(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6) + "\\FormBotLog.txt", FileMode.OpenOrCreate, FileAccess.Write);
                fs = new FileStream(FormBot.Helper.ProjectSession.LogFilePath, FileMode.OpenOrCreate, FileAccess.Write);

                //set up a streamwriter for adding text
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    sw.BaseStream.Seek(0, SeekOrigin.End);
                    //add the text
                    sw.WriteLine(content);
                    //add the text to the underlying filestream
                    sw.Flush();
                    //close the writer
                    sw.Close();
                }
            }
            catch (Exception)
            {
                fs.Dispose();
                //throw;
            }
            //StreamWriter sw = new StreamWriter(fs);
            //find the end of the underlying filestream            
        }

        [HttpGet]
        public PartialViewResult _DocViewer(string jobDocId, string jobid)
        {
            //WriteToLogFile("jobDocId: " + jobDocId + ",");
            //WriteToLogFile("jobid: " + jobid + ",");
            DataTable dt = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(jobDocId));
            string path = Convert.ToString(dt.Rows[0][0]);
            string documentFullPath = ProjectSession.ProofDocuments + "\\" + path;

            //WriteToLogFile("1: " + documentFullPath);

            FormBot.Entity.Documents.DocumentCollectionView documentCollectionView = new Entity.Documents.DocumentCollectionView();
            documentCollectionView.JobDocId = jobDocId;
            documentCollectionView.JobId = jobid;
            if (System.IO.File.Exists(documentFullPath))
            {
                string p = (ProjectSession.UploadedDocumentPath + path).Replace(@"\", @"/");

                //WriteToLogFile("2: " + p);
                DocumentsView objDocumentsView = _job.GetJobDocumentByJobDocumentId(Convert.ToInt32(jobDocId));
                if (objDocumentsView.JsonData == null)
                {
                    List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(documentFullPath);
                    string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                    objDocumentsView.JsonData = jsonPDFData;
                }
                documentCollectionView.PdfItems = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PdfItems>>(objDocumentsView.JsonData);
                documentCollectionView.PDFURL = p.Replace("'", @"\'");
                documentCollectionView.PDFSource = documentFullPath;
                documentCollectionView.Data = documentCollectionView.ParsedData;
                documentCollectionView.Data = documentCollectionView.Data.Replace(@"\\", @"\").Replace(@"\", @"\\").Replace(System.Environment.NewLine, @"<br />");
            }
            return PartialView(documentCollectionView);
        }


        /// <summary>
        /// Viewer result to open pdf in New Page For Mobile. This will return an object with pdf items and path.
        /// </summary>
        /// <param name="jobid">job identifier</param>
        /// <param name="docId">document identifier</param>
        /// <returns>action result</returns>
        [HttpGet]
        public ActionResult DocViewrForMobile(string jobid, string docId)
        {
            int jobId = 0;
            int documentId = 0;
            if (!string.IsNullOrEmpty(jobid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out jobId);
            }

            if (!string.IsNullOrEmpty(docId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(docId, "id"), out documentId);
            }

            List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocument(documentId);
            string name = (lstDocuments.Count > 0 ? lstDocuments[0].Name : "");
            if (name.ToLower() == "ces")
            {
                name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == (lstDocuments.Count > 0 ? lstDocuments[0].ServiceProviderName.ToLower() : "") ? "pvd.pdf" : "sw.pdf");
            }

            var documentPath = jobId + "/" + (lstDocuments.Count > 0 ? lstDocuments[0].Stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "/" + name;
            var documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            FormBot.Entity.Documents.DocumentCollectionView documentCollectionView = new Entity.Documents.DocumentCollectionView();
            if (System.IO.File.Exists(documentFullPath))
            {
                documentCollectionView.PdfItems = CommonHelper.GetPDFItems(documentFullPath);
                documentCollectionView.PDFURL = ProjectSession.UploadedDocumentPath + ProjectConfiguration.JobDocumentsToSavePath + documentPath;
                documentCollectionView.PDFSource = documentFullPath;
                documentCollectionView.Data = documentCollectionView.ParsedData;
                documentCollectionView.Data = documentCollectionView.Data.Replace(@"\\", @"\").Replace(@"\", @"\\").Replace(System.Environment.NewLine, @"<br />");
            }

            documentCollectionView.JobId = jobid;
            documentCollectionView.DocId = docId;



            return View(documentCollectionView);
        }

        /// <summary>
        /// Save all edited item into pdf.
        /// </summary>
        /// <param name="documentCollectionView">document view</param>
        /// <returns>object result</returns>
        [HttpPost]
        public JsonResult _Viewer(DocumentCollectionView documentCollectionView, List<CaptureUserSign> lstCaptureUserSign)
        {
            _job.FillPDFAndSave(documentCollectionView.ParsedPdfItems, documentCollectionView.PDFSource);
            documentCollectionView.PdfItems = documentCollectionView.ParsedPdfItems;
            int jobId = 0;
            if (!string.IsNullOrEmpty(documentCollectionView.JobId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(documentCollectionView.JobId, "id"), out jobId);
            }

            string documentName = "";
            string Form = "";
            if (documentCollectionView.PDFURL.Contains("Agreement"))
            {
                documentName = "Connection Agreement Form";
            }
            else if (documentCollectionView.PDFURL.Contains("STC_Assignment") || documentCollectionView.PDFURL.ToLower().Contains("swh"))
            {
                documentName = "STC Assignment Form";
            }
            else if (documentCollectionView.PDFURL.ToLower().Contains("ces"))
            {
                documentName = "CES Form";
                Form = "CES";
            }
            else
            {
                documentName = Path.GetFileName(documentCollectionView.PDFSource);
            }

            if (documentCollectionView.PDFURL.ToLower().Contains("stc"))
            {
                Form = "STC";
            }
            if (documentCollectionView.PDFURL.ToLower().Contains("other"))
            {
                Form = "Document Manager";
            }

            JobHistory objJobHistory = new JobHistory()
            {
                JobID = jobId,
                HistoryMessage = documentName
            };
            if (string.IsNullOrEmpty(documentCollectionView.Data))
            {
                DataTable dtpath = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(documentCollectionView.JobDocId));
                string docpath = Convert.ToString(dtpath.Rows[0][0]);
                string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + docpath);
                List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(documentFullPath);
                string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                documentCollectionView.Data = jsonPDFData;
            }
            DocumentsView objDocumentView = new DocumentsView();
            objDocumentView.CreatedBy = ProjectSession.LoggedInUserId;
            objDocumentView.CreatedDate = DateTime.Now;
            objDocumentView.DocumentId = Convert.ToInt32(documentCollectionView.DocId);
            objDocumentView.JsonData = documentCollectionView.Data;
            objDocumentView.JobDocumentId = Convert.ToInt32(documentCollectionView.JobDocId);
            _job.CreateJobDocuments(objDocumentView, false);
            string jobhistoryMessage = "";
            string description = "";
            if (lstCaptureUserSign != null)
            {
                for (int i = 0; i < lstCaptureUserSign.Count; i++)
                {
                    DataTable dt = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(lstCaptureUserSign[i].jobDocId));
                    string path = Convert.ToString(dt.Rows[0][0]);
                    string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + path);

                    _job.InsertUserSignature(lstCaptureUserSign[i].jobDocId.ToString(), "0", lstCaptureUserSign[i].signString, false, lstCaptureUserSign[i].fieldName, lstCaptureUserSign[i].mobileNumber, lstCaptureUserSign[i].Firstname, lstCaptureUserSign[i].Lastname, SystemEnums.SignatureType.Draw.GetHashCode(), lstCaptureUserSign[i].Email);
                    SignatureApproved objSigApp = new SignatureApproved();
                    objSigApp.SinatureType = "";
                    objSigApp.Type = "";
                    objSigApp.MobileNumber = "" + "(" + lstCaptureUserSign[i].Firstname + " " + lstCaptureUserSign[i].Lastname + ") For this " + Path.GetFileName(documentFullPath);
                    objSigApp.JobId = jobId.ToString();
                    //_jobHistory.LogJobHistory(objSigApp, HistoryCategory.SignatureApproved);
                    //jobhistoryMessage = objSigApp.SinatureType + " Signature request made through " + objSigApp.Type + " - " + objSigApp.MobileNumber + " is approved.";
                    jobhistoryMessage = "has completed a signature request - <b class=\"blue-title\"> (" + objSigApp.JobId + ") JobRefNo </b>";
                    description = "<br> Signature request made through <span style=\"color:black\">" + objSigApp.Type + " - " + objSigApp.MobileNumber + "</span> has been completed";
                    Common.SaveJobHistorytoXML(jobId, jobhistoryMessage, "Signature", "SignatureApproved", ProjectSession.LoggedInName, false, description);
                }

                List<PdfItems> pdfFormFields = JsonConvert.DeserializeObject<List<PdfItems>>(documentCollectionView.Data);
                DocumentWiseSignatureDetails objDocumentWiseSignatureDetails = new DocumentWiseSignatureDetails();

                foreach (var k in pdfFormFields)
                {
                    if (k.FieldName.ToString().ToLower().Contains("owner_signature"))
                    {
                        if (!string.IsNullOrEmpty(k.Value) && k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus = "False";
                    }
                    else if (!string.IsNullOrEmpty(k.Value) && k.FieldName.ToString().ToLower().Contains("sca_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.SolarCompanySignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.SolarCompanySignatureStatus = "False";
                    }
                    else if (!string.IsNullOrEmpty(k.Value) && k.FieldName.ToString().ToLower().Contains("installer_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.InstallerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.InstallerSignatureStatus = "False";
                    }
                    else if (!string.IsNullOrEmpty(k.Value) && k.FieldName.ToString().ToLower().Contains("designer_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.DesignerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.DesignerSignatureStatus = "False";
                    }
                    else if (!string.IsNullOrEmpty(k.Value) && k.FieldName.ToString().ToLower().Contains("electrician_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.ElectricianSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.ElectricianSignatureStatus = "False";
                    }
                }
                if (objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.SolarCompanySignatureStatus != ""
                    || objDocumentWiseSignatureDetails.InstallerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.DesignerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.ElectricianSignatureStatus != "")
                    _documentSignatureRequestBAL.GetInsertOrUpdateBulkSendDocumentSignatureRequest(3, objDocumentWiseSignatureDetails: objDocumentWiseSignatureDetails, JobDocumentId: objDocumentView.JobDocumentId);
            }
            //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Updated);
            //string JobHistoryMessage = "has edited an existing document - (" +objJobHistory.JobID+") JobRefNo"+ "<br><b>Document: </b>";
            string JobHistoryMessage = "has edited an existing document : <b class=\"blue-title\"><a href =\"javascript:void();\" ><img src=\"/Images/attach_document.png\"> &nbsp;&nbsp;" + Path.GetFileName(documentCollectionView.PDFSource) + "</a></b> in " + "<span class=\"blue-title\">" + Form + " Form </span>.";
            //string Jobdescription = "<b>Document: </b><a href=\"javascript:void();\" ><img src=\"/Images/attach_document.png\"> &nbsp;&nbsp;" + Path.GetFileName(documentCollectionView.PDFSource) + "</a> has been edited and saved successfully in <span class=\"blue-title\">" + Form + " Form </span>.";
            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Updated", ProjectSession.LoggedInName, false, null);
            return Json("Success", JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult _ViewerForBulkUpload(DocumentCollectionView documentCollectionView, List<CaptureUserSign> lstCaptureUserSign)
        {
            _job.FillPDFAndSave(documentCollectionView.ParsedPdfItems, documentCollectionView.PDFSource);
            documentCollectionView.PdfItems = documentCollectionView.ParsedPdfItems;
            int jobId = 0;
            if (!string.IsNullOrEmpty(documentCollectionView.JobId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(documentCollectionView.JobId, "id"), out jobId);
            }

            string documentName = "";
            if (documentCollectionView.PDFURL.Contains("Agreement"))
            {
                documentName = "Connection Agreement Form";
            }
            else if (documentCollectionView.PDFURL.Contains("STC_Assignment") || documentCollectionView.PDFURL.ToLower().Contains("swh"))
            {
                documentName = "STC Assignment Form";
            }
            else if (documentCollectionView.PDFURL.ToLower().Contains("ces"))
            {
                documentName = "CES Form";
            }
            else
            {
                documentName = Path.GetFileName(documentCollectionView.PDFSource);
            }

            JobHistory objJobHistory = new JobHistory()
            {
                JobID = jobId,
                HistoryMessage = documentName
            };
            if (string.IsNullOrEmpty(documentCollectionView.Data))
            {
                DataTable dtpath = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(documentCollectionView.JobDocId));
                string docpath = Convert.ToString(dtpath.Rows[0][0]);
                string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + docpath);
                List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(documentFullPath);
                string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                documentCollectionView.Data = jsonPDFData;
            }

            DocumentsView objDocumentView = new DocumentsView();
            objDocumentView.CreatedBy = ProjectSession.LoggedInUserId;
            objDocumentView.CreatedDate = DateTime.Now;
            objDocumentView.DocumentId = Convert.ToInt32(documentCollectionView.DocId);
            objDocumentView.JsonData = documentCollectionView.Data;
            objDocumentView.JobDocumentId = Convert.ToInt32(documentCollectionView.JobDocId);
            _job.CreateJobDocuments(objDocumentView, false);
            string jobhistoryMessage = "";
            string description = "";
            if (lstCaptureUserSign != null)
            {
                for (int i = 0; i < lstCaptureUserSign.Count; i++)
                {
                    DataTable dt = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(lstCaptureUserSign[i].jobDocId));
                    string path = Convert.ToString(dt.Rows[0][0]);
                    string documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + path);
                    _job.InsertUserSignature(lstCaptureUserSign[i].jobDocId.ToString(), "0", lstCaptureUserSign[i].signString, false, lstCaptureUserSign[i].fieldName, lstCaptureUserSign[i].mobileNumber, lstCaptureUserSign[i].Firstname, lstCaptureUserSign[i].Lastname, SystemEnums.SignatureType.Draw.GetHashCode(), lstCaptureUserSign[i].Email);
                    SignatureApproved objSigApp = new SignatureApproved();
                    objSigApp.SinatureType = "";
                    objSigApp.Type = "";
                    objSigApp.MobileNumber = "" + "(" + lstCaptureUserSign[i].Firstname + " " + lstCaptureUserSign[i].Lastname + ") For this " + Path.GetFileName(documentFullPath);
                    objSigApp.JobId = jobId.ToString();
                    //_jobHistory.LogJobHistory(objSigApp, HistoryCategory.SignatureApproved);
                    //jobhistoryMessage = objSigApp.SinatureType + " Signature request made through " + objSigApp.Type + " - " + objSigApp.MobileNumber + " is approved.";
                    jobhistoryMessage = "has completed a signature request - <b class=\"blue-title\"> (" + objSigApp.JobId + ") JobRefNo </b>";
                    description = "<br> Signature request made through <span class=\"blue-title\">" + objSigApp.Type + " - " + objSigApp.MobileNumber + "</span> has been completed";
                    Common.SaveJobHistorytoXML(jobId, jobhistoryMessage, "Signature", "SignatureApproved", ProjectSession.LoggedInName, false, description);
                }

                List<PdfItems> pdfFormFields = JsonConvert.DeserializeObject<List<PdfItems>>(documentCollectionView.Data);
                DocumentWiseSignatureDetails objDocumentWiseSignatureDetails = new DocumentWiseSignatureDetails();

                foreach (var k in pdfFormFields)
                {
                    if (k.FieldName.ToString().ToLower().Contains("owner_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus = "False";
                    }
                    else if (k.FieldName.ToString().ToLower().Contains("sca_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.SolarCompanySignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.SolarCompanySignatureStatus = "False";
                    }
                    else if (k.FieldName.ToString().ToLower().Contains("installer_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.InstallerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.InstallerSignatureStatus = "False";
                    }
                    else if (k.FieldName.ToString().ToLower().Contains("designer_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.DesignerSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.DesignerSignatureStatus = "False";
                    }
                    else if (k.FieldName.ToString().ToLower().Contains("electrician_signature"))
                    {
                        if (k.Value.Split(',')[1] != "")
                            objDocumentWiseSignatureDetails.ElectricianSignatureStatus = "True";
                        else
                            objDocumentWiseSignatureDetails.ElectricianSignatureStatus = "False";
                    }
                }
                if (objDocumentWiseSignatureDetails.HomeOwnerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.SolarCompanySignatureStatus != ""
                    || objDocumentWiseSignatureDetails.InstallerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.DesignerSignatureStatus != ""
                    || objDocumentWiseSignatureDetails.ElectricianSignatureStatus != "")
                    _documentSignatureRequestBAL.GetInsertOrUpdateBulkSendDocumentSignatureRequest(3, objDocumentWiseSignatureDetails: objDocumentWiseSignatureDetails, JobDocumentId: objDocumentView.JobDocumentId);
            }
            //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Updated);
            //string JobHistoryMessage = "has updated a " + objJobHistory.HistoryMessage + " .";
            string JobHistoryMessage = "has edited an existing document : <b class=\"blue-title\">" + " <a href =\"javascript:void();\" ><img src=\"/Images/attach_document.png\"> &nbsp;&nbsp;" + objJobHistory.HistoryMessage + "</a></b>";
            //string Jobdescription = "<b>Document: </b><a href=\"javascript:void();\" ><img src=\"/Images/attach_document.png\"> &nbsp;&nbsp;" + objJobHistory.HistoryMessage + "</a> has been edited and saved successfully";
            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Updated", ProjectSession.LoggedInName, false, null);
            return Json("Success", JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// Download STC Document
        /// </summary>
        /// <param name="jobid">jobid</param>
        /// <param name="docId">docId</param>
        /// <returns>ActionResult</returns>
        [UserAuthorization]
        public ActionResult DownloadSTCDocument(string jobid, string docId, bool isClassic = true, string jobDocumentPath = "", int IsEditable = 0)
        {
            int jobId = 0;
            int documentId = 0;
            if (!string.IsNullOrEmpty(jobid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out jobId);
            }

            if (!string.IsNullOrEmpty(docId))
            {
                int.TryParse(QueryString.GetValueFromQueryString(docId, "id"), out documentId);
            }

            string documentFullPath = string.Empty;
            string name = string.Empty;
            if (isClassic)
            {
                List<FormBot.Entity.Documents.DocumentsView> lstDocuments = _documentsBAL.GetDocument(documentId);
                name = (lstDocuments.Count > 0 ? lstDocuments[0].Name : "");
                if (name.ToLower() == "ces")
                {
                    name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == (lstDocuments.Count > 0 ? lstDocuments[0].ServiceProviderName.ToLower() : "") ? "pvd.pdf" : "sw.pdf");
                }

                var documentPath = jobId + "/" + (lstDocuments.Count > 0 ? lstDocuments[0].Stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "/" + name;
                documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
            }
            else
            {
                documentFullPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + jobDocumentPath);
                name = Path.GetFileName(documentFullPath);
            }
            string DirectoryName = Path.GetDirectoryName(documentFullPath) + "\\DownloadDocument";
            string CopyFileDirectory = Path.GetDirectoryName(documentFullPath) + "\\CopyDocument";
            if (!System.IO.Directory.Exists(DirectoryName))
            {
                System.IO.Directory.CreateDirectory(DirectoryName);
            }
            if (!System.IO.Directory.Exists(CopyFileDirectory))
            {
                System.IO.Directory.CreateDirectory(CopyFileDirectory);
            }
            string newFile = Path.Combine(DirectoryName, name);
            string copyFile = Path.Combine(CopyFileDirectory, name);
            if (System.IO.File.Exists(documentFullPath))
            {
                if (System.IO.File.Exists(newFile))
                {
                    System.IO.File.Delete(newFile);
                }
                if (System.IO.File.Exists(copyFile))
                {
                    System.IO.File.Delete(copyFile);
                }
                System.IO.File.Copy(documentFullPath, newFile);
                System.IO.File.Copy(documentFullPath, copyFile);
                DownloadFileDocumentChanges(copyFile, newFile, IsEditable);
                //    return Json("false", JsonRequestBehavior.AllowGet);
                var fileData = System.IO.File.ReadAllBytes(newFile);
                //FileName="examples.png";
                //System.IO.File.Delete(copyFile);
                //System.IO.File.Delete(newFile);
                //System.IO.Directory.Delete(CopyFileDirectory);
                //System.IO.Directory.Delete(DirectoryName);
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.ContentType = "application/octet-stream";
                //Response.AddHeader("Content-Disposition", string.Format("attachment; filename=" + name));
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename = \"{0}\"", name));
                Response.BinaryWrite(fileData);


                //Response.ContentType = "application/octet-stream";
                //Response.AddHeader("content-disposition", "attachment;  filename=\"" + name + "\"");
                //Response.BinaryWrite(fileData);
                //Response.End();

                //for insert log when download edit/download final STC form documents 
                JobHistory objJobHistory = new JobHistory()
                {
                    JobID = jobId,
                    HistoryMessage = name,
                    DocumentName = name,
                    DocumentPath = documentFullPath,
                    DocumentType = "STC Form"
                };

                //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadDocument);
                string JobHistoryMessage = "has downloaded <b class=\"blue-title\"> " + objJobHistory.HistoryMessage + "</b> from " + objJobHistory.DocumentType;
                Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "DownloadDocument", ProjectSession.LoggedInName, false);
                return Json("", JsonRequestBehavior.AllowGet);

            }
            else
            {
                Response.Write("File Doesn't exists!");
                return null;
            }
            // CommonMethods.DocumentCreatedLog(documentId, _documentSignatureLogBAL);

        }

        public List<PdfItems> DownloadFileDocumentChangesWithCompressedPDF(string oldFile, string fileName, int IsEditable)
        {
            string pdfTemplate = oldFile;
            string OutputFilename = oldFile;
            bool isError = false;
        ReadAgain:
            isError = false;
            MemoryStream memStream = new MemoryStream();
            using (FileStream fileStream = System.IO.File.OpenRead(oldFile))
            {
                memStream.SetLength(fileStream.Length);
                fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
            }

            string newFile = fileName;
            PdfReader pdfReader = null;
            List<PdfItems> lstPdfItems = new List<PdfItems>();
            PdfReader reader = null;
            //tempcode
            try
            {
                reader = new PdfReader(oldFile);
            }
            catch (Exception ex)
            {
                return lstPdfItems;
            }
            PdfReader.unethicalreading = true;
            var out1 = System.IO.File.Open(fileName, FileMode.Create, FileAccess.Write);
            PdfStamper stamp = new PdfStamper(reader, out1);
            PdfWriter writer1 = stamp.Writer;
            writer1.SetPdfVersion(PdfWriter.PDF_VERSION_1_5);
            writer1.CompressionLevel = PdfStream.BEST_COMPRESSION;
            stamp.SetFullCompression();
            //stamp.Writer.SetFullCompression();
            //stamp.Close();
            try
            {
                pdfReader = new PdfReader(memStream);
                AcroFields af = stamp.AcroFields;
                for (int j = 0; j < stamp.AcroFields.Fields.Count; j++)
                {
                    var field = stamp.AcroFields.Fields.ElementAt(j);
                    PdfItems k = new PdfItems(lstPdfItems.Count, field.Key, stamp.AcroFields.GetField(Convert.ToString(field.Key)), stamp.AcroFields.GetFieldType(Convert.ToString(field.Key)));
                    if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.TEXT_FIELD)
                    {
                        stamp.AcroFields.RemoveField(field.Key);
                        j = j - 1;
                    }

                }
                AcroFields af1 = pdfReader.AcroFields;
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < af1.Fields.Count; i++)
                {
                    var field = af1.Fields.ElementAt(i);
                    //tempcode
                    iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(100, 100, 350, 450);

                    PdfItems k = new PdfItems(lstPdfItems.Count, field.Key, af1.GetField(Convert.ToString(field.Key)), af1.GetFieldType(Convert.ToString(field.Key)));
                    if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.TEXT_FIELD)
                    {
                        try
                        {
                            //tempcode
                            TextField tx = new TextField(stamp.Writer, rect, Convert.ToString(field.Key));
                            af1.DecodeGenericDictionary(af1.GetFieldItem(Convert.ToString(field.Key)).GetMerged(0), tx);
                            TextField textField = null;
                            textField = new TextField(stamp.Writer, af1.GetFieldPositions(field.Key)[0].position, field.Key);
                            textField.Text = k.Value;
                            textField.FontSize = tx.FontSize;
                            textField.MaxCharacterLength = tx.MaxCharacterLength;
                            textField.Font = tx.Font;
                            textField.Alignment = tx.Alignment;
                            textField.TextColor = tx.TextColor;
                            if (IsEditable == 0)
                                textField.Options = BaseField.READ_ONLY;
                            stamp.AddAnnotation(textField.GetTextField(), af1.GetFieldPositions(field.Key)[0].page);
                        }
                        catch (Exception ex)
                        {
                            Helper.Log.WriteError(ex);
                        }
                    }
                    else if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.BUTTON)
                    {
                        PushbuttonField tx = af.GetNewPushbuttonFromField(Convert.ToString(field.Key));
                        if (tx != null)
                        {
                            BaseColor bgcolor = new BaseColor(Color.Transparent);
                            tx.BackgroundColor = bgcolor;
                            af.ReplacePushbuttonField(field.Key, tx.Field);
                        }
                    }
                    if (IsEditable == 0)
                        af.SetFieldProperty(field.Key, "setfflags", PdfFormField.FF_READ_ONLY, null);
                    lstPdfItems.Add(k);
                    //PdfWriter writer1 = stamp.Writer;
                    //writer1.SetPdfVersion(PdfWriter.PDF_VERSION_1_5);
                    //writer1.CompressionLevel = PdfStream.BEST_COMPRESSION;
                    //stamp.SetFullCompression();
                }


            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Input string was not in a correct format.") || ex.Message.Contains("Original message: PDF startxref not found"))
                {
                    isError = true;
                    System.IO.File.AppendAllText(pdfTemplate, System.IO.File.ReadAllText(pdfTemplate).Substring(0, System.IO.File.ReadAllText(pdfTemplate).LastIndexOf("%%EOF") + 5));
                    goto ReadAgain;
                }
                Helper.Log.WriteError(ex);
            }

            finally
            {
                if (!isError)
                {
                    pdfReader.Close();
                    memStream.Close();
                    memStream.Dispose();
                    stamp.Close();
                    stamp.Dispose();
                    reader.Close();
                    reader.Dispose();
                }
            }
            return lstPdfItems;
        }


        public List<PdfItems> DownloadFileDocumentChanges(string oldFile, string fileName, int IsEditable)
        {
            string pdfTemplate = oldFile;
            bool isError = false;
        ReadAgain:
            isError = false;
            MemoryStream memStream = new MemoryStream();
            PdfReader pdfReader = null;
            List<PdfItems> lstPdfItems = new List<PdfItems>();
            PdfReader reader = null;
            try
            {
                using (
                FileStream fileStream = System.IO.File.OpenRead(oldFile))
                {
                    memStream.SetLength(fileStream.Length);
                    fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
                    pdfReader = new PdfReader(memStream);
                }
            }
            catch (Exception ex)
            {
                reader = null;
                return lstPdfItems;
            }


            string newFile = fileName;
            if (pdfReader != null && pdfReader.AcroFields != null && pdfReader.AcroFields.Fields != null && pdfReader.AcroFields.Fields.Count > 0)
            {
                //tempcode
                try
                {
                    reader = new PdfReader(oldFile);
                }
                catch (Exception ex)
                {
                    return lstPdfItems;
                }
                PdfReader.unethicalreading = true;

                var out1 = System.IO.File.Open(fileName, FileMode.Create, FileAccess.ReadWrite);
                PdfStamper stamp = new PdfStamper(reader, out1);
                try
                {
                    //pdfReader = new PdfReader(memStream);
                    AcroFields af = stamp.AcroFields;
                    for (int j = 0; j < stamp.AcroFields.Fields.Count; j++)
                    {
                        var field = stamp.AcroFields.Fields.ElementAt(j);
                        PdfItems k = new PdfItems(lstPdfItems.Count, field.Key, stamp.AcroFields.GetField(Convert.ToString(field.Key)), stamp.AcroFields.GetFieldType(Convert.ToString(field.Key)));
                        if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.TEXT_FIELD)
                        {
                            stamp.AcroFields.RemoveField(field.Key);
                            j = j - 1;
                        }
                        //else if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.CHECK_BOX)
                        //{
                        //    stamp.AcroFields.RemoveField(field.Key);
                        //    j = j - 1;
                        //}

                    }
                    AcroFields af1 = pdfReader.AcroFields;
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0; i < af1.Fields.Count; i++)
                    {
                        var field = af1.Fields.ElementAt(i);
                        //tempcode
                        iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle(100, 100, 350, 450);

                        PdfItems k = new PdfItems(lstPdfItems.Count, field.Key, af1.GetField(Convert.ToString(field.Key)), af1.GetFieldType(Convert.ToString(field.Key)));
                        if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.TEXT_FIELD)
                        {
                            try
                            {
                                //tempcode
                                TextField tx = new TextField(stamp.Writer, rect, Convert.ToString(field.Key));
                                af1.DecodeGenericDictionary(af1.GetFieldItem(Convert.ToString(field.Key)).GetMerged(0), tx);
                                TextField textField = null;
                                textField = new TextField(stamp.Writer, af1.GetFieldPositions(field.Key)[0].position, field.Key);
                                textField.Text = k.Value;
                                textField.FontSize = tx.FontSize;
                                textField.MaxCharacterLength = tx.MaxCharacterLength;
                                textField.Font = tx.Font;
                                textField.Alignment = tx.Alignment;
                                textField.TextColor = tx.TextColor;
                                if (IsEditable == 0)
                                    textField.Options = BaseField.READ_ONLY;
                                stamp.AddAnnotation(textField.GetTextField(), af1.GetFieldPositions(field.Key)[0].page);
                            }
                            catch (Exception ex)
                            {
                                Helper.Log.WriteError(ex);
                            }
                        }
                        else if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.BUTTON)
                        {
                            PushbuttonField tx = af.GetNewPushbuttonFromField(Convert.ToString(field.Key));
                            if (tx != null)
                            {
                                BaseColor bgcolor = new BaseColor(Color.Transparent);
                                tx.BackgroundColor = bgcolor;
                                af.ReplacePushbuttonField(field.Key, tx.Field);
                            }
                        }
                        else if (k.Type == (int)FormBot.Helper.SystemEnums.InputTypes.CHECK_BOX)
                        {
                            AcroFields.FieldPosition fieldPosition = af.GetFieldPositions(field.Key)[0];
                            stamp.AcroFields.RemoveField(field.Key.ToString());
                            string value = Convert.ToString(k.Value);
                            RadioCheckField checkbox = new RadioCheckField(stamp.Writer, fieldPosition.position, field.Key, value);
                            checkbox.CheckType = RadioCheckField.TYPE_CHECK;
                            checkbox.Checked = k.Value == "on" ? true : false;// Convert.ToBoolean(obj["check"]);
                            if (IsEditable == 0)
                                checkbox.Options = BaseField.READ_ONLY;
                            PdfFormField fieldC = checkbox.CheckField;
                            stamp.AddAnnotation(fieldC, fieldPosition.page);
                            af.SetField(field.Key, value);

                            //RadioCheckField chk = new RadioCheckField(stamp.Writer, rect, Convert.ToString(field.Key), k.Value);
                            //af1.DecodeGenericDictionary(af1.GetFieldItem(Convert.ToString(field.Key)).GetMerged(0), chk);
                            //RadioCheckField checkbox = null;
                            //checkbox = new RadioCheckField(stamp.Writer, af1.GetFieldPositions(field.Key)[0].position, field.Key, k.Value);
                            //checkbox.CheckType = RadioCheckField.TYPE_CHECK;
                            //checkbox.Checked = true;
                            //if (IsEditable == 0)
                            //    checkbox.Options = BaseField.READ_ONLY;
                            //PdfFormField fieldC = checkbox.CheckField;
                            //stamp.AddAnnotation(fieldC, af1.GetFieldPositions(field.Key)[0].page);
                        }
                        if (IsEditable == 0)
                            af.SetFieldProperty(field.Key, "setfflags", PdfFormField.FF_READ_ONLY, null);
                        lstPdfItems.Add(k);
                    }

                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("Input string was not in a correct format.") || ex.Message.Contains("Original message: PDF startxref not found"))
                    {
                        isError = true;
                        System.IO.File.AppendAllText(pdfTemplate, System.IO.File.ReadAllText(pdfTemplate).Substring(0, System.IO.File.ReadAllText(pdfTemplate).LastIndexOf("%%EOF") + 5));
                        goto ReadAgain;
                    }
                    Helper.Log.WriteError(ex);
                }

                finally
                {
                    if (!isError)
                    {
                        pdfReader.Close();
                        memStream.Close();
                        memStream.Dispose();
                        stamp.Close();
                        stamp.Dispose();
                        reader.Close();
                        reader.Dispose();
                        out1.Close();
                        out1.Dispose();
                    }
                }
            }
            else
            {
                pdfReader.Close();
                pdfReader.Dispose();
                memStream.Close();
                memStream.Dispose();
            }
            return lstPdfItems;
        }


        /// <summary>
        /// This will generate document method it will call generate method.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="documentid">document id</param>
        /// <param name="stage">stage</param>
        /// <param name="state">state</param>
        /// <param name="provName">prov Name</param>
        /// <param name="name">name</param>
        /// <param name="isPreFill">isPre Fill</param>
        /// <param name="isDeleteFirst">isDelete First</param>
        public void GenerateDocument(string id, string documentid, string stage, string state, string provName, string name, bool isPreFill = true, int isDeleteFirst = 0, bool isClassic = true, int jobDocumentId = 0, bool WithSign = true)
        {
            int jobId = 0, documentId = 0;
            if (!string.IsNullOrEmpty(id))
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            if (!string.IsNullOrEmpty(documentid))
                int.TryParse(QueryString.GetValueFromQueryString(documentid, "id"), out documentId);

            Generate(jobId, documentId, stage, state, provName, name, isPreFill, isDeleteFirst, isClassic, jobDocumentId, WithSign);
        }
        [UserAuthorization]
        [GeneralAuthorization]
        /// <summary>
        /// Upload document and save into database. 
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="documentid">documentid</param>
        /// <param name="stage">stage</param>
        /// <param name="state">state</param>
        /// <param name="provName">provName</param>
        /// <param name="name">name</param>
        /// <returns>json result</returns>
        public async Task<JsonResult> UploadDocument(string id, string documentid, string stage, string state, string provName, string name, bool isClassic = true, bool isFileCreate = false)
        {
            try
            {
                int jobId = 0;
                int documentId = 0;
                if (!string.IsNullOrEmpty(id))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
                }

                if (!string.IsNullOrEmpty(documentid))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(documentid, "id"), out documentId);
                }

                bool isAllowUserForDocumentRights = false;
                if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5 || ProjectSession.UserTypeId == 4)
                    isAllowUserForDocumentRights = true;
                else
                    isAllowUserForDocumentRights = _job.CheckDocumentRightsFromJobStcStatus(jobId);


                if (isAllowUserForDocumentRights)
                {
                    CheckAndCreateDir(ProjectConfiguration.JobDocumentsToSaveFullPath);
                    var mainDirToSavePath = ProjectConfiguration.JobDocumentsToSaveFullPath + jobId;
                    CheckAndCreateDir(mainDirToSavePath);
                    mainDirToSavePath += "/" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString());
                    CheckAndCreateDir(mainDirToSavePath);

                    string destinationFile = string.Empty;

                    if (!isClassic)
                    {
                        //string fileName = "STC_Assignment_Form";
                        string fileName = Path.GetFileNameWithoutExtension(Request.Files[0].FileName);
                        string fileExtension = Path.GetExtension(Request.Files[0].FileName);
                        int i = 0;
                        while (true)
                        {
                            string renameFileName = string.Empty;
                            if (i == 0)
                            {
                                renameFileName = mainDirToSavePath + "/" + fileName + fileExtension;
                            }
                            else
                            {
                                renameFileName = mainDirToSavePath + "/" + fileName + "(" + i + ")" + fileExtension;
                            }
                            if (System.IO.File.Exists(renameFileName))
                                i++;
                            else
                            {
                                destinationFile = renameFileName;
                                break;
                            }
                        }
                        name = Path.GetFileName(destinationFile);
                    }

                    mainDirToSavePath += "/" + name;
                    if (System.IO.File.Exists(mainDirToSavePath))
                    {
                        System.IO.File.Delete(mainDirToSavePath);
                    }


                    if (Request.Files != null && Request.Files.Count != 0)
                    {
                        for (var i = 0; i < Request.Files.Count; i++)
                        {
                            Request.Files[i].SaveAs(mainDirToSavePath);
                        }
                    }

                    string path = string.Empty;
                    path = "JobDocuments\\" + jobId + "\\" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "\\" + name;

                    DocumentsView documentsView = new DocumentsView();
                    documentsView.CreatedBy = ProjectSession.LoggedInUserId;
                    documentsView.CreatedDate = DateTime.Now;
                    documentsView.DocumentId = isClassic ? documentId : 0;
                    documentsView.IsUpload = true;
                    documentsView.JobId = jobId;
                    documentsView.Path = isClassic ? null : path;
                    documentsView.Type = isClassic ? "" : "STC";

                    int jobDocId = _job.CreateJobDocuments(documentsView, isClassic);
                    string documentName = "";
                    string folderPath = jobId + "\\" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString());
                    if (name.Contains("Agreement"))
                    {
                        documentName = "Connection Agreement Form";
                    }
                    else if (name.Contains("STC_Assignment") || name.ToLower().Contains("swh"))
                    {
                        documentName = "STC Assignment Form";
                    }
                    else if (name.ToLower().Contains("ces"))
                    {
                        documentName = "CES Form";
                    }

                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);

                    JobHistory objJobHistory = new JobHistory()
                    {
                        JobID = jobId,
                        HistoryMessage = documentName,
                        DocumentName = name,
                        DocumentPath = folderPath
                    };
                    //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Uploaded);
                    string HistoryMessage = objJobHistory.HistoryMessage;
                    string Documentname = objJobHistory.DocumentName;
                    string Documentpath = objJobHistory.DocumentPath;
                    //string JobHistoryMessage = "has uploaded a " + HistoryMessage + " <br><b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>&nbsp;&nbsp;Document</a></b>";
                    //string JobHistoryMessage = "has added a new document - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>"; 
                    string JobHistoryMessage = "has added a new Document: <a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> in <span class=\"blue-title\"> " + stage + " form </span>.";
                    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Uploaded", ProjectSession.LoggedInName, false, null);
                    CommonMethods.DocumentCreatedLog(jobDocId, _documentSignatureLogBAL);
                }

                return Json("", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json("", JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Uploads the STC document.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns></returns>
        [UserAuthorization]
        [GeneralAuthorization]
        public async Task<JsonResult> UploadSTCDocument(Entity.Documents.DocObject obj)
        {
            try
            {
                int jobId = Convert.ToInt32(obj.jobId);
                bool isAllowUserForDocumentRights = false;
                if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5 || ProjectSession.UserTypeId == 4)
                    isAllowUserForDocumentRights = true;
                else
                    isAllowUserForDocumentRights = _job.CheckDocumentRightsFromJobStcStatus(jobId);
                // bool isAllowUserForDocumentRights = _job.CheckDocumentRightsFromJobStcStatus(jobId);
                if (isAllowUserForDocumentRights)
                {
                    foreach (var doc in obj.docs)
                    {
                        string mainDirToSavePath = Path.Combine(ProjectConfiguration.JobDocumentsToSaveFullPath, jobId.ToString(),
                            (!string.IsNullOrEmpty(doc.stage) ? doc.stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()));

                        CheckAndCreateDir(mainDirToSavePath);

                        string renameFileName = string.Empty;

                        //string fileName = "STC_Assignment_Form";
                        string fileName = Path.GetFileNameWithoutExtension(doc.TemplateName);
                        string fileExtension = Path.GetExtension(doc.path);
                        int i = 0;
                        while (true)
                        {
                            if (i == 0)
                                renameFileName = mainDirToSavePath + "/" + fileName + fileExtension;
                            else
                                renameFileName = mainDirToSavePath + "/" + fileName + "(" + i + ")" + fileExtension;

                            if (System.IO.File.Exists(renameFileName))
                                i++;
                            else
                                break;
                        }
                        string name = Path.GetFileName(renameFileName);

                        mainDirToSavePath = Path.Combine(mainDirToSavePath, name);
                        if (System.IO.File.Exists(mainDirToSavePath))
                        {
                            System.IO.File.Delete(mainDirToSavePath);
                        }
                        string sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL, doc.path);

                        if (System.IO.File.Exists(sourcePath))
                        {
                            System.IO.File.Copy(sourcePath, mainDirToSavePath, true);
                        }


                        string path = string.Empty;
                        path = "JobDocuments\\" + jobId + "\\" + (!string.IsNullOrEmpty(doc.stage) ? doc.stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "\\" + name;

                        if (obj.fillData)
                        {
                            PreFillItems(Path.Combine(ProjectSession.ProofDocumentsURL, path), jobId, string.Empty, false);
                        }

                        //renameFileName = FillDocument(jobId, name, mainDirToSavePath, "STC", true, 0, true);
                        //List<PdfItems> lstGetPDFItem = GetPDFItems(renameFileName);
                        List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(Path.Combine(ProjectSession.ProofDocumentsURL, path));
                        string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);

                        DocumentsView documentsView = new DocumentsView();
                        documentsView.CreatedBy = ProjectSession.LoggedInUserId;
                        documentsView.CreatedDate = DateTime.Now;
                        documentsView.DocumentId = 0;
                        documentsView.IsUpload = true;
                        documentsView.JobId = jobId;
                        documentsView.Path = path;
                        documentsView.JsonData = jsonPDFData;
                        documentsView.Type = "STC";

                        int jobDocId = _job.CreateJobDocuments(documentsView, false);
                        string documentName = "";
                        string folderPath = jobId + "\\" + (!string.IsNullOrEmpty(doc.stage) ? doc.stage : Helper.SystemEnums.JobStage.PreApprovals.ToString());

                        if (name.Contains("Agreement"))
                        {
                            documentName = "Connection Agreement Form";
                        }
                        else if (name.Contains("STC_Assignment") || name.ToLower().Contains("swh"))
                        {
                            documentName = "STC Assignment Form";
                        }
                        else if (name.ToLower().Contains("ces"))
                        {
                            documentName = "CES Form";
                        }

                        await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
                        string Form = "";
                        if (name.ToLower().Contains("stc"))
                        {
                            Form = "STC";
                        }
                        if (name.ToLower().Contains("ces"))
                        {
                            Form = "CES";
                        }
                        if (name.ToLower().Contains("other"))
                        {
                            Form = "Document Manager";
                        }
                        JobHistory objJobHistory = new JobHistory()
                        {
                            JobID = jobId,
                            HistoryMessage = documentName,
                            DocumentName = name,
                            DocumentPath = folderPath
                        };
                        //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Uploaded);
                        string HistoryMessage = objJobHistory.HistoryMessage;
                        string Documentname = objJobHistory.DocumentName;
                        string Documentpath = objJobHistory.DocumentPath;
                        // string JobHistoryMessage = "has uploaded a " + HistoryMessage + " <br><b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>&nbsp;&nbsp;Document</a></b>";
                        //string JobHistoryMessage = "has added a new document - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>"; 
                        string JobHistoryMessage = "has added a new document: <a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> in <span class=\"blue-title\">" + Form + " Form </span>.";
                        Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Uploaded", ProjectSession.LoggedInName, false, null);
                        CommonMethods.DocumentCreatedLog(jobDocId, _documentSignatureLogBAL);
                    }
                }

                return Json(new { response = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { response = false }, JsonRequestBehavior.AllowGet);
            }
        }
        public static void CopyTo(Stream src, Stream dest)
        {
            byte[] bytes = new byte[4096];

            int cnt;

            while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0)
            {
                dest.Write(bytes, 0, cnt);
            }
        }

        /// <summary>
        /// Delete document and modify database records
        /// </summary>
        /// <param name="id">identifier list</param>
        /// <param name="documentid">document identifier</param>
        /// <param name="stage">stage name</param>
        /// <param name="state">state name</param>
        /// <param name="provName">provider name</param>
        /// <param name="name">name list</param>
        /// <returns>object result</returns>
        [UserAuthorization]
        [GeneralAuthorization]
        public async Task<JsonResult> DeleteDocument(string id, string documentid, string stage, string state, string provName, string name, bool isClassic = true, string jobDocumentPath = "", int jobDocumentId = 0)
        {
            int jobId = 0, documentId = 0;
            string destPath = string.Empty;
            string sourcePath = string.Empty;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            }

            if (!string.IsNullOrEmpty(documentid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(documentid, "id"), out documentId);
            }
            bool isAllowUserForDocumentRights = false;
            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5 || ProjectSession.UserTypeId == 4)
                isAllowUserForDocumentRights = true;
            else
                isAllowUserForDocumentRights = _job.CheckDocumentRightsFromJobStcStatus(jobId);
            // var isAllowUserForDocumnetRights = _job.CheckDocumentRightsFromJobStcStatus(jobId);
            if (isAllowUserForDocumentRights)
            {
                if (isClassic)
                {
                    sourcePath = ProjectSession.ProofDocuments + "\\" + "JobDocuments" + "\\" + jobId + "\\" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "\\" + name;
                    //destPath = "JobDocuments\\" + MoveDeletedDocuments(sourcePath);
                    destPath = "JobDocuments\\" + _generateStcReportBAL.MoveDeletedDocuments(sourcePath, Convert.ToString(jobId));
                }
                else
                {

                    sourcePath = Path.Combine(ProjectSession.ProofDocuments + "\\" + jobDocumentPath);
                    //destPath = "JobDocuments\\" + MoveDeletedDocuments(sourcePath);
                    destPath = "JobDocuments\\" + _generateStcReportBAL.MoveDeletedDocuments(sourcePath, Convert.ToString(jobId));
                }

                DocumentsView documentsView = new DocumentsView();
                documentsView.CreatedBy = ProjectSession.LoggedInUserId;
                documentsView.CreatedDate = DateTime.Now;
                documentsView.DocumentId = documentId;
                documentsView.JobId = jobId;
                documentsView.JobDocumentId = jobDocumentId;

                _job.DeleteJobDocument(documentsView, destPath);
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);

                if (name.Contains("Agreement"))
                {
                    JobHistory objJobHistory = new JobHistory()
                    {
                        JobID = jobId,
                        HistoryMessage = "Connection Agreement Form"
                    };

                    //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Deleted);
                    //string JobHistoryMessage = "has removed a document - <b class=\"blue-title\">  (" + objJobHistory.JobID + ") JobRefNo" + "</b>";
                    string JobHistoryMessage = "has removed a document: <b class=\"blue-title\">" + objJobHistory.HistoryMessage + "</b> from <span class=\"blue-title\">" + objJobHistory.HistoryMessage + " </span>.";
                    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Deleted", ProjectSession.LoggedInName, false, null);
                }
                else
                {
                    JobHistory objJobHistory = new JobHistory()
                    {
                        JobID = jobId,
                        HistoryMessage = Path.GetFileName(sourcePath)
                    };

                    //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Deleted);
                    //string JobHistoryMessage = "has deleted a " + objJobHistory.HistoryMessage + " .";
                    //string JobHistoryMessage = "has removed a document - <b class=\"blue-title\">  (" + objJobHistory.JobID + ") JobRefNo" + "</b> ";
                    string JobHistoryMessage = "has removed a document: <b class=\"blue-title\">" + objJobHistory.HistoryMessage + "</b> from <span class=\"blue-title\">" + stage + " Form </span>.";
                    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Deleted", ProjectSession.LoggedInName, false, null);
                }

            }

            return Json("", JsonRequestBehavior.AllowGet);
        }


        /// <returns>object result</returns>
        [UserAuthorization]
        public JsonResult DeleteDocumentNew(DeleteDoc objDoc)
        {
            int JobDocumentId = 0;
            int.TryParse(objDoc.id, out JobDocumentId);
            string destPath = string.Empty;
            string JobId = string.Empty;
            try
            {

                if (objDoc.deleteFile)
                {
                    string sourcePath = Path.Combine(ProjectSession.ProofDocuments, objDoc.path);
                    DirectoryInfo CurrentDirectory = new DirectoryInfo(System.IO.Path.GetDirectoryName(sourcePath));
                    JobId = CurrentDirectory.Parent.Name;
                    //string pathInfo = sourcePath.Split(new string[] { "JobDocuments\\" }, StringSplitOptions.None)[1].ToString();
                    ////string JobId = Convert.ToString(Directory.GetParent(pathInfo).Parent);
                    //string JobId = pathInfo.Split(new string[] { "\\" }, StringSplitOptions.None)[0].ToString();
                    destPath = "JobDocuments\\" + _generateStcReportBAL.MoveDeletedDocuments(sourcePath, JobId);
                }
                _job.DeleteJobDocumentNew(JobDocumentId, destPath);
                if (!string.IsNullOrEmpty(objDoc.JobId) && objDoc != null && !string.IsNullOrEmpty(objDoc.path))
                {
                    JobHistory objJobHistory = new JobHistory()
                    {
                        JobID = Convert.ToInt32(objDoc.JobId),
                        HistoryMessage = Path.GetFileName(objDoc.path)
                    };
                    string Form = "";
                    if (objDoc.path.Contains("CES"))
                    {
                        Form = "CES";
                    }
                    if (objDoc.path.Contains("OTHER"))
                    {
                        Form = "Document Manager";
                    }
                    //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Deleted);
                    //string JobHistoryMessage = "has deleted a <b class=\"blue-title\">" + objJobHistory.HistoryMessage + "</b> .";
                    //string JobHistoryMessage = "has removed a document - <b class=\"blue-title\">  (" + objJobHistory.JobID + ") JobRefNo" + "</b>";
                    string JobHistoryMessage = "has removed a document <b class=\"blue-title\">" + objJobHistory.HistoryMessage + "</b> from <span class=\"blue-title\">" + Form + " Form</span>.";
                    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Deleted", ProjectSession.LoggedInName, false, null);
                }

                return Json(true, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in DeleteDocumentNew..");
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        //public JsonResult DownloadAllDocumentsNew(int jobid, string type)
        //public void DownloadAllDocumentsNew(int jobid, string type)
        //{
        //    DataSet dsPath = _job.GetDocumentsByType(jobid);
        //    using (ZipFile zip = new ZipFile())
        //    {
        //        zip.AlternateEncodingUsage = ZipOption.AsNecessary;

        //        if (type == "other")
        //        {
        //            zip.AddDirectoryByName("CES");
        //            zip.AddDirectoryByName("STC");
        //            zip.AddDirectoryByName("OTHER");

        //            if (dsPath != null && dsPath.Tables[0] != null && dsPath.Tables[0].Rows.Count > 0)
        //            {
        //                for (int i = 0; i < dsPath.Tables[0].Rows.Count; i++)
        //                {
        //                    string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));
        //                    if (System.IO.File.Exists(path))
        //                    {
        //                        zip.AddFile(path, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]));
        //                    }
        //                }
        //            }
        //        }

        //        else
        //        {
        //            if (dsPath != null && dsPath.Tables[0] != null && dsPath.Tables[0].Rows.Count > 0)
        //            {
        //                for (int i = 0; i < dsPath.Tables[0].Rows.Count; i++)
        //                {
        //                    string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));
        //                    if (Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]) == "CES")
        //                    {
        //                        if (System.IO.File.Exists(path))
        //                        {
        //                            zip.AddFile(path, "");
        //                        }
        //                    }
        //                }
        //            }
        //        }

        //        string JobId = jobid.ToString();

        //        Response.Clear();
        //        Response.BufferOutput = false;
        //        //string zipName = String.Format("Zip_{0}.zip", DateTime.Now.ToString("yyyy-MMM-dd-HHmmss"));
        //        Response.ContentType = "application/zip";
        //        Response.AddHeader("content-disposition", "attachment; filename=" + JobId + "_JobDocument.zip");
        //        zip.Save(Response.OutputStream);
        //        Response.End();
        //    }
        //   // return Json(true, JsonRequestBehavior.AllowGet);
        //}
        [UserAuthorization]
        public void DownloadAllDocumentsNew(int jobid, string type)
        {
            DataSet dsPath = _job.GetDocumentsByType(jobid);
            using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
            {
                zip.AlternateEncodingUsage = ZipOption.AsNecessary;

                if (type == "other")
                {
                    zip.AddDirectoryByName("CES");
                    zip.AddDirectoryByName("STC");
                    zip.AddDirectoryByName("OTHER");

                    if (dsPath != null && dsPath.Tables[0] != null && dsPath.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsPath.Tables[0].Rows.Count; i++)
                        {
                            if (Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]) == "CES")
                            {
                                //JOBDOCUMENTS\\12405\\CES\\4.JPG
                                //JobDocuments\12405\CES\10475\CES.pdf
                                string directoryPath = Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]).ToUpper();
                                string[] pathCountArr = directoryPath.Split(new string[] { "\\" }, StringSplitOptions.RemoveEmptyEntries);
                                if (pathCountArr.Count() == 5)
                                {
                                    if (pathCountArr != null && pathCountArr[2] != null && !string.IsNullOrEmpty(pathCountArr[2]) && pathCountArr[3] != null && !string.IsNullOrEmpty(pathCountArr[3]))
                                    {
                                        if (!zip.EntryFileNames.Contains(pathCountArr[2] + "/" + pathCountArr[3]))
                                            zip.AddDirectoryByName(pathCountArr[2] + "/" + pathCountArr[3]);

                                        string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));
                                        if (System.IO.File.Exists(path))
                                        {
                                            zip.AddFile(path, pathCountArr[2] + "/" + pathCountArr[3]);
                                        }

                                    }
                                }
                                else
                                {
                                    string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));

                                    if (System.IO.File.Exists(path))
                                    {
                                        //from download all document its download every time to final document
                                        if (Path.GetExtension(path).ToLower().Equals(".pdf"))
                                        {
                                            string readOnlyFile =
                                       MakePDFReadOnlyForDownloadAllDoc(path, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]), jobid);
                                            zip.AddFile(readOnlyFile, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]));
                                        }
                                        else
                                        {
                                            zip.AddFile(path, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]));
                                        }
                                    }
                                }
                            }
                            else
                            {
                                string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));
                                if (System.IO.File.Exists(path))
                                {
                                    //from download all document its download every time to final document
                                    if (Path.GetExtension(path).ToLower().Equals(".pdf"))
                                    {
                                        string readOnlyFile =
                                   MakePDFReadOnlyForDownloadAllDoc(path, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]), jobid);
                                        zip.AddFile(readOnlyFile, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]));
                                    }
                                    else
                                    {
                                        zip.AddFile(path, Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]));
                                    }


                                    //System.IO.File.Delete(newFile);
                                }
                            }
                        }
                    }
                }

                else
                {
                    if (dsPath != null && dsPath.Tables[0] != null && dsPath.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsPath.Tables[0].Rows.Count; i++)
                        {
                            string path = Path.Combine(ProjectSession.ProofDocuments, Convert.ToString(dsPath.Tables[0].Rows[i]["Path"]));
                            if (Convert.ToString(dsPath.Tables[0].Rows[i]["Type"]) == "CES")
                            {
                                if (System.IO.File.Exists(path))
                                {
                                    zip.AddFile(path, "");
                                }
                            }
                        }
                    }
                }

                string JobId = jobid.ToString();

                Response.Clear();
                Response.BufferOutput = false;
                //string zipName = String.Format("Zip_{0}.zip", DateTime.Now.ToString("yyyy-MMM-dd-HHmmss"));
                Response.ContentType = "application/zip";
                Response.AddHeader("content-disposition", "attachment; filename=" + JobId + "_JobDocument.zip");
                zip.Save(Response.OutputStream);

                Response.End();
                //delete readonly document folder which is not needed more 
                string deleteDirPath = ProjectSession.ProofDocuments + "\\" + "JobDocuments" + "\\" + jobid.ToString() + "\\ReadOnlyDocument";
                if (System.IO.Directory.Exists(deleteDirPath))
                    System.IO.Directory.Delete(deleteDirPath, true);

                //for insert log when download all document from document manager section
                JobHistory objJobHistory = new JobHistory()
                {
                    JobID = jobid,
                    HistoryMessage = "all documents",
                    DocumentType = "Document Manager"

                };
                //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadDocument);
                string JobHistoryMessage = "has downloaded <b class=\"blue-title\"> " + objJobHistory.HistoryMessage + "</b> from " + objJobHistory.DocumentType;
                Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "DownloadDocument", ProjectSession.LoggedInName, false);
            }
        }

        [HttpGet]
        public JsonResult isExistDownloadAllDocumentsNew(int jobid, string type)
        {
            int SameFileCount = 0;
            string folder;
            DataSet dsPath = _job.GetDocumentsByType(jobid);

            for (int i = 0; i < dsPath.Tables[0].Rows.Count; i++)
            {
                for (int j = 0; j < dsPath.Tables[0].Rows.Count; j++)
                {
                    if (dsPath.Tables[0].Rows[i]["Path"].ToString() == dsPath.Tables[0].Rows[j]["Path"].ToString() && i != j)
                    {
                        SameFileCount++;
                    }
                }
            }
            if (SameFileCount > 0)
            {

                return Json(new { response = false, }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { response = true }, JsonRequestBehavior.AllowGet);
            }

        }
        /// <summary>
        /// make read  only pdf for download all document from document manager section
        /// </summary>
        /// <param name="path">document path</param>
        /// <param name="type">document type(OTHER,STC,CES)</param>
        ///  <param name="jobid">jobid</param>
        /// <returns>string array</returns>
        public string MakePDFReadOnlyForDownloadAllDoc(string path, string type, int jobid)
        {
            string ReadOnlyFileDirectory = ProjectSession.ProofDocuments + "\\" + "JobDocuments" + "\\" + jobid.ToString() + "\\ReadOnlyDocument";
            string name = Path.GetFileName(path);
            string ReadOnlyFileDirectoryForAllTypeDoc = ReadOnlyFileDirectory + "\\" + type;

            if (!System.IO.Directory.Exists(ReadOnlyFileDirectory))
            {
                System.IO.Directory.CreateDirectory(ReadOnlyFileDirectory);
            }
            if (!System.IO.Directory.Exists(ReadOnlyFileDirectoryForAllTypeDoc))
            {
                System.IO.Directory.CreateDirectory(ReadOnlyFileDirectoryForAllTypeDoc);
            }
            string readOnlyFile = Path.Combine(ReadOnlyFileDirectoryForAllTypeDoc, name);
            MakeReadOnlyePDF(path, readOnlyFile, jobid.ToString());
            return readOnlyFile;
        }



        /// <summary>
        /// Scales the image.
        /// </summary>
        /// <param name="original">The original.</param>
        /// <param name="maxWidth">The maximum width.</param>
        /// <param name="maxHeight">The maximum height.</param>
        /// <returns>bit map image</returns>
        public Bitmap ScaleImage(Bitmap original, int maxWidth, int maxHeight)
        {
            int originalWidth = original.Width;
            int originalHeight = original.Height;
            // To preserve the aspect ratio
            float ratioX = (float)maxWidth / (float)originalWidth;
            float ratioY = (float)maxHeight / (float)originalHeight;
            float ratio = Math.Min(ratioX, ratioY);
            // New width and height based on aspect ratio
            int newWidth = (int)(originalWidth * ratio);
            int newHeight = (int)(originalHeight * ratio);
            // Convert other formats (including CMYK) to RGB.
            Bitmap newImage = new Bitmap(newWidth, newHeight, PixelFormat.Format64bppArgb);
            ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Jpeg);
            EncoderParameters myEncoderParameters = new EncoderParameters(1);
            myEncoderParameters.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.ColorDepth, 32L);
            // Draws the image in the specified size with quality mode set to HighQuality
            using (Graphics graphics = Graphics.FromImage(newImage))
            {
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighSpeed;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.DrawImage(original, 0, 0, newWidth, newHeight);
            }
            return newImage;
        }

        /// <summary>
        /// This mehtod will encode image as per format.
        /// </summary>
        /// <param name="format">format</param>
        /// <returns>image code info</returns>
        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }

            }
            return null;
        }

        /// <summary>
        /// This will generate new document in respective folder and fill pdf with required data.
        /// </summary>
        /// <param name="jobId">job identifier</param>
        /// <param name="documentId">document identifier</param>
        /// <param name="stage">stage name</param>
        /// <param name="state">state name</param>
        /// <param name="provName">provider name</param>
        /// <param name="name">string name</param>
        /// <param name="isPreFill">pre fill</param>
        /// <param name="isDeleteFirst">isDelete First</param>
        private async Task Generate(int jobId, int documentId, string stage, string state, string provName, string name, bool isPreFill, int isDeleteFirst, bool isClassic, int jobDocumentId, bool WithSign = true)
        {
            var mainDirPath = Path.Combine(ProjectConfiguration.JobDocumentPath);
            var directories = Directory.GetDirectories(mainDirPath);
            string path = string.Empty;
            string fileName = string.Empty;
            if (isClassic)
            {
                if (directories.Any(d => new DirectoryInfo(d).Name.ToLower().Replace(" ", "") == stage.ToLower().Replace(" ", "")))
                {
                    mainDirPath = directories.FirstOrDefault(d => new DirectoryInfo(d).Name.ToLower().Replace(" ", "") == stage.ToLower().Replace(" ", ""));
                    if (Directory.Exists(mainDirPath))
                    {
                        mainDirPath += "/" + state + "/" + provName + "/" + name;
                        if (System.IO.File.Exists(mainDirPath))
                        {
                            fileName = FillDocument(jobId, name, mainDirPath, stage, isPreFill, isDeleteFirst, isClassic, WithSign);
                        }
                    }
                }
            }
            else
            {
                fileName = FillDocument(jobId, name, mainDirPath, stage, isPreFill, isDeleteFirst, isClassic, WithSign);
            }

            if (!string.IsNullOrEmpty(fileName))
            {
                List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(fileName);
                string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);

                if (isPreFill)
                {
                    path = "JobDocuments\\" + jobId + "\\" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString()) + "\\" + Path.GetFileName(fileName);
                    DocumentsView documentsView = new DocumentsView();
                    documentsView.CreatedBy = ProjectSession.LoggedInUserId;
                    documentsView.CreatedDate = DateTime.Now;
                    documentsView.DocumentId = documentId;
                    documentsView.IsUpload = false;
                    documentsView.JobId = jobId;
                    documentsView.Path = path;
                    documentsView.JsonData = jsonPDFData;
                    documentsView.Type = isClassic ? "" : "STC";
                    documentsView.JobDocumentId = isClassic ? 0 : jobDocumentId;
                    _job.CreateJobDocuments(documentsView, isClassic);
                }
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
                string folderPath = jobId + "\\" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString());
                GenerateHistory(jobId, Path.GetFileName(fileName), folderPath);
            }
        }

        /// <summary>
        /// Generate history
        /// </summary>
        /// <param name="jobId">jobId</param>
        /// <param name="name">name</param>
        /// <param name="path">path</param>
        private void GenerateHistory(int jobId, string name, string path)
        {
            string documentName = "";
            if (name.Contains("Agreement"))
            {
                documentName = "Connection Agreement Form";
            }
            else if (name.Contains("STC_Assignment") || name.ToLower().Contains("swh"))
            {
                documentName = "STC Assignment Form";
            }
            else if (name.ToLower().Contains("ces"))
            {
                documentName = "CES Form";
            }

            string Form = "";
            if (path.ToLower().Contains("stc"))
            {
                Form = "STC";
            }
            JobHistory objJobHistory = new JobHistory()
            {
                JobID = jobId,
                HistoryMessage = documentName,
                DocumentPath = path,
                DocumentName = name
            };
            //bool isHistorySaved = _jobHistory.LogJobHistory(objJobHistory, HistoryCategory.Generated);
            string Historymessage = objJobHistory.HistoryMessage;
            string Documentname = objJobHistory.DocumentName;
            string DocumentPath = objJobHistory.DocumentPath;
            //string JobHistoryMessage = "has generated a " +Historymessage+ " - <b class=\"blue-title\"> (" + objJobHistory.JobID +") RefNo </b>"+ " <br><b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname+"\" data-folder=\""+DocumentPath+ "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\">&nbsp;&nbsp;Document</a></b>";
            string JobHistoryMessage = "has generated a document " + Historymessage + " - <b class=\"blue-title\"> (" + objJobHistory.JobID + ") JobRefNo </b>";
            string description = "<b>Document: </b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + DocumentPath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"> &nbsp;&nbsp;" + Documentname + "</a> has been Generated in <span class=\"blue-title\">" + Form + " Form </span>.";
            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "Generated", ProjectSession.LoggedInName, false, description);
        }

        /// <summary>
        /// This will check is document exists at respective path and if no then it will copy source file at respective path and call PreFill method if this method is called with pre filling purpose.
        /// </summary>
        /// <param name="jobId">jobId</param>
        /// <param name="name">name</param>
        /// <param name="mainDirPath">mainDirPath</param>
        /// <param name="stage">stage</param>
        /// <param name="isFill">isFill</param>
        /// <param name="isDeleteFirst">isDelete First</param>
        private string FillDocument(int jobId, string name, string mainDirPath, string stage, bool isFill = true, int isDeleteFirst = 0, bool isClassic = true, bool WithSign = true)
        {
            string mainDirToSavePath = string.Empty;
            if (isClassic)
            {
                string jsonPDFData = string.Empty;
                CheckAndCreateDir(ProjectConfiguration.JobDocumentsToSaveFullPath);
                mainDirToSavePath = ProjectConfiguration.JobDocumentsToSaveFullPath + jobId;
                CheckAndCreateDir(mainDirToSavePath);
                mainDirToSavePath += "/" + (!string.IsNullOrEmpty(stage) ? stage : Helper.SystemEnums.JobStage.PreApprovals.ToString());
                CheckAndCreateDir(mainDirToSavePath);
                mainDirToSavePath += "/" + name;
                if (isDeleteFirst == 1 && System.IO.File.Exists(mainDirToSavePath))
                {
                    System.IO.File.Delete(mainDirToSavePath);
                }

                if (!System.IO.File.Exists(mainDirToSavePath))
                {
                    System.IO.File.Copy(mainDirPath, mainDirToSavePath);
                }
            }
            else
            {
                mainDirToSavePath = Path.Combine(ProjectSession.ProofDocuments + "\\" + name);
            }

            if (isFill)
            {
                var enumJobStage = Helper.Helper.Common.GetDescription((SystemEnums.JobStage)Enum.Parse(typeof(SystemEnums.JobStage), stage), "PRE");
                PreFillItems(mainDirToSavePath, jobId, enumJobStage, isClassic, WithSign);
            }
            return mainDirToSavePath;
        }

        /// <summary>
        /// the fill items.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <param name="stageAbbre">The stage abbre.</param>
        public void PreFillItems(string fileName, int jobId, string stageAbbre, bool isClassic = true, bool WithSign = true)
        {
            List<PdfItems> pdfItems = new List<PdfItems>();

            string installerSignPath = Path.Combine("UserDocuments" + "\\");
            string ownerSignPath = Path.Combine("JobDocuments" + "\\");
            string sCASignPath = Path.Combine("UserDocuments" + "\\");
            string electricianSignPath = Path.Combine("JobDocuments" + "\\");
            DataSet ds = _job.GetJobByIDForPDF(jobId, ProjectSession.SolarCompanyId, installerSignPath, ownerSignPath, sCASignPath, electricianSignPath, DateTime.Now);
            foreach (DataTable dt in ds.Tables)
            {
                DataTable dtPreFilledItems = dt;
                if (dtPreFilledItems != null && dtPreFilledItems.Rows.Count > 0)
                {
                    foreach (DataColumn column in dtPreFilledItems.Columns)
                    {
                        if (WithSign == false)
                        {
                            if (column.ColumnName.ToLower().Contains("_signature"))
                                continue;
                        }
                        PdfItems k = new PdfItems();
                        k.FieldName = column.ColumnName;
                        k.Value = Convert.ToString(dtPreFilledItems.Rows[0][column]);
                        pdfItems.Add(k);
                    }
                }

            }

            VeriFyColumns(pdfItems, fileName, stageAbbre, isClassic);
            _job.FillPDFAndSave(pdfItems, fileName, true);
        }

        /// <summary>
        /// verify columns.
        /// </summary>
        /// <param name="lstPdfItems">The items.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="stageAbbre">The stage.</param>
        private void VeriFyColumns(List<PdfItems> lstPdfItems, string fileName, string stageAbbre, bool isClassic)
        {
            MemoryStream memStream = new MemoryStream();
            using (FileStream fileStream = System.IO.File.OpenRead(fileName))
            {
                memStream.SetLength(fileStream.Length);
                fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
            }
            PdfReader pdfReader = null;
            try
            {

                pdfReader = new PdfReader(memStream);
                AcroFields af = pdfReader.AcroFields;

                foreach (var field in af.Fields)
                {
                    if (isClassic)
                    {
                        lstPdfItems.Where(d => Convert.ToString(field.Key).ToLower() == (stageAbbre + "_" + d.FieldName).ToLower()).ToList().ForEach(d => { d.FieldName = Convert.ToString(field.Key); });
                    }
                    else
                    {
                        lstPdfItems.Where(d => (Convert.ToString(field.Key).Split(new string[] { "_" }, 2, StringSplitOptions.None).Length > 1) ? Convert.ToString(field.Key).Split(new string[] { "_" }, 2, StringSplitOptions.None)[1].ToLower() == (d.FieldName).ToString().ToLower() : Convert.ToString(field.Key).ToLower() == (d.FieldName).ToString().ToLower()).ToList().ForEach(d => { d.FieldName = Convert.ToString(field.Key); });
                    }
                }
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex);
            }
            finally
            {
                if (pdfReader != null)
                    pdfReader.Close();
                memStream.Close();
                memStream.Dispose();
            }
        }

        /// <summary>
        /// Fills the PDF and save.
        /// </summary>
        /// <param name="lstPdfItems">The LST PDF items.</param>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="isFill">if set to <c>true</c> [is fill].</param>
        private void FillPDFAndSave(List<PdfItems> lstPdfItems, string fileName, bool isFill = false, List<KeyValuePair<int, string>> lstSignature = null)
        {
            //List<PdfItems> lstGetPDFItem = new List<PdfItems>();
            //string jsonPDFData = string.Empty;

            MemoryStream memStream = new MemoryStream();
            using (FileStream fileStream = System.IO.File.OpenRead(fileName))
            {
                memStream.SetLength(fileStream.Length);
                fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
            }
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(memStream);

                Type type = typeof(PdfReader);
                FieldInfo info = type.GetField("unethicalreading", BindingFlags.Public | BindingFlags.Static);
                info.SetValue(pdfReader, true);

                pdfStamper = new PdfStamper(pdfReader, new FileStream(fileName, FileMode.Create, FileAccess.ReadWrite));
                AcroFields pdfFormFields = pdfStamper.AcroFields;
                foreach (PdfItems item in lstPdfItems)
                {
                    if (isFill && Convert.ToString(item.FieldName).ToLower().Contains("signature"))
                    {
                        try
                        {
                            //float[] fieldPosition = null;
                            IList<AcroFields.FieldPosition> fieldPositions = pdfFormFields.GetFieldPositions(Convert.ToString(item.FieldName));
                            if (fieldPositions != null)
                            {
                                List<string> lstValues = new List<string>();
                                string signPath = string.Empty;
                                AcroFields.FieldPosition fieldPosition = fieldPositions[0];
                                if (lstSignature != null)
                                {
                                    if (Convert.ToString(item.FieldName).ToLower().Contains("inst_signature"))
                                    {
                                        lstValues = lstSignature.Where(a => a.Key == Convert.ToInt32(SystemEnums.TypeOfSignature.Installer)).Select(a => a.Value).ToList();
                                    }
                                    else if (Convert.ToString(item.FieldName).ToLower().Contains("owner_signature"))
                                    {
                                        lstValues = lstSignature.Where(a => a.Key == Convert.ToInt32(SystemEnums.TypeOfSignature.Home_Owner)).Select(a => a.Value).ToList();
                                    }
                                    else if (Convert.ToString(item.FieldName).ToLower().Contains("electrician_signature"))
                                    {
                                        lstValues = lstSignature.Where(a => a.Key == Convert.ToInt32(SystemEnums.TypeOfSignature.Electrician)).Select(a => a.Value).ToList();
                                    }
                                    else if (Convert.ToString(item.FieldName).ToLower().Contains("designer_signature"))
                                    {
                                        lstValues = lstSignature.Where(a => a.Key == Convert.ToInt32(SystemEnums.TypeOfSignature.Designer)).Select(a => a.Value).ToList();
                                    }
                                    else if (Convert.ToString(item.FieldName).ToLower().Contains("other_signature"))
                                    {
                                        lstValues = lstSignature.Where(a => a.Key == Convert.ToInt32(SystemEnums.TypeOfSignature.Other)).Select(a => a.Value).ToList();
                                    }

                                }

                                if (lstValues.Count > 0)
                                    signPath = Path.Combine(ProjectSession.ProofDocuments + lstValues[0]);
                                else
                                    signPath = Path.Combine(ProjectSession.ProofDocuments + "\\" + item.Value);

                                string signFileName = string.Empty;
                                if (lstValues.Count > 0)
                                    signFileName = Path.GetFileName(lstValues[0]);
                                else
                                    signFileName = item.Value;

                                if (!string.IsNullOrEmpty(signFileName) && System.IO.File.Exists(signPath) && fieldPosition != null)
                                {
                                    Bitmap original;
                                    using (FileStream fs = new System.IO.FileStream(signPath, System.IO.FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                                    {
                                        original = new Bitmap(fs);
                                    }

                                    Bitmap bitMapSignPath = new Bitmap(signPath);
                                    //iTextSharp.text.Image image1 = iTextSharp.text.Image.GetInstance(bitMapSignPath, iTextSharp.text.BaseColor.WHITE);

                                    iTextSharp.text.Image image1 = iTextSharp.text.Image.GetInstance(bitMapSignPath, ImageFormat.Png);
                                    //iTextSharp.text.Image image1 = iTextSharp.text.Image.GetInstance(bitMapSignPath, ImageFormat.Gif);

                                    PdfDictionary pdfDictionary = pdfFormFields.GetFieldItem(item.FieldName.ToString()).GetMerged(0);


                                    int aspectRatio = 0;
                                    string horiAlign = "left", vertAlign = "bottom";

                                    if (pdfDictionary.GetAsString(PdfName.DV) != null)
                                    {
                                        string[] position = pdfDictionary.GetAsString(PdfName.DV).ToString().Split('_');

                                        if (position.Count() > 0 && Enum.IsDefined(typeof(SystemEnums.HorizontalAlignment), position[0]))
                                            horiAlign = position[0].ToLower();

                                        if (position.Count() > 1 && Enum.IsDefined(typeof(SystemEnums.VerticalAlignment), position[1]))
                                            vertAlign = position[1].ToLower();

                                        if (position.Count() > 2 && int.TryParse(position[2], out aspectRatio) && (aspectRatio == 0 || aspectRatio == 1))
                                            aspectRatio = Convert.ToInt32(position[2]);
                                    }

                                    float newWidth = fieldPosition.position.Width, newHeight = fieldPosition.position.Height;
                                    float absoluteX = fieldPosition.position.Left, absoluteY = fieldPosition.position.Bottom;

                                    if (aspectRatio == 0)
                                    {
                                        int originalWidth = original.Width;
                                        int originalHeight = original.Height;
                                        // To preserve the aspect ratio
                                        float ratioX = (float)(Convert.ToInt32(Math.Abs(newWidth))) / (float)originalWidth;
                                        float ratioY = (float)(Convert.ToInt32(Math.Abs(newHeight))) / (float)originalHeight;
                                        float ratio = Math.Min(ratioX, ratioY);
                                        // New width and height based on aspect ratio
                                        newWidth = originalWidth * ratio;
                                        newHeight = originalHeight * ratio;

                                        switch (horiAlign)
                                        {
                                            case "right":
                                                absoluteX = Math.Abs(fieldPosition.position.Right - newWidth);
                                                break;
                                            case "center":
                                                absoluteX += Math.Abs((fieldPosition.position.Width - newWidth) / 2);
                                                break;
                                            default:
                                                absoluteX = fieldPosition.position.Left;
                                                break;
                                        }

                                        switch (vertAlign)
                                        {
                                            case "top":
                                                absoluteY = Math.Abs(fieldPosition.position.Top - newHeight);
                                                break;
                                            case "middle":
                                                absoluteY += Math.Abs((fieldPosition.position.Height - newHeight) / 2);
                                                break;
                                            default:
                                                absoluteY = fieldPosition.position.Bottom;
                                                break;
                                        }
                                    }

                                    image1.SetAbsolutePosition(absoluteX, absoluteY);

                                    image1.ScaleAbsolute(newWidth, newHeight);
                                    // image1.ScaleToFit(fieldPosition.position.Width, fieldPosition.position.Height);
                                    //image1.ScaleAbsolute(newWidth, newHeight);
                                    // change the content on top of page 1
                                    var pageNum = (fieldPositions[0].page > 0 && !string.IsNullOrEmpty(Convert.ToString(fieldPositions[0].page))) ? fieldPositions[0].page : 1;
                                    PdfContentByte overContent = pdfStamper.GetOverContent(pageNum);

                                    overContent.AddImage(image1);

                                    PdfItemSignatureProperties pdfItemSignatureProperties = new PdfItemSignatureProperties
                                    {
                                        Left = fieldPosition.position.Left,
                                        Right = fieldPosition.position.Right,
                                        Top = fieldPosition.position.Top,
                                        Bottom = fieldPosition.position.Bottom,
                                        Width = fieldPosition.position.Width,
                                        Height = fieldPosition.position.Height,
                                        PageNum = Convert.ToInt32(pageNum)
                                    };
                                    item.PdfItemSignatureProperties = pdfItemSignatureProperties;
                                }


                            }
                            pdfFormFields.SetFieldProperty(Convert.ToString(item.FieldName),
                                       "setfflags",
                                        PdfFormField.FF_READ_ONLY,
                                        null);

                            //lstGetPDFItem.Add(item);
                        }
                        catch (Exception ex)
                        {
                            Helper.Log.WriteError(ex);
                        }
                    }
                    else
                    {
                        if (Convert.ToString(item.FieldName).Contains("Owner_Name"))
                        {

                        }
                        pdfFormFields.SetField(Convert.ToString(item.FieldName), item.Value);
                        //lstGetPDFItem.Add(item);
                    }
                }
                // It will fill date in all fields
                if (isFill)
                {
                    string key = string.Empty;
                    string value = string.Empty;
                    foreach (var field in pdfFormFields.Fields)
                    {
                        key = Convert.ToString(field.Key);
                        if (Convert.ToString(field.Key).ToLower().Contains("date"))
                        {
                            value = DateTime.Now.ToString(ProjectConfiguration.GetDateFormat.Replace("mm", "MM"));
                            pdfFormFields.SetField(Convert.ToString(field.Key), value);
                        }
                        else if (Convert.ToString(field.Key).ToLower().Contains("_dd") || Convert.ToString(field.Key).ToLower().Contains("_dd1"))
                        {
                            value = DateTime.Now.Day.ToString();
                            pdfFormFields.SetField(Convert.ToString(field.Key), value);
                        }
                        else if (Convert.ToString(field.Key).ToLower().Contains("_mm") || Convert.ToString(field.Key).ToLower().Contains("_mm1"))
                        {
                            value = DateTime.Now.Month.ToString();
                            pdfFormFields.SetField(Convert.ToString(field.Key), value);
                        }
                        else if (Convert.ToString(field.Key).ToLower().Contains("_yy") || Convert.ToString(field.Key).ToLower().Contains("_yy1"))
                        {
                            value = DateTime.Now.Year.ToString();
                            pdfFormFields.SetField(Convert.ToString(field.Key), value);
                        }
                        //lstGetPDFItem.Add(new PdfItems { FieldName = key, Value = value });
                    }
                }
                pdfStamper.FormFlattening = false;
                //jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                //return jsonPDFData;
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex);
                //return jsonPDFData;
            }
            finally
            {
                // close the pdf
                if (pdfStamper != null)
                    pdfStamper.Close();
                if (pdfReader != null)
                    pdfReader.Close();
                memStream.Close();
                memStream.Dispose();
            }
        }



        #endregion

        #region :: Create Read Only PDF ::

        /// <summary>
        /// Make read only pdf
        /// </summary>
        /// <param name="source">source</param>
        /// <param name="destination">destination</param>
        private void MakeReadOnlyePDF(string source, string destination, string jobId)
        {

            PdfReader reader = null;
            PdfStamper pdfStamper = null;
            if (Path.GetExtension(source).ToLower().Equals(".pdf"))
            {
                if (IsValidPdf(source, ref reader))
                {
                    //string pdfTemplate = source;
                    //MemoryStream memStream = new MemoryStream();
                    //using (FileStream fileStream = System.IO.File.OpenRead(pdfTemplate))
                    //{
                    //    memStream.SetLength(fileStream.Length);
                    //    fileStream.Read(memStream.GetBuffer(), 0, (int)fileStream.Length);
                    //}

                    //PdfReader pdfReader = null;

                    try
                    {
                        //pdfReader = new PdfReader(memStream);
                        //pdfReader = new PdfReader(source);
                        //pdfStamper = new PdfStamper(pdfReader, new FileStream(destination, FileMode.Create));

                        Type type = typeof(PdfReader);
                        FieldInfo info = type.GetField("unethicalreading", BindingFlags.Public | BindingFlags.Static);
                        info.SetValue(reader, true);

                        pdfStamper = new PdfStamper(reader, new FileStream(destination, FileMode.Create));

                        AcroFields pdfFormFields = pdfStamper.AcroFields;
                        //AcroFields af = pdfStamper.AcroFields;
                        foreach (var de in pdfFormFields.Fields)
                        {
                            pdfFormFields.SetFieldProperty(de.Key.ToString(), "setfflags", PdfFormField.FF_READ_ONLY, null);
                        }

                        pdfStamper.FormFlattening = false;

                    }
                    catch (Exception ex)
                    {
                        _log.LogException("Error Date: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Controller: " + "Job Controller" + " Action: " + "MakeReadOnlyPDF", ex);
                    }
                    finally
                    {
                        pdfStamper.Close();
                        reader.Close();

                        //pdfReader.Close();
                        //memStream.Close();
                        //memStream.Dispose();
                    }
                }
                else
                {
                    //RECRegistryHelper.WriteToLogFile("Error Date: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Controller: " + "Job Controller" + " Action: " + "MakeReadOnlyPDF" + " JobID:" + jobId + " Error Message: Invalid PDF Format.");
                    _log.LogException("Error Date: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " Controller: " + "Job Controller" + " Action: " + "MakeReadOnlyPDF" + " JobID:" + jobId + " Error Message: Invalid PDF Format.", null);
                }
            }
        }

        /// <summary>
        /// Check Is Valid Pdf
        /// </summary>
        /// <param name="filepath"></param>
        /// <param name="reader"></param>
        /// <returns>bool</returns>
        private bool IsValidPdf(string filepath, ref PdfReader reader)
        {
            bool Ret = true;
            try
            {
                reader = new PdfReader(filepath);
            }
            catch
            {
                Ret = false;
            }

            return Ret;
        }

        #endregion

        #region Upload Methods

        /// <summary>
        /// Uploads the Owner Signature .
        /// </summary>
        /// <param name="jobId">job id.</param>
        /// <returns>object result</returns>
        [HttpPost]
        public JsonResult UploadOwnerSignature(string jobId)
        {
            List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
            if (Request.Files != null && Request.Files.Count != 0)
            {
                for (var i = 0; i < Request.Files.Count; i++)
                {
                    uploadStatus.Add(GetFileUpload(Request.Files[i], jobId));
                }
            }

            return Json(uploadStatus);
        }

        /// <summary>
        /// Delete Owner Sign From Folder and Table.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="folderName">The user identifier.</param>
        /// <returns>object result</returns>
        [AllowAnonymous]
        public JsonResult DeleteOwnerSignFromFolderandTable(string fileName, string folderName)
        {
            DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + folderName, fileName));
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Checks the status and installation date.
        /// </summary>
        /// <param name="InstallerId">The installer identifier.</param>
        /// <param name="DesignerId">The designer identifier.</param>
        /// <returns>object result</returns>
        [AllowAnonymous]
        public JsonResult CheckStatusAndInstallationDate(string InstallerId, string DesignerId)
        {
            int InstallerID = Convert.ToInt32(InstallerId);
            int DesignerID = Convert.ToInt32(DesignerId);
            DataTable dsUsers = _job.CheckStatusAndInstallationDate(InstallerID, DesignerID).Tables[0];
            string dsUsersTabel = string.Empty;
            if (dsUsers != null && dsUsers.Rows.Count > 0)
            {
                dsUsersTabel = Newtonsoft.Json.JsonConvert.SerializeObject(dsUsers);
                return Json(dsUsersTabel, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);

            }

        }

        /// <summary>
        /// Requireds the validation field
        /// </summary>
        /// <param name="createJob">create Job</param>
        public void RequiredValidationField(CreateJob createJob)
        {
            List<string> lstFields = _jobRules.RemoveRequiredFields(createJob);
            if (lstFields.Count > 0)
            {
                for (int i = 0; i < lstFields.Count; i++)
                {
                    ModelState.Remove(lstFields[i]);
                }
            }
            //ModelState.Remove("BasicDetails.Notes");
            //ModelState.Remove("panelXml");
            //ModelState.Remove("inverterXml");
            //ModelState.Remove("JobElectricians.StreetNumber");
            //ModelState.Remove("JobElectricians.StreetName");
            //ModelState.Remove("JobElectricians.StreetTypeID");
            //ModelState.Remove("JobElectricians.PostalAddressID");
            //ModelState.Remove("JobElectricians.PostalDeliveryNumber");
            //ModelState.Remove("JobElectricians.Town");
            //ModelState.Remove("JobElectricians.State");
            //ModelState.Remove("JobElectricians.PostCode");

            //ModelState.Remove("JobElectricians.Phone");
            //ModelState.Remove("JobElectricians.LicenseNumber");

            //ModelState.Remove("JobInstallerDetails.FirstName");
            //ModelState.Remove("JobInstallerDetails.Surname");
            //ModelState.Remove("JobInstallerDetails.Phone");
            //ModelState.Remove("JobInstallerDetails.UnitTypeID");
            //ModelState.Remove("JobInstallerDetails.UnitNumber");
            //ModelState.Remove("JobInstallerDetails.StreetNumber");
            //ModelState.Remove("JobInstallerDetails.StreetName");
            //ModelState.Remove("JobInstallerDetails.StreetTypeID");
            //ModelState.Remove("JobInstallerDetails.PostalAddressID");
            //ModelState.Remove("JobInstallerDetails.PostalDeliveryNumber");
            //ModelState.Remove("JobInstallerDetails.Town");
            //ModelState.Remove("JobInstallerDetails.State");
            //ModelState.Remove("JobInstallerDetails.PostCode");
            //ModelState.Remove("JobOwnerDetails.OwnerType");
            //ModelState.Remove("JobOwnerDetails.CompanyName");
            //ModelState.Remove("JobOwnerDetails.FirstName");
            //ModelState.Remove("JobOwnerDetails.LastName");
            //ModelState.Remove("JobInstallerDetails.ElectricianID");
            //if (createJob.JobInstallationDetails.AddressID == 2)
            //{
            //    ModelState.Remove("JobInstallationDetails.StreetNumber");
            //    ModelState.Remove("JobInstallationDetails.StreetName");
            //    ModelState.Remove("JobInstallationDetails.StreetTypeID");
            //}

            //if (createJob.JobInstallationDetails.AddressID == 1)
            //{
            //    ModelState.Remove("JobInstallationDetails.PostalAddressID");
            //    ModelState.Remove("JobInstallationDetails.PostalDeliveryNumber");
            //    if (createJob.JobInstallationDetails.UnitNumber != null && createJob.JobInstallationDetails.UnitTypeID != 0)
            //    {
            //        ModelState.Remove("JobInstallationDetails.StreetNumber");
            //    }

            //}

            //if (createJob.JobOwnerDetails.AddressID == 2)
            //{
            //    ModelState.Remove("JobOwnerDetails.StreetNumber");
            //    ModelState.Remove("JobOwnerDetails.StreetName");
            //    ModelState.Remove("JobOwnerDetails.StreetTypeID");
            //}
            //if (createJob.JobOwnerDetails.AddressID == 1)
            //{
            //    ModelState.Remove("JobOwnerDetails.PostalAddressID");
            //    ModelState.Remove("JobOwnerDetails.PostalDeliveryNumber");
            //    if (createJob.JobOwnerDetails.UnitNumber != null && createJob.JobOwnerDetails.UnitTypeID != 0)
            //    {
            //        ModelState.Remove("JobOwnerDetails.StreetNumber");
            //    }

            //}
            //if (createJob.BasicDetails.JobType == 2)
            //{
            //    ModelState.Remove("JobInstallationDetails.NMI");
            //}

        }

        /// <summary>
        /// open th stccompliance
        /// </summary>
        /// <param name="uniq_param">uniq_param</param>
        /// <param name="JobId">JobId</param>
        /// <param name="jobDetailsId">jobDetailsId</param>
        /// <returns>partial view result</returns>
        [HttpPost]
        public PartialViewResult _StatusCompliance(string uniq_param, string JobId, int jobDetailsId)
        {
            int jobID = Convert.ToInt32(JobId);
            var Connectionvalues = from SystemEnums.ConnectionType s in Enum.GetValues(typeof(SystemEnums.ConnectionType))
                                   select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
            ViewData["ConnectionType"] = new SelectList(Connectionvalues, "ID", "Name");

            var Mountingvalues = from SystemEnums.MountingType s in Enum.GetValues(typeof(SystemEnums.MountingType))
                                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
            ViewData["MountingType"] = new SelectList(Mountingvalues, "ID", "Name");
            CreateJob createJob = _job.GetJobByID(jobID);
            STCJobHistory STCJobHistory = new Entity.Job.STCJobHistory();
            STCJobHistory.lstSTCJobHistory = _job.GetSTCJobHistory(ProjectSession.LoggedInUserId, jobID, ProjectSession.UserTypeId);
            StcComplianceCheck stcComplianceCheck = new StcComplianceCheck();
            stcComplianceCheck.lstSubmission = _job.GetStcSubmissionCount(jobID);
            stcComplianceCheck.JobId = jobID;
            stcComplianceCheck.STCJobDetailsID = jobDetailsId;
            stcComplianceCheck.Guid = Convert.ToString(jobID);
            stcComplianceCheck = GetStcComplianceDetail(stcComplianceCheck);
            return PartialView("_StatusCompliance", new Tuple<CreateJob, StcComplianceCheck, STCJobHistory>(createJob, stcComplianceCheck, STCJobHistory));
        }

        /// <summary>
        /// Get stc compliance details by id.
        /// </summary>
        /// <param name="jobID">job ID</param>
        /// <param name="stcJobDetailsID">stcJobDetails ID</param>
        /// <returns>action result</returns>
        public ActionResult GetComplianceCheck(int jobID, int stcJobDetailsID)
        {
            StcComplianceCheck stcComplianceCheck = _job.GetSTCJobCompliance(jobID, stcJobDetailsID);
            stcComplianceCheck.JobId = jobID;
            stcComplianceCheck.STCJobDetailsID = stcJobDetailsID;
            stcComplianceCheck.Guid = Convert.ToString(jobID);
            stcComplianceCheck = GetStcComplianceDetail(stcComplianceCheck);

            //string xmlPath = ProjectConfiguration.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + jobID + "\\" + "Notes";
            //if (System.IO.Directory.Exists(xmlPath))
            //{
            //    string[] files = Directory.GetFiles(xmlPath, "*.xml");
            //    if (files.Length > 0)
            //    {
            //        for (int i = 0; i < files.Length; i++)
            //        {
            //            XmlDocument doc = new XmlDocument();
            //            doc.Load(files[i]);

            //            XmlNodeList Notes = doc.DocumentElement.SelectNodes("/Notes/Note");
            //            foreach (XmlNode node in Notes)
            //            {
            //                string notestype = node.SelectSingleNode("NotesType").InnerText;
            //                string STCJobDetailsIDXML = node.SelectSingleNode("STCJobDetailsID").InnerText;
            //                int NotesTypeValue = !string.IsNullOrEmpty(notestype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), notestype).GetHashCode()) : 0;
            //                if(NotesTypeValue == 3 && STCJobDetailsIDXML == stcJobDetailsID.ToString())
            //                {
            //                    //string noteswithouthtmltags = Regex.Replace(node.SelectSingleNode("NotesDescription").InnerText, "<.*?>", String.Empty);
            //                    stcComplianceCheck.Notes = node.SelectSingleNode("NotesDescription").InnerText;
            //                    //stcComplianceCheck.Notes = Regex.Replace(node.SelectSingleNode("NotesDescription").InnerText, "<.*?>", String.Empty);
            //                }

            //            }
            //        }
            //    }
            //}
            return PartialView("_STCJobCompliance", stcComplianceCheck);
        }

        /// <summary>
        /// Gets the compliance detail.
        /// </summary>
        /// <param name="stcComplianceCheck">The compliance check.</param>
        /// <returns>check detail</returns>
        public StcComplianceCheck GetStcComplianceDetail(StcComplianceCheck stcComplianceCheck)
        {
            int jobID = stcComplianceCheck.JobId;
            int stcJobDetailsID = stcComplianceCheck.STCJobDetailsID;
            int preApprOrConne = FormBot.Helper.SystemEnums.JobStage.STC.GetHashCode();
            stcComplianceCheck.lstStcStatus = _emailService.GetStatusForPreApprovalAndConnectionForComplaince(preApprOrConne, ProjectSession.UserTypeId);
            stcComplianceCheck.lstUserDocument = _job.GetSTCDocumentBySTCJobDetailsID(stcJobDetailsID);
            string description = string.Empty;
            DateTime createdDate;
            string callMadeBy;
            if (stcComplianceCheck.CallDateTime != null)
            {
                ViewData["CallDate"] = stcComplianceCheck.CallDate;
                ViewData["CallTime"] = stcComplianceCheck.CallTime;
            }

            string jobType = string.Empty;
            string stcSettlementTerm = string.Empty;
            string stcSettlementDate = string.Empty;
            string stcDate = "";
            decimal stcPrice = 0;
            int stcStatus = 0;
            string address = string.Empty;
            string phone = string.Empty;
            string stcDocument = string.Empty;
            string firstName = string.Empty;
            string lastName = string.Empty;
            string ownerType = string.Empty;
            string companyName = string.Empty;
            string changedBy = string.Empty;
            bool isClassic = true;
            int createdby = stcComplianceCheck.CreatedBy;
            DataSet dsStc = _job.GetStcComplianceDetails(jobID, stcJobDetailsID, createdby);
            if (dsStc != null && dsStc.Tables.Count > 0)
            {
                if (dsStc.Tables[0] != null && dsStc.Tables[0].Rows.Count > 0)
                {
                    stcSettlementTerm = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[0].Rows[0]["STCSettlementTerm"])) ? dsStc.Tables[0].Rows[0]["STCSettlementTerm"].ToString() : string.Empty;
                    stcDate = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[0].Rows[0]["STCSettlementDate"])) ? Convert.ToDateTime(dsStc.Tables[0].Rows[0][1]).ToString("dd/MM/yyyy HH:mm tt") : string.Empty;
                    stcPrice = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[0].Rows[0]["STCPrice"])) ? Convert.ToDecimal(dsStc.Tables[0].Rows[0]["STCPrice"].ToString()) : 0;
                    stcStatus = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[0].Rows[0]["STCStatus"])) ? Convert.ToInt32(dsStc.Tables[0].Rows[0]["STCStatus"].ToString()) : 0;
                }

            }
            if (dsStc.Tables[1] != null && dsStc.Tables[1].Rows.Count > 0)
            {
                address = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["address"])) ? dsStc.Tables[1].Rows[0]["address"].ToString() : string.Empty;
                phone = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["Phone"])) ? dsStc.Tables[1].Rows[0]["Phone"].ToString() : string.Empty;
                stcSettlementDate = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["STCLastUpdatedDate"])) ? Convert.ToDateTime(dsStc.Tables[1].Rows[0]["STCLastUpdatedDate"]).ToString("dd/MM/yyyy  HH:mm tt") : string.Empty;
                jobType = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["JobType"])) ? dsStc.Tables[1].Rows[0]["JobType"].ToString() : string.Empty;
                firstName = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["FirstName"])) ? dsStc.Tables[1].Rows[0]["FirstName"].ToString() : string.Empty;
                lastName = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["LastName"])) ? dsStc.Tables[1].Rows[0]["LastName"].ToString() : string.Empty;
                ownerType = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["OwnerType"])) ? dsStc.Tables[1].Rows[0]["OwnerType"].ToString() : string.Empty;
                companyName = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[1].Rows[0]["CompanyName"])) ? dsStc.Tables[1].Rows[0]["CompanyName"].ToString() : string.Empty;
                isClassic = dsStc.Tables[1].Rows[0]["isClassic"] != DBNull.Value ? Convert.ToBoolean(dsStc.Tables[1].Rows[0]["isClassic"]) : false;
            }

            if (dsStc.Tables[3] != null && dsStc.Tables[3].Rows.Count > 0)
            {
                string latestSTCJobDetailsID = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[3].Rows[0]["STCJobDetailsID"])) ? Convert.ToString(dsStc.Tables[3].Rows[0]["STCJobDetailsID"]) : string.Empty;
                if (latestSTCJobDetailsID == Convert.ToString(stcJobDetailsID))
                {
                    ViewData["IsLastSubmission"] = "Yes";
                }
                else
                {
                    ViewData["IsLastSubmission"] = "No";
                }

            }
            if (dsStc.Tables[4] != null && dsStc.Tables[4].Rows.Count > 0)
            {
                changedBy = !string.IsNullOrEmpty(Convert.ToString(dsStc.Tables[4].Rows[0]["changedBy"])) ? Convert.ToString(dsStc.Tables[4].Rows[0]["changedBy"]) : string.Empty;
            }

            if (stcComplianceCheck.AdditionalInformation == null && ownerType != "Individual" && ownerType != "" && ownerType != null)
            {
                stcComplianceCheck.AdditionalInformation = firstName + " " + lastName + " is the primary contact for any information regarding the solar installation on that property for " + companyName + ".";
            }

            if (ownerType != "Individual" && ownerType != "" && ownerType != null)
            {
                ViewData["OwnerType"] = "Organisation";
            }
            else
            {
                ViewData["OwnerType"] = "FullName";
            }

            stcComplianceCheck.JobType = Convert.ToByte(jobType);
            stcComplianceCheck.lstStcDocuments = new List<string>();
            string stcDocumentsPath = ProjectConfiguration.JobDocumentsToSaveFullPath + jobID + "/" + (Helper.SystemEnums.JobStage.STCTrade.ToString());
            stcDocumentsPath += "/" + stcJobDetailsID;
            if (Directory.Exists(stcDocumentsPath))
            {
                foreach (var item in Directory.GetFiles(stcDocumentsPath))
                {
                    stcComplianceCheck.lstStcDocuments.Add(new FileInfo(item).Name);
                }
            }

            string status = ((SystemEnums.STCJobStatus)stcStatus).ToString();
            description = stcComplianceCheck.Description;
            createdDate = stcComplianceCheck.CreatedDate;
            callMadeBy = stcComplianceCheck.CallMadeBy;
            if (stcStatus == 21)
            {
                description = "You have successfully traded.";
            }

            if (stcStatus == 11)
            {
                description = "Resubmitting due to compliance issues that was reviewed by" + "   " + callMadeBy + "   " + "on" + "   " + stcDate + ".";
            }

            if (stcStatus == 16 && (description == null || description == ""))
            {
                description = "Your job is currently under review. Please be patient while we undertake the process of verifying the details you have submitted.";
            }

            if (stcStatus == 14)
            {
                DataSet dsDescription = _job.GetFailureReasonByJobId(stcComplianceCheck.JobId);
                if (dsDescription.Tables.Count > 0 && dsDescription.Tables[0] != null && dsDescription.Tables[0].Rows.Count > 0)
                {
                    description = "Failure Notice from Rec Registry.";
                    foreach (DataRow dr in dsDescription.Tables[0].Rows)
                    {
                        description += "<br>" + "- " + dr["reason"];
                        //remove auditor details
                        if (!string.IsNullOrWhiteSpace(description) && description.Contains("Auditor"))
                        {
                            description = description.Remove(description.IndexOf("Auditor"));
                        }
                    }
                }

            }

            if (stcSettlementTerm != "" && stcSettlementTerm != "")
            {
                ViewData["STCSettlementTerm"] = Enum.GetName(typeof(SystemEnums.STCSettlementTerm), Convert.ToInt32(stcSettlementTerm));
            }
            else
            {
                ViewData["STCSettlementTerm"] = stcSettlementTerm;
            }

            if (ViewData["STCSettlementTerm"].ToString() == "Hour24")
            {
                ViewData["STCSettlementTerm"] = "24 Hour";
            }

            if (ViewData["STCSettlementTerm"].ToString() == "Days3")
            {
                ViewData["STCSettlementTerm"] = "3 Days";
            }

            if (ViewData["STCSettlementTerm"].ToString() == "Days7")
            {
                ViewData["STCSettlementTerm"] = "7 Days";
            }

            if (ViewData["STCSettlementTerm"].ToString() == "CERApproved")
            {
                ViewData["STCSettlementTerm"] = "CER Approved";
                if (stcStatus == 11)
                {
                    description = "Resubmitting due to compliance issues that was reviewed by" + "   " + callMadeBy + "   " + "on" + " Approval Date.";
                }

            }

            if (ViewData["STCSettlementTerm"].ToString() == "PartialPayment")
            {
                ViewData["STCSettlementTerm"] = "Partial Payment";
            }

            if (ViewData["STCSettlementTerm"].ToString() == "UpFront")
            {
                ViewData["STCSettlementTerm"] = "Up Front";
            }

            ViewData["STCSettlementDate"] = stcSettlementDate.ToString();
            ViewData["STCPrice"] = stcPrice;
            ViewData["STCStatus"] = status;
            ViewData["address"] = address + "," + phone;
            ViewData["phone"] = phone;
            ViewData["StcDocument"] = stcDocument;
            //ViewData["Description"] = description;
            ViewData["Description"] = !string.IsNullOrEmpty(description) ? Regex.Replace(HttpUtility.HtmlDecode(description), @"\r\n?|\n", "<br>") : description;
            ViewData["CreatedDate"] = createdDate;
            ViewData["CallMadeBy"] = callMadeBy;
            ViewData["changedBy"] = changedBy;
            ViewData["createdby"] = createdby;
            ViewData["isClassic"] = isClassic;

            if (stcComplianceCheck.JobType == 1)
            {
                var values = from SystemEnums.PVDInstallationType s in Enum.GetValues(typeof(SystemEnums.PVDInstallationType))
                             select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
                ViewData["InstallationTypes"] = new SelectList(values, "ID", "Name");
            }
            else
            {
                var values = from SystemEnums.SWHInstallationType s in Enum.GetValues(typeof(SystemEnums.SWHInstallationType))
                             select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
                ViewData["InstallationTypes"] = new SelectList(values, "ID", "Name");
            }

            var Connectionvalues = from SystemEnums.ConnectionType s in Enum.GetValues(typeof(SystemEnums.ConnectionType))
                                   select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
            ViewData["ConnectionType"] = new SelectList(Connectionvalues, "ID", "Name");
            var Mountingvalues = from SystemEnums.MountingType s in Enum.GetValues(typeof(SystemEnums.MountingType))
                                 select new { ID = s.GetHashCode(), Name = s.ToString().Replace("_", " ") };
            ViewData["MountingType"] = new SelectList(Mountingvalues, "ID", "Name");
            stcComplianceCheck.UserTypeId = ProjectSession.UserTypeId;
            stcComplianceCheck.Status = Convert.ToByte(stcStatus);
            return stcComplianceCheck;
        }

        /// <summary>
        /// Updates the panel waltage.
        /// </summary>
        /// <param name="PVModuleId">The pv module identifier.</param>
        /// <param name="wattage">The wattage.</param>
        /// <param name="jobID">The job identifier.</param>
        /// <returns>action result</returns>
        public ActionResult UpdatePanelWaltage(int PVModuleId, int wattage, int jobID)
        {
            _job.UpdatePVModuleWaltage(PVModuleId, wattage);
            CreateJob createJob = _job.GetJobByID(jobID);
            return PartialView("_StcPVSystemCheck", new Tuple<CreateJob>(createJob));
        }

        /// <summary>
        /// Views the download file for STC.
        /// </summary>
        /// <param name="FileName">Name of the file.</param>
        /// <param name="FolderName">Name of the folder.</param>
        /// <returns>action result</returns>
        [HttpGet]
        public ActionResult ViewDownloadFileForStc(string FileName, string FolderName)
        {
            var path = Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + FolderName, FileName);
            if (System.IO.File.Exists(path))
            {
                var fileData = System.IO.File.ReadAllBytes(path);

                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.ContentType = "application/octet-stream";
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename=" + FileName));
                Response.BinaryWrite(fileData);
            }


            //Response.ContentType = "application/octet-stream";
            //Response.AddHeader("content-disposition", "attachment;  filename=\"" + FileName + "\"");
            //Response.BinaryWrite(fileData);
            //Response.End();
            return Json("", JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the job stage count.
        /// </summary>
        /// <param name="reseller">reseller.</param>
        /// <param name="ram">ram.</param>
        /// <param name="sId">The identifier.</param>
        /// <returns>action result</returns>
        [HttpPost]
        public ActionResult GetSTCJobStageCount(string reseller, string ram, string sId, string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", int year = 0)
        {
            //CommonBAL.ValidateYearForGridData(ref year);
            int ResellerId = !string.IsNullOrEmpty(reseller) ? Convert.ToInt32(reseller) : 0;
            int RamId = !string.IsNullOrEmpty(ram) ? Convert.ToInt32(ram) : 0;
            int SolarCompanyId = !string.IsNullOrEmpty(sId) ? Convert.ToInt32(sId) : 0;
            var lstSTCJobStagesCount = CommonBAL.GetSTCCount(ResellerId, RamId, SolarCompanyId, isAllScaJobView, isShowOnlyAssignJobsSCO, year);
            //var lstSTCJobStagesCount = _job.GetSTCJobStagesWithCountByYear(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, ResellerId, RamId, SolarCompanyId, isAllScaJobView, isShowOnlyAssignJobsSCO, year);
            return this.Json(new { lstSTCJobStagesCount, success = true });
        }
        public string getValueFromPropertyname(JobList oJobList, UserWiseColumns oUserWiseColumns)
        {
            var data = GetPropValue(oJobList, oUserWiseColumns.Name);
            return data == null ? "" : Convert.ToString(data);
        }
        public object GetPropValue(object src, string propName)
        {
            return src.GetType().GetProperty(propName).GetValue(src, null);
        }
        /// <summary>
        /// Gets the sub records for job.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>string name</returns>
        public string GetSubRecordsForJob(string id, string isKendo)
        {
            int jID = !string.IsNullOrEmpty(id) ? Convert.ToInt32(id) : 0;
            List<JobList> lstsubJobs = _job.GetSTCSubRecordsForJob(jID);
            if (Convert.ToBoolean(isKendo))
            {
                return GetSubRecordsBasedOnUserWiseColumn(jID, lstsubJobs);
            }
            else
            {
                return GetSubRecordsForStaticSTCSubmission(jID, lstsubJobs);
            }


        }


        /// <summary>
        /// Get Sub Records and arrange then userwise column order 
        /// </summary>
        /// <param name="jID"></param>
        /// <param name="lstsubJobs"></param>
        /// <returns></returns>
        public string GetSubRecordsBasedOnUserWiseColumn(int jID, List<JobList> lstsubJobs)
        {
            if (jID > 0)
            {
                List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.STCSubmissionView.GetHashCode());
                StringBuilder sb = new StringBuilder();
                if (lstsubJobs != null && lstsubJobs.Count > 0)
                {
                    foreach (JobList jbl in lstsubJobs)
                    {
                        sb.Append("<tr class='hidden-row'>");
                        sb.Append("<td>");
                        sb.Append("</td>");
                        sb.Append("<td>");
                        sb.Append("</td>");
                        foreach (var item in listUserWiseColumns)
                        {
                            if ((ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8) && (item.Name == "JobTypeId" || item.Name == "AccountManager"))
                            {
                                continue;
                            }
                            else if (item.Name == "PVDSWHCode")
                            {
                                if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 5)
                                {
                                    if (!string.IsNullOrEmpty(jbl.PVDSWHCode))
                                    {
                                        string imgedit = "background:url(../images/edit-icon.png) no-repeat center; text-decoration:none;margin-left:5px";
                                        string result = jbl.PVDSWHCode + "<a title='edit' href='#' onclick='AddUpdatePVDSWHCode(this," + jbl.STCJobDetailsID + "," + "\"" + jbl.PVDSWHCode + "\"" + ");' onkeypress='return ValidateLettersWithSpaceOnly(event);' onblur='return CheckTextContent();' class='edit' style=' " + imgedit + "'>&nbsp;&nbsp;</a>";
                                        sb.Append("<td>" + result + "</td>");
                                    }
                                    else
                                    {
                                        string imgadd = "background:url(../images/plus.png) no-repeat center; text-decoration:none;margin-left:5px";
                                        string result = "<a class='img-border' title='edit' href='#' onclick='AddUpdatePVDSWHCode(this," + jbl.STCJobDetailsID + "" + ");' onkeypress='return ValidateLettersWithSpaceOnly(event);' onblur='return CheckTextContent();' class='edit' style='" + imgadd + "'>&nbsp;&nbsp;</a>";
                                        sb.Append("<td>" + result + "</td>");
                                    }

                                }
                            }
                            else if (item.Name == "ComplianceNotes")
                            {
                                sb.Append("<td>" + jbl.ComplianceNotes + "</td>");
                            }
                            else if (item.Name == "IsGst")
                            {
                                if (jbl.IsGst)
                                {
                                    sb.Append("<td>" + jbl.STCPrice + "+GST</td>");
                                }
                                else
                                {
                                    sb.Append("<td>" + jbl.STCPrice + "</td>");
                                }
                            }
                            else if (item.Name == "STCSettlementTerm")
                            {
                                if (jbl.STCSettlementTerm > 0)
                                {
                                    string settlementTerm = string.Empty;
                                    Type enumType = typeof(FormBot.Helper.SystemEnums.STCSettlementTerm);
                                    Type descriptionAttributeType = typeof(System.ComponentModel.DescriptionAttribute);
                                    MemberInfo member = enumType.GetMember(Enum.GetName(enumType, jbl.STCSettlementTerm)).Single();
                                    settlementTerm = ((System.ComponentModel.DescriptionAttribute)Attribute.GetCustomAttribute(member, descriptionAttributeType)).Description;

                                    if (jbl.STCSettlementTerm == 10)
                                    {
                                        MemberInfo memberCustom = enumType.GetMember(Enum.GetName(enumType, jbl.CustomSettlementTerm)).Single();
                                        settlementTerm = settlementTerm + " - " + ((System.ComponentModel.DescriptionAttribute)Attribute.GetCustomAttribute(memberCustom, descriptionAttributeType)).Description;
                                    }
                                    sb.Append("<td>" + settlementTerm + "</td>");
                                }
                                else
                                {
                                    sb.Append("<td>24 Hour</td>");
                                }
                            }
                            else if (item.Name == "STCSubmissionDate")
                            {
                                if (jbl.STCSubmissionDate != null)
                                {
                                    sb.Append("<td>" + jbl.STCSubmissionDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "</td>");
                                }
                                else
                                {
                                    sb.Append("<td></td>");
                                }
                            }
                            else if (item.Name == "STCSettlementDate")
                            {
                                if (jbl.STCSettlementDate != null)
                                {
                                    string imgedit = "background:url(../images/edit-icon.png) no-repeat center; text-decoration:none;margin-left:5px";
                                    string result = jbl.STCSettlementDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "<a title='edit' href='#' onclick='UpdateSettlementDate(this," + jbl.STCJobDetailsID + ",\"" + jbl.STCSettlementDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "\");' class='edit' style='" + imgedit + "'>&nbsp;&nbsp;</a>";
                                    sb.Append("<td>" + result + "</td>");
                                }
                                else
                                {
                                    sb.Append("<td>On Approval</td>");
                                }
                            }
                            else if (item.Name == "IsInvoiced" || item.Name == "IsCreditNote" || item.Name == "JobTypeId" || item.Name == "STCJobComplianceID")
                            {
                                sb.Append("<td></td>");
                            }
                            else if (item.Name == "IsSPVRequired")
                            {
                                if (jbl.IsSPVRequired == true)
                                {
                                    string IsSPVRequiredlblstyle = "font - weight: bold; color: Green";
                                    sb.Append("<td><span style='" + IsSPVRequiredlblstyle + "'>Yes</span></td>");
                                }
                                else
                                {
                                    string IsSPVRequiredlblstyle = "font - weight: bold; color: red";
                                    sb.Append("<td><span style='" + IsSPVRequiredlblstyle + "'>No</span></td>");
                                }
                            }
                            else if (item.Name == "IsSPVInstallationVerified")
                            {
                                if (jbl.IsSPVInstallationVerified == null)
                                {
                                    string IsSPVInstallationVerifiedlblstyle = "font - weight: bold;";
                                    sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Not Yet Verified</span></td>");
                                }
                                else if (jbl.IsSPVInstallationVerified == true)
                                {
                                    string IsSPVInstallationVerifiedlblstyle = "font - weight: bold; color: Green";
                                    sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Verified</span></td>");
                                }
                                else
                                {
                                    string IsSPVInstallationVerifiedlblstyle = "font - weight: bold; color: red";
                                    sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Verify Failed</span></td>");
                                }
                            }
                            else if (item.Name == "CERAuditedDate")
                            {
                                if (jbl.CERAuditedDate != null)
                                {
                                    sb.Append("<td>" + jbl.CERAuditedDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "</td>");
                                }
                                else
                                {
                                    sb.Append("<td></td>");
                                }
                            }
                            else
                            {
                                sb.Append("<td>" + getValueFromPropertyname(jbl, item) + "</td>");
                            }

                        }
                        if (jbl.STCJobDetailsID > 0)
                        {
                            string imgassign = "background:url(../Images/compliance-check.png) no-repeat center; text-decoration:none;";
                            string assignHref = "javascript:StcCompliance(this,'" + jbl.JobID + "','" + jbl.STCJobDetailsID + "')";
                            string result = "<a href=" + assignHref + " class='action edit' style=\'" + imgassign + "\' title='Compliance Check'>&nbsp; &nbsp; &nbsp; &nbsp;</a>&nbsp;&nbsp;";
                            sb.Append("<td>" + result + "</td>");
                        }
                        else
                        {
                            sb.Append("<td></td>");
                        }

                        sb.Append("</tr>");
                    }
                }
                else
                {
                    sb.Append(string.Empty);
                }

                return sb.ToString();
            }
            else
            {
                return string.Empty;
            }
        }


        public string GetSubRecordsForStaticSTCSubmission(int jID, List<JobList> lstsubJobs)
        {
            if (jID > 0)
            {
                StringBuilder sb = new StringBuilder();
                if (lstsubJobs != null && lstsubJobs.Count > 0)
                {
                    foreach (JobList jbl in lstsubJobs)
                    {
                        sb.Append("<tr class='hidden-row'>");
                        sb.Append("<td>");
                        sb.Append("</td>");
                        sb.Append("<td>");
                        sb.Append("</td>");
                        if (jbl.IsSPVRequired == true)
                        {
                            string IsSPVRequiredlblstyle = "font - weight: bold; color: Green";
                            sb.Append("<td><span style='" + IsSPVRequiredlblstyle + "'>Yes</span></td>");
                        }
                        else
                        {
                            string IsSPVRequiredlblstyle = "font - weight: bold; color: red";
                            sb.Append("<td><span style='" + IsSPVRequiredlblstyle + "'>No</span></td>");
                        }

                        if (jbl.IsSPVInstallationVerified == null)
                        {
                            string IsSPVInstallationVerifiedlblstyle = "font - weight: bold;";
                            sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Not Yet Verified</span></td>");
                        }
                        else if (jbl.IsSPVInstallationVerified == true)
                        {
                            string IsSPVInstallationVerifiedlblstyle = "font - weight: bold; color: Green";
                            sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Verified</span></td>");
                        }
                        else
                        {
                            string IsSPVInstallationVerifiedlblstyle = "font - weight: bold; color: red";
                            sb.Append("<td><span style='" + IsSPVInstallationVerifiedlblstyle + "'>Verify Failed</span></td>");
                        }

                        //sb.Append("<td>" + jbl.IsSPVRequired + "</td>");
                        sb.Append("<td>" + jbl.RefNumberOwnerName + "</td>");
                        sb.Append("<td>" + jbl.InstallationAddress + "</td>");
                        if (jbl.STCStatusId == 19 && !Convert.ToBoolean(jbl.IsSPVInstallationVerified))
                            sb.Append("<td>" + jbl.STCStatus + " NOT Done </td>");
                        else
                            sb.Append("<td>" + jbl.STCStatus + "</td>");
                        sb.Append("<td>" + jbl.GBBatchRECUploadId + "</td>");
                        sb.Append("<td>" + jbl.strRECBulkUploadTime + "</td>");
                        sb.Append("<td>" + jbl.SolarCompany + "</td>");
                        if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 5)
                        {
                            if (!string.IsNullOrEmpty(jbl.PVDSWHCode))
                            {
                                string imgedit = "background:url(../images/edit-icon.png) no-repeat center; text-decoration:none;margin-left:5px";
                                string result = jbl.PVDSWHCode + "<a title='edit' href='#' onclick='AddUpdatePVDSWHCode(this," + jbl.STCJobDetailsID + "," + "\"" + jbl.PVDSWHCode + "\"" + ");' onkeypress='return ValidateLettersWithSpaceOnly(event);' onblur='return CheckTextContent();' class='edit' style=' " + imgedit + "'>&nbsp;&nbsp;</a>";
                                sb.Append("<td>" + result + "</td>");
                            }
                            else
                            {
                                string imgadd = "background:url(../images/plus.png) no-repeat center; text-decoration:none;margin-left:5px";
                                string result = "<a class='img-border' title='edit' href='#' onclick='AddUpdatePVDSWHCode(this," + jbl.STCJobDetailsID + "" + ");' onkeypress='return ValidateLettersWithSpaceOnly(event);' onblur='return CheckTextContent();' class='edit' style='" + imgadd + "'>&nbsp;&nbsp;</a>";
                                sb.Append("<td>" + result + "</td>");
                            }

                        }

                        sb.Append("<td class=\"dt-right\">" + jbl.STC + "</td>");
                        if (jbl.IsGst)
                        {
                            sb.Append("<td>" + jbl.STCPrice + "+GST</td>");
                        }
                        else
                        {
                            sb.Append("<td>" + jbl.STCPrice + "</td>");
                        }

                        if (jbl.STCSettlementTerm > 0)
                        {
                            string settlementTerm = string.Empty;

                            Type enumType = typeof(FormBot.Helper.SystemEnums.STCSettlementTerm);
                            Type descriptionAttributeType = typeof(System.ComponentModel.DescriptionAttribute);
                            MemberInfo member = enumType.GetMember(Enum.GetName(enumType, jbl.STCSettlementTerm)).Single();
                            settlementTerm = ((System.ComponentModel.DescriptionAttribute)Attribute.GetCustomAttribute(member, descriptionAttributeType)).Description;

                            if (jbl.STCSettlementTerm == 10)
                            {
                                MemberInfo memberCustom = enumType.GetMember(Enum.GetName(enumType, jbl.CustomSettlementTerm)).Single();
                                settlementTerm = settlementTerm + " - " + ((System.ComponentModel.DescriptionAttribute)Attribute.GetCustomAttribute(memberCustom, descriptionAttributeType)).Description;
                            }

                            //if (jbl.STCSettlementTerm == 1)
                            //{
                            //    settlementTerm = "24 Hour";
                            //}
                            //else if (jbl.STCSettlementTerm == 2)
                            //{
                            //    settlementTerm = "3 Days";
                            //}
                            //else if (jbl.STCSettlementTerm == 3)
                            //{
                            //    settlementTerm = "7 Days";
                            //}
                            //else if (jbl.STCSettlementTerm == 4)
                            //{
                            //    settlementTerm = "CER Approved";
                            //}
                            //else if (jbl.STCSettlementTerm == 5)
                            //{
                            //    settlementTerm = "Partial Payment";
                            //}
                            //else if (jbl.STCSettlementTerm == 6)
                            //{
                            //    settlementTerm = "Upfront";
                            //}
                            //else if (jbl.STCSettlementTerm == 7)
                            //{
                            //    settlementTerm = "Rapid-Pay";
                            //}
                            //else if (jbl.STCSettlementTerm == 8)
                            //{
                            //    settlementTerm = "Opti-Pay";
                            //}
                            //else if (jbl.STCSettlementTerm == 9)
                            //{
                            //    settlementTerm = "Commercial";
                            //}
                            //else if (jbl.STCSettlementTerm == 10)
                            //{
                            //    settlementTerm = "Custom";
                            //}
                            //else if (jbl.STCSettlementTerm == 11)
                            //{
                            //    settlementTerm = "InvoiceStc";
                            //}
                            //else if (jbl.STCSettlementTerm == 12)
                            //{
                            //    settlementTerm = "PeakPay";
                            //}
                            sb.Append("<td>" + settlementTerm + "</td>");
                        }
                        else
                        {
                            sb.Append("<td>24 Hour</td>");
                        }

                        if (jbl.STCSubmissionDate != null)
                        {
                            sb.Append("<td>" + jbl.STCSubmissionDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "</td>");
                        }
                        else
                        {
                            sb.Append("<td></td>");
                        }

                        if (jbl.STCSettlementDate != null)
                        {
                            string imgedit = "background:url(../images/edit-icon.png) no-repeat center; text-decoration:none;margin-left:5px";
                            string result = jbl.STCSettlementDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "<a title='edit' href='#' onclick='UpdateSettlementDate(this," + jbl.STCJobDetailsID + ",\"" + jbl.STCSettlementDate.Value.ToString(ProjectConfiguration.GetDateFormat.Replace('m', 'M')) + "\");' class='edit' style='" + imgedit + "'>&nbsp;&nbsp;</a>";
                            sb.Append("<td>" + result + "</td>");
                        }
                        else
                        {
                            sb.Append("<td>On Approval</td>");
                        }

                        sb.Append("<td>" + jbl.ComplianceOfficer + "</td>");
                        sb.Append("<td></td>");
                        if (jbl.STCJobDetailsID > 0)
                        {
                            string imgassign = "background:url(../Images/compliance-check.png) no-repeat center; text-decoration:none;";
                            string assignHref = "javascript:StcCompliance('" + jbl.JobID + "','" + jbl.STCJobDetailsID + "')";
                            string result = "<a href=" + assignHref + " class='action edit' style=\'" + imgassign + "\' title='Compliance Check'>&nbsp; &nbsp; &nbsp; &nbsp;</a>&nbsp;&nbsp;";
                            sb.Append("<td>" + result + "</td>");
                        }
                        else
                        {
                            sb.Append("<td></td>");
                        }



                        sb.Append("</tr>");
                    }
                }
                else
                {
                    sb.Append(string.Empty);
                }

                return sb.ToString();
            }
            else
            {
                return string.Empty;
            }

        }

        /// <summary>
        /// Saves the complaince check.
        /// </summary>
        /// <param name="stcComplianceCheck">The compliance check.</param>
        /// <returns>object result</returns>
        [HttpPost]
        public async Task<JsonResult> SaveSTCComplainceCheck(StcComplianceCheck stcComplianceCheck, int isMultipleRecords)
        {
            try
            {
                ModelState.Remove("FileName");
                ModelState.Remove("AdditionalInformation");
                ModelState.Remove("stcComplianceCheck.FileName");
                if (ModelState.IsValid)
                {
                    string description = string.Empty;
                    StatusHistory objComplianceHistory = new StatusHistory()
                    {
                        JobID = stcComplianceCheck.JobId,
                        Comment = string.IsNullOrEmpty(stcComplianceCheck.Notes) ? "" : "<br/><label>Notes: </label>" + stcComplianceCheck.Notes
                    };
                    if (stcComplianceCheck.Status == 17)
                    {
                        if (stcComplianceCheck.IsNameCorrect.ToLower() == "n")
                        {
                            description += "- The owner name inputted is incorrect.Correct name should be: " + stcComplianceCheck.FirstName + " " + stcComplianceCheck.LastName + "<br>";
                        }

                        if (!string.IsNullOrEmpty(stcComplianceCheck.IsOrganisationNameCorrect) ? stcComplianceCheck.IsOrganisationNameCorrect.ToLower() == "n" : false)
                        {
                            description += "- The owner organisation name inputted is incorrect.Correct organisation name should be: " + stcComplianceCheck.OrganisationName + "<br>";
                        }

                        if (stcComplianceCheck.IsAddressCorrect.ToLower() == "n")
                        {
                            description += "- The address inputted is incorrect.Correct Address is: " + stcComplianceCheck.Address + "<br>";
                        }

                        if (stcComplianceCheck.IsInstallerSignatureVisible.ToLower() == "n")
                        {
                            description += "- Installer Signature is not visible on STC Form." + "<br>";
                        }

                        if (stcComplianceCheck.IsDesignerSignatureVisible.ToLower() == "n")
                        {
                            description += "- Designer Signature is not visible on STC Form." + "<br>";
                        }

                        if (stcComplianceCheck.IsElectriciandetailsvisible.ToLower() == "n")
                        {
                            description += "- Electrician detail is not visible on STC Form." + "<br>";
                        }

                        if (stcComplianceCheck.IsSerialNumbersMatch.ToLower() == "n")
                        {
                            description += "- Amount serial number is not match." + "<br>";
                        }

                        if (stcComplianceCheck.IsSTCAmountMatch.ToLower() == "n")
                        {
                            description += "- STC amount is not match." + "<br>";
                        }

                        if (stcComplianceCheck.IsOwnerDetailsMatch.ToLower() == "n")
                        {
                            description += "- Home owner details are not match." + "<br>";
                        }

                        if (stcComplianceCheck.IsDescriptionCES.ToLower() == "n")
                        {
                            description += "- Description on the CES accurately describe the work that has not been carried out." + "<br>";
                        }

                        /* For no of panel check.*/
                        CreateJob createJob = _job.GetJobByID(Convert.ToInt32(stcComplianceCheck.JobId));

                        if (stcComplianceCheck.NoOfPanel != null && stcComplianceCheck.NoOfPanel != createJob.JobSystemDetails.NoOfPanel)
                        {
                            description += "- Number of panels do not match - owner confirms  [" + stcComplianceCheck.NoOfPanel + " ] no. of panels." + "<br>";
                        }

                        if (stcComplianceCheck.InstallationType != null)
                        {
                            if (createJob.BasicDetails.JobType == 1)
                            {
                                description += "- Installation Type is : " + ((SystemEnums.PVDInstallationType)stcComplianceCheck.InstallationType).ToString() + "." + "<br>";
                            }
                            else
                            {
                                description += "- Installation Type is : " + ((SystemEnums.SWHInstallationType)stcComplianceCheck.InstallationType).ToString() + "." + "<br>";
                            }

                        }

                        if (stcComplianceCheck.ConnectionType != null && ((SystemEnums.ConnectionType)stcComplianceCheck.ConnectionType).ToString() != createJob.JobSTCDetails.TypeOfConnection)
                        {
                            description += "- Connection Type do not match - owner confirms [" + ((SystemEnums.ConnectionType)stcComplianceCheck.ConnectionType).ToString() + " ] Connection Type." + "<br>";
                        }

                        if (stcComplianceCheck.MountingType != null && ((SystemEnums.MountingType)stcComplianceCheck.MountingType).ToString() != createJob.JobSTCDetails.SystemMountingType)
                        {
                            description += "- Mounting Type do not match - owner confirms [" + ((SystemEnums.MountingType)stcComplianceCheck.MountingType).ToString() + "]  Mounting Type." + "<br>";
                        }

                        if (!string.IsNullOrEmpty(description))
                        {
                            description = "Please view the compliance issues that was encountered and amend the job for resubmission:" + "<br>" + description;
                        }
                        else
                        {
                            description = "Please view the compliance issues that was encountered and amend the job for resubmission:" + "<br>";
                        }

                        //bool isHistorySaved = _jobHistory.LogJobHistory(objComplianceHistory, HistoryCategory.FailedForSTC);
                        string JobHistoryMessage = "failed STC submission for JobID " + objComplianceHistory.JobID + ". " + objComplianceHistory.Comment;
                        Common.SaveJobHistorytoXML(objComplianceHistory.JobID, JobHistoryMessage, "Notifications", "FailedForSTC", ProjectSession.LoggedInName, false);
                    }
                    else if (stcComplianceCheck.Status == 18 && stcComplianceCheck.UserTypeId != 4)
                    {
                        description += "Tried to call home owner is not available" + "<br>";
                        if (stcComplianceCheck.CallDateTime != null)
                        {
                            description += "Logged call details: " + stcComplianceCheck.CallDateTime;
                        }

                    }
                    else if (stcComplianceCheck.Status == 11)
                    {
                        description += "Resubmitting due to compliance issues that was reviewed by" + stcComplianceCheck.CallMadeBy + "on" + DateTime.Now;
                    }

                    if (stcComplianceCheck.IsRequestedAuthorize == true)
                    {
                        stcComplianceCheck.Status = 13;
                    }

                    stcComplianceCheck.Description = Server.HtmlEncode(description);
                    stcComplianceCheck.STCLastUpdatedDate = DateTime.Now;
                    //int settingId = _job.InsertSTCJobCompliance(stcComplianceCheck);
                    DataSet dsInsertSTCJobCompliance = _job.InsertSTCJobCompliance(stcComplianceCheck);
                    int settingId = Convert.ToInt32(dsInsertSTCJobCompliance.Tables[0].Rows[0]["STCJobComplianceID"]);
                    #region save stcJobHistory into xml
                    if (dsInsertSTCJobCompliance != null && dsInsertSTCJobCompliance.Tables.Count > 0 && dsInsertSTCJobCompliance.Tables[1].Rows.Count > 0)
                    {
                        foreach (DataRow drInsertSTCJobCompliance in dsInsertSTCJobCompliance.Tables[1].Rows)
                        {
                            int JobID = Convert.ToInt32(drInsertSTCJobCompliance["JobID"]);
                            int STCStatusID = Convert.ToInt32(drInsertSTCJobCompliance["STCStatusID"]);
                            string Description = drInsertSTCJobCompliance["Description"].ToString();
                            string CreatedByID = drInsertSTCJobCompliance["CreatedBy"].ToString();
                            string CreatedBy = "";
                            if (CreatedByID.ToString() == "-1")
                            {
                                CreatedBy = "System";
                            }
                            else
                            {
                                CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                            }
                            string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                            Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                        }
                    }
                    #endregion
                    if (!string.IsNullOrEmpty(stcComplianceCheck.Notes) || !string.IsNullOrEmpty(stcComplianceCheck.CallMadeBy) || !string.IsNullOrEmpty(stcComplianceCheck.CallDate))
                    {
                        try
                        {

                            var NotesXMLPath = Path.Combine(Path.Combine(ProjectConfiguration.ProofDocumentsURL, "StaticTemplate/SPV/Notes.xml"));
                            string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", stcComplianceCheck.JobId.ToString(), "Notes");
                            if (!Directory.Exists(fullDirectoryPath))
                                Directory.CreateDirectory(fullDirectoryPath);
                            string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + stcComplianceCheck.JobId.ToString() + ".xml");
                            string NotesType = "Compliance";
                            DataSet dsComplianceNotes = _job.GetCallLogsBySTCJobDetailsID(stcComplianceCheck.STCJobDetailsID);
                            string ComplianceNotes = "";
                            string Notes = "<p><b class=\"blue-title\"> Compliance Note: </b>" + stcComplianceCheck.Notes + "</p>";
                            if (dsComplianceNotes != null && dsComplianceNotes.Tables.Count > 0 && dsComplianceNotes.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow drComplianceNotes in dsComplianceNotes.Tables[0].Rows)
                                {
                                    string CallMadeBy = drComplianceNotes["CallMadeBy"].ToString();
                                    string CallDateTime = !string.IsNullOrEmpty(drComplianceNotes["CallDateTime"].ToString()) ? drComplianceNotes["CallDateTime"].ToString() : "";
                                    //string CallRecordingDoc = "<b>Document: </b><a href=\"javascript:void();\" onclick=\"DownloadHistoryDocument(this)\" data-name=\"" + Documentname + "\" data-folder=\"" + Documentpath + "\" class=\"blue-title\"><img src=\"/Images/attach_document.png\"></img>" + Documentname + "</a> has been created in <span class=\"blue-title\">" + Form + " form </span>.";
                                    ComplianceNotes = ComplianceNotes + "<p><b class=\"blue-title\">Call Log- </b>Call MadeBy: " + CallMadeBy + " CallDateTime: " + CallDateTime + " </p>";
                                }

                            }
                            if (System.IO.File.Exists(fullFilePath))
                            {
                                XDocument olddoc = XDocument.Load(fullFilePath);
                                XElement root = new XElement("Note");
                                XElement Notesreplyroot = new XElement("NotesReply");
                                XElement Replyroot = new XElement("Reply");
                                var count = olddoc.Descendants("Note").Count();
                                root.Add(new XElement("JobID", Convert.ToString(stcComplianceCheck.JobId)));
                                root.Add(new XElement("JobRefNo", null));
                                root.Add(new XElement("NoteID", count + 1));
                                root.Add(new XElement("IsImportantNote", Convert.ToString(false)));
                                root.Add(new XElement("NotesDescription", Notes + ComplianceNotes));
                                root.Add(new XElement("NotesType", NotesType));
                                root.Add(new XElement("JobSchedulingID", null));
                                root.Add(new XElement("VendorJobNoteID", null));
                                root.Add(new XElement("STCJobDetailsID", stcComplianceCheck.STCJobDetailsID.ToString()));
                                root.Add(new XElement("CreatedBy", Convert.ToString(ProjectSession.LoggedInName)));
                                root.Add(new XElement("CreatedDate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz")));
                                root.Add(new XElement("IsDeleted", Convert.ToString(false)));
                                root.Add(new XElement("ModifiedBy", null));
                                root.Add(new XElement("ModifiedDate", null));
                                root.Add(new XElement("IsEdit", Convert.ToString(false)));
                                Replyroot.Add(new XElement("ReplyID", "1"));
                                Replyroot.Add(new XElement("ReplyBy", null));
                                Replyroot.Add(new XElement("ReplyDescription", null));
                                Notesreplyroot.Add(Replyroot);
                                root.Add(Notesreplyroot);
                                olddoc.Element("Notes").Add(root);
                                olddoc.Save(fullFilePath);
                            }
                            else
                            {
                                XmlDocument xmlDoc = new XmlDocument();
                                xmlDoc.PreserveWhitespace = true;
                                xmlDoc.Load(NotesXMLPath);
                                XDocument doc = XDocument.Parse(xmlDoc.InnerXml);
                                xmlDoc.InnerXml = doc.ToString();
                                xmlDoc.InnerXml = xmlDoc.InnerXml
                                    .Replace("[[JobID]]", Convert.ToString(stcComplianceCheck.JobId))
                                    .Replace("[[JobRefNo]]", null)
                                    .Replace("[[NoteID]]", "1")
                                    .Replace("[[IsImportantNote]]", Convert.ToString(false))
                                    .Replace("[[NotesDescription]]", HttpUtility.HtmlEncode(Notes + ComplianceNotes))
                                    .Replace("[[NotesType]]", NotesType)
                                    .Replace("[[JobSchedulingID]]", null)
                                    .Replace("[[VendorJobNoteID]]", null)
                                    .Replace("[[STCJobDetailsID]]", stcComplianceCheck.STCJobDetailsID.ToString())
                                    .Replace("[[CreatedBy]]", Convert.ToString(ProjectSession.LoggedInName))
                                    .Replace("[[CreatedDate]]", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz"))
                                    .Replace("[[IsDeleted]]", Convert.ToString(false))
                                    .Replace("[[ModifiedBy]]", null)
                                    .Replace("[[ModifiedDate]]", null)
                                    .Replace("[[IsEdit]]", Convert.ToString(false))
                                    .Replace("[[ReplyID]]", "1")
                                    .Replace("[[ReplyBy]]", null)
                                    .Replace("[[ReplyDescription]]", null);

                                XmlWriterSettings settings = new XmlWriterSettings();
                                settings.Encoding = new UTF8Encoding(false);
                                settings.Indent = true;
                                using (XmlWriter writer = XmlWriter.Create(fullFilePath, settings))
                                {
                                    xmlDoc.Save(writer);
                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            Helper.Log.WriteError(ex);
                            return Json(0 + "#" + ex.Message, JsonRequestBehavior.AllowGet);

                        }
                    }


                    if (isMultipleRecords == 0)
                    {
                        SortedList<string, string> data = new SortedList<string, string>();

                        data.Add("ComplianceNotes", stcComplianceCheck.Notes);
                        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)stcComplianceCheck.Status, "");
                        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)stcComplianceCheck.Status, "");
                        data.Add("ColorCode", colorCode);
                        data.Add("STCStatus", stcStatus);
                        data.Add("STCStatusId", stcComplianceCheck.Status.ToString());
                        //await CommonBAL.SetCacheDataForSTCSubmission(stcComplianceCheck.STCJobDetailsID, null, data);
                        Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from SaveSTCCOmplainceCheck  " + (stcComplianceCheck.STCJobDetailsID.ToString()) + " stcSTatus: " + stcStatus);
                    }
                    // CommonBAL.SetCacheDataForSTCSubmission(stcComplianceCheck.STCJobDetailsID, 0);
                    if (stcComplianceCheck.Status == 19)
                    {
                        CheckSPVrequired objSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCAOrGlobalLevelOrManufacturer(JobIds: stcComplianceCheck.JobId.ToString()).FirstOrDefault();
                        if (objSpvRequiredSolarCompanyWise != null)
                        {
                            if (objSpvRequiredSolarCompanyWise.IsSPVRequired)
                                SPVInstallationVerification(stcComplianceCheck.STCJobDetailsID);
                        }
                    }
                    if (stcComplianceCheck.Status == 17)
                    {
                        SendMailOnComplianceIssue(Convert.ToString(stcComplianceCheck.STCJobDetailsID), 33);
                    }
                    else if (stcComplianceCheck.Status == 18)
                    {
                        SendMailOnComplianceIssue(Convert.ToString(stcComplianceCheck.STCJobDetailsID), 42);
                    }
                    return Json(settingId, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string msg = string.Empty;
                    var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                       .Select(x => new { x.Key, x.Value.Errors });

                    foreach (var erroneousField in erroneousFields)
                    {
                        var fieldKey = erroneousField.Key;
                        var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                        if (!string.IsNullOrEmpty(msg))
                            msg += Environment.NewLine;
                        msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                    }

                    return Json(0 + "#" + msg, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex);
                return Json(0 + "#" + ex.Message, JsonRequestBehavior.AllowGet);
                //return Json(0, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// assign job
        /// </summary>
        /// <param name="complianceOfficerID"> compliance Officer </param>
        /// <param name="jobs">job declare</param>
        /// <returns>action result</returns>
        public async Task<ActionResult> AssignJobToFCO(string complianceOfficerID, string jobs, bool isArchiveScreen = false)
        {
            int cId = !string.IsNullOrEmpty(complianceOfficerID) ? Convert.ToInt32(complianceOfficerID) : 0;
            if (cId > 0)
            {
                DataSet dsAssignJobToFCO = _job.AssignJobToFCO(cId, jobs, ProjectSession.LoggedInUserId, DateTime.Now);
                #region save stcJobHistory into xml
                if (dsAssignJobToFCO != null && dsAssignJobToFCO.Tables.Count > 0 && dsAssignJobToFCO.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow drAssignJobToFCO in dsAssignJobToFCO.Tables[0].Rows)
                    {
                        int JobID = Convert.ToInt32(drAssignJobToFCO["JobID"]);
                        int STCStatusID = Convert.ToInt32(drAssignJobToFCO["STCStatusID"]);
                        string Description = drAssignJobToFCO["Description"].ToString();
                        string CreatedByID = drAssignJobToFCO["CreatedBy"].ToString();
                        string CreatedBy = "";
                        if (CreatedByID.ToString() == "-1")
                        {
                            CreatedBy = "System";
                        }
                        else
                        {
                            CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                        }
                        string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                        Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                    }
                }
                #endregion
                DataSet ds = _job.GetUserNameSolarCompanyForCache(cId, 0);
                string userName = string.Empty;
                if (ds.Tables[0].Rows.Count > 0)
                {
                    userName = ds.Tables[0].Rows[0]["UserFNameLname"].ToString();
                }
                string isUrgentSubmission = string.Empty;
                DataSet dsUpdatedSTCJobIDs = _job.UpdateUrgentStatusFlagForSTCIds(jobs);
                if (dsUpdatedSTCJobIDs != null && dsUpdatedSTCJobIDs.Tables.Count > 0 && dsUpdatedSTCJobIDs.Tables[0].Rows.Count > 0)
                {

                    foreach (DataRow dr in dsUpdatedSTCJobIDs.Tables[0].Rows)
                    {
                        SortedList<string, string> data = new SortedList<string, string>();
                        string stcid = dr["STCJobDetailsID"].ToString();
                        isUrgentSubmission = !string.IsNullOrEmpty(dr["IsUrgentSubmission"].ToString()) ? dr["IsUrgentSubmission"].ToString() : Convert.ToString(false);
                        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)16, "");
                        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)16, "");
                        data.Add("ComplianceOfficer", userName);
                        data.Add("ComplianceBy", cId.ToString());
                        data.Add("STCStatus", stcStatus);
                        data.Add("STCStatusId", "16");
                        data.Add("ColorCode", colorCode);
                        data.Add("IsUrgentSubmission", isUrgentSubmission);
                        //if (isArchiveScreen)
                        //    await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data, true);
                        //else
                        //    await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data);
                    }

                }
                //List<string> lstStcJobDeatilsId = jobs.Split(',').ToList();

                //foreach (var id in lstStcJobDeatilsId)
                //{

                //    SortedList<string, string> data = new SortedList<string, string>();
                //    string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)16, "");
                //    string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)16, "");
                //    data.Add("ComplianceOfficer", userName);
                //    data.Add("ComplianceBy", cId.ToString());
                //    data.Add("STCStatus", stcStatus);
                //    data.Add("STCStatusId", "16");
                //    data.Add("ColorCode", colorCode);
                //    data.Add("IsUrgentSubmission", isUrgentSubmission);
                //    CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(id), null, data);
                //}
                //CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(id), 0);
                return this.Json(new { success = true });
            }
            else
            {
                return this.Json(new { success = false, errormessage = "Please select Compliance officer." });
            }

        }

        /// <summary>
        /// owner verification.
        /// </summary>
        /// <param name="Id">The identifier.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public PartialViewResult _OwnerVerification(string Id, string Type, string SMSOrMail)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(Id, "id"), out jobId);
            }

            CreateJob createJob = new CreateJob();// _job.GetJobByID(jobId);
            createJob.BasicDetails = new BasicDetails();
            createJob.JobOwnerDetails = new JobOwnerDetails();
            createJob.BasicDetails.JobID = jobId;
            createJob.JobOwnerDetails.FirstName = Id;
            createJob.Type = Type;
            createJob.SMSOrMail = SMSOrMail;
            DataSet dsUsers = _job.GetThemeByJobId(jobId);
            int theme = 1;
            if (dsUsers != null && dsUsers.Tables.Count > 0)
            {
                if (dsUsers.Tables[0] != null && dsUsers.Tables[0].Rows.Count > 0)
                {
                    theme = Convert.ToInt32(dsUsers.Tables[0].Rows[0][0]);
                }

            }

            string themeColor = ((SystemEnums.Theme)theme).ToString();
            ViewData["theme"] = themeColor;
            return PartialView("_OwnerVerification", createJob);
        }

        /// <summary>
        /// owner verification
        /// </summary>
        /// <param name="ownerlastName">owner last name</param>
        /// <param name="jobid">take job</param>
        /// <param name="ownerPostcode">owner post code</param>
        /// <returns>object result</returns>
        [HttpPost]
        public JsonResult _OwnerVerification(string ownerlastName, int jobid, string ownerPostcode)
        {
            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(jobid));
            if (createJob.JobOwnerDetails.LastName.ToLower().Trim() == ownerlastName.ToLower().Trim() && createJob.JobOwnerDetails.PostCode.ToLower().Trim() == ownerPostcode.ToLower().Trim())
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Sends the mail when jobs deleted.
        /// </summary>
        /// <param name="lstdeletedJobs">The deleted jobs.</param>
        public void SendMailWhenJobsDeleted(List<int> lstdeletedJobs)
        {
            foreach (int job in lstdeletedJobs)
            {
                var dsreceiverUsers = _job.GetDeleteEmailDetailsByJobId(job);
                List<FormBot.Entity.User> rusers = DBClient.DataTableToList<FormBot.Entity.User>(dsreceiverUsers.Tables[0]);
                FormBot.Entity.User receiverUser = rusers.FirstOrDefault();
                EmailInfo emailInfo = new EmailInfo();
                emailInfo.TemplateID = 15;
                emailInfo.FirstName = receiverUser.FirstName;
                emailInfo.LastName = receiverUser.LastName;
                emailInfo.JobName = receiverUser.JobName;
                _emailService.ComposeAndSendEmail(emailInfo, receiverUser.Email, null, null, default(Guid), Convert.ToString(job));
            }
        }

        /// <summary>
        /// Sends the mail when job create.
        /// </summary>
        /// <param name="jobID">The job identifier.</param>
        public void SendMailWhenJobCreate(int jobID)
        {
            var dsreceiverUsers = _job.GetEmailDetailsByJobID(jobID);
            List<FormBot.Entity.User> rusers = DBClient.DataTableToList<FormBot.Entity.User>(dsreceiverUsers.Tables[0]);
            FormBot.Entity.User receiverUser = rusers.FirstOrDefault();
            if (receiverUser != null)
            {
                EmailInfo emailInfo = new EmailInfo();
                emailInfo.TemplateID = 14;
                emailInfo.FirstName = receiverUser.FirstName;
                emailInfo.LastName = receiverUser.LastName;
                emailInfo.JobName = receiverUser.JobName;
                _emailService.ComposeAndSendEmail(emailInfo, receiverUser.Email, null, null, default(Guid), Convert.ToString(jobID));
            }
        }

        /// <summary>
        /// It will check if directory exists or not if not then it will just create it..
        /// </summary>
        /// <param name="path">The path.</param>
        private void CheckAndCreateDir(string path)
        {
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
        }


        /// <summary>
        /// Gets the user WithStatus.
        /// </summary>
        /// <param name="isInstaller">The is installer.</param>
        /// <param name="existUserId">The exist user identifier.</param>
        /// <param name="solarCompanyId">solarCompanyId.</param>
        /// <param name="jobId">jobId.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public JsonResult GetInstallerDesignerWithStatus(string isInstaller, int existUserId = 0, string solarCompanyId = "", int jobId = 0)
        {
            int companyId = 0;

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5)
                companyId = string.IsNullOrEmpty(solarCompanyId) ? 0 : Convert.ToInt32(solarCompanyId);
            else
                companyId = ProjectSession.SolarCompanyId;

            List<ElectricianList> InstallerList = _user.GetInstallerDesignerWithStatus(true, companyId, jobId, ProjectSession.IsSubContractor).Select(a => new ElectricianList
            {
                Text = a.Name
                ,
                Value = a.InstallerDesignerId.ToString()
                ,
                IsSystemUser = a.IsSystemUser
                ,
                UserId = Convert.ToInt32(a.UserId)
            }).ToList();
            List<ElectricianList> designerList = _user.GetInstallerDesignerWithStatus(false, companyId, jobId, ProjectSession.IsSubContractor).Select(a => new ElectricianList
            {
                Text = a.Name
                ,
                Value = a.InstallerDesignerId.ToString()
                ,
                IsSystemUser = a.IsSystemUser
                ,
                UserId = Convert.ToInt32(a.UserId)
            }).ToList();
            List<ElectricianList> electricianList = _user.GetElectricianList(companyId, jobId).Select(a => new ElectricianList { Text = a.Name, Value = a.Id.ToString(), IsSystemUser = a.IsSystemUser, IsCustomElectrician = a.IsCustomElectrician }).ToList();
            var data = new { installerList = InstallerList, designerList = designerList, electricianList = electricianList };
            //List<ElectricianList> Items = _user.GetElectricianList(companyId, jobId).Select(a => new ElectricianList { Text = a.Name, Value = a.Id.ToString(), IsSystemUser = a.IsSystemUser, IsCustomElectrician = a.IsCustomElectrician }).ToList(); ;
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetInstallerDesignerElectricianWithStatus(string isInstaller, int existUserId = 0, string solarCompanyId = "", int jobId = 0)
        {
            int companyId = 0;

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5)
                companyId = string.IsNullOrEmpty(solarCompanyId) ? 0 : Convert.ToInt32(solarCompanyId);
            else
                companyId = ProjectSession.SolarCompanyId;

            List<ElectricianList> InstallerList = _user.GetInstallerDesignerWithStatus(true, companyId, jobId, ProjectSession.IsSubContractor).Select(a => new ElectricianList
            {
                Text = a.Name,
                Value = a.InstallerDesignerId.ToString(),
                IsSystemUser = a.IsSystemUser,
                UserId = Convert.ToInt32(a.UserId)
            }).ToList();
            List<ElectricianList> designerList = _user.GetInstallerDesignerWithStatus(false, companyId, jobId, ProjectSession.IsSubContractor).Select(a => new ElectricianList
            {
                Text = a.Name,
                Value = a.InstallerDesignerId.ToString(),
                IsSystemUser = a.IsSystemUser,
                UserId = Convert.ToInt32(a.UserId)
            }).ToList();

            List<ElectricianList> electricianList = _user.GetElectricianList(companyId, jobId).Select(a => new ElectricianList
            { Text = a.Name, Value = a.Id.ToString(), IsSystemUser = a.IsSystemUser, IsCustomElectrician = a.IsCustomElectrician }).ToList();

            var data = new { installerList = InstallerList, designerList = designerList, electricianList = electricianList };
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Print(string id = null)
        {
            CreateJob createJob = new CreateJob();
            int jobId = 0;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            }

            DataSet dsJobPrint = _job.JobPrint(jobId, ProjectSession.UserTypeId);
            if (dsJobPrint != null && dsJobPrint.Tables.Count > 0)
            {
                createJob.BasicDetails = (dsJobPrint.Tables[0] != null && dsJobPrint.Tables[0].Rows.Count > 0) ? DBClient.DataTableToList<BasicDetails>(dsJobPrint.Tables[0])[0] : new BasicDetails();
                createJob.JobOwnerDetails = (dsJobPrint.Tables[1] != null && dsJobPrint.Tables[1].Rows.Count > 0) ? DBClient.DataTableToList<JobOwnerDetails>(dsJobPrint.Tables[1])[0] : new JobOwnerDetails();
                createJob.JobInstallationDetails = (dsJobPrint.Tables[2] != null && dsJobPrint.Tables[2].Rows.Count > 0) ? DBClient.DataTableToList<JobInstallationDetails>(dsJobPrint.Tables[2])[0] : new JobInstallationDetails();
                createJob.JobSystemDetails = (dsJobPrint.Tables[3] != null && dsJobPrint.Tables[3].Rows.Count > 0) ? DBClient.DataTableToList<JobSystemDetails>(dsJobPrint.Tables[3])[0] : new JobSystemDetails();
                createJob.lstJobInverterDetails = (dsJobPrint.Tables[4] != null && dsJobPrint.Tables[4].Rows.Count > 0) ? DBClient.DataTableToList<JobInverterDetails>(dsJobPrint.Tables[4]) : new List<JobInverterDetails>();
                createJob.lstJobPanelDetails = (dsJobPrint.Tables[5] != null && dsJobPrint.Tables[5].Rows.Count > 0) ? DBClient.DataTableToList<JobPanelDetails>(dsJobPrint.Tables[5]) : new List<JobPanelDetails>();
                createJob.JobScheduling = (dsJobPrint.Tables[6] != null && dsJobPrint.Tables[6].Rows.Count > 0) ? DBClient.DataTableToList<JobScheduling>(dsJobPrint.Tables[6])[0] : new JobScheduling();

                createJob.BasicDetails.RemainingAmount = (dsJobPrint.Tables[7] != null && dsJobPrint.Tables[7].Rows.Count > 0) ? dsJobPrint.Tables[7].Rows[0]["RemainingAmount"].ToString() : "";
            }
            return View(createJob);
        }

        //public ActionResult DownloadAllAndActiveTabDocument(string jobid, string distributorID = "", string stage = "PreApprovals", string jobTypeId = "1", int isAll = 0)
        public void DownloadAllAndActiveTabDocument(string jobid, string distributorID = "", string stage = "PreApprovals", string jobTypeId = "1", int isAll = 0)
        {
            string jobStage = string.Empty;
            string jobType = !string.IsNullOrEmpty(jobTypeId) ? ((SystemEnums.JobType)(Convert.ToInt32(jobTypeId))).ToString() : "";
            if (isAll == 1)
            {
                string stcStage = "STC" + " " + jobType;
                jobStage = stage + "," + stcStage;
            }
            else
            {
                jobStage = (stage.ToLower() == "stc") ? stage + " " + jobType : stage;
            }

            int id = 0;
            if (!string.IsNullOrEmpty(jobid))
            {
                int.TryParse(QueryString.GetValueFromQueryString(jobid, "id"), out id);
            }

            List<FormBot.Entity.Documents.DocumentsView> lstDocuments = new List<DocumentsView>();
            DataSet dsDocument = _documentsBAL.DownloadAllAndActiveTabDocument(distributorID, jobStage, Convert.ToInt32(id));
            if (dsDocument != null && dsDocument.Tables.Count > 0)
            {
                for (int i = 0; i < dsDocument.Tables.Count; i++)
                {
                    if (dsDocument.Tables[i] != null && dsDocument.Tables[i].Rows.Count > 0)
                    {
                        List<FormBot.Entity.Documents.DocumentsView> lstDoc = new List<DocumentsView>();
                        lstDoc = dsDocument.Tables[i].ToListof<DocumentsView>();
                        if (lstDoc.Count > 0)
                        {
                            lstDocuments.AddRange(lstDoc);
                        }
                    }
                }
            }

            using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
            {
                zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                for (int i = 0; i < lstDocuments.Count; i++)
                {
                    if (!zip.Any(a => a.FileName.Contains(lstDocuments[i].Stage + "/")))
                    {
                        zip.AddDirectoryByName(lstDocuments[i].Stage);
                    }

                    string name = lstDocuments[i].Name;
                    if (name.ToLower() == "ces")
                    {
                        name = "ces" + (FormBot.Helper.SystemEnums.JobType.PVD.ToString().ToLower() == lstDocuments[i].ServiceProviderName.ToLower() ? "pvd.pdf" : "sw.pdf");
                    }
                    var documentPath = Convert.ToInt32(id) + "/" + lstDocuments[i].Stage + "/" + name;
                    var documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;

                    if (System.IO.File.Exists(documentFullPath))
                    {
                        zip.AddFile(documentFullPath, lstDocuments[i].Stage);
                    }
                }

                Response.Clear();
                Response.BufferOutput = false;
                //string zipName = String.Format("Zip_{0}.zip", DateTime.Now.ToString("yyyy-MMM-dd-HHmmss"));
                Response.ContentType = "application/zip";
                Response.AddHeader("content-disposition", "attachment; filename=" + "JobDocument.zip");
                zip.Save(Response.OutputStream);
                Response.End();
            }




            //return Json("", JsonRequestBehavior.AllowGet);
        }

        //[UserAuthorization]
        public void DownloadALLJobPhotosForTabular(string jobid, string photos)
        {
            //var obj = Newtonsoft.Json.JsonConvert.DeserializeObject<MainObject>(photos);
            //  Rootobject[] results = (Rootobject[])Newtonsoft.Json.JsonConvert.DeserializeObject(photos);
            // JobPhotosList
            DataSet ds = _job.GetPhotosForAllTabular(Convert.ToInt32(jobid));
            string n2 = "";
            //int count = obj.vp.Count;
            string zipFileName = string.Empty;
            string[] FinalPaths;
            int length = 0;
            using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
            {
                zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                int countVisitIdPhotos = 0;
                //foreach (Vp vp in obj.vp)
                //{

                //countVisitIdPhotos = 0;
                //string VisitId = vp.id.ToString();
                //n2 += "_" + VisitId;
                //zip.AddDirectoryByName(VisitId);

                ////string folderName = p.fn;

                //string path = Path.Combine(VisitId).Replace("\\", "/");
                //string finalPath = path + "/";
                //int i = 1;
                //while (zip.EntryFileNames.Contains(finalPath))
                //{
                //    string renamePath = path + "(" + i + ")" + "/";
                //    if (zip.EntryFileNames.Contains(renamePath))
                //    {
                //        i++;
                //    }
                //    else
                //    {
                //        finalPath = renamePath;
                //        break;

                //    }
                //}
                //zip.AddDirectoryByName(finalPath);
                //FinalPaths[length] = finalPath;
                //length++;
                //zip.AddDirectoryByName(Path.Combine(VisitId, folderName));
                //}
                //for(int i=0;i<length;i++)
                //{
                for (int i = 0; i < ds.Tables[3].Rows.Count; i++)
                {
                    string path = Path.Combine(ds.Tables[3].Rows[i]["VisitUniqueId"].ToString()).Replace("\\", "/");
                    string finalPath = path;

                    while (zip.EntryFileNames.Contains(finalPath))
                    {
                        string renamePath = path + "(" + i + ")" + "/";
                        if (zip.EntryFileNames.Contains(renamePath))
                        {
                            i++;
                        }
                        else
                        {
                            finalPath = renamePath;
                            break;

                        }
                    }
                    zip.AddDirectoryByName(finalPath);

                }
                if (ds != null && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    {
                        //DataRow[] foundRows = ds.Tables[0].Select("VisitCheckListPhotoId in (" + p.p + ")");
                        //countVisitIdPhotos
                        //    = countVisitIdPhotos + foundRows.Length;
                        for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                        {
                            string mainFolder = Path.Combine(ds.Tables[0].Rows[j]["VisitUniqueId"].ToString()).Replace("\\", "/");
                            string subFolder = Path.Combine(ds.Tables[0].Rows[j]["FolderName"].ToString()).Replace("\\", "/");
                            string completePath = Path.Combine(mainFolder, subFolder).Replace("\\", "/");
                            completePath = completePath + "/";
                            if (!zip.EntryFileNames.Contains(completePath))
                            {
                                zip.AddDirectoryByName(completePath);
                            }
                            var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, ds.Tables[0].Rows[j]["Path"].ToString());
                            if (System.IO.File.Exists(documentFullPath))
                            {
                                try
                                {
                                    //zip.AddFile(documentFullPath, Path.Combine(VisitId, folderName));
                                    zip.AddFile(documentFullPath, completePath);
                                }
                                catch { }
                            }
                        }
                    }
                    if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                    {
                        //DataRow[] signRows = ds.Tables[1].Select("VisitSignatureId in (" + p.s + ")");
                        //countVisitIdPhotos = countVisitIdPhotos + signRows.Length;
                        string referencePhotos = "Reference Photos";
                        referencePhotos = referencePhotos + "/";
                        if (!zip.EntryFileNames.Contains(referencePhotos))
                        {
                            zip.AddDirectoryByName(referencePhotos);
                        }
                        for (int j = 0; j < ds.Tables[1].Rows.Count; j++)
                        {

                            var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, ds.Tables[1].Rows[j]["Path"].ToString());
                            if (System.IO.File.Exists(documentFullPath))
                            {
                                try
                                {
                                    //zip.AddFile(documentFullPath, Path.Combine(VisitId, folderName));
                                    zip.AddFile(documentFullPath, referencePhotos);
                                }
                                catch { }
                            }
                        }
                    }
                    if (ds.Tables[2] != null && ds.Tables[1].Rows.Count > 0)
                    {
                        string defaulPhotos = "Default Photos";
                        string dpInstallationPhotos = "Installation Photos" + "/";
                        string dpSerialPhotos = "Serial Photos" + "/";
                        string completedpInstallationPhotos = Path.Combine(defaulPhotos, dpInstallationPhotos).Replace("\\", "/");
                        string completedpSerialPhotos = Path.Combine(defaulPhotos, dpSerialPhotos).Replace("\\", "/");
                        if (!zip.EntryFileNames.Contains(defaulPhotos))
                        {
                            zip.AddDirectoryByName(defaulPhotos);
                        }
                        if (!zip.EntryFileNames.Contains(completedpInstallationPhotos))
                        {
                            zip.AddDirectoryByName(completedpInstallationPhotos);
                        }
                        if (!zip.EntryFileNames.Contains(completedpSerialPhotos))
                        {
                            zip.AddDirectoryByName(completedpSerialPhotos);
                        }

                        for (int j = 0; j < ds.Tables[2].Rows.Count; j++)
                        {

                            var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, ds.Tables[2].Rows[j]["Path"].ToString());
                            if (System.IO.File.Exists(documentFullPath))
                            {
                                try
                                {
                                    if (ds.Tables[2].Rows[j]["ClassType"].ToString() == "1")
                                    {
                                        zip.AddFile(documentFullPath, completedpSerialPhotos);
                                    }
                                    else if (ds.Tables[2].Rows[j]["ClassType"].ToString() == "2")
                                    {
                                        zip.AddFile(documentFullPath, completedpInstallationPhotos);
                                    }

                                }
                                catch { }
                            }
                        }
                    }
                }
                //}


                //if (obj.isDownloadAll)
                //{
                //    zip.AddDirectoryByName("Reference Photos");
                //    n2 += "_Reference Photos";
                //}

                //if (!string.IsNullOrEmpty(obj.rp))
                //{
                //    int refPhotoCount = 0;
                //    if (!obj.isDownloadAll)
                //    {
                //        zip.AddDirectoryByName("Reference Photos");
                //        n2 += "_Reference Photos";
                //    }

                //    DataRow[] signRows1 = ds.Tables[0].Select("VisitCheckListPhotoId in (" + obj.rp + ")");
                //    refPhotoCount = signRows1.Length;
                //    for (int k = 0; k < signRows1.Length; k++)
                //    {

                //        var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, signRows1[k]["Path"].ToString());
                //        if (System.IO.File.Exists(documentFullPath))
                //        {
                //            try
                //            {
                //                zip.AddFile(documentFullPath, "Reference Photos");
                //            }
                //            catch { }
                //        }
                //    }

                //}

                Response.Clear();
                Response.BufferOutput = true;
                Response.ContentType = "application/zip";
                string val = jobid.ToString();

                CreateJob createJob = new CreateJob();
                createJob.BasicDetails = new BasicDetails();
                var name = createJob.BasicDetails.RefNumber;
                //string n1 = refno;
                string filename = "";

                filename = "" + val + "_JobPhotos.zip";
                Response.AddHeader("content-disposition", "attachment; filename=\"" + filename + "\"");

                zip.Save(Response.OutputStream);
                zipFileName = filename;
                Response.End();
            }
            JobHistory objJobHistory = new JobHistory()
            {
                JobID = Convert.ToInt32(jobid),
            };
            //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
            string JobHistoryMessage = "has downloaded photos: <b style=\"color:black\">" + zipFileName + "</b> from <b class=\"blue-title\"> (" + objJobHistory.JobID + ")" + "</b>.";
            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "DownloadPhoto", ProjectSession.LoggedInName, false);


        }

        [UserAuthorization]
        public void DownloadJobPhotos(string jobid, string photos, string refno = null, string isall = "")
        {
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject<MainObject>(photos);
            //  Rootobject[] results = (Rootobject[])Newtonsoft.Json.JsonConvert.DeserializeObject(photos);
            // JobPhotosList
            DataSet ds = _job.GetPhotosPath(obj.vclid, obj.vsid);
            string n2 = "";
            int count = obj.vp.Count;
            string zipFileName = string.Empty;
            using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
            {
                zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                int countVisitIdPhotos = 0;
                foreach (Vp vp in obj.vp)
                {
                    countVisitIdPhotos = 0;
                    string VisitId = vp.id.ToString();
                    n2 += "_" + VisitId;
                    zip.AddDirectoryByName(VisitId);
                    foreach (Pl p in vp.pl)
                    {
                        string folderName = p.fn;

                        string path = Path.Combine(VisitId, folderName).Replace("\\", "/");
                        string finalPath = path + "/";
                        int i = 1;
                        while (zip.EntryFileNames.Contains(finalPath))
                        {
                            string renamePath = path + "(" + i + ")" + "/";
                            if (zip.EntryFileNames.Contains(renamePath))
                            {
                                i++;
                            }
                            else
                            {
                                finalPath = renamePath;
                                break;

                            }
                        }
                        zip.AddDirectoryByName(finalPath);
                        //zip.AddDirectoryByName(Path.Combine(VisitId, folderName));

                        if (ds != null && ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(p.p))
                            {
                                DataRow[] foundRows = ds.Tables[0].Select("VisitCheckListPhotoId in (" + p.p + ")");
                                countVisitIdPhotos
                                    = countVisitIdPhotos + foundRows.Length;
                                for (int j = 0; j < foundRows.Length; j++)
                                {

                                    var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, foundRows[j]["Path"].ToString());
                                    if (System.IO.File.Exists(documentFullPath))
                                    {
                                        try
                                        {
                                            //zip.AddFile(documentFullPath, Path.Combine(VisitId, folderName));
                                            zip.AddFile(documentFullPath, finalPath);
                                        }
                                        catch { }
                                    }
                                }
                            }
                            if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0 && !string.IsNullOrEmpty(p.s))
                            {
                                DataRow[] signRows = ds.Tables[1].Select("VisitSignatureId in (" + p.s + ")");
                                countVisitIdPhotos = countVisitIdPhotos + signRows.Length;
                                for (int j = 0; j < signRows.Length; j++)
                                {

                                    var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, signRows[j]["Path"].ToString());
                                    if (System.IO.File.Exists(documentFullPath))
                                    {
                                        try
                                        {
                                            //zip.AddFile(documentFullPath, Path.Combine(VisitId, folderName));
                                            zip.AddFile(documentFullPath, finalPath);
                                        }
                                        catch { }
                                    }
                                }
                            }
                        }

                        //foreach (string path in p.p)
                        //{
                        //    var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, "JobDocuments", jobid, path);
                        //    if (System.IO.File.Exists(documentFullPath))
                        //    {
                        //        try
                        //        {
                        //            zip.AddFile(documentFullPath, Path.Combine(VisitId, folderName));
                        //        }
                        //        catch { }
                        //    }
                        //}
                    }
                    //for insert log when default photo folder or visitId wise folder download
                    //int cntPhotos = countVisitIdPhotos;
                    //if (isall.ToLower() != "true")
                    //{
                    //    JobHistory objJobHistory = new JobHistory()
                    //    {
                    //        JobID = Convert.ToInt32(jobid),
                    //        PhotosCount = cntPhotos.ToString(),
                    //        UniqueVisitId = VisitId
                    //    };
                    //    //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
                    //    string JobHistoryMessage = "has downloaded <b class=\"blue-title\">"+objJobHistory.PhotosCount+" photo</b> from <b class=\"blue-title\"> "+objJobHistory.UniqueVisitId+"</b>.";
                    //    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "DownloadPhoto", ProjectSession.LoggedInName, false);
                    //}


                }


                if (obj.isDownloadAll)
                {
                    zip.AddDirectoryByName("Reference Photos");
                    n2 += "_Reference Photos";
                }

                if (!string.IsNullOrEmpty(obj.rp))
                {
                    int refPhotoCount = 0;
                    if (!obj.isDownloadAll)
                    {
                        zip.AddDirectoryByName("Reference Photos");
                        n2 += "_Reference Photos";
                    }

                    DataRow[] signRows1 = ds.Tables[0].Select("VisitCheckListPhotoId in (" + obj.rp + ")");
                    refPhotoCount = signRows1.Length;
                    for (int k = 0; k < signRows1.Length; k++)
                    {

                        var documentFullPath = Path.Combine(ProjectSession.ProofDocuments, signRows1[k]["Path"].ToString());
                        if (System.IO.File.Exists(documentFullPath))
                        {
                            try
                            {
                                zip.AddFile(documentFullPath, "Reference Photos");
                            }
                            catch { }
                        }
                    }
                    //for insert log when reference photo folder download
                    //if (isall.ToLower() != "true")
                    //{
                    //    int cntrefPhoto = refPhotoCount;
                    //    JobHistory objJobHistory = new JobHistory()
                    //    {
                    //        JobID = Convert.ToInt32(jobid),
                    //        PhotosCount = cntrefPhoto.ToString(),
                    //        UniqueVisitId = "Reference Photos"
                    //    };
                    //    //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
                    //    string JobHistoryMessage = "has downloaded <b class=\"blue-title\">" + objJobHistory.PhotosCount + " photo</b> from <b class=\"blue-title\"> " + objJobHistory.UniqueVisitId + "</b>.";
                    //    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "DownloadPhoto", ProjectSession.LoggedInName, false);
                    //}


                }

                Response.Clear();
                Response.BufferOutput = true;
                Response.ContentType = "application/zip";
                string val = jobid.ToString();

                CreateJob createJob = new CreateJob();
                createJob.BasicDetails = new BasicDetails();
                var name = createJob.BasicDetails.RefNumber;
                string n1 = refno;
                string filename = "";
                if (isall == "true")
                {
                    filename = "" + val + "_JobPhotos.zip";
                    Response.AddHeader("content-disposition", "attachment; filename=\"" + filename + "\"");
                }
                else
                {
                    filename = "" + n1 + '(' + val + ')' + n2 + "_JobPhotos.zip";
                    Response.AddHeader("content-disposition", "attachment; filename=\"" + filename + "\"");
                }
                zip.Save(Response.OutputStream);
                zipFileName = filename;
                Response.End();
            }
            JobHistory objJobHistory = new JobHistory()
            {
                JobID = Convert.ToInt32(jobid),
            };
            //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
            string JobHistoryMessage = "has downloaded photos: <b style=\"color:black\">" + zipFileName + "</b> from <b class=\"blue-title\"> " + refno + "(" + objJobHistory.JobID + ")" + "</b>.";
            Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "DownloadPhoto", ProjectSession.LoggedInName, false);
            //for insert log when download all photos from download all link in photo section
            //int allphotoCount = ds.Tables[0].Rows.Count + ds.Tables[1].Rows.Count;
            //if (isall.ToLower() == "true")
            //{
            //    JobHistory objJobHistory = new JobHistory()
            //    {
            //        JobID = Convert.ToInt32(jobid),
            //        PhotosCount = allphotoCount.ToString(),
            //        UniqueVisitId = "Download All"
            //    };
            //    //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadPhoto);
            //    string JobHistoryMessage = "has downloaded <b class=\"blue-title\">" + objJobHistory.PhotosCount + " photo</b> from <b class=\"blue-title\"> " + objJobHistory.UniqueVisitId + "</b>.";
            //    Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "General", "DownloadPhoto", ProjectSession.LoggedInName, false);
            //}

        }
        [UserAuthorization]

        public FileResult DownloadJobDocuments(string jobDocId, int IsEditable = 0)
        {
            DataTable dt = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(jobDocId));
            string path = Convert.ToString(dt.Rows[0][0]);

            //Path.Combine(ProjectConfiguration.ProjectImagePath, path);

            string documentFullPath = Path.Combine(ProjectSession.ProofDocuments, path);
            string name = Path.GetFileName(documentFullPath);
            string DirectoryName = Path.GetDirectoryName(documentFullPath) + "\\DownloadDocument";
            string CopyFileDirectory = Path.GetDirectoryName(documentFullPath) + "\\CopyDocument";
            if (!System.IO.Directory.Exists(DirectoryName))
            {
                System.IO.Directory.CreateDirectory(DirectoryName);
            }
            if (!System.IO.Directory.Exists(CopyFileDirectory))
            {
                System.IO.Directory.CreateDirectory(CopyFileDirectory);
            }
            string newFile = Path.Combine(DirectoryName, name);
            string copyFile = Path.Combine(CopyFileDirectory, name);
            if (System.IO.File.Exists(documentFullPath))
            {
                if (System.IO.File.Exists(newFile))
                {
                    System.IO.File.Delete(newFile);
                }
                if (System.IO.File.Exists(copyFile))
                {
                    System.IO.File.Delete(copyFile);
                }
                System.IO.File.Copy(documentFullPath, newFile);
                System.IO.File.Copy(documentFullPath, copyFile);
                DownloadFileDocumentChanges(copyFile, newFile, IsEditable);
                //    return Json("false", JsonRequestBehavior.AllowGet);
                byte[] fileBytes = System.IO.File.ReadAllBytes(newFile);
                //System.IO.File.Delete(copyFile);
                //System.IO.File.Delete(newFile);
                //System.IO.Directory.Delete(CopyFileDirectory);
                //System.IO.Directory.Delete(DirectoryName);
                //string fileName = path.Split('\\').Last();

                //for insert log when download document from CES/COC form section
                int JobId = Convert.ToInt32(dt.Rows[0]["JobId"]);
                string DocumentType = "";
                if (path.ToLower().Contains("ces"))
                {
                    DocumentType = "CES/COC Form";
                }
                else if (path.ToLower().Contains("other"))
                {
                    DocumentType = "Document Manager";
                }
                JobHistory objJobHistory = new JobHistory()
                {
                    JobID = JobId,
                    HistoryMessage = name,
                    DocumentName = name,
                    DocumentPath = documentFullPath,
                    DocumentType = DocumentType
                };
                //_jobHistory.LogJobHistory(objJobHistory, HistoryCategory.DownloadDocument);
                string JobHistoryMessage = "has downloaded <b style=\"color:black\"> " + objJobHistory.HistoryMessage + "</b> from " + objJobHistory.DocumentType;
                Common.SaveJobHistorytoXML(objJobHistory.JobID, JobHistoryMessage, "Documents", "DownloadDocument", ProjectSession.LoggedInName, false);
                return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, name);

            }
            else
                Response.Write(" < script > alert('File Doesn't exists!'); </ script > ");
            return null;
        }

        public JsonResult CheckJobDocumentsFile(string jobDocId, int IsEditable = 0)
        {
            DataTable dt = _documentsBAL.GetJobDocumentPath(Convert.ToInt32(jobDocId));
            string path = Convert.ToString(dt.Rows[0][0]);

            //Path.Combine(ProjectConfiguration.ProjectImagePath, path);

            string documentFullPath = Path.Combine(ProjectSession.ProofDocuments, path);
            string name = Path.GetFileName(documentFullPath);
            string DirectoryName = Path.GetDirectoryName(documentFullPath) + "\\DownloadDocument";
            string CopyFileDirectory = Path.GetDirectoryName(documentFullPath) + "\\CopyDocument";
            if (!System.IO.Directory.Exists(DirectoryName))
            {
                System.IO.Directory.CreateDirectory(DirectoryName);
            }
            if (!System.IO.Directory.Exists(CopyFileDirectory))
            {
                System.IO.Directory.CreateDirectory(CopyFileDirectory);
            }
            string newFile = Path.Combine(DirectoryName, name);
            string copyFile = Path.Combine(CopyFileDirectory, name);
            if (System.IO.File.Exists(documentFullPath))
            {
                //DownloadFile(jobId);
                return Json(new { status = true, message = "File downloaded successfully!!!" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { status = false, message = "File does not exists!!!" }, JsonRequestBehavior.AllowGet);
            }

        }
        public JsonResult CheckPhotoFile(string imgFullPath, string jobId)
        {
            var decodedURL = Server.UrlDecode(imgFullPath);
            string proofDocumentsFolder = ProjectSession.ProofDocumentsURL;
            string BaseUrl = System.Configuration.ConfigurationManager.AppSettings["UploadedDocumentPath"];
            decodedURL = decodedURL.Replace(BaseUrl, proofDocumentsFolder);
            if (System.IO.File.Exists(decodedURL))
            {
                //DownloadFile(jobId);
                return Json(new { status = true, message = "File downloaded successfully!!!" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { status = false, message = "File does not exists!!!" }, JsonRequestBehavior.AllowGet);
            }

        }

        //public ActionResult DownLoadAllPhotoesAsZip(string jobid, string photosArray, bool isInstallation)
        public void DownLoadAllPhotoesAsZip(string jobid, string photosArray, bool isInstallation)
        {
            List<string> lstPhotos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(photosArray);
            string folderName = string.Empty;
            if (isInstallation)
                folderName = "InstallationPhoto";
            else
                folderName = "SerialNumber";

            if (lstPhotos.Count > 0)
            {
                using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                {
                    zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                    zip.AddDirectoryByName(folderName);

                    for (int i = 0; i < lstPhotos.Count; i++)
                    {
                        string name = lstPhotos[i];
                        var documentPath = Convert.ToInt32(jobid) + "/" + name;
                        var documentFullPath = ProjectConfiguration.JobDocumentsToSaveFullPath + documentPath;
                        if (System.IO.File.Exists(documentFullPath))
                        {
                            zip.AddFile(documentFullPath, folderName);
                        }
                    }
                    Response.Clear();
                    Response.BufferOutput = false;
                    Response.ContentType = "application/zip";
                    Response.AddHeader("content-disposition", "attachment; filename=" + "JobPhoto.zip");
                    zip.Save(Response.OutputStream);
                    Response.End();
                }
            }
            //return Json("", JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Gets the invoice upload.
        /// </summary>
        /// <param name="fileUpload">The file upload.</param>
        /// <param name="guid">The unique identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns>upload class</returns>
        public HelperClasses.UploadStatus GetGSTDocumentUpload(HttpPostedFileBase fileUpload, string guid, string jobId)
        {
            HelperClasses.UploadStatus uploadStatus = new HelperClasses.UploadStatus();
            uploadStatus.FileName = Request.Files[0].FileName;
            if (fileUpload != null)
            {
                if (fileUpload.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(fileUpload.FileName);
                    //fileName = guid + "_" + fileName;
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;

                    if (!string.IsNullOrEmpty(guid))
                    {
                        proofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "JobDocuments" + "\\" + jobId + "\\" + "GST" + "\\");
                        proofDocumentsFolderURL = proofDocumentsFolderURL + "\\" + "JobDocuments" + "\\" + jobId + "\\" + "GST" + "\\";
                    }

                    if (!Directory.Exists(proofDocumentsFolder))
                    {
                        Directory.CreateDirectory(proofDocumentsFolder);
                    }

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    try
                    {
                        string path = Path.Combine(proofDocumentsFolder + "\\" + fileName.Replace("%", "$"));
                        if (System.IO.File.Exists(path))
                        {
                            string orignalFileName = Path.GetFileNameWithoutExtension(path);
                            string fileExtension = Path.GetExtension(path);
                            string fileDirectory = Path.GetDirectoryName(path);
                            int i = 1;
                            while (true)
                            {
                                string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + i + ")" + fileExtension;
                                if (System.IO.File.Exists(renameFileName))
                                    i++;
                                else
                                {
                                    path = renameFileName;
                                    break;
                                }
                            }
                            fileName = Path.GetFileName(path);
                        }

                        fileName = fileName.Replace("%", "$");
                        string mimeType = MimeMapping.GetMimeMapping(fileName);
                        fileUpload.SaveAs(path);

                        _job.UploadGstDocumentForJob(Convert.ToInt32(jobId), fileName);

                        uploadStatus.Status = true;
                        uploadStatus.Message = "File Uploaded Successfully.";
                        uploadStatus.FileName = fileName;
                        uploadStatus.MimeType = mimeType;
                        uploadStatus.Path = proofDocumentsFolder + uploadStatus.FileName;
                    }
                    catch (Exception)
                    {
                        uploadStatus.Status = false;
                        uploadStatus.Message = "An error occured while uploading. Please try again later.";
                    }
                }
                else
                {
                    uploadStatus.Status = false;
                    uploadStatus.Message = "No data received";
                }

            }
            else
            {
                uploadStatus.Status = false;
                uploadStatus.Message = "No data received";
            }

            return uploadStatus;
        }

        /// <summary>
        /// Deletes the file from invoice folder.
        /// </summary>
        /// <param name="fileName">Name of the file.</param>
        /// <param name="folderName">Name of the folder.</param>
        /// <param name="oldInvoiceFile">The old invoice file.</param>
        /// <returns>result object</returns>
        [AllowAnonymous]
        public JsonResult DeleteGSTFile(string fileName, string folderName, string oldInvoiceFile)
        {
            if (oldInvoiceFile != fileName && fileName != null)
            {
                //DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + folderName + "\\" + "GST", fileName));
                string sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + folderName + "\\" + "GST", fileName);
                _generateStcReportBAL.MoveDeletedDocuments(sourcePath, folderName);
                _job.DeleteGstDocumentForJob(Convert.ToInt32(folderName));
            }

            this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Views the download file.
        /// </summary>
        /// <param name="FileName">Name of the file.</param>
        /// <param name="FolderName">Name of the folder.</param>
        /// <returns>Views the download file.</returns>
        [HttpGet]
        public ActionResult DownloadGSTDocument(string FileName, string FolderName)
        {
            try
            {
                var path = Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + FolderName + "\\" + "GST", FileName);
                if (System.IO.File.Exists(path))
                {
                    var fileData = System.IO.File.ReadAllBytes(path);

                    Response.Clear();
                    Response.ClearHeaders();
                    Response.ClearContent();
                    Response.ContentType = "application/octet-stream";
                    Response.AddHeader("Content-Disposition", string.Format("attachment; filename = \"{0}\"", FileName));
                    Response.BinaryWrite(fileData);

                    //Response.ContentType = "application/octet-stream";
                    //Response.AddHeader("content-disposition", "attachment;  filename=\"" + FileName + "\"");
                    //Response.BinaryWrite(fileData);
                    //Response.End();
                }
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { error = true, errorMessage = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public void GetJobListForCERApprovedJobs(string jobids, string solarCompanyId, int isApproved)
        {
            try
            {
                GridParam gridParam = Grid.ParseParams(HttpContext.Request);
                int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);
                IList<FormBot.Entity.PricingManager> lstJobs = _job.GetJobListForCERApprovedJobs(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, gridParam.SortCol, gridParam.SortDir, jobids, Convert.ToInt32(solarCompanyId), isApproved);

                List<FormBot.Entity.PricingManager> lstApproved = new List<FormBot.Entity.PricingManager>();
                List<FormBot.Entity.PricingManager> lstPending = new List<FormBot.Entity.PricingManager>();

                decimal STCCount = 0;

                for (int i = 0; i < lstJobs.Count; i++)
                {
                    if (lstJobs[i].STCStatus == 20)
                    {
                        lstPending.Add(lstJobs[i]);
                    }
                    else
                    {
                        lstApproved.Add(lstJobs[i]);
                    }
                }

                if (isApproved == 1)
                    lstJobs = lstApproved;
                else
                    lstJobs = lstPending;

                if (lstApproved.Count > 0)
                    STCCount = lstApproved.AsEnumerable().Sum(a => a.STC);
                if (lstPending.Count > 0)
                    STCCount = STCCount + lstPending.AsEnumerable().Sum(a => a.STC);

                if (lstJobs.Count > 0)
                {
                    lstJobs[0].ApprovedJobsCount = lstApproved.Count;
                    lstJobs[0].PendingJobsCount = lstPending.Count;
                    lstJobs[0].TotalSTCCount = STCCount;
                }

                HttpContext.Response.Write(Grid.PrepareDataSet(lstJobs, gridParam));
            }
            catch (Exception ex)
            {
            }
        }

        [AllowAnonymous]
        public JsonResult GetInstallerDesignerElectricianSignature(int signatureTypeId, int jobId, int installerDesignerElectricianId)
        {
            try
            {
                string signature = string.Empty;
                if (signatureTypeId > 0 && jobId > 0)
                {
                    signature = _jobDetails.GetInstallerDesignerElectricianSignature(signatureTypeId, jobId, installerDesignerElectricianId);
                }

                if (!string.IsNullOrEmpty(signature))
                    return Json(new { status = true, signature = signature.Replace("\\", "/") }, JsonRequestBehavior.AllowGet);
                else
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpPost]
        public async Task<JsonResult> CreateJobPopup(CreateJob createJob)
        {
            var IsCreateJobNotification = false;
            int solarCompanyId = 0;
            try
            {
                if (ProjectSession.LoggedInUserId == 0)
                {
                    return Json(new { status = false, isLogout = 1 }, JsonRequestBehavior.AllowGet); //return RedirectToAction("Logout", "Account");
                }
                createJob.BasicDetails.IsClassic = false;
                RequiredValidationField(createJob);

                //ModelState.Remove("BasicDetails.Title");
                //ModelState.Remove("BasicDetails.Description");
                ModelState.Remove("BasicDetails.JobNumber");

                if (ModelState.IsValid)
                {
                    //string jobNumber = string.Empty;
                    //DataSet dataSet = _job.CreateJobNumber(createJob.BasicDetails.JobType, ProjectSession.SolarCompanyId);
                    //if (dataSet != null && dataSet.Tables.Count > 0)
                    //{
                    //    jobNumber = dataSet.Tables[0].Rows[0].ItemArray[0].ToString();
                    //}
                    //createJob.BasicDetails.JobNumber = jobNumber;

                    if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5)
                    {
                        solarCompanyId = createJob.BasicDetails.SolarCompanyId;
                    }
                    else
                    {
                        solarCompanyId = ProjectSession.SolarCompanyId;
                    }

                    if (createJob.JobOwnerDetails.OwnerType == "Corporate body" || createJob.JobOwnerDetails.OwnerType == "Trustee")
                    {
                        bool isRegistered = false;
                        string GSTText = string.Empty;
                        string abnURL = "https://abr.business.gov.au/SearchByAbn.aspx?abn=" + createJob.JobOwnerDetails.CompanyABN;
                        try
                        {
                            HttpWebRequest wreq = (HttpWebRequest)WebRequest.Create(abnURL);
                            wreq.Method = "GET";
                            wreq.Timeout = -1;
                            wreq.ContentType = "application/json; charset=UTF-8";
                            var myHttpWebResponse = (HttpWebResponse)wreq.GetResponse();
                            string strResult;
                            using (var reader = new StreamReader(myHttpWebResponse.GetResponseStream(), System.Text.Encoding.UTF8))
                            {
                                strResult = reader.ReadToEnd();
                                myHttpWebResponse.Close();
                            }

                            if (strResult != null)
                            {
                                strResult = WebUtility.HtmlDecode(strResult);
                                HtmlDocument resultat = new HtmlDocument();
                                resultat.LoadHtml(strResult);

                                HtmlNode table = resultat.DocumentNode.SelectSingleNode("//table[1]");
                                if (table != null)
                                {
                                    foreach (var cell in table.SelectNodes(".//tr/th"))
                                    {
                                        string someVariable = cell.InnerText;
                                        if (cell.InnerText.ToLower() == "goods & services tax (gst):")
                                        {
                                            var td = cell.ParentNode.SelectNodes("./td");
                                            string tdValue = td[0].InnerText;
                                            GSTText = tdValue;
                                            if (tdValue.ToLower().Contains("registered from"))
                                            {
                                                isRegistered = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            isRegistered = false;
                        }
                        createJob.JobOwnerDetails.IsOwnerRegisteredWithGST = isRegistered;
                    }

                    //Int32 jobID = InsertCreateJobData(createJob, "", "");
                    KeyValuePair<bool, Int32> keyValue = _jobRules.InsertCreateJobData(ref createJob, "", "", solarCompanyId, ProjectSession.LoggedInUserId);
                    Int32 jobID = keyValue.Value;

                    string id = QueryString.QueryStringEncode("id=" + Convert.ToString(jobID));
                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobID);
                    DataSet ds = _jobSettingBAL.GetDefaultSettings();
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        DataRow dr = ds.Tables[1].Rows[0];
                        IsCreateJobNotification = Convert.ToBoolean(dr["IsCreateJobNotification"]);
                    }
                    createJob.docObject.jobId = Convert.ToString(jobID);
                    JsonResult docresult = null;
                    if (createJob.docObject.docs != null)
                    {
                        docresult = AddOtherDocuments(createJob.docObject).Result;
                    }
                    string JobHistoryMessage = "has created job Ref:" + createJob.BasicDetails.RefNumber + " (" + jobID + " )";
                    Common.SaveJobHistorytoXML(jobID, JobHistoryMessage, "General", "JobAdded", ProjectSession.LoggedInName, false);
                    return Json(new { status = true, jobName = createJob.BasicDetails.RefNumber, jobId = id, IsCreateJobNotification = IsCreateJobNotification, docresult = docresult }, JsonRequestBehavior.AllowGet);

                    // return Json(new { status = true, jobName = createJob.BasicDetails.RefNumber, jobId = id, IsCreateJobNotification = IsCreateJobNotification }, JsonRequestBehavior.AllowGet);

                }
                else
                {
                    string msg = string.Empty;
                    var erroneousFields = ModelState.Where(ms => ms.Value.Errors.Any())
                                       .Select(x => new { x.Key, x.Value.Errors });

                    foreach (var erroneousField in erroneousFields)
                    {
                        var fieldKey = erroneousField.Key;
                        var fieldErrors = erroneousField.Errors.Select(error => error.ErrorMessage).FirstOrDefault();
                        if (!string.IsNullOrEmpty(msg))
                            msg += Environment.NewLine;
                        msg += string.Format("{0}: {1}", fieldKey, fieldErrors);
                    }
                    return Json(new { status = false, error = msg }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                //WriteToLogFile("jobId = " + createJob.BasicDetails.JobID + " solarCompanyId : " + solarCompanyId + " Error : " + ex.Message);
                _log.LogException("jobId = " + createJob.BasicDetails.JobID + " solarCompanyId : " + solarCompanyId, ex);
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        //public Int32 InsertCreateJobData(CreateJob createJob, string panelXml, string inverterXml)
        //{
        //    if (createJob.BasicDetails.JobType == 2)
        //    {
        //        if (createJob.JobSystemDetails != null)
        //        {
        //            createJob.JobSystemDetails.CalculatedSTC = createJob.JobSystemDetails.CalculatedSTCForSWH;
        //        }

        //        if (!(createJob.UserType == 1 || createJob.UserType == 3))
        //        {
        //            if (createJob.JobSTCDetails != null)
        //            {
        //                createJob.JobSTCDetails.CertificateCreated = "No";
        //                createJob.JobSTCDetails.FailedAccreditationCode = "";
        //            }
        //        }
        //    }

        //    if (createJob.BasicDetails.strInstallationDate != null)
        //    {
        //        createJob.BasicDetails.InstallationDate = Convert.ToDateTime(createJob.BasicDetails.strInstallationDate);
        //    }
        //    else
        //    {
        //        createJob.BasicDetails.InstallationDate = null;
        //    }

        //    /* IsPostalAddress */
        //    if (createJob.BasicDetails.strSoldByDate != null)
        //    {
        //        createJob.BasicDetails.SoldByDate = Convert.ToDateTime(createJob.BasicDetails.strSoldByDate);
        //    }
        //    else
        //    {
        //        createJob.BasicDetails.SoldByDate = null;
        //    }

        //    if (createJob.JobElectricians != null)
        //    {
        //        if (createJob.JobElectricians.AddressID == 2)
        //        {
        //            createJob.JobElectricians.IsPostalAddress = true;
        //        }
        //        else
        //        {
        //            createJob.JobElectricians.IsPostalAddress = false;
        //        }
        //    }

        //    if (createJob.JobOwnerDetails.AddressID == 2)
        //    {
        //        createJob.JobOwnerDetails.IsPostalAddress = true;
        //    }
        //    else
        //    {
        //        createJob.JobOwnerDetails.IsPostalAddress = false;
        //    }

        //    if (createJob.JobInstallationDetails.AddressID == 2)
        //    {
        //        createJob.JobInstallationDetails.IsPostalAddress = true;
        //    }
        //    else
        //    {
        //        createJob.JobInstallationDetails.IsPostalAddress = false;
        //    }

        //    if (createJob.JobInstallerDetails != null)
        //    {
        //        if (createJob.JobInstallerDetails.AddressID == 2)
        //        {
        //            createJob.JobInstallerDetails.IsPostalAddress = true;
        //        }
        //        else
        //        {
        //            createJob.JobInstallerDetails.IsPostalAddress = false;
        //        }
        //    }

        //    Int32 jobID = 0;
        //    DataTable dtCustomField = GetCustomFieldDetail();
        //    if (createJob.lstCustomDetails != null)
        //    {
        //        for (int i = 0; i < createJob.lstCustomDetails.Count; i++)
        //        {
        //            dtCustomField.Rows.Add(new object[] { createJob.BasicDetails.JobID, createJob.lstCustomDetails[i].JobCustomFieldId, createJob.lstCustomDetails[i].FieldValue, ProjectSession.LoggedInUserId, DateTime.Now, ProjectSession.LoggedInUserId, DateTime.Now, 0 });
        //        }
        //        jobID = _job.InsertJob(createJob, panelXml, inverterXml,ProjectSession.SolarCompanyId,ProjectSession.LoggedInUserId, dtCustomField);
        //    }
        //    else
        //    {
        //        jobID = _job.InsertJob(createJob, panelXml, inverterXml,ProjectSession.SolarCompanyId,ProjectSession.LoggedInUserId);
        //    }
        //    // Int32 jobID = _job.InsertJob(createJob, panelXml, inverterXml, dtCustomField);
        //    return jobID;
        //}

        [HttpGet]
        public ActionResult CreateJobPopup()
        {
            return PartialView("_CreateJobPopup", new FormBot.Entity.CreateJob());
        }

        /// <summary>
        /// Get checkList classType dropdownlist.
        /// </summary>
        /// <returns>Items</returns>
        [HttpGet]
        public JsonResult GetJobFieldData()
        {
            List<SelectListItem> Items = _job.GetJobFieldData().Select(a => new SelectListItem { Text = a.FieldLabel, Value = a.JobFieldId.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetCheckListDocument(string jobId)
        {
            List<DocumentsView> documents = _documentsBAL.GetDocumentForCheckListItem(Convert.ToInt32(jobId));

            documents.ForEach(d =>
            {
                d.PhysicalPath = Path.Combine(ProjectSession.ProofDocuments, d.Path);
            });

            return Json(documents, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SaveSignatureToDocument(string documentIds, string jobSchedulingId)
        {
            try
            {
                //Get all signature by visit id
                List<KeyValuePair<int, string>> lstSignature = new List<KeyValuePair<int, string>>();
                DataSet dsSignature = _job.GetVisitSignature(Convert.ToInt32(jobSchedulingId));
                if (dsSignature != null && dsSignature.Tables[0] != null && dsSignature.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsSignature.Tables[0].Rows.Count; i++)
                    {
                        lstSignature.Add(new KeyValuePair<int, string>(Convert.ToInt32(dsSignature.Tables[0].Rows[i]["SignatureTypeId"]), Convert.ToString(dsSignature.Tables[0].Rows[i]["Path"])));
                    }
                }

                if (!string.IsNullOrEmpty(documentIds))
                {
                    List<DocumentsView> documents = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DocumentsView>>(documentIds);
                    for (int i = 0; i < documents.Count; i++)
                    {
                        string fileName = ProjectSession.ProofDocuments + documents[i].DownloadURLPath;

                        // get pdf item and fill with new signature
                        List<PdfItems> lstGetPDFItem = CommonHelper.GetPDFItems(fileName);
                        _job.FillPDFAndSave(lstGetPDFItem, fileName, true, lstSignature);

                        string jsonPDFData = Newtonsoft.Json.JsonConvert.SerializeObject(lstGetPDFItem);
                    }
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult ViewVisitSignature(string jobSchedulingId)
        {
            try
            {
                //Get all signature by visit id
                DataSet dsSignature = _job.GetVisitSignature(Convert.ToInt32(jobSchedulingId));
                List<VisitSignature> lstSignature = dsSignature.Tables[0].ToListof<VisitSignature>();
                return Json(new { signatures = lstSignature, status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        //[HttpPost]
        //public JsonResult JobInstallerDesignerElectricians(int jobId, int profileType, JobElectricians jobElectricians, JobInstallerDetails jobInstallerDetails)
        //{
        //    try
        //    {
        //        string jobSignPath = string.Empty;
        //        if (profileType == 3 && jobElectricians != null)
        //        {
        //            jobSignPath = !string.IsNullOrEmpty(jobElectricians.Signature) ? jobElectricians.Signature.Replace(ProjectSession.ProofDocumentsURL, "").Replace(ProjectSession.UploadedDocumentPath, "") : null;
        //            string eleSignName = System.IO.Path.GetFileName(jobElectricians.Signature);
        //            jobElectricians.Signature = eleSignName;
        //            //installerDesignerView = new InstallerDesignerView();
        //        }
        //        //else
        //        //{
        //        //    //jobSignPath = !string.IsNullOrEmpty(installerDesignerView.SESignature) ? installerDesignerView.SESignature.Replace(ProjectSession.ProofDocumentsURL, "").Replace(ProjectSession.UploadedDocumentPath, "") : null;
        //        //    //string instDesignSignName = System.IO.Path.GetFileName(installerDesignerView.SESignature);
        //        //    //installerDesignerView.SESignature = instDesignSignName;
        //        //    //jobElectricians = new JobElectricians();
        //        //}

        //        int savedProfileId = _job.JobInstallerDesignerElectricians_InsertUpdate(jobId, profileType, jobSignPath, jobElectricians, jobInstallerDetails, ProjectSession.LoggedInUserId);
        //        CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
        //        return Json(new { savedProfileId = savedProfileId, status = true, isExist = false }, JsonRequestBehavior.AllowGet);

        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
        //    }
        //}

        [HttpPost]
        //public async Task<JsonResult> UploadJobSignature(int jobId, string typeOfSignature)
        public JsonResult UploadJobSignature(int jobId, string typeOfSignature)
        {
            try
            {
                List<HelperClasses.UploadStatus> uploadStatus = new List<HelperClasses.UploadStatus>();
                if (Request.Files != null && Request.Files.Count != 0)
                {
                    for (var i = 0; i < Request.Files.Count; i++)
                    {
                        uploadStatus.Add(GetFileUpload(Request.Files[i], Convert.ToString(jobId)));
                    }
                }

                string signPath = string.Empty;
                signPath = uploadStatus[0].Path.Replace(ProjectSession.ProofDocuments, "");

                ////uploadStatus[0].Path = uploadStatus[0].Path.Replace(ProjectSession.ProofDocuments, ProjectConfiguration.ProjectImagePath);
                //uploadStatus[0].Path = uploadStatus[0].Path.Replace(ProjectSession.ProofDocuments, ProjectSession.UploadedDocumentPath);
                //Uri uri = new Uri(uploadStatus[0].Path);
                //if (uri != null)
                //{
                //    uploadStatus[0].AbsolutePath = uri.AbsolutePath;
                //}
                _job.UpdateJobSignature(jobId, signPath, Convert.ToInt32(typeOfSignature));
                _job.SaveSignatureLog(jobId, Convert.ToInt32(typeOfSignature), 1, null);
                //await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
                return Json(uploadStatus);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult UpdateJobSignature(int jobId, string signPath, string typeOfSignature)
        {
            try
            {
                signPath = !string.IsNullOrEmpty(signPath) ? signPath.Replace(ProjectSession.ProofDocumentsURL, "").Replace(ProjectSession.UploadedDocumentPath, "") : null;
                _job.UpdateJobSignature(jobId, signPath, Convert.ToInt32(typeOfSignature));
                _job.SaveSignatureLog(jobId, Convert.ToInt32(typeOfSignature), 3, null);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult DrawJobSignature(int jobId, string StringOwnerBaseSignature, string typeOfSignature)
        {
            try
            {
                string signPath = string.Empty;
                string fileName = string.Empty;

                ConvertIntoImage(StringOwnerBaseSignature, jobId, Convert.ToInt32(typeOfSignature));

                if (Convert.ToInt32(typeOfSignature) == 3)
                {
                    fileName = "ElectricianSign" + "_" + jobId + "." + "Png";
                }
                else if (Convert.ToInt32(typeOfSignature) == 2)
                {
                    fileName = "InstallerSign" + "_" + jobId + "." + "Png";
                }
                else if (Convert.ToInt32(typeOfSignature) == 4)
                {
                    fileName = "DesignerSign" + "_" + jobId + "." + "Png";
                }
                signPath = "JobDocuments/" + jobId + "/" + fileName;

                _job.UpdateJobSignature(jobId, signPath, Convert.ToInt32(typeOfSignature));
                return Json(new { status = true, signPath = signPath.Replace("\\", "/") }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<JsonResult> GetSignatureFromVisit(int jobId, string typeOfSignature)
        {
            try
            {
                string signPath = _job.GetDefaultSubmissionSignatureByJobId(jobId, Convert.ToInt32(typeOfSignature));
                _job.SaveSignatureLog(jobId, Convert.ToInt32(typeOfSignature), 2, null);
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
                return Json(new { status = true, signPath = signPath.Replace("\\", "/") }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult DeleteInstallerDesignerSignature(string filePath, string OldLogo)
        {
            string fileName = string.Empty;
            string folderName = string.Empty;
            fileName = System.IO.Path.GetFileName(filePath);
            folderName = Path.GetFileName(Path.GetDirectoryName(filePath));
            if (OldLogo != fileName && fileName != null)
            {
                DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "UserDocuments" + "\\" + folderName + "\\" + fileName));
                this.ShowMessage(SystemEnums.MessageType.Success, "File has been deleted successfully.", false);
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }

        public PartialViewResult LoadPreapprovalConnectionSTC(CreateJob createJob)
        {
            var stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(createJob.BasicDetails.JobID), ProjectSession.UserTypeId);

            if (stcBasicDetails != null)
            {
                ViewBag.STCStatusName = stcBasicDetails.Status;
                ViewBag.STCDescription = HttpUtility.HtmlDecode(stcBasicDetails.STCDescription);
                ViewBag.STCStatusId = stcBasicDetails.STCStatusId;
            }

            GetSTCStatusAndPreApprovalConnectionComment(Convert.ToInt32(createJob.BasicDetails.JobID));

            int distributorId = createJob.JobInstallationDetails.DistributorID != null ? Convert.ToInt32(createJob.JobInstallationDetails.DistributorID) : 0;
            List<FormBot.Entity.Documents.DocumentSteps> preApprovalDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "PreApprovals", createJob.BasicDetails.JobID);
            List<FormBot.Entity.Documents.DocumentSteps> connectionDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "Connections", createJob.BasicDetails.JobID);
            createJob.lstPreApprovalDocumentSteps = preApprovalDocumentSteps;
            createJob.lstConnectionDocumentSteps = connectionDocumentSteps;

            List<SelectListItem> listJobStatusPreapproval = _emailService.GetStatusForPreApprovalAndConnection(1).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
            ViewBag.listJobStatusPreapproval = listJobStatusPreapproval;

            List<SelectListItem> listJobStatusConnection = _emailService.GetStatusForPreApprovalAndConnection(2).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
            ViewBag.listJobStatusConnection = listJobStatusConnection;

            return this.PartialView("_PreapprovalConnectionSTC", createJob);
        }

        public STCDetailsModel GetSTCDetailsModel(int jobId, int IsSubmissionScreen)
        {
            STCDetailsModel model = new STCDetailsModel();
            var stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(jobId), ProjectSession.UserTypeId);

            //WriteToLogFile("21 : after GetStcBasicDetailsWithStatus" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            model.stcBasicDetails = stcBasicDetails == null ? new STCBasicDetails() : stcBasicDetails;
            if (stcBasicDetails != null)
            {
                ViewBag.CurrentSTCJobStatus = stcBasicDetails.STCStatusId;
            }

            if (stcBasicDetails.STCStatusId == 14)
            {
                DataSet dsDescription = _job.GetFailureReasonByJobId(stcBasicDetails.JobID);
                //WriteToLogFile("22 : after GetFailureReasonByJobId" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                if (dsDescription.Tables.Count > 0 && dsDescription.Tables[0] != null && dsDescription.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsDescription.Tables[0].Rows)
                    {
                        stcBasicDetails.STCDescription += "<br>" + "- " + dr["reason"];
                        //remove auditor details
                        if (!string.IsNullOrWhiteSpace(stcBasicDetails.STCDescription) && stcBasicDetails.STCDescription.Contains("Auditor"))
                        {
                            stcBasicDetails.STCDescription = stcBasicDetails.STCDescription.Remove(stcBasicDetails.STCDescription.IndexOf("Auditor"));
                        }
                    }


                }
            }
            string lastupdateddate = "";
            if (stcBasicDetails.STCLastUpdatedDate != null)
            {
                lastupdateddate = Convert.ToDateTime(stcBasicDetails.STCLastUpdatedDate).ToString("dd/MM/yyyy hh:mm tt");
            }

            ViewData["lastupdateddate"] = lastupdateddate;
            ViewData["Description"] = !string.IsNullOrEmpty(stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : stcBasicDetails.STCDescription;
            STCJobHistory STCJobHistory = new Entity.Job.STCJobHistory();
            STCJobHistory.lstSTCJobHistory = _job.GetSTCJobHistory(ProjectSession.LoggedInUserId, jobId, ProjectSession.UserTypeId);
            //WriteToLogFile("23 : after GetSTCJobHistory" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            model.stcJobHistory = STCJobHistory;
            FormBot.Entity.PricingManager stcPrice = _jobDetails.GetJobSTCPrice(Convert.ToString(jobId));
            //WriteToLogFile("24 : after GetJobSTCPrice" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            //stcPrice.IsShowInDashboard = true;
            model.pricingManager = stcPrice;
            model.pricingManager.STCSettlementTerm = (stcBasicDetails.STCSettlementTerm == null) ? 0 : Convert.ToInt32(stcBasicDetails.STCSettlementTerm);
            model.pricingManager.STCStatus = stcBasicDetails.STCStatusId;

            if (stcPrice.IsSAASUser)
            {
                model.pricingManager.PricingManagerSAAS = _pricingManagerBAL.GetGlobalPriceForSAAS(stcPrice.SAASUserId, true);
            }
            //if (model.pricingManager.CustomSettlementTerm > 0)
            //{
            //    model.pricingManager.CustomTermText = "Custom - " + Common.GetDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)model.pricingManager.CustomSettlementTerm, "");
            //    model.pricingManager.CustomSubDescription = Common.GetSubDescription((FormBot.Helper.SystemEnums.STCSettlementTerm)model.pricingManager.CustomSettlementTerm, "");
            //}
            if (IsSubmissionScreen == 1)
            {
                model.pricingManager.IsSubmissionScreen = 1;
            }

            DataSet headerDetails = _job.GetHeaderDetails(jobId);
            //WriteToLogFile("25 : after GetHeaderDetails" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
            {
                DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                model.stcBasicDetails.Header = dr["Header"].ToString();
            }

            model.pricingManager.JobID = jobId;
            return model;
        }

        [HttpGet]
        public JsonResult GetSTCBasicDetails(string jobId)
        {
            STCBasicDetails stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(jobId), ProjectSession.UserTypeId);

            return Json(new { status = true, stcStatus = stcBasicDetails.Status.ToLower() }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult ClearJobSignture(int jobId, string typeOfSignature, string signaturePath, bool isUpload)
        {
            try
            {
                _job.UpdateJobSignature(jobId, null, Convert.ToInt32(typeOfSignature));
                if (isUpload)
                {
                    DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + signaturePath));
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult LoadAllPhotosListddl(int jobId)
        {

            DataSet dsCheckListPhotos = _job.GetChecklistPhotos(jobId);
            DataTable dtPhotoCheckList = dsCheckListPhotos.Tables[1];
            List<string> Listofphotos = new List<string>();
            List<Photo> completephotoList = new List<Photo>();
            string path;
            string BaseUrl = System.Configuration.ConfigurationManager.AppSettings["UploadedDocumentPath"];
            foreach (DataRow dr in dtPhotoCheckList.Rows)
            {
                Photo photoList = new Photo();
                path = Path.Combine(BaseUrl, Convert.ToString(dr["Path"].ToString().Replace("\\\\", "\\")));
                photoList.Path = path;
                photoList.VisitCheckListPhotoId = Convert.ToString(dr["VisitCheckListPhotoId"]);
                photoList.CreatedDate = Convert.ToString(dr["CreatedDate"]);
                photoList.Latitude = Convert.ToString(dr["Latitude"]);
                photoList.Longitude = Convert.ToString(dr["Longitude"]);
                completephotoList.Add(photoList);
            }

            return Json(completephotoList, JsonRequestBehavior.AllowGet);
        }

        public chkPhotos LoadAllPhotosOfNewJob(int jobId)
        {
            List<JobSchedulingPhotos> objLst = new List<JobSchedulingPhotos>();
            //Karan
            DataSet dsCheckListPhotos = _job.GetChecklistPhotos(jobId);
            chkPhotos objChk = new chkPhotos();

            if (dsCheckListPhotos.Tables.Count > 0)
            {
                DataTable dtSchedulingIds = dsCheckListPhotos.Tables[0];
                DataTable dtData = dsCheckListPhotos.Tables[1];
                DataTable dtCheckListCount = dsCheckListPhotos.Tables[2];
                DataTable dtName = dsCheckListPhotos.Tables[3];
                DataRow[] ReferencePhotos = dtData.Select("IsReference=1");
                DataRow[] DefaultPhotos = dtData.Select("IsDefault=1");
                foreach (DataRow row in dtSchedulingIds.Rows)
                {
                    JobSchedulingPhotos obj = new JobSchedulingPhotos();
                    //string visitId = Convert.ToString(row["VisitNum"]);
                    //string visitNum = string.Empty;
                    //if (visitId.Length == 1)
                    //    visitNum = "00" + visitId;
                    //else if (visitId.ToString().Length == 2)
                    //    visitNum = "0" + visitId;
                    //else
                    //    visitNum = visitId;

                    //obj.UniqueVisitID = Convert.ToDateTime(row["CreatedDate"]).Year.ToString().Substring(2) + (Convert.ToDateTime(row["CreatedDate"]).Month.ToString().Length == 1 ? "0" + Convert.ToDateTime(row["CreatedDate"]).Month.ToString() : Convert.ToDateTime(row["CreatedDate"]).Month.ToString()) + Convert.ToDateTime(row["CreatedDate"]).Day.ToString() + visitNum;
                    obj.UniqueVisitID = Convert.ToString(row["VisitUniqueId"]);
                    obj.jobSchedulingId = Convert.ToInt32(row["JobSchedulingID"]);
                    obj.jobId = jobId;
                    obj.IsDefaultSubmission = Convert.ToBoolean(row["IsDefaultSubmissionofJob"]);

                    obj.IsDeleted = Convert.ToBoolean(row["IsDeleted"]);

                    DataRow[] result = dtData.Select("JobSchedulingId = " + obj.jobSchedulingId.ToString());

                    List<VisitCheckListItems> lstVisitCheckListItem = new List<VisitCheckListItems>();

                    int serialNumTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 1).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                    int capturePhotoTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 2).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                    int signatureTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 3).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();

                    DataRow[] checklistitems = dtName.Select("JobSchedulingId = " + obj.jobSchedulingId.ToString());

                    foreach (DataRow dr in checklistitems)
                    {
                        int count = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                        int visitedCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("VisitedCount")).FirstOrDefault();

                        VisitCheckListItems visitCheckListItem = new VisitCheckListItems();
                        visitCheckListItem.VisitCheckListItemId = Convert.ToString(dr["VisitCheckListItemId"]);
                        visitCheckListItem.FolderName = Convert.ToString(dr["FolderName"]); //if(!string.IsNullOrEmpty(Convert.ToString(dr["FolderName"])) ? Convert.ToString(dr["FolderName"]) : ;

                        visitCheckListItem.TotalCount = count;
                        visitCheckListItem.VisitedCount = visitedCount;
                        visitCheckListItem.CheckListClassTypeId = Convert.ToInt32(dr["CheckListClassTypeId"]); // dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("CheckListClassTypeId")).FirstOrDefault();
                        visitCheckListItem.PDFLocationId = Convert.ToString(dr["PDFLocationId"]);
                        visitCheckListItem.CaptureUploadImagePDFName = Convert.ToString(dr["CaptureUploadImagePDFName"]);
                        visitCheckListItem.Isdeleted = Convert.ToBoolean(dr["IsDeleted"]);
                        visitCheckListItem.CheckListPhotoTypeId = !string.IsNullOrEmpty(dr["CheckListPhotoTypeId"].ToString()) ? Convert.ToInt32(dr["CheckListPhotoTypeId"]) : 0;
                        DataRow[] checkListPhotos = dtData.Select("VisitCheckListItemId = " + visitCheckListItem.VisitCheckListItemId);
                        List<Photo> objList = new List<Photo>();
                        foreach (DataRow drPhotos in checkListPhotos)
                        {
                            Photo p = new Photo();
                            p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                            p.Path = Convert.ToString(drPhotos["Path"]);
                            p.VisitCheckListPhotoId = Convert.ToString(drPhotos["VisitCheckListPhotoId"]);
                            p.VisitSignatureId = Convert.ToString(drPhotos["VisitSignatureId"]);
                            p.Latitude = Convert.ToString(drPhotos["Latitude"]);
                            p.Longitude = Convert.ToString(drPhotos["Longitude"]);
                            p.CreatedDate = Convert.ToString(drPhotos["CreatedDate"]);
                            p.IsUnderInstallationArea = Convert.ToString(drPhotos["IsUnderInstallationArea"]);
                            objList.Add(p);
                        }

                        visitCheckListItem.lstCheckListPhoto = objList;

                        if (visitCheckListItem.CheckListClassTypeId != 5)
                        {
                            lstVisitCheckListItem.Add(visitCheckListItem);
                        }
                    }

                    obj.serialNumTotalCount = serialNumTotalCount;
                    obj.capturePhotoTotalCount = capturePhotoTotalCount;
                    obj.signatureTotalCount = signatureTotalCount;
                    obj.lstVisitCheckListItem = lstVisitCheckListItem;
                    if (obj.lstVisitCheckListItem.Count > 0)
                    {
                        objLst.Add(obj);
                    }
                }

                List<Photo> chkReference = new List<Photo>();
                foreach (DataRow drRef in ReferencePhotos)
                {
                    string path = drRef["Path"].ToString();
                    Photo objPhoto = new Photo();
                    objPhoto.Path = path;
                    objPhoto.Name = Path.GetFileName(path);
                    objPhoto.VisitCheckListPhotoId = Convert.ToString(drRef["VisitCheckListPhotoId"]);
                    objPhoto.VisitSignatureId = Convert.ToString(drRef["VisitSignatureId"]);
                    chkReference.Add(objPhoto);
                }


                List<Photo> objInstall = new List<Photo>();
                List<Photo> objSerial = new List<Photo>();

                foreach (DataRow dRow in DefaultPhotos)
                {
                    int ClassType = Convert.ToInt32(dRow["ClassType"]);
                    Photo p = new Photo();
                    p.VisitCheckListPhotoId = Convert.ToString(dRow["VisitCheckListPhotoId"]);
                    p.VisitSignatureId = Convert.ToString(dRow["VisitSignatureId"]);
                    p.Path = dRow["Path"].ToString();
                    p.Name = Path.GetFileName(p.Path);
                    p.Latitude = Convert.ToString(dRow["Latitude"]);
                    p.Longitude = Convert.ToString(dRow["Longitude"]);

                    p.CreatedDate = Convert.ToString(dRow["CreatedDate"]);

                    if (ClassType == 1)
                        objSerial.Add(p);
                    else if (ClassType == 2)
                        objInstall.Add(p);

                }
                objChk.InstallationPhotos = objInstall;

                objChk.SerialPhotos = objSerial;
                objChk.jobId = jobId;
                objChk.chkJobPhotos = objLst;
                objChk.ReferencePhotos = chkReference;
            }

            return objChk;
        }

        [HttpGet]
        public PartialViewResult ReloadJobPhoto(int jobId)
        {
            //WriteToLogFile("StartTime (Get ReloadJobPhoto) :" + DateTime.Now);

            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;
            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
            //createJob.JobElectricians = JobElectricians(jobId);

            //WriteToLogFile("EndTime (Get ReloadJobPhoto) :" + DateTime.Now);

            return PartialView("_JobPhotosNew", createJob);
        }

        [HttpGet]
        public JsonResult ReloadJobPhotoTabular(int jobId)
        {
            //WriteToLogFile("StartTime (Get ReloadJobPhoto) :" + DateTime.Now);

            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;
            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
            var photoView = ControlToString("~/Views/Job/_JobPhotosNewTabular.cshtml", createJob);
            return Serializer.GetJsonResult(new { photoView });
        }
        [HttpGet]
        public PartialViewResult GetSTCJobHistory(int jobId)
        {
            STCJobHistory STCJobHistory = new Entity.Job.STCJobHistory();
            STCJobHistory.lstSTCJobHistory = _job.GetSTCJobHistory(ProjectSession.LoggedInUserId, jobId, ProjectSession.UserTypeId);
            foreach (var item in STCJobHistory.lstSTCJobHistory)
            {
                //remove auditor details
                if (!string.IsNullOrWhiteSpace(item.Desc) && item.Desc.Contains("Auditor"))
                {
                    item.Desc = item.Desc.Remove(item.Desc.IndexOf("Auditor"));
                }

            }
            return PartialView("_StcJobHistory", STCJobHistory);
        }
        [HttpGet]
        public PartialViewResult DeletedCheckListItem(int jobId)
        {
            List<JobSchedulingPhotos> objLst = new List<JobSchedulingPhotos>();
            //Karan
            DataSet dsCheckListPhotos = _job.DeletedCheckListItem(jobId);
            CreateJob objcreateJob = new CreateJob();
            chkPhotos objChk = new chkPhotos();

            if (dsCheckListPhotos.Tables.Count > 0)
            {
                DataTable dtSchedulingIds = dsCheckListPhotos.Tables[0];
                DataTable dtData = dsCheckListPhotos.Tables[1];
                DataTable dtCheckListCount = dsCheckListPhotos.Tables[2];
                DataTable dtName = dsCheckListPhotos.Tables[3];
                DataRow[] ReferencePhotos = dtData.Select("IsReference=1");
                DataRow[] DefaultPhotos = dtData.Select("IsDefault=1");
                foreach (DataRow row in dtSchedulingIds.Rows)
                {
                    JobSchedulingPhotos obj = new JobSchedulingPhotos();

                    //string visitId = Convert.ToString(row["VisitNum"]);
                    //string visitNum = string.Empty;
                    //if (visitId.Length == 1)
                    //    visitNum = "00" + visitId;
                    //else if (visitId.ToString().Length == 2)
                    //    visitNum = "0" + visitId;
                    //else
                    //    visitNum = visitId;

                    //obj.UniqueVisitID = Convert.ToDateTime(row["CreatedDate"]).Year.ToString().Substring(2) + (Convert.ToDateTime(row["CreatedDate"]).Month.ToString().Length == 1 ? "0" + Convert.ToDateTime(row["CreatedDate"]).Month.ToString() : Convert.ToDateTime(row["CreatedDate"]).Month.ToString()) + Convert.ToDateTime(row["CreatedDate"]).Day.ToString() + visitNum;
                    obj.UniqueVisitID = Convert.ToString(row["VisitUniqueId"]);
                    obj.jobSchedulingId = Convert.ToInt32(row["JobSchedulingID"]);
                    obj.jobId = jobId;
                    obj.IsDefaultSubmission = Convert.ToBoolean(row["IsDefaultSubmissionofJob"]);

                    obj.IsDeleted = Convert.ToBoolean(row["IsDeleted"]);

                    DataRow[] result = dtData.Select("JobSchedulingId = " + obj.jobSchedulingId.ToString());

                    List<VisitCheckListItems> lstVisitCheckListItem = new List<VisitCheckListItems>();

                    int serialNumTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 1).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                    int capturePhotoTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 2).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                    int signatureTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 3).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();

                    DataRow[] checklistitems = dtName.Select("JobSchedulingId = " + obj.jobSchedulingId.ToString());

                    foreach (DataRow dr in checklistitems)
                    {
                        int count = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                        int visitedCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("VisitedCount")).FirstOrDefault();

                        VisitCheckListItems visitCheckListItem = new VisitCheckListItems();
                        visitCheckListItem.VisitCheckListItemId = Convert.ToString(dr["VisitCheckListItemId"]);
                        visitCheckListItem.FolderName = Convert.ToString(dr["FolderName"]); //if(!string.IsNullOrEmpty(Convert.ToString(dr["FolderName"])) ? Convert.ToString(dr["FolderName"]) : ;

                        visitCheckListItem.TotalCount = count;
                        visitCheckListItem.VisitedCount = visitedCount;
                        visitCheckListItem.CheckListClassTypeId = Convert.ToInt32(dr["CheckListClassTypeId"]); // dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("CheckListClassTypeId")).FirstOrDefault();
                        visitCheckListItem.PDFLocationId = Convert.ToString(dr["PDFLocationId"]);
                        visitCheckListItem.CaptureUploadImagePDFName = Convert.ToString(dr["CaptureUploadImagePDFName"]);
                        visitCheckListItem.Isdeleted = Convert.ToBoolean(dr["IsDeleted"]);
                        DataRow[] checkListPhotos = dtData.Select("VisitCheckListItemId = " + visitCheckListItem.VisitCheckListItemId);
                        List<Photo> objList = new List<Photo>();
                        foreach (DataRow drPhotos in checkListPhotos)
                        {
                            Photo p = new Photo();
                            p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                            p.Path = Convert.ToString(drPhotos["Path"]);
                            p.VisitCheckListPhotoId = Convert.ToString(drPhotos["VisitCheckListPhotoId"]);
                            p.VisitSignatureId = Convert.ToString(drPhotos["VisitSignatureId"]);
                            p.Latitude = Convert.ToString(drPhotos["Latitude"]);
                            p.Longitude = Convert.ToString(drPhotos["Longitude"]);
                            p.CreatedDate = Convert.ToString(drPhotos["CreatedDate"]);
                            objList.Add(p);
                        }

                        visitCheckListItem.lstCheckListPhoto = objList;

                        if (visitCheckListItem.CheckListClassTypeId != 5)
                        {
                            lstVisitCheckListItem.Add(visitCheckListItem);
                        }
                    }

                    obj.serialNumTotalCount = serialNumTotalCount;
                    obj.capturePhotoTotalCount = capturePhotoTotalCount;
                    obj.signatureTotalCount = signatureTotalCount;
                    obj.lstVisitCheckListItem = lstVisitCheckListItem;
                    if (obj.lstVisitCheckListItem.Count > 0)
                    {
                        objLst.Add(obj);
                    }
                }

                List<Photo> chkReference = new List<Photo>();
                foreach (DataRow drRef in ReferencePhotos)
                {
                    string path = drRef["Path"].ToString();
                    Photo objPhoto = new Photo();
                    objPhoto.Path = path;
                    objPhoto.Name = Path.GetFileName(path);
                    objPhoto.VisitCheckListPhotoId = Convert.ToString(drRef["VisitCheckListPhotoId"]);
                    objPhoto.VisitSignatureId = Convert.ToString(drRef["VisitSignatureId"]);
                    chkReference.Add(objPhoto);
                }


                List<Photo> objInstall = new List<Photo>();
                List<Photo> objSerial = new List<Photo>();

                foreach (DataRow dRow in DefaultPhotos)
                {
                    int ClassType = Convert.ToInt32(dRow["ClassType"]);
                    Photo p = new Photo();
                    p.VisitCheckListPhotoId = Convert.ToString(dRow["VisitCheckListPhotoId"]);
                    p.VisitSignatureId = Convert.ToString(dRow["VisitSignatureId"]);
                    p.Path = dRow["Path"].ToString();
                    p.Name = Path.GetFileName(p.Path);
                    p.Latitude = Convert.ToString(dRow["Latitude"]);
                    p.Longitude = Convert.ToString(dRow["Longitude"]);
                    p.CreatedDate = Convert.ToString(dRow["CreatedDate"]);

                    if (ClassType == 1)
                        objSerial.Add(p);
                    else if (ClassType == 2)
                        objInstall.Add(p);

                }
                objChk.InstallationPhotos = objInstall;

                objChk.SerialPhotos = objSerial;
                objChk.jobId = jobId;
                objChk.chkJobPhotos = objLst;
                objChk.ReferencePhotos = chkReference;
            }

            // return objChk;



            objcreateJob.chkPhotosAll = objChk;
            return PartialView("_DeletedCheckListItem", objcreateJob);
        }


        [HttpGet]
        public PartialViewResult RestoreCheckListItem(int jobId)
        {
            // RestoreChecklist obj = new RestoreChecklist();
            //  DataSet ds = _job.RestoreCheckListItem(jobscId);

            // obj.restoreChecklists = DBClient.DataTableToList<RestoreChecklist>(ds.Tables[0]);
            // return PartialView("_RestoreCheckListItem", obj);
            // List<RestoreChecklist> chkPhotos = DBClient.DataTableToList<RestoreChecklist>(ds.Tables[0]);
            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;

            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
            if (createJob.chkPhotosAll.chkJobPhotos != null)
            {
                createJob.chkPhotosAll.chkJobPhotos = createJob.chkPhotosAll.chkJobPhotos.Where(a => a.IsDeleted == false).ToList();
            }
            return PartialView("_RestoreCheckListItem", createJob);

        }
        [HttpGet]
        public JsonResult RestoreData(int jobscId, int vclId, string vcphotoId)
        {
            RestoreChecklist obj = new RestoreChecklist();
            DataSet ds = _job.RestoreCheckListItem(jobscId);
            DataTable data = ds.Tables[0];

            DataRow[] checklistitems = data.Select("VisitCheckListItemId=" + vclId);
            // string s = "a,b, b, c";
            string[] values = vcphotoId.Split(',');


            foreach (DataRow dr in checklistitems)
            {
                DataSet dsCheckListPhotos = _job.DeletedCheckListItem(Convert.ToInt16(dr["JobId"]));
                DataTable dt = dsCheckListPhotos.Tables[1];
                DataSet photos = _job.GetphotosbyMultipleIds(Convert.ToInt16(dr["JobId"]), vcphotoId);
                //List<DataRow> checkListPhotos = photos.Tables[0].Select().ToList();
                List<string> checklistphoto = new List<string>();

                // DataRow[] checkListPhotos = dt.Select("VisitCheckListPhotoId = " +vcphotoId);
                List<Photo> objList = new List<Photo>();
                List<string> lststr = new List<string>();
                List<DataRow> row = dsCheckListPhotos.Tables[1].AsEnumerable().Where(j => j.Field<int?>("VisitCheckListItemId") == vclId).Select(c => c).ToList();
                // List<string> photopath = dsCheckListPhotos.Tables[1].AsEnumerable().Select(c => c.Field<string>("Path")).Where(j=>j.Field<int>("VisitCheckListItemId") == vclId);
                foreach (DataRow dr1 in row)
                {
                    lststr.Add(dr1[3].ToString());
                }

                //List<string> photopath = dsCheckListPhotos.Tables[1].AsEnumerable().Select(r =>r.Field<string>("Path") ).Distinct().ToList();
                List<string> photoname = new List<string>();
                foreach (string s in lststr)
                {
                    Photo ph = new Photo();
                    ph.Name = Path.GetFileName(s);

                    photoname.Add(ph.Name);
                }

                //for (int j = 0; j < values.Length; j++)
                //{
                //    values[j] = values[j].Trim();}
                for (int i = 0; i < photos.Tables[0].Rows.Count; i++)
                {
                    string strchecklistphoto = Convert.ToString(photos.Tables[0].Rows[i]["Path"]);
                    int VisitChecklistPhotosId = Convert.ToInt32(photos.Tables[0].Rows[i]["VisitCheckListPhotoId"]);
                    Photo p = new Photo();
                    p.Name = Path.GetFileName(strchecklistphoto);

                    string path = Convert.ToString(strchecklistphoto);
                    // p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                    // string path = Convert.ToString(drPhotos["Path"]);
                    string orignalFileName = Path.GetFileNameWithoutExtension(path);
                    string fileExtension = Path.GetExtension(path);
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string proofDocumentsFolderURL = ProjectSession.ProofDocumentsURL;
                    string profileDestinationDirectory = ProjectSession.ProofDocuments + "JobDocuments" + "\\" + Convert.ToInt16(dr["JobId"]) + "\\" + "checklistitem" + "\\" + Convert.ToInt16(dr["VisitCheckListItemId"]);

                    if (!Directory.Exists(profileDestinationDirectory))
                    {
                        Directory.CreateDirectory(profileDestinationDirectory);
                    }


                    string oldpath = Path.Combine(proofDocumentsFolder, strchecklistphoto);

                    if (photoname.Contains(p.Name))
                    {

                        string fileDirectory = Path.GetDirectoryName(path);
                        int j = 1;
                        while (true)
                        {

                            string orgname = orignalFileName + "(" + j + ")" + fileExtension;
                            proofDocumentsFolderURL = proofDocumentsFolder + "JobDocuments" + "\\" + Convert.ToInt16(dr["JobId"]) + "\\" + "checklistitem" + "\\" + Convert.ToInt16(dr["VisitCheckListItemId"]) + "\\" + orignalFileName + "(" + j + ")" + fileExtension;


                            if (photoname.Contains(orgname))
                            {
                                j++;

                            }
                            else
                            {
                                path = proofDocumentsFolderURL;


                            }
                            string renameFileName = @"JobDocuments\" + Convert.ToInt16(dr["JobId"]) + @"\checklistitem\" + Convert.ToInt16(dr["VisitCheckListItemId"]) + @"\" + orignalFileName + "(" + j + ")" + fileExtension;
                            _job.RestoreData(vclId, renameFileName, jobscId, VisitChecklistPhotosId);
                            break;
                        }

                        System.IO.File.Move(oldpath, path);


                    }
                    else
                    {


                        path = @"JobDocuments\" + Convert.ToInt16(dr["JobId"]) + @"\checklistitem\" + Convert.ToInt16(dr["VisitCheckListItemId"]) + @"\" + orignalFileName + fileExtension;

                        proofDocumentsFolderURL = proofDocumentsFolder + "JobDocuments" + "\\" + Convert.ToInt16(dr["JobId"]) + "\\" + "checklistitem" + "\\" + Convert.ToInt16(dr["VisitCheckListItemId"]) + "\\" + orignalFileName + fileExtension;

                        System.IO.File.Move(oldpath, proofDocumentsFolderURL);
                        _job.RestoreData(vclId, path, jobscId, VisitChecklistPhotosId);
                    }
                }



            }
            //LoadAllPhotosOfNewJob(obj.jobId);
            //CreateJob createJob = new CreateJob();
            // createJob.chkPhotosAll = LoadAllPhotosOfNewJob(obj.jobId);
            //var photoView = ControlToString("~/Views/Job/_JobPhotosNew.cshtml", createJob);

            return Json(new { status = true }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult RestoreDeletedVisit(string jobscId)
        {
            _job.GetVisitData(jobscId);
            return Json(new { status = true }, JsonRequestBehavior.AllowGet);


        }
        [HttpGet]
        public async Task<PartialViewResult> GetSTCJobNewScreen(int jobId)
        {
            //WriteToLogFile("StartTime (GetSTCJobNewScreen) :" + DateTime.Now);

            STCDetailsModel sTCDetailsModel = CommonForSTCJob(jobId, false, false, null);
            //ViewData["Description"] = sTCDetailsModel.stcBasicDetails.STCDescription;
            ViewData["Description"] = !string.IsNullOrEmpty(sTCDetailsModel.stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(sTCDetailsModel.stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : sTCDetailsModel.stcBasicDetails.STCDescription;
            //WriteToLogFile("EndTime (GetSTCJobNewScreen) :" + DateTime.Now);
            await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
            return PartialView("_STCJobNewScreen", sTCDetailsModel);
        }

        [HttpGet]
        public JsonResult GetJobHeader(int jobId)
        {
            string header = string.Empty;
            try
            {
                DataSet headerDetails = _job.GetHeaderDetails(jobId);
                if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                    header = dr["Header"].ToString();
                }
                return Json(new { status = true, header = header }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public void GetSTCStatusAndPreApprovalConnectionComment(int jobId)
        {

            DataSet ds = _jobDetails.GetStatusDetails(Convert.ToInt32(jobId));

            //WriteToLogFile("15 : after GetStatusDetails" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            if (ds != null && ds.Tables.Count == 2)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ViewBag.PreApprovalStatus = ds.Tables[0].Rows[0]["PreapprovalStatus"].ToString();
                    ViewBag.PreApprovalComment = ds.Tables[0].Rows[0]["PreapprovalComment"].ToString();
                }

                if (ds.Tables[1].Rows.Count > 0)
                {
                    ViewBag.ConnectionStatus = ds.Tables[1].Rows[0]["ConnectionStatus"].ToString();
                    ViewBag.ConnectionComment = ds.Tables[1].Rows[0]["ConnectionComment"].ToString();
                }
            }
        }

        [HttpGet]
        public PartialViewResult GetJobCustomFields(int jobId)
        {
            List<CustomField> lstCustomField = _job.GetJobCustomFields(jobId, true);
            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;
            createJob.lstCustomField = lstCustomField;
            return PartialView("_CustomJobFieldPopup", createJob);
        }

        [HttpGet]
        public PartialViewResult ReloadCustomFields(int jobId)
        {
            //WriteToLogFile("StartTime (Get ReloadCustomFields) :" + DateTime.Now);

            List<CustomField> lstCustomField = _job.GetJobCustomFields(jobId, false);
            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;
            createJob.lstCustomField = lstCustomField;

            //WriteToLogFile("EndTime (Get ReloadCustomFields) :" + DateTime.Now);

            return PartialView("_CustomJobField", createJob);
        }

        [HttpPost]
        public JsonResult SaveCustomField(string customFields)
        {
            try
            {
                List<CustomField> lstCustomField = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CustomField>>(customFields);
                DataTable dtCustomField = CustomFieldTable();
                if (lstCustomField.Count > 0)
                {
                    for (int i = 0; i < lstCustomField.Count; i++)
                    {
                        DataRow dr = dtCustomField.NewRow();
                        dr["VisitCheckListItemId"] = lstCustomField[i].VisitCheckListItemId;
                        dr["FieldValue"] = lstCustomField[i].FieldValue;
                        dtCustomField.Rows.Add(dr);
                    }
                    _job.UpdateCustomJobField(dtCustomField);
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public DataTable CustomFieldTable()
        {
            DataTable dtCustomField = new DataTable();
            dtCustomField.Columns.Add("VisitCheckListItemId", typeof(int));
            dtCustomField.Columns.Add("FieldValue", typeof(string));
            return dtCustomField;
        }

        /// <summary>
        /// owner verification.
        /// </summary>
        /// <param name="Id">The identifier.</param>
        /// <returns>view result</returns>
        [HttpGet]
        public PartialViewResult _InstallerVerification(string Id, string Type, string SMSOrMail)
        {
            CreateJob createJob = GetVerification(Id);
            createJob.Type = Type;
            createJob.SMSOrMail = SMSOrMail;
            return PartialView("_InstallerVerification", createJob);
        }

        /// <summary>
        /// owner verification
        /// </summary>
        /// <param name="ownerlastName">owner last name</param>
        /// <param name="jobid">take job</param>
        /// <param name="ownerPostcode">owner post code</param>
        /// <returns>object result</returns>
        [HttpPost]
        //public JsonResult _InstallerVerification(string installerlastName, int Jobid, string installerCECNum)
        //{
        //    CreateJob createJob = _job.GetJobByID(Convert.ToInt32(Jobid));
        //    if (createJob.InstallerView.LastName.ToLower() == installerlastName.ToLower().Trim() && createJob.InstallerView.CECAccreditationNumber.ToLower() == installerCECNum.ToLower().Trim())
        //    {
        //        return Json(true, JsonRequestBehavior.AllowGet);
        //    }
        //    else
        //    {
        //        return Json(false, JsonRequestBehavior.AllowGet);
        //    }

        //}
        public JsonResult _InstallerVerification(string installerlastName, int Jobid, string installerCECNum, string installerLicenceNum)
        {
            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(Jobid));
            if (installerLicenceNum == "null")
            {
                if (createJob.InstallerView.LastName.ToLower().Trim() == installerlastName.ToLower().Trim() && createJob.InstallerView.CECAccreditationNumber.ToLower().Trim() == installerCECNum.ToLower().Trim())
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }

            }
            if (installerCECNum == "null")
            {
                if (createJob.JobInstallerDetails.Surname.ToLower().Trim() == installerlastName.ToLower().Trim() && createJob.JobInstallerDetails.LicenseNumber.ToLower().Trim() == installerLicenceNum.ToLower().Trim())
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }

            }
            return Json(false, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public PartialViewResult _InstallerSignature(string Id, string Type, string SMSOrMail, DateTime LinkSentedDateTime)
        {
            if ((DateTime.Now - LinkSentedDateTime).TotalMinutes > Convert.ToInt32(ConfigurationManager.AppSettings["LinkSendForSignatureExpirationTimeInMinute"]))
            {
                return PartialView("_SignatureLinkExpired");
            }
            else
            {
                CreateJob createJob = GetJobDetailsForInstallerDesignerEleOwnerSignature(Id, SystemEnums.TypeOfSignature.Installer.GetHashCode());
                createJob.Type = Type;
                createJob.SMSOrMail = SMSOrMail;
                return PartialView("_InstallerSignature", createJob);
            }

        }

        /// <summary>
        /// _s the owner signature save.
        /// </summary>
        /// <param name="ownerSignature">ownerSignature</param>
        /// <param name="jobid">jobid</param>
        /// <param name="isUploaded">isUploaded</param>
        /// <param name="stringOwnerBaseSignature">stringOwnerBaseSignature</param>
        /// <param name="latitude">latitude</param>
        /// <param name="longitude">longitude</param>
        /// <param name="ipAddress">ipAddress</param>
        /// <param name="location">location</param>
        /// <returns>json result</returns>
        [HttpPost]
        public async Task<JsonResult> _InstallerSignatureSave(string Type, string InstallerSignature, int jobid, bool IsUploaded, string StringInstallerBaseSignature, string latitude, string longitude, string ipAddress, string location, int typeOfSignature, bool isSameDesigner, bool isSameElectrician, string name, string Email, string CompanyName, string RefNumber, string Base30, string InstallerEmail, string InstallerMobile, string SMSOrMail, bool IsEmployee, bool IsChangedDesign)
        {
            try
            {
                bool result = UpdateInstallerDesignerEleSignature(InstallerSignature, jobid, IsUploaded, StringInstallerBaseSignature, latitude, longitude, ipAddress, location, typeOfSignature, false, isSameDesigner, isSameElectrician);
                if (result)
                {
                    //if (!isAll)
                    //{
                    //    SaveSignatureHistory("Installer", jobid, Type, InstallerMobile, InstallerEmail);
                    //}
                    //else
                    //{
                    //    SaveSignatureHistory("Installer", jobid, Type, InstallerMobile, InstallerEmail);
                    //    SaveSignatureHistory("Designer", jobid, Type, InstallerMobile, InstallerEmail);
                    //    SaveSignatureHistory("Electrician", jobid, Type, InstallerMobile, InstallerEmail);
                    //}
                    String[] tempName = name.Split(' ');
                    string firstName = tempName[0];
                    string lastName = tempName[1];

                    if (isSameDesigner)
                    {
                        SaveSignatureHistory("Designer", jobid, SMSOrMail, InstallerMobile, InstallerEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 4, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? InstallerEmail : InstallerMobile);
                    }
                    if (isSameElectrician)
                    {
                        SaveSignatureHistory("Electrician", jobid, SMSOrMail, InstallerMobile, InstallerEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 3, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? InstallerEmail : InstallerMobile);
                    }
                    SaveSignatureHistory("Installer", jobid, SMSOrMail, InstallerMobile, InstallerEmail, firstName, lastName);

                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobid);
                    FillSignatureAllUser(jobid, "installer_signature", Path.Combine("JobDocuments" + "\\" + jobid + "\\" + InstallerSignature), Base30, StringInstallerBaseSignature, IsUploaded);
                    EmailInfo emailInfo = new EmailInfo();

                    //live or staging
                    emailInfo.TemplateID = 37;

                    //local
                    //emailInfo.TemplateID = 36;
                    emailInfo.SolarCompanyFullName = CompanyName;
                    emailInfo.SignatureType = "Installer";
                    emailInfo.SignatureCapturedFullName = name;
                    emailInfo.ReferenceNumber = RefNumber;

                    _emailBAL.ComposeAndSendEmail(emailInfo, Email, null, null, default(Guid), Convert.ToString(jobid));

                    _job.SaveSignatureLog(jobid, 2, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? InstallerEmail : InstallerMobile);

                    _solarCompanyService.UpdateInstallerWrittenStatementSetting(jobid, IsEmployee, IsChangedDesign);

                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }

        }

        public bool UpdateInstallerDesignerEleSignature(string InstallerSignature, int jobid, bool IsUploaded, string StringInstallerBaseSignature, string latitude, string longitude, string ipAddress, string location, int typeOfSignature, bool isSameInstaller = false, bool isSameDesigner = false, bool isSameElectrician = false)
        {
            string path = Path.Combine("JobDocuments" + "\\" + jobid + "\\" + InstallerSignature);
            if (IsUploaded == false)
            {
                //if (isAll)
                //{
                //    ConvertIntoImage(StringInstallerBaseSignature, jobid, 2);
                //    ConvertIntoImage(StringInstallerBaseSignature, jobid, 3);
                //    ConvertIntoImage(StringInstallerBaseSignature, jobid, 4);
                //}                
                //else
                //{
                //    ConvertIntoImage(StringInstallerBaseSignature, jobid, typeOfSignature);
                //}
                if (isSameInstaller)
                {
                    ConvertIntoImage(StringInstallerBaseSignature, jobid, 2);
                }
                if (isSameElectrician)
                {
                    ConvertIntoImage(StringInstallerBaseSignature, jobid, 3);
                }
                if (isSameDesigner)
                {
                    ConvertIntoImage(StringInstallerBaseSignature, jobid, 4);
                }
                ConvertIntoImage(StringInstallerBaseSignature, jobid, typeOfSignature);
            }
            if (InstallerSignature != "" && InstallerSignature != null)
            {
                //if (!isAll)
                //{
                //    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, typeOfSignature);
                //}
                //else
                //{
                //    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 2);
                //    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 3);
                //    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 4);
                //}

                _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, typeOfSignature);

                if (isSameInstaller)
                {
                    InstallerSignature = InstallerSignature.Replace(InstallerSignature.Split('_')[0], "InstallerSign");
                    path = Path.Combine("JobDocuments" + "\\" + jobid + "\\" + InstallerSignature);
                    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 2);
                }
                if (isSameElectrician)
                {
                    InstallerSignature = InstallerSignature.Replace(InstallerSignature.Split('_')[0], "ElectricianSign");
                    path = Path.Combine("JobDocuments" + "\\" + jobid + "\\" + InstallerSignature);
                    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 3);
                }
                if (isSameDesigner)
                {
                    InstallerSignature = InstallerSignature.Replace(InstallerSignature.Split('_')[0], "DesignerSign");
                    path = Path.Combine("JobDocuments" + "\\" + jobid + "\\" + InstallerSignature);
                    _job.UpdateInstallerDesignerEleSignature(jobid, InstallerSignature, latitude, longitude, ipAddress, location, DateTime.Now, path, 4);
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        public CreateJob GetVerification(string Id)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(Id, "id"), out jobId);
            }

            CreateJob createJob = new CreateJob();
            createJob.BasicDetails = new BasicDetails();
            createJob.BasicDetails.JobID = jobId;
            DataSet dsUsers = _job.GetThemeByJobId(jobId);
            int theme = 1;
            if (dsUsers != null && dsUsers.Tables.Count > 0)
            {
                if (dsUsers.Tables[0] != null && dsUsers.Tables[0].Rows.Count > 0)
                {
                    theme = Convert.ToInt32(dsUsers.Tables[0].Rows[0][0]);
                }
            }

            string themeColor = ((SystemEnums.Theme)theme).ToString();
            ViewData["theme"] = themeColor;
            return createJob;
        }

        public CreateJob GetJobDetailsForInstallerDesignerEleOwnerSignature(string Id, int signatureType)
        {
            int jobId = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(Id, "id"), out jobId);
            }

            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(jobId));
            createJob.Guid = Convert.ToString(jobId);
            createJob.JobID = jobId;
            string replaceWith = " ; ";
            if (createJob.JobSystemDetails.SerialNumbers != null && createJob.JobSystemDetails.SerialNumbers != "")
            {
                createJob.JobSystemDetails.SerialNumbers = createJob.JobSystemDetails.SerialNumbers.Replace("\r\n", replaceWith).Replace("\n", replaceWith).Replace("\r", replaceWith);
            }

            DataSet dsUsers = _job.GetThemeByJobId(jobId);
            int theme = 1;
            string raName = "";
            string scaName = "";
            string scaCompanyName = "";

            if (createJob.JobOwnerDetails.OwnerType == "Individual")
            {
                ViewData["OwnerName"] = createJob.JobOwnerDetails.FirstName + " " + createJob.JobOwnerDetails.LastName;
            }
            else
            {
                ViewData["OwnerName"] = createJob.JobOwnerDetails.CompanyName;
            }

            ViewData["InstallerName"] = createJob.InstallerView.FirstName + " " + createJob.InstallerView.LastName;
            string accreditationTypeGrid = string.IsNullOrEmpty(createJob.InstallerView.GridType) ? "" : " | " + createJob.InstallerView.GridType;
            string accreditationTypeSPS = string.IsNullOrEmpty(createJob.InstallerView.SPS) ? "" : " | " + createJob.InstallerView.SPS;
            ViewData["InstallerWrittenStatementName"] = ViewData["InstallerName"] + " | " + createJob.InstallerView.CECAccreditationNumber + accreditationTypeGrid + accreditationTypeSPS;
            ViewData["DesignerName"] = createJob.DesignerView.FirstName + " " + createJob.DesignerView.LastName;
            string accreditationTypeGridDesigner = string.IsNullOrEmpty(createJob.DesignerView.GridType) ? "" : " | " + createJob.DesignerView.GridType;
            string accreditationTypeSPSDesigner = string.IsNullOrEmpty(createJob.DesignerView.SPS) ? "" : " | " + createJob.DesignerView.SPS;
            ViewData["DesignerWrittenStatementName"] = ViewData["DesignerName"] + " | " + createJob.DesignerView.CECAccreditationNumber + accreditationTypeGridDesigner + accreditationTypeSPSDesigner;
            ViewData["ElectricianName"] = createJob.JobElectricians.FirstName + " " + createJob.JobElectricians.LastName;

            string mobile = string.Empty;
            string email = string.Empty;

            if (signatureType == SystemEnums.TypeOfSignature.Installer.GetHashCode())
            {
                if (createJob.BasicDetails.JobType == 2)
                {
                    mobile = createJob.JobInstallerDetails.Mobile;
                    email = createJob.JobInstallerDetails.Email;
                }
                else
                {
                    mobile = createJob.InstallerView.Mobile;
                    email = createJob.InstallerView.Email;
                }
            }
            else if (signatureType == SystemEnums.TypeOfSignature.Designer.GetHashCode())
            {
                mobile = createJob.DesignerView.Mobile;
                email = createJob.DesignerView.Email;
            }
            else if (signatureType == SystemEnums.TypeOfSignature.Electrician.GetHashCode())
            {
                mobile = createJob.JobElectricians.Mobile;
                email = createJob.JobElectricians.Email;
            }
            else if (signatureType == SystemEnums.TypeOfSignature.Home_Owner.GetHashCode())
            {
                mobile = createJob.JobOwnerDetails.Mobile;
                email = createJob.JobOwnerDetails.Email;
            }
            ViewData["Mobile"] = mobile;
            ViewData["Email"] = email;
            //ViewData["IsAll"] = ((ViewData["InstallerName"].ToString() == ViewData["DesignerName"].ToString()) && (ViewData["ElectricianName"].ToString() == ViewData["DesignerName"].ToString()) && (ViewData["InstallerName"].ToString() != "")) ? "" : "disabled";

            if (signatureType == 2) // Installer
            {
                ViewData["IsSameDesigner"] = ViewData["InstallerName"].ToString() == ViewData["DesignerName"].ToString() ? "" : "disabled";
                ViewData["IsSameElectrician"] = ViewData["InstallerName"].ToString() == ViewData["ElectricianName"].ToString() ? "" : "disabled";
                if (createJob.RetailerAutoSettingForSignature.Rows.Count > 0)
                {
                    ViewData["isEmployee"] = !string.IsNullOrEmpty(createJob.RetailerAutoSettingForSignature.Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(createJob.RetailerAutoSettingForSignature.Rows[0]["IsEmployee"].ToString()) : false;
                    ViewData["isSubContractor"] = !string.IsNullOrEmpty(createJob.RetailerAutoSettingForSignature.Rows[0]["IsSubContractor"].ToString()) ? Convert.ToBoolean(createJob.RetailerAutoSettingForSignature.Rows[0]["IsSubContractor"].ToString()) : false;
                    ViewData["DesignedNotModified"] = !string.IsNullOrEmpty(createJob.RetailerAutoSettingForSignature.Rows[0]["IsChangedDesign"].ToString()) && !Convert.ToBoolean(createJob.RetailerAutoSettingForSignature.Rows[0]["IsChangedDesign"].ToString()) ? true : false;
                    ViewData["DesignedModified"] = !string.IsNullOrEmpty(createJob.RetailerAutoSettingForSignature.Rows[0]["IsChangedDesign"].ToString()) && Convert.ToBoolean(createJob.RetailerAutoSettingForSignature.Rows[0]["IsChangedDesign"].ToString()) ? true : false;
                }


            }
            else if (signatureType == 3) // Electrician
            {
                ViewData["IsSameDesigner"] = ViewData["ElectricianName"].ToString() == ViewData["DesignerName"].ToString() ? "" : "disabled";
                ViewData["IsSameInstaller"] = ViewData["ElectricianName"].ToString() == ViewData["InstallerName"].ToString() ? "" : "disabled";
            }
            else if (signatureType == 4) //  Designer
            {
                ViewData["IsSameInstaller"] = ViewData["DesignerName"].ToString() == ViewData["InstallerName"].ToString() ? "" : "disabled";
                ViewData["IsSameElectrician"] = ViewData["DesignerName"].ToString() == ViewData["ElectricianName"].ToString() ? "" : "disabled";
            }

            if (dsUsers != null && dsUsers.Tables.Count > 0)
            {
                if (dsUsers.Tables[0] != null && dsUsers.Tables[0].Rows.Count > 0)
                {
                    theme = Convert.ToInt32(dsUsers.Tables[0].Rows[0][0]);
                }

                if (dsUsers.Tables[1] != null && dsUsers.Tables[1].Rows.Count > 0)
                {
                    raName = dsUsers.Tables[1].Rows[0][0].ToString();
                }

                if (dsUsers.Tables[2] != null && dsUsers.Tables[2].Rows.Count > 0)
                {
                    scaName = dsUsers.Tables[2].Rows[0][0].ToString();
                }

                if (dsUsers.Tables[3] != null && dsUsers.Tables[3].Rows.Count > 0)
                {
                    scaCompanyName = dsUsers.Tables[3].Rows[0][0].ToString();
                }
            }

            string themeColor = ((SystemEnums.Theme)theme).ToString();
            ViewData["theme"] = themeColor;
            ViewData["RaName"] = raName;
            ViewData["ScaName"] = scaName;
            ViewData["ScaCompanyName"] = scaCompanyName;
            int unitTypeID, streetTypeId, postalAddressID;
            string model = "";
            string brand = "";
            if (createJob.JobInstallationDetails.UnitTypeID != 0 && createJob.JobInstallationDetails.UnitTypeID != null)
            {
                unitTypeID = Convert.ToInt32(createJob.JobInstallationDetails.UnitTypeID);
            }
            else
            {
                unitTypeID = 0;
            }

            if (createJob.JobInstallationDetails.StreetTypeID != 0 && createJob.JobInstallationDetails.StreetTypeID != null)
            {
                streetTypeId = Convert.ToInt32(createJob.JobInstallationDetails.StreetTypeID);
            }
            else
            {
                streetTypeId = 0;
            }

            if (createJob.JobInstallationDetails.PostalAddressID != 0 && createJob.JobInstallationDetails.PostalAddressID != null)
            {
                postalAddressID = createJob.JobInstallationDetails.PostalAddressID;
            }
            else
            {
                postalAddressID = 0;
            }

            if (createJob.JobSystemDetails.SystemModel != "" && createJob.JobSystemDetails.SystemModel != null)
            {
                model = createJob.JobSystemDetails.SystemModel;
            }
            else
            {
                model = "";
            }

            if (createJob.JobSystemDetails.SystemBrand != "" && createJob.JobSystemDetails.SystemBrand != null)
            {
                brand = createJob.JobSystemDetails.SystemBrand;
            }
            else
            {
                brand = "";
            }

            DataSet dsDropDown = _job.GetDropDownValuesByJobId(unitTypeID, streetTypeId, postalAddressID, 0, 0);
            string unitType = "";
            string streetType = "";
            string postalAddress = "";
            if (dsDropDown != null && dsDropDown.Tables.Count > 0)
            {
                if (dsDropDown.Tables[0] != null && dsDropDown.Tables[0].Rows.Count > 0)
                {
                    unitType = dsDropDown.Tables[0].Rows[0][0].ToString();
                }

                if (dsDropDown.Tables[1] != null && dsDropDown.Tables[1].Rows.Count > 0)
                {
                    streetType = dsDropDown.Tables[1].Rows[0][0].ToString();
                }

                if (dsDropDown.Tables[2] != null && dsDropDown.Tables[2].Rows.Count > 0)
                {
                    postalAddress = dsDropDown.Tables[2].Rows[0][0].ToString();
                }

            }
            string TypeOfConn = createJob.JobSTCDetails.TypeOfConnection.ToLower();
            ViewData["UnitTypeID"] = unitType;
            ViewData["StreetTypeId"] = streetType;
            ViewData["PostalAddressID"] = postalAddress;
            ViewData["Model"] = model;
            ViewData["Brand"] = brand;

            ViewData["isGridConnected"] = TypeOfConn.Contains("without battery") ? true : false;
            ViewData["isBattery"] = TypeOfConn.Contains("with battery") ? true : false;
            ViewData["isWithOutBattery"] = TypeOfConn.Contains("stand-alone") ? true : false;

            ViewData["TypeOfConnections"] = createJob.JobSTCDetails.TypeOfConnection;

            int jobYear = DateTime.Now.Year;
            List<SelectListItem> Items = _job.GetDeemingPeriod(jobYear).Select(a => new SelectListItem { Text = a, Value = a }).ToList();
            int count = Items.Count - 1;
            ViewData["DeemingPeriod"] = Items[count].Text;
            return createJob;
        }

        [HttpGet]
        public PartialViewResult _DesignerVerification(string Id, string Type, string SMSOrMail)
        {
            CreateJob createJob = GetVerification(Id);
            createJob.Type = Type;
            createJob.SMSOrMail = SMSOrMail;
            return PartialView("_DesignerVerification", createJob);
        }

        [HttpGet]
        public PartialViewResult _ElectricianVerification(string Id, string Type, string SMSOrMail)
        {
            CreateJob createJob = GetVerification(Id);
            createJob.Type = Type;
            createJob.SMSOrMail = SMSOrMail;
            return PartialView("_ElectricianVerification", createJob);
        }

        [HttpPost]
        public JsonResult _DesignerVerification(string designerlastName, int Jobid, string designerCECNum)
        {
            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(Jobid));
            if (createJob.DesignerView.LastName.ToLower().Trim() == designerlastName.ToLower().Trim() && createJob.DesignerView.CECAccreditationNumber.ToLower().Trim() == designerCECNum.ToLower().Trim())
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult _ElectricianVerification(string eleFirstName, int Jobid, string elelastName)
        {
            CreateJob createJob = _job.GetJobByID(Convert.ToInt32(Jobid));
            if (createJob.JobElectricians.LastName.ToLower().Trim() == elelastName.ToLower().Trim() && createJob.JobElectricians.FirstName.ToLower().Trim() == eleFirstName.ToLower().Trim())
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<JsonResult> _DesignerSignatureSave(string Type, string DesignerSignature, int jobid, bool IsUploaded, string StringDesignerBaseSignature, string latitude, string longitude, string ipAddress, string location, int typeOfSignature, string name, string Email, string CompanyName, string RefNumber, bool isSameInstaller, bool isSameElectrician, string Base30 = "", string DesignerEmail = "", string DesignerMobile = "", string SMSOrMail = "")
        {
            try
            {
                bool result = UpdateInstallerDesignerEleSignature(DesignerSignature, jobid, IsUploaded, StringDesignerBaseSignature, latitude, longitude, ipAddress, location, typeOfSignature, isSameInstaller, false, isSameElectrician);
                if (result)
                {
                    //if (!isAll)
                    //{
                    //    SaveSignatureHistory("Designer", jobid, Type, DesignerMobile, DesignerEmail);
                    //}
                    //else
                    //{
                    //    SaveSignatureHistory("Installer", jobid, Type, DesignerMobile, DesignerEmail);
                    //    SaveSignatureHistory("Designer", jobid, Type, DesignerMobile, DesignerEmail);
                    //    SaveSignatureHistory("Electrician", jobid, Type, DesignerMobile, DesignerEmail);
                    //}
                    String[] tempName = name.Split(' ');
                    string firstName = tempName[0];
                    string lastName = tempName[1];
                    if (isSameInstaller)
                    {
                        SaveSignatureHistory("Installer", jobid, SMSOrMail, DesignerMobile, DesignerEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 2, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? DesignerEmail : DesignerMobile);
                    }
                    if (isSameElectrician)
                    {
                        SaveSignatureHistory("Electrician", jobid, SMSOrMail, DesignerMobile, DesignerEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 3, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? DesignerEmail : DesignerMobile);
                    }
                    SaveSignatureHistory("Designer", jobid, SMSOrMail, DesignerMobile, DesignerEmail, firstName, lastName);

                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobid);
                    FillSignatureAllUser(jobid, "designer_signature", Path.Combine("JobDocuments" + "\\" + jobid + "\\" + DesignerSignature), Base30, StringDesignerBaseSignature, IsUploaded);
                    EmailInfo emailInfo = new EmailInfo();

                    //live or staging
                    emailInfo.TemplateID = 37;

                    //local
                    //emailInfo.TemplateID = 36;
                    emailInfo.SolarCompanyFullName = CompanyName;
                    emailInfo.SignatureType = "Designer";
                    emailInfo.SignatureCapturedFullName = name;
                    emailInfo.ReferenceNumber = RefNumber;

                    _emailBAL.ComposeAndSendEmail(emailInfo, Email, null, null, default(Guid), Convert.ToString(jobid));
                    _job.SaveSignatureLog(jobid, 4, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? DesignerEmail : DesignerMobile);
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<JsonResult> _ElectricianSignatureSave(string Type, string ElectricianSignature, int jobid, bool IsUploaded, string StringElectricianBaseSignature, string latitude, string longitude, string ipAddress, string location, int typeOfSignature, bool isSameInstaller, bool isSameDesigner, string name, string Email, string CompanyName, string RefNumber, string Base30, string ElectricianEmail, string ElectricianMobile, string SMSOrMail = "")
        {
            try
            {
                bool result = UpdateInstallerDesignerEleSignature(ElectricianSignature, jobid, IsUploaded, StringElectricianBaseSignature, latitude, longitude, ipAddress, location, typeOfSignature, isSameInstaller, isSameDesigner, false);
                if (result)
                {
                    //if (!isAll)
                    //{
                    //    SaveSignatureHistory("Electrician", jobid, Type, ElectricianMobile, ElectricianEmail);
                    //}
                    //else
                    //{
                    //    SaveSignatureHistory("Installer", jobid, Type, ElectricianMobile, ElectricianEmail);
                    //    SaveSignatureHistory("Designer", jobid, Type, ElectricianMobile, ElectricianEmail);
                    //    SaveSignatureHistory("Electrician", jobid, Type, ElectricianMobile, ElectricianEmail);
                    //}
                    String[] tempName = name.Split(' ');
                    string firstName = tempName[0];
                    string lastName = tempName[1];
                    if (isSameInstaller)
                    {
                        SaveSignatureHistory("Installer", jobid, SMSOrMail, ElectricianMobile, ElectricianEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 2, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? ElectricianEmail : ElectricianMobile);
                    }
                    if (isSameDesigner)
                    {
                        SaveSignatureHistory("Designer", jobid, SMSOrMail, ElectricianMobile, ElectricianEmail, firstName, lastName);
                        _job.SaveSignatureLog(jobid, 4, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? ElectricianEmail : ElectricianMobile);
                    }
                    SaveSignatureHistory("Electrician", jobid, SMSOrMail, ElectricianMobile, ElectricianEmail, firstName, lastName);

                    await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobid);
                    FillSignatureAllUser(jobid, "electrician_signature", Path.Combine("JobDocuments" + "\\" + jobid + "\\" + ElectricianSignature), Base30, StringElectricianBaseSignature, IsUploaded);
                    EmailInfo emailInfo = new EmailInfo();

                    //live or staging
                    emailInfo.TemplateID = 37;

                    //local
                    //emailInfo.TemplateID = 36;
                    emailInfo.SolarCompanyFullName = CompanyName;
                    emailInfo.SignatureType = "Electrician";
                    emailInfo.SignatureCapturedFullName = name;
                    emailInfo.ReferenceNumber = RefNumber;

                    _emailBAL.ComposeAndSendEmail(emailInfo, Email, null, null, default(Guid), Convert.ToString(jobid));
                    _job.SaveSignatureLog(jobid, 3, SMSOrMail == "M" ? 4 : 5, SMSOrMail == "M" ? ElectricianEmail : ElectricianMobile);

                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public PartialViewResult _DesignerSignature(string Id, string Type, string SMSOrMail, DateTime LinkSentedDateTime)
        {
            if ((DateTime.Now - LinkSentedDateTime).TotalMinutes > Convert.ToInt32(ConfigurationManager.AppSettings["LinkSendForSignatureExpirationTimeInMinute"]))
            {
                return PartialView("_SignatureLinkExpired");
            }
            else
            {
                CreateJob createJob = GetJobDetailsForInstallerDesignerEleOwnerSignature(Id, SystemEnums.TypeOfSignature.Designer.GetHashCode());
                createJob.Type = Type;
                createJob.SMSOrMail = SMSOrMail;
                return PartialView("_DesignerSignature", createJob);
            }
        }

        [HttpGet]
        public PartialViewResult _ElectricianSignature(string Id, string Type, string SMSOrMail, DateTime LinkSentedDateTime)
        {
            if ((DateTime.Now - LinkSentedDateTime).TotalMinutes > Convert.ToInt32(ConfigurationManager.AppSettings["LinkSendForSignatureExpirationTimeInMinute"]))
            {
                return PartialView("_SignatureLinkExpired");
            }
            else
            {
                CreateJob createJob = GetJobDetailsForInstallerDesignerEleOwnerSignature(Id, SystemEnums.TypeOfSignature.Electrician.GetHashCode());
                createJob.Type = Type;
                createJob.SMSOrMail = SMSOrMail;
                createJob.BasicDetails.ElectricianSignature = Server.HtmlDecode(createJob.BasicDetails.ElectricianSignature);
                createJob.ElectricianSignature = Server.HtmlDecode(createJob.ElectricianSignature);
                createJob.JobElectricians.Signature = Server.HtmlDecode(createJob.JobElectricians.Signature);
                return PartialView("_ElectricianSignature", createJob);
            }
        }

        [HttpGet]
        public JsonResult LoadCommonSerialNumber(int jobId)
        {
            List<CommonSerialNumber> commonSerialNum = new List<CommonSerialNumber>();
            DataSet ds = _job.GetCommonSerialByID(jobId, ProjectSession.UserTypeId);
            commonSerialNum = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonSerialNumber>() : new List<CommonSerialNumber>();
            bool IsSPVRequired = Convert.ToBoolean(ds.Tables[1].Rows[0]["ISSpvREquired"]);
            // List<JobSerialNumbers> serialNumbers = ds.Tables[2].Rows.Count > 0 ? ds.Tables[2].ToListof<JobSerialNumbers>() : new List<JobSerialNumbers>();
            bool IsGlobalSPVRequired = Convert.ToBoolean(ds.Tables[2].Rows[0]["IsSPVRequired"]);
            return Json(new { commonSerialNum = commonSerialNum, IsSPVRequired = IsSPVRequired, GlobalisAllowedSPV = IsGlobalSPVRequired }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult LoadCommonInverterSerialNumber(int jobId)
        {
            List<CommonSerialNumber> commonSerialNum = new List<CommonSerialNumber>();
            DataSet ds = _job.GetCommonInverterSerialByID(jobId, ProjectSession.UserTypeId);
            commonSerialNum = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonSerialNumber>() : new List<CommonSerialNumber>();

            return Json(new { commonSerialNum = commonSerialNum }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult UpdateBasicDetail(BasicDetails basicDetails, bool isOverRideSave)
        {
            try
            {
                if (!isOverRideSave)
                {
                    //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(basicDetails.JobID, true);
                    BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(basicDetails.JobID, true, true);
                    if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                    {
                        return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    _job.UpdateBasicDetail(basicDetails);
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }

                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                //return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }


        //[HttpPost]
        //public JsonResult UpdateOwnerDetail(JobOwnerDetails ownerDetails)
        //{
        //    try
        //    {
        //        _job.UpdateOwnerDetail(ownerDetails);
        //        //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(ownerDetails.JobID, true);
        //        //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
        //        return Json(new { status = true }, JsonRequestBehavior.AllowGet);
        //    }
        //    catch (Exception ex)
        //    {
        //        return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
        //    }
        //}

        [HttpPost]
        public JsonResult UpdateStcDetail(StcObject customFields, int JobType, bool isOverRideSave)
        {
            try
            {
                //List<CustomField> lstCustomField = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CustomField>>(customFields);
                //DataTable dtCustomField = CustomFieldTable();
                //if (lstCustomField.Count > 0)
                //{

                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(customFields.JobInstallationDetails.JobID, true);
                if (!isOverRideSave)
                {
                    //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(basicDetails.JobID, true);
                    BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(customFields.JobInstallationDetails.JobID, true, true);
                    if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                    {
                        return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    _job.UpdateStcDetail(customFields, JobType);
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(customFields.JobInstallationDetails.JobID, true);
                ////}
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult UpdateInstallationDetail(JobInstallationDetails jobInstallationDetails, bool isOverRideSave)
        {
            try
            {
                // CreateJob createJob = new CreateJob();
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true);
                BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true, true);
                if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                {
                    return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    DataTable dtCustomField = Common.GetCustomFieldDetail();
                    if (jobInstallationDetails.lstCustomDetails != null)
                    {
                        for (int i = 0; i < jobInstallationDetails.lstCustomDetails.Count; i++)
                        {
                            if (jobInstallationDetails.lstCustomDetails[i].FieldValue != null && jobInstallationDetails.lstCustomDetails[i].SeparatorId > 0)
                            {
                                if (jobInstallationDetails.lstCustomDetails[i].SeparatorId != Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace("\n", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                                }
                                if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Comma))
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(",", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                                }
                                if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(Environment.NewLine, Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                                }
                                if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Colon))
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(":", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                                }
                                if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.SemiColon))
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(";", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                                }
                            }
                            else
                            {
                                if (jobInstallationDetails.lstCustomDetails[i].FieldValue != null)
                                {
                                    jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace("\n", " ");
                                }
                            }
                            dtCustomField.Rows.Add(new object[] { jobInstallationDetails.JobID, jobInstallationDetails.lstCustomDetails[i].JobCustomFieldId, jobInstallationDetails.lstCustomDetails[i].FieldValue, ProjectSession.LoggedInUserId, DateTime.Now, ProjectSession.LoggedInUserId, DateTime.Now, 0, 0, jobInstallationDetails.lstCustomDetails[i].FieldName });
                        }

                    }

                    _job.UpdateInstallationDetail(jobInstallationDetails, dtCustomField);
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true);
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult UpdateInstallationDetailTabular(JobInstallationDetails jobInstallationDetails, bool isOverRideSave)
        {
            try
            {
                // CreateJob createJob = new CreateJob();
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true);
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true, true);
                //if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                //{
                //    return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                //}
                //else
                //{
                //DataTable dtCustomField = Common.GetCustomFieldDetail();
                //if (jobInstallationDetails.lstCustomDetails != null)
                //{
                //    for (int i = 0; i < jobInstallationDetails.lstCustomDetails.Count; i++)
                //    {
                //        if (jobInstallationDetails.lstCustomDetails[i].FieldValue != null && jobInstallationDetails.lstCustomDetails[i].SeparatorId > 0)
                //        {
                //            if (jobInstallationDetails.lstCustomDetails[i].SeparatorId != Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace("\n", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                //            }
                //            if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Comma))
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(",", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                //            }
                //            if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(Environment.NewLine, Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                //            }
                //            if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Colon))
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(":", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                //            }
                //            if (jobInstallationDetails.lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.SemiColon))
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace(";", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                //            }
                //        }
                //        else
                //        {
                //            if (jobInstallationDetails.lstCustomDetails[i].FieldValue != null)
                //            {
                //                jobInstallationDetails.lstCustomDetails[i].FieldValue = jobInstallationDetails.lstCustomDetails[i].FieldValue.Replace("\n", " ");
                //            }
                //        }
                //        dtCustomField.Rows.Add(new object[] { jobInstallationDetails.JobID, jobInstallationDetails.lstCustomDetails[i].JobCustomFieldId, jobInstallationDetails.lstCustomDetails[i].FieldValue, ProjectSession.LoggedInUserId, DateTime.Now, ProjectSession.LoggedInUserId, DateTime.Now, 0, 0, jobInstallationDetails.lstCustomDetails[i].FieldName });
                //    }

                //}

                _job.UpdateInstallationDetailTabular(jobInstallationDetails);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                //}
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true);
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult UpdateCustomDetails(List<CustomDetail> lstCustomDetails, bool isOverRideSave, string JobId)
        {
            try
            {

                DataTable dtCustomField = Common.GetCustomFieldDetail();
                if (lstCustomDetails != null)
                {
                    for (int i = 0; i < lstCustomDetails.Count; i++)
                    {
                        if (lstCustomDetails[i].FieldValue != null && lstCustomDetails[i].SeparatorId > 0)
                        {
                            if (lstCustomDetails[i].SeparatorId != Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace("\n", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                            }
                            if (lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Comma))
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace(",", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                            }
                            if (lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace(Environment.NewLine, Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                            }
                            if (lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Colon))
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace(":", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                            }
                            if (lstCustomDetails[i].SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.SemiColon))
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace(";", Convert.ToString((char)(13)) + Convert.ToString((char)(10)));
                            }
                        }
                        else
                        {
                            if (lstCustomDetails[i].FieldValue != null)
                            {
                                lstCustomDetails[i].FieldValue = lstCustomDetails[i].FieldValue.Replace("\n", " ");
                            }
                        }
                        dtCustomField.Rows.Add(new object[] { JobId, lstCustomDetails[i].JobCustomFieldId, lstCustomDetails[i].FieldValue, ProjectSession.LoggedInUserId, DateTime.Now, ProjectSession.LoggedInUserId, DateTime.Now, 0, 0, lstCustomDetails[i].FieldName });
                    }

                }

                _job.UpdateCustomDetail(JobId, dtCustomField);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                //}
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobInstallationDetails.JobID, true);
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult UpdateSystemDetail(JobSystemDetails objSystem, bool isOverRideSave, string OldPanelDetails = "", string NewPanelDetails = "")
        {
            try
            {
                if (!isOverRideSave)
                {
                    //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(basicDetails.JobID, true);
                    BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(objSystem.JobID, true, true);
                    if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                    {
                        return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    KeyValuePair<bool, decimal?> STC = new KeyValuePair<bool, decimal?>();
                    DataSet dsSTCParam = _job.GetRequiredDetailToSetSTCValue(objSystem.JobID);
                    int jobType = 0;
                    bool IsSPVRequired = false;
                    bool IsGlobalSPVRequired = false;

                    if (dsSTCParam != null && dsSTCParam.Tables.Count > 0 && dsSTCParam.Tables[0] != null && dsSTCParam.Tables[0].Rows.Count > 0)
                    {
                        string strInstallationDate = dsSTCParam.Tables[0].Rows[0]["InstallationDate"] != null ? Convert.ToString(dsSTCParam.Tables[0].Rows[0]["InstallationDate"]) : null;
                        string deemingPeriod = dsSTCParam.Tables[0].Rows[0]["DeemingPeriod"] != null ? Convert.ToString(dsSTCParam.Tables[0].Rows[0]["DeemingPeriod"]) : null;
                        jobType = Convert.ToInt32(dsSTCParam.Tables[0].Rows[0]["JobType"]);
                        string postCode = Convert.ToString(dsSTCParam.Tables[0].Rows[0]["PostCode"]);

                        string STCUrl = string.Empty;
                        if (jobType == 1)
                            STCUrl = ProjectSession.CalculateSTCUrl;
                        else
                            STCUrl = ProjectSession.CalculateSWHSTCUrl;

                        STC = _jobRules.GetSTCValue(jobType, strInstallationDate, deemingPeriod, postCode, objSystem.SystemSize, objSystem.SystemBrand, objSystem.SystemModel, STCUrl);
                        objSystem.ModifiedCalculatedSTC = STC.Value;
                    }

                    DataSet ds = _job.UpdateSystemDetail(objSystem);
                    PanelHistory(OldPanelDetails, NewPanelDetails, objSystem.JobID);
                    IsSPVRequired = Convert.ToBoolean(ds.Tables[0].Rows[0]["IsSPVRequired"]);
                    IsGlobalSPVRequired = Convert.ToBoolean(ds.Tables[2].Rows[0]["IsSPVRequired"]);
                    return Json(new { status = true, STCValue = objSystem.ModifiedCalculatedSTC, isRECUp = STC.Key, jobType = jobType, IsSPVRequired = IsSPVRequired, GlobalisAllowedSPV = IsGlobalSPVRequired }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult UpdateSerialNoDetail(JobSystemDetails objSystem, bool isOverRideSave)
        {
            try
            {
                if (!isOverRideSave)
                {
                    //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(basicDetails.JobID, true);
                    BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(objSystem.JobID, true, true);
                    if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                    {
                        return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    //objSystem.InverterSerialNumbers= Regex.Replace(objSystem.InverterSerialNumbers, @"\r\n?|\n", " ");
                    objSystem.InverterSerialNumbers = Regex.Replace(objSystem.InverterSerialNumbers, @"\r\n?|\n", Environment.NewLine);
                    List<JobSerialNumbers> serialNumbers = new List<JobSerialNumbers>();
                    //bool IsSPVRequired = false;
                    //bool IsGlobalSPVRequired = false;                    

                    DataSet ds = _job.UpdateSerialNoDetail(objSystem);

                    //IsSPVRequired = Convert.ToBoolean(ds.Tables[0].Rows[0]["IsSPVRequired"]);
                    if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    {
                        serialNumbers = ds.Tables[1].ToListof<JobSerialNumbers>();
                    }
                    //IsGlobalSPVRequired = Convert.ToBoolean(ds.Tables[2].Rows[0]["IsSPVRequired"]);
                    return Json(new { status = true, serialnumbers = serialNumbers }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult UpdateGstDetail(bool isGST, string FileName, int jobId)
        {
            try
            {
                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                jobHistory.FunctionalityName = "Update STC Details(Tabular View)";
                jobHistory.JobID = jobId;
                //bool isHistorySaved = _jobHistory.LogJobHistory(jobHistory, HistoryCategory.ModifiedIsGst);
                string JobHistoryMessage = "modified Gst from " + jobHistory.FunctionalityName;
                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "ModifiedIsGst", ProjectSession.LoggedInName, false);
                _job.UpdateGstDetail(isGST, FileName, jobId);
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(objSystem.JobID, true);
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public BusinessRuleStatus GetBusinessRuleStatus(int JobId, bool IsTabular = false, bool isCheckOnSave = false, bool isData = false, CreateJob createJob = null, string panelXml = "", string inverterXml = "")
        {
            CreateJob objCreateJob = new CreateJob();

            //WriteToLogFile("26 : after isData=" + isData.ToString() + " IsTabular : " + IsTabular.ToString() + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            if (isData)
                objCreateJob = createJob;
            else
                objCreateJob = IsTabular ? new CreateJob() : _job.GetJobByID(JobId);

            //WriteToLogFile("27 : after GetJobByID =  " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            //CreateJob objCreateJob = IsTabular ? new CreateJob() : _job.GetJobByID(JobId);

            if (IsTabular && !isData)
            {
                objCreateJob.BasicDetails = new BasicDetails();
                objCreateJob.JobSTCDetails = new JobSTCDetails();
                objCreateJob.JobSystemDetails = new JobSystemDetails();
                objCreateJob.JobInstallationDetails = new JobInstallationDetails();
            }
            objCreateJob.isTabular = IsTabular;

            //string panelXml = "";
            //string inverterXml = "";
            if (!IsTabular)
            {
                if (string.IsNullOrEmpty(panelXml))
                {
                    panelXml = "<Panels>";
                    if (objCreateJob.lstJobPanelDetails != null)
                    {
                        foreach (JobPanelDetails xmlPanel in objCreateJob.lstJobPanelDetails)
                        {
                            panelXml += "<panel><Brand>" + HttpUtility.HtmlEncode(xmlPanel.Brand) + "</Brand><Model>" + HttpUtility.HtmlEncode(xmlPanel.Model) + "</Model><NoOfPanel>" + xmlPanel.NoOfPanel + "</NoOfPanel><Supplier>" + HttpUtility.HtmlEncode(xmlPanel.Supplier) + "</Supplier></panel>";
                        }
                    }
                    panelXml += "</Panels>";
                }
                if (string.IsNullOrEmpty(inverterXml))
                {
                    inverterXml = "<Inverters>";
                    if (objCreateJob.lstJobInverterDetails != null)
                    {
                        foreach (JobInverterDetails xmlPanel in objCreateJob.lstJobInverterDetails)
                        {
                            inverterXml += "<inverter><Brand>" + HttpUtility.HtmlEncode(xmlPanel.Brand) + "</Brand><Model>" + HttpUtility.HtmlEncode(xmlPanel.Model) + "</Model><Series>" + HttpUtility.HtmlEncode(xmlPanel.Series) + "</Series></inverter>";
                        }
                    }
                    inverterXml += "</Inverters>";
                }
            }

            BusinessRuleStatus businessRuleStatus = new BusinessRuleStatus();
            businessRuleStatus = GetValidationSummary(objCreateJob, panelXml, inverterXml, JobId, IsTabular, isCheckOnSave);

            //DataSet ds = _job.CheckBusinessRules(objCreateJob, panelXml, inverterXml, JobId);

            //BusinessRuleStatus businessRuleStatus = new BusinessRuleStatus();
            //if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            //{
            //    businessRuleStatus.ValidationSummary = Convert.ToString(ds.Tables[0].Rows[0][0]);
            //    businessRuleStatus.IsEMailNotification = Convert.ToString(ds.Tables[0].Rows[0]["IsEMailNotification"]);
            //    businessRuleStatus.EMailList = Convert.ToString(ds.Tables[0].Rows[0]["EMailList"]);
            //}

            //if (ds != null && ds.Tables.Count > 0 && ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
            //{
            //    businessRuleStatus.STCStatusId = Convert.ToString(ds.Tables[1].Rows[0]["STCStatusId"].ToString());
            //    businessRuleStatus.STCStatusName = Convert.ToString(ds.Tables[1].Rows[0]["Status"].ToString());
            //    businessRuleStatus.STCDescription = HttpUtility.HtmlDecode(Convert.ToString(ds.Tables[1].Rows[0]["STCDescription"].ToString()));
            //}

            //if (objCreateJob.BasicDetails.IsGSTSetByAdminUser != 2 && objCreateJob.BasicDetails.IsRegisteredWithGST && objCreateJob.BasicDetails.IsGst)
            //{
            //    if (string.IsNullOrEmpty(objCreateJob.BasicDetails.GSTDocument))
            //    {
            //        businessRuleStatus.ValidationSummary = businessRuleStatus.ValidationSummary + "<li>GST Document is required.</li>";
            //    }
            //}

            //if (IsTabular)
            //{
            //    businessRuleStatus.ErrorLength = CountStringOccurrences(businessRuleStatus.ValidationSummary, "<li>");
            //}

            //if (!isCheckOnSave)
            //{
            //    if (Convert.ToInt32(businessRuleStatus.STCStatusId) == 10)
            //    {
            //        string[] issues = businessRuleStatus.ValidationSummary.Split(new string[] { "<li>" }, StringSplitOptions.None);
            //        List<string> lstIssues = new List<string>();
            //        for (int i = 0; i < issues.Length; i++)
            //        {
            //            if (i == 0)
            //            {
            //                lstIssues.Add("You must fill out these required details before you are able to trade:");
            //            }
            //            string error = !string.IsNullOrEmpty(issues[i]) ? issues[i].Replace("</li>", "") : "";
            //            if (!string.IsNullOrEmpty(error))
            //                lstIssues.Add("- " + error);
            //        }
            //        businessRuleStatus.ValidationSummary = string.Join("\n", lstIssues);
            //    }
            //}

            //businessRuleStatus.IsSuccess = true;
            return businessRuleStatus;
        }

        private BusinessRuleStatus GetValidationSummary(CreateJob objCreateJob, string panelXml, string inverterXml, int JobId, bool IsTabular = false, bool isCheckOnSave = false)
        {
            DataSet ds = _job.CheckBusinessRules(objCreateJob, panelXml, inverterXml, JobId);
            //WriteToLogFile("27 : after CheckBusinessRules =  " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));


            BusinessRuleStatus businessRuleStatus = new BusinessRuleStatus();
            // DataSet ds = _job.CheckBusinessRules(createJob, panelXml, inverterXml, createJob.BasicDetails.JobID);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
            {
                businessRuleStatus.ValidationSummary = Convert.ToString(ds.Tables[0].Rows[0][0]);
                businessRuleStatus.IsEMailNotification = Convert.ToString(ds.Tables[0].Rows[0]["IsEMailNotification"]);
                businessRuleStatus.EMailList = Convert.ToString(ds.Tables[0].Rows[0]["EMailList"]);
            }

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
            {
                businessRuleStatus.STCStatusId = Convert.ToString(ds.Tables[1].Rows[0]["STCStatusId"].ToString());
                businessRuleStatus.STCStatusName = Convert.ToString(ds.Tables[1].Rows[0]["Status"].ToString());
                businessRuleStatus.STCDescription = HttpUtility.HtmlDecode(Convert.ToString(ds.Tables[1].Rows[0]["STCDescription"].ToString()));
                businessRuleStatus.IsSpvInstallationVerified = Convert.ToString(ds.Tables[1].Rows[0]["IsSpvInstallationVerified"].ToString());
                businessRuleStatus.IsSPVRequired = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["IsSPVRequired"].ToString()) ? Convert.ToBoolean(ds.Tables[1].Rows[0]["IsSPVRequired"].ToString()) : false;
            }
            if (ds != null && ds.Tables.Count > 2 && ds.Tables[2].Rows[0]["IsValidSystemSize"].ToString() != null && ds.Tables[2] != null && ds.Tables[2].Rows.Count > 0)
            {
                businessRuleStatus.IsValidSystemSize = Convert.ToBoolean(ds.Tables[2].Rows[0]["IsValidSystemSize"]);
            }

            //if (objCreateJob.BasicDetails.IsGSTSetByAdminUser != 2 && objCreateJob.BasicDetails.IsRegisteredWithGST && objCreateJob.BasicDetails.IsGst)
            //{
            //    if (string.IsNullOrEmpty(objCreateJob.BasicDetails.GSTDocument))
            //    {
            //        businessRuleStatus.ValidationSummary = businessRuleStatus.ValidationSummary + "<li>GST Document is required.</li>";
            //    }
            //}
            string panelxml = panelXml;
            XmlSerializer serializer = new XmlSerializer(typeof(List<panel>), new XmlRootAttribute("Panels"));
            StringReader stringReader = new StringReader(panelxml);
            //List<panel> productList = (List<panel>)serializer.Deserialize(stringReader);
            if (businessRuleStatus.STCStatusId == "14" || businessRuleStatus.STCStatusId == "17")
            {
                bool isSPVValid = VerificationXMLForSPV(JobId, objCreateJob, panelXml);
                if (businessRuleStatus.IsSPVRequired == true && businessRuleStatus.IsSpvInstallationVerified == "True")
                {
                    if (isSPVValid == false)
                    {
                        _job.UpdateIsSPVXmlVerificationFlag(JobId, false);
                        // _job.RemoveSPVByXMlVerification(JobId);
                        businessRuleStatus.ValidationSummary += "<li>Installation Verification XML verification failed.</li>";
                    }
                }
                if (isSPVValid == true)
                {
                    _job.UpdateIsSPVXmlVerificationFlag(JobId, true);
                }
            }




            if (objCreateJob.BasicDetails.IsClassic == null || objCreateJob.BasicDetails.IsClassic == false)
            {
                if (IsTabular)
                {
                    businessRuleStatus.ErrorLength = CountStringOccurrences(businessRuleStatus.ValidationSummary, "<li>");
                }

                if (!isCheckOnSave)
                {
                    if (Convert.ToInt32(businessRuleStatus.STCStatusId) == 10)
                    {
                        string[] issues = businessRuleStatus.ValidationSummary.Split(new string[] { "<li>" }, StringSplitOptions.None);
                        List<string> lstIssues = new List<string>();
                        for (int i = 0; i < issues.Length; i++)
                        {
                            if (i == 0)
                            {
                                lstIssues.Add("You must fill out these required details before you are able to trade:");
                            }
                            string error = !string.IsNullOrEmpty(issues[i]) ? issues[i].Replace("</li>", "") : "";
                            if (!string.IsNullOrEmpty(error))
                                lstIssues.Add("- " + error);
                        }
                        businessRuleStatus.ValidationSummary = string.Join("\n", lstIssues);
                    }
                }
            }

            businessRuleStatus.IsSuccess = true;
            return businessRuleStatus;
        }

        public static int CountStringOccurrences(string text, string pattern)
        {
            // Loop through all instances of the string 'text'.
            int count = 0;
            int i = 0;
            while ((i = text.IndexOf(pattern, i)) != -1)
            {
                i += pattern.Length;
                count++;
            }
            return count;
        }

        [HttpGet]
        public JsonResult GetSTCSettlementDate(int settlementTerm, string CustomSettlementTerm)
        {
            try
            {
                string Days = string.Empty;
                int finalSettlementTerm = 0;

                if (settlementTerm == FormBot.Helper.SystemEnums.STCSettlementTerm.Custom.GetHashCode())
                    finalSettlementTerm = Convert.ToInt32(CustomSettlementTerm);
                else
                    finalSettlementTerm = settlementTerm;

                DateTime? dtSettlementDate = Common.GetSettlementDate(finalSettlementTerm, ref Days);
                string settlementDate = dtSettlementDate != null ? Convert.ToDateTime(dtSettlementDate).ToString("yyyy/MM/dd") : "";

                if (finalSettlementTerm == 4)
                {
                    Days = "CER Approved";
                }
                if (finalSettlementTerm == 8)
                {
                    Days = "Opti-Pay";
                }
                if (finalSettlementTerm == 11)
                {
                    Days = "InvoiceStc";
                }
                if (finalSettlementTerm == 12)
                {
                    Days = "PeakPay";
                }
                if (settlementTerm == FormBot.Helper.SystemEnums.STCSettlementTerm.Custom.GetHashCode())
                {
                    Days = "Custom - " + Days;
                }

                return Json(new { status = true, Days = Days, SettlementDate = settlementDate }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public PartialViewResult GetSTCJobForTabular(int jobId)
        {
            STCDetailsModel sTCDetailsModel = CommonForSTCJob(jobId, true, false, null);
            string serializeSTCModule = Newtonsoft.Json.JsonConvert.SerializeObject(sTCDetailsModel);
            //ViewData["Description"] = sTCDetailsModel.stcBasicDetails.STCDescription;
            ViewData["Description"] = !string.IsNullOrEmpty(sTCDetailsModel.stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(sTCDetailsModel.stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : sTCDetailsModel.stcBasicDetails.STCDescription;
            ViewData["IsUpdateProgressBar"] = 1;
            ViewData["GetCount"] = sTCDetailsModel.ErrorLength;
            return PartialView("_STCJobTabularView", sTCDetailsModel);
            //return Json(new { status = true, data = serializeSTCModule }, JsonRequestBehavior.AllowGet);
        }

        public STCDetailsModel CommonForSTCJob(int jobId, bool isTabularView, bool isData, CreateJob createJob)
        {
            STCDetailsModel sTCDetailsModel = new STCDetailsModel();
            sTCDetailsModel = GetSTCDetailsModel(jobId, 0);
            if (sTCDetailsModel.stcBasicDetails.STCStatusId == 10 || isTabularView)
            {
                BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobId, isTabularView, false, isData, createJob);
                if (sTCDetailsModel.stcBasicDetails.STCStatusId == 10)
                {
                    sTCDetailsModel.stcBasicDetails.STCDescription = businessRuleStatus.ValidationSummary;
                    int statusId = string.IsNullOrEmpty(businessRuleStatus.STCStatusId) ? 0 : Convert.ToInt32(businessRuleStatus.STCStatusId);
                    if (statusId != 10)
                    {
                        sTCDetailsModel.stcBasicDetails.STCDescription = businessRuleStatus.STCDescription;
                        sTCDetailsModel.stcBasicDetails.STCStatusId = statusId;
                        sTCDetailsModel.stcBasicDetails.Status = businessRuleStatus.STCStatusName;
                        sTCDetailsModel.pricingManager.STCStatus = statusId;
                    }
                }

                sTCDetailsModel.ErrorLength = businessRuleStatus.ErrorLength;
            }
            sTCDetailsModel.lstCheckListItem = _job.GetCheckListItemForTrade(jobId);

            //WriteToLogFile("28 : after GetCheckListItemForTrade =  " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));

            return sTCDetailsModel;
        }

        [HttpPost]
        public ActionResult _STCJobTabularView(FormBot.Entity.Job.STCDetailsModel Data)
        {
            //Data.stcBasicDetails = Newtonsoft.Json.JsonConvert.DeserializeObject<STCBasicDetails>(Data.stcBasicDetailSTR);
            //Data.stcJobHistory = Newtonsoft.Json.JsonConvert.DeserializeObject<STCJobHistory>(Data.stcJobHistorySTR);
            //Data.pricingManager = Newtonsoft.Json.JsonConvert.DeserializeObject<PricingManager>(Data.pricingManagerSTR);
            ViewData["Description"] = Data.stcBasicDetails.STCDescription;
            return PartialView("_STCJobTabularView", Data);
        }

        [HttpPost]
        public JsonResult SaveImage(ImageDetails imgDetails)
        {
            string p = @imgDetails.Src.Split(new string[] { "JobDocuments\\" }, StringSplitOptions.None)[1].ToString();
            p = @p.Split(new string[] { "?v=" }, StringSplitOptions.None)[0].ToString();
            string OriginalPath = Path.Combine(ProjectSession.ProofDocuments, "JobDocuments", p);

            string message = "";
            try
            {

                System.Drawing.Image img = System.Drawing.Image.FromFile(OriginalPath);
                Bitmap t = RotateImage(new Bitmap(img), imgDetails.Angle);
                img.Dispose();
                System.IO.File.Delete(OriginalPath);
                t.Save(OriginalPath, t.RawFormat.Guid.Equals(ImageFormat.Png.Guid) ? ImageFormat.Png : t.RawFormat.Guid.Equals(ImageFormat.Jpeg.Guid) ? ImageFormat.Jpeg : t.RawFormat.Guid.Equals(ImageFormat.Gif.Guid) ? ImageFormat.Gif : ImageFormat.Jpeg);
                return Json(new { result = true });
                //return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message + ".OriginalPath : " + OriginalPath + "error from : " + message }, JsonRequestBehavior.AllowGet);
            }


        }
        private Bitmap RotateImage(Bitmap b, float Angle)
        {
            // The original bitmap needs to be drawn onto a new bitmap which will probably be bigger 
            // because the corners of the original will move outside the original rectangle.
            // An easy way (OK slightly 'brute force') is to calculate the new bounding box is to calculate the positions of the 
            // corners after rotation and get the difference between the maximum and minimum x and y coordinates.
            float wOver2 = b.Width / 2.0f;
            float hOver2 = b.Height / 2.0f;
            float radians = -(float)(Angle / 180.0 * Math.PI);
            // Get the coordinates of the corners, taking the origin to be the centre of the bitmap.
            PointF[] corners = new PointF[]{
            new PointF(-wOver2, -hOver2),
            new PointF(+wOver2, -hOver2),
            new PointF(+wOver2, +hOver2),
            new PointF(-wOver2, +hOver2)
        };

            for (int i = 0; i < 4; i++)
            {
                PointF p = corners[i];
                PointF newP = new PointF((float)(p.X * Math.Cos(radians) - p.Y * Math.Sin(radians)), (float)(p.X * Math.Sin(radians) + p.Y * Math.Cos(radians)));
                corners[i] = newP;
            }

            // Find the min and max x and y coordinates.
            float minX = corners[0].X;
            float maxX = minX;
            float minY = corners[0].Y;
            float maxY = minY;
            for (int i = 1; i < 4; i++)
            {
                PointF p = corners[i];
                minX = Math.Min(minX, p.X);
                maxX = Math.Max(maxX, p.X);
                minY = Math.Min(minY, p.Y);
                maxY = Math.Max(maxY, p.Y);
            }

            // Get the size of the new bitmap.
            SizeF newSize = new SizeF(maxX - minX, maxY - minY);
            // ...and create it.
            Bitmap returnBitmap = new Bitmap((int)Math.Ceiling(newSize.Width), (int)Math.Ceiling(newSize.Height));
            // Now draw the old bitmap on it.
            using (Graphics g = Graphics.FromImage(returnBitmap))
            {
                g.TranslateTransform(newSize.Width / 2.0f, newSize.Height / 2.0f);
                g.RotateTransform(Angle);
                g.TranslateTransform(-b.Width / 2.0f, -b.Height / 2.0f);

                g.DrawImage(b, 0, 0);
            }

            return returnBitmap;
        }

        [HttpGet]
        [CheckSession]
        public PartialViewResult _CheckListItemForTrade(string Id)
        {
            //WriteToLogFile("StartTime (Get _CheckListItemForTrade) :" + DateTime.Now);

            int jobId = 0;
            if (!string.IsNullOrEmpty(Id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(Id, "id"), out jobId);
            }
            CreateJob createJob = new CreateJob();
            createJob.BasicDetails = new BasicDetails();
            createJob.BasicDetails.JobID = jobId;
            createJob.lstCheckListItem = _job.GetCheckListItemForTrade(jobId);

            //WriteToLogFile("EndTime (Get _CheckListItemForTrade) :" + DateTime.Now);

            return PartialView(createJob);
        }

        //public static DataTable GetCustomFieldDetail()
        //{
        //    DataTable dtCustomField = new DataTable();
        //    dtCustomField.Columns.Add("JobId", typeof(int));
        //    dtCustomField.Columns.Add("JobCustomFieldId", typeof(int));
        //    dtCustomField.Columns.Add("CustomValue", typeof(string));
        //    dtCustomField.Columns.Add("CreatedBy", typeof(int));
        //    dtCustomField.Columns.Add("CreatedDate", typeof(DateTime));
        //    dtCustomField.Columns.Add("ModifiedBy", typeof(int));
        //    dtCustomField.Columns.Add("ModifiedDate", typeof(DateTime));
        //    dtCustomField.Columns.Add("IsDeleted", typeof(bool));

        //    return dtCustomField;
        //}

        [HttpGet]
        //[Route("Job/ReloadSectionOnVisitSave", Name = "visit")]
        public JsonResult ReloadSectionOnVisitSave(string id = null, bool isCheckListView = false, bool isReloadGridView = false, int solarCompanyId = 0)
        {
            //WriteToLogFile("StartTime (Get ReloadSectionOnVisitSave) :" + DateTime.Now);

            int jobId = 0;
            if (!string.IsNullOrEmpty(id))
            {
                int.TryParse(QueryString.GetValueFromQueryString(id, "id"), out jobId);
            }

            //JobSchedulingController objJobScheduling = new JobSchedulingController(_jobSchedule, _job, _jobHistory, _userBAL, _emailBAL);
            JobScheduling jobScheduling = new JobScheduling();


            jobScheduling = _jobSchedule.GetAllSchedulingDataOfJob(id, isCheckListView, isReloadGridView, _job);
            var visitPartialView = ControlToString("~/Views/JobScheduling/_VisitGridView.cshtml", jobScheduling);

            //WriteToLogFile("EndTime (Get VisitGridView) :" + DateTime.Now);

            List<CustomDetail> lstCustomField = _job.GetJobCustomDetails(jobId, solarCompanyId);
            CreateJob createJob = new CreateJob();
            createJob.JobID = jobId;
            //createJob.lstCustomDetails = lstCustomField;
            createJob.lstCustomDetails = ReplaceSeperatorValue(lstCustomField);
            var customFieldView = ControlToString("~/Views/Job/_CustomJobField.cshtml", createJob);

            //WriteToLogFile("EndTime (Get ReloadCustomFields) :" + DateTime.Now);

            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
            var photoView = ControlToString("~/Views/Job/_JobPhotosNew.cshtml", createJob);

            //WriteToLogFile("EndTime (Get ReloadJobPhoto) :" + DateTime.Now);

            createJob.STCDetailsModel = new STCDetailsModel();
            createJob.STCDetailsModel.lstCheckListItem = _job.GetCheckListItemForTrade(jobId);
            var checkListView = ControlToString("~/Views/Job/_CheckListItemForTrade.cshtml", createJob.STCDetailsModel);

            //WriteToLogFile("EndTime (Get _CheckListItemForTrade) :" + DateTime.Now);

            //return Json(new { visitPartialView, customFieldView, photoView, checkListView }, JsonRequestBehavior.AllowGet);
            return Serializer.GetJsonResult(new { visitPartialView, customFieldView, photoView, checkListView });
            //JsonResult json = new JsonResult();
            //json.Data = new { visitPartialView, customFieldView, photoView, checkListView };
            //json.MaxJsonLength = Int32.MaxValue;
            //json.JsonRequestBehavior = JsonRequestBehavior.AllowGet;
            //return json;
        }

        private string ControlToString(string controlPath, object model)
        {
            RazorView control = new RazorView(this.ControllerContext, controlPath, null, false, null);

            this.ViewData.Model = model;

            HtmlTextWriter writer = new HtmlTextWriter(new System.IO.StringWriter());
            control.Render(new ViewContext(this.ControllerContext, control, this.ViewData, this.TempData, writer), writer);

            string value = ((StringWriter)writer.InnerWriter).ToString();

            return value;
        }

        private List<CustomDetail> ReplaceSeperatorValue(List<CustomDetail> lstCustomDetails)
        {
            if (lstCustomDetails != null && lstCustomDetails.Count() > 0)
            {
                foreach (var item in lstCustomDetails)
                {
                    if (item.FieldValue != null && item.SeparatorId > 0)
                    {
                        if (item.SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Comma))
                        {
                            item.FieldValue = item.FieldValue.Replace("\r\n", ",");
                        }
                        if (item.SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.NewLine))
                        {
                            item.FieldValue = item.FieldValue.Replace("\r\n", Environment.NewLine);
                        }
                        if (item.SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.Colon))
                        {
                            item.FieldValue = item.FieldValue.Replace("\r\n", ":");
                        }
                        if (item.SeparatorId == Convert.ToInt32(SystemEnums.SerialNumberSeparatorId.SemiColon))
                        {
                            item.FieldValue = item.FieldValue.Replace("\r\n", ";");
                        }
                    }
                }
            }

            return lstCustomDetails;
        }

        [HttpGet]
        public JsonResult GetBatteryManufacturer()
        {
            List<SelectListItem> Items = _cerImportBAL.BatteryStorageList(1, -1, null, null, null, null).Select(a => new SelectListItem { Text = a.Manufacturer, Value = a.Manufacturer.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetBatteryModel(string manufacturer)
        {
            List<SelectListItem> Items = _cerImportBAL.BatteryStorageList(1, -1, null, null, manufacturer, null).Select(a => new SelectListItem { Text = a.ModelNumber, Value = a.ModelNumber.ToString() }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        #endregion

        public ContentResult CacheKeyClear()
        {
            try
            {
                CacheConfiguration.Clear();
                return Content("Clear cache");
            }
            catch (Exception ex)
            {
                return Content(JsonConvert.SerializeObject(ex));
            }
        }

        //[HttpGet]
        //[GZipOrDeflate]
        //public JsonResult GetJobListUserWiseColumns(string solarcompanyid = "", string sResellerId = "", bool isarchive = false, string stageid = "", string scheduletype = "", string jobtype = "", string jobpriority = "", string searchtext = "", string fromdate = "", string todate = "", bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false, bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true, bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true, bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true, string preapprovalstatusid = "", string connectionstatusid = "")
        //{
        //    GridParam gridParam = new GridParam();
        //    gridParam.PageStart = 1;
        //    gridParam.PageSize = 10;
        //    int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);

        //    int SolarCompanyId = 0;
        //    if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
        //        SolarCompanyId = ProjectSession.SolarCompanyId;
        //    else
        //        SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;

        //    int PreApprovalStatusId = !string.IsNullOrEmpty(preapprovalstatusid) ? Convert.ToInt32(preapprovalstatusid) : 0;
        //    int ConnectionStatusId = !string.IsNullOrEmpty(connectionstatusid) ? Convert.ToInt32(connectionstatusid) : 0;
        //    int ScheduleType = !string.IsNullOrEmpty(scheduletype) ? Convert.ToInt32((SystemEnums.JobScheduleType)Enum.Parse(typeof(SystemEnums.JobScheduleType), scheduletype).GetHashCode()) : 0;
        //    int JobType = !string.IsNullOrEmpty(jobtype) ? Convert.ToInt32((SystemEnums.JobType)Enum.Parse(typeof(SystemEnums.JobType), jobtype).GetHashCode()) : 0;
        //    int JobPriority = !string.IsNullOrEmpty(jobpriority) ? Convert.ToInt32((SystemEnums.JobPriority)Enum.Parse(typeof(SystemEnums.JobPriority), jobpriority).GetHashCode()) : 0;
        //    int StageId = !string.IsNullOrEmpty(stageid) ? Convert.ToInt32(stageid) : 0;
        //    DateTime? FromDate = null, ToDate = null;
        //    if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
        //    {
        //        FromDate = Convert.ToDateTime(fromdate);
        //        ToDate = Convert.ToDateTime(todate);
        //    }

        //    DataSet dsJobsPlusColumns = new DataSet(); ;
        //    if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9)
        //    {
        //        dsJobsPlusColumns = _job.GetJobList_UserWiseColumns(SystemEnums.MenuId.JobView.GetHashCode(), ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, pageNumber, gridParam.PageSize, gridParam.SortCol, gridParam.SortDir, Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()), StageId, SolarCompanyId, isarchive, ScheduleType, JobType, JobPriority, searchtext, FromDate, ToDate, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, PreApprovalStatusId, ConnectionStatusId);
        //    }
        //    else
        //    {
        //        List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
        //        DataSet dsAllColumnsData = new DataSet();

        //        if (SolarCompanyId == 0)
        //            SolarCompanyId = ProjectSession.SolarCompanyId;

        //        if (SolarCompanyId == -1)
        //        {
        //            #region SolarCompanyID value is "All"
        //            int ResellerId = !string.IsNullOrEmpty(sResellerId) ? Convert.ToInt32(sResellerId) : 0;

        //            if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && ResellerId == 0)
        //                ResellerId = ProjectSession.ResellerId;

        //            ISolarCompanyBAL _solarCompanyService = new SolarCompanyBAL();
        //            List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
        //            if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
        //            {
        //                #region Call SP for those SolarCompanyId which are not found in CacheData
        //                List<int> lstSolarCompanyIdForCachingData = lstSolarCompanyId.Where(X => !CacheConfiguration.IsContainsKey(CacheConfiguration.dsJobIndex + "_" + X)).Select(X => X).ToList();
        //                if (lstSolarCompanyIdForCachingData != null && lstSolarCompanyIdForCachingData.Count > 0)
        //                {
        //                    dsAllColumnsData = _job.GetJobList_ForCachingData(string.Join(",", lstSolarCompanyIdForCachingData), ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
        //                    if (dsAllColumnsData.Tables.Count > 1 && dsAllColumnsData.Tables[1] != null && dsAllColumnsData.Tables[1].Rows.Count > 0)
        //                        listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsAllColumnsData.Tables[1]);

        //                    if (dsAllColumnsData.Tables[0] != null && dsAllColumnsData.Tables[0].Rows.Count > 0)
        //                    {
        //                        List<int> dsSolarCompanyIds = dsAllColumnsData.Tables[0].AsEnumerable().Select(dr => dr.Field<int>("SolarCompanyId")).Distinct().ToList();
        //                        foreach (int solarCompId in dsSolarCompanyIds)
        //                        {
        //                            DataTable dtSolarCompData = dsAllColumnsData.Tables[0].AsEnumerable().Where(dr => dr.Field<int>("SolarCompanyId") == solarCompId).Select(dr => dr).CopyToDataTable();
        //                            CacheConfiguration.Set(CacheConfiguration.dsJobIndex + "_" + solarCompId, dtSolarCompData);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        foreach (int iSolarID in lstSolarCompanyIdForCachingData)
        //                        {
        //                            CacheConfiguration.Set(CacheConfiguration.dsJobIndex + "_" + iSolarID, new DataTable());
        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region Fetch SolarCompanyWise JobList Data From Cache

        //                DataTable dtAllSolarCompanyJobList = new DataTable();
        //                foreach (int solarCompId in lstSolarCompanyId)
        //                {
        //                    if (CacheConfiguration.IsContainsKey(CacheConfiguration.dsJobIndex + "_" + solarCompId))
        //                        dtAllSolarCompanyJobList.Merge(CacheConfiguration.Get<DataTable>(CacheConfiguration.dsJobIndex + "_" + solarCompId));
        //                }

        //                if (dtAllSolarCompanyJobList != null && dtAllSolarCompanyJobList.Rows.Count > 0)
        //                {
        //                    dsAllColumnsData = new DataSet();
        //                    dsAllColumnsData.Tables.Add(dtAllSolarCompanyJobList.Copy());
        //                }
        //                #endregion
        //            }
        //            #endregion
        //        }
        //        else
        //        {
        //            #region Selected specific SolarCompanyId
        //            if (CacheConfiguration.IsContainsKey(CacheConfiguration.dsJobIndex + "_" + SolarCompanyId))
        //            {
        //                dsAllColumnsData.Tables.Add(CacheConfiguration.Get<DataTable>(CacheConfiguration.dsJobIndex + "_" + SolarCompanyId).Copy());
        //                //listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
        //            }
        //            else
        //            {
        //                dsAllColumnsData = _job.GetJobList_ForCachingData(Convert.ToString(SolarCompanyId), ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
        //                CacheConfiguration.Set(CacheConfiguration.dsJobIndex + "_" + SolarCompanyId, dsAllColumnsData.Tables[0]);
        //                listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsAllColumnsData.Tables[1]);
        //            }
        //            #endregion
        //        }

        //        #region Fetch UserWiseColumns From Database
        //        if (listUserWiseColumns.Count == 0)
        //            listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
        //        #endregion

        //        ViewBag.JSUserColumnList = listUserWiseColumns;
        //        ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
        //        ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));

        //        if (dsAllColumnsData.Tables.Count > 0 && dsAllColumnsData.Tables[0] != null && dsAllColumnsData.Tables[0].Rows.Count > 0)
        //        {
        //            List<string> colNames = new List<string>() { "JobID", "ColorCode", "IsCustomPrice", "IsReadyToTrade", "PriceDay1", "UpFront", "PriceDay3", "PriceDay7", "PriceOnApproval", "PartialPayment", "RapidPay", "OptiPay", "Commercial", "Custom", "InvoiceStc", "TradeStatus", "SystemSize", "JobTypeId", "RefNumber", "JobAddress", "JobTitle", "JobDescription", "FullOwnerCompanyDetails", "StaffName", "InstallerFullName", "DesignerFullName", "ElectricianFullName", "InstallationState", "Priority", "IsPreApprovaApproved", "IsConnectionCompleted", "IsDeleted", "JobStageChangeDate", "CreatedDate", "InstallationDate", "JobNumber", "SSCID", "IsAccept", "CreatedBy", "IsGst", "GSTDocument", "PropertyType", "IsCustPrice", "PeakPay", "OwnerType" };
        //            colNames.AddRange(listUserWiseColumns.Where(X => !colNames.Contains(X.Name)).Select(X => X.Name).ToList());
        //            dsJobsPlusColumns.Tables.Add(dsAllColumnsData.Tables[0].DefaultView.ToTable(false, colNames.Distinct().ToArray()));
        //        }
        //    }

        //    List<dynamic> dynamicTable = new List<dynamic>();
        //    if (dsJobsPlusColumns != null && dsJobsPlusColumns.Tables.Count > 0)
        //    {
        //        if (dsJobsPlusColumns.Tables[0] != null && dsJobsPlusColumns.Tables[0].Rows.Count > 0)
        //        {
        //            DataTable dtJobList = new DataTable();

        //            if (ProjectSession.UserTypeId == 6)
        //                dtJobList = dsJobsPlusColumns.Tables[0].Select("SSCID =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId).CopyToDataTable();
        //            else
        //                dtJobList = dsJobsPlusColumns.Tables[0];

        //            dtJobList.Columns.Add("Id", typeof(System.String));
        //            dtJobList.Columns.Add("strInstallationDate", typeof(System.String));
        //            dtJobList.Columns.Add("strCreatedDate", typeof(System.String));
        //            dtJobList.Columns.Add("strSignatureDate", typeof(System.String));
        //            dtJobList.Columns.Add("strInstallerSignatureDate", typeof(System.String));
        //            dtJobList.Columns.Add("strDesignerSignatureDate", typeof(System.String));
        //            dtJobList.Columns.Add("strElectricianSignatureDate", typeof(System.String));
        //            if (!dtJobList.Columns.Contains("Urgent"))
        //                dtJobList.Columns.Add("Urgent", typeof(System.Boolean));

        //            foreach (DataRow row in dtJobList.Rows)
        //            {
        //                row["Id"] = QueryString.QueryStringEncode("id=" + Convert.ToString(row["JobID"]));

        //                if (dtJobList.Columns.Contains("InstallationDate"))
        //                    row["strInstallationDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallationDate"])) ? Convert.ToDateTime(row["InstallationDate"]).ToString("dd/MM/yyyy") : null;

        //                if (dtJobList.Columns.Contains("CreatedDate"))
        //                    row["strCreatedDate"] = !string.IsNullOrEmpty(Convert.ToString(row["CreatedDate"])) ? Convert.ToDateTime(row["CreatedDate"]).ToString("dd/MM/yyyy") : null;

        //                if (dtJobList.Columns.Contains("SignatureDate"))
        //                    row["strSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["SignatureDate"])) ? Convert.ToDateTime(row["SignatureDate"]).ToString("dd/MM/yyyy") : null;

        //                if (dtJobList.Columns.Contains("InstallerSignatureDate"))
        //                    row["strInstallerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallerSignatureDate"])) ? Convert.ToDateTime(row["InstallerSignatureDate"]).ToString("dd/MM/yyyy") : null;

        //                if (dtJobList.Columns.Contains("DesignerSignatureDate"))
        //                    row["strDesignerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["DesignerSignatureDate"])) ? Convert.ToDateTime(row["DesignerSignatureDate"]).ToString("dd/MM/yyyy") : null;

        //                if (dtJobList.Columns.Contains("ElectricianSignatureDate"))
        //                    row["strElectricianSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["ElectricianSignatureDate"])) ? Convert.ToDateTime(row["ElectricianSignatureDate"]).ToString("dd/MM/yyyy") : null;

        //                if (!dtJobList.Columns.Contains("Urgent") && dtJobList.Columns.Contains("JobStageChangeDate"))
        //                {
        //                    if (!string.IsNullOrEmpty(Convert.ToString(row["JobStageChangeDate"])))
        //                    {
        //                        if ((System.DateTime.Now - Convert.ToDateTime(row["JobStageChangeDate"])).TotalDays >= Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()))
        //                            row["Urgent"] = 1;
        //                        else
        //                            row["Urgent"] = 0;
        //                    }
        //                    else
        //                        row["Urgent"] = 0;
        //                }

        //            }

        //            dynamicTable = DataTableExtension.ToDynamicList(dtJobList, "JobList");
        //            gridParam.TotalDisplayRecords = dsJobsPlusColumns.Tables[0].Rows.Count;
        //            gridParam.TotalRecords = dsJobsPlusColumns.Tables[0].Rows.Count;

        //        }
        //        if (dsJobsPlusColumns.Tables.Count > 1 && dsJobsPlusColumns.Tables[1] != null && dsJobsPlusColumns.Tables[1].Rows.Count > 0)
        //        {
        //            List<UserWiseColumns> listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsJobsPlusColumns.Tables[1]);
        //            ViewBag.JSUserColumnList = listUserWiseColumns;
        //            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
        //            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
        //        }
        //    }
        //    //return Serializer.GetJsonResult(dynamicTable.OrderByDescending(X => X.JobID));
        //    JsonResult json = new JsonResult();
        //    json.Data = dynamicTable.OrderByDescending(X => X.JobID);
        //    json.MaxJsonLength = Int32.MaxValue;
        //    json.JsonRequestBehavior = JsonRequestBehavior.AllowGet;
        //    return json;
        //}
        [HttpGet]
        public JsonResult CacheKeyStatus(string key, bool IsRemove = false)
        {
            try
            {
                string RetrunContentFormat = "IsCacheKeyGenerated = {0} :: Table row count = {1} :: All Data of Tabel = {2}";
                if (CacheConfiguration.IsContainsKey(key))
                {
                    //if (IsRemove)
                    //{
                    //    CacheConfiguration.Remove(key);
                    //    return Content("Remove cache key : " + key);
                    //}
                    //else
                    //{
                    var data = CacheConfiguration.Get<DataTable>(key);

                    string keydata = string.Format(RetrunContentFormat,
                            "True"
                            , (data != null ? data.Rows.Count.ToString() : "0")
                            , (data != null ? JsonConvert.SerializeObject(data, Newtonsoft.Json.Formatting.None) : "0")
                            );
                    var jsonResult = Json(new { status = true, data = keydata }, JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                    //return Json(new { status = true, data = keydata }, JsonRequestBehavior.AllowGet);
                    //return Content(string.Format(RetrunContentFormat,
                    //    "True"
                    //    , (data != null ? data.Rows.Count.ToString() : "0")
                    //    , (data != null ? JsonConvert.SerializeObject(data, Newtonsoft.Json.Formatting.Indented) : "0")
                    //    ));
                    //}
                    //listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
                }
                else
                {
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
                    //return Content(string.Format(RetrunContentFormat,
                    //    "False"
                    //    , "0"
                    //    , "0"
                    //    ));
                }
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
                //return Content(JsonConvert.SerializeObject(ex));
            }
        }
        [GZipOrDeflate]
        public async Task<JsonResult> GetJobListUserWiseColumns(string solarcompanyid = "", string sResellerId = "", bool isarchive = false, string stageid = "", string scheduletype = "", string jobtype = "", string jobpriority = "", string searchtext = "", string fromdate = "", string todate = "", bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false, bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true, bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true, bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true, string preapprovalstatusid = "", string connectionstatusid = "", string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", string year = "")
        {
            int minYear = 0, maxYear = 0;
            if (year.Contains(","))
            {
                minYear = Convert.ToInt32(year.Split(',').Min());
                maxYear = Convert.ToInt32(year.Split(',').Max());
            }
            else
            {
                minYear = maxYear = Convert.ToInt32(year);
            }

            GridParam gridParam = new GridParam();
            gridParam.PageStart = 1;
            gridParam.PageSize = 10;
            int pageNumber = Convert.ToInt32((gridParam.PageStart / gridParam.PageSize) + 1);

            int SolarCompanyId = 0;
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                SolarCompanyId = ProjectSession.SolarCompanyId;
            else
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;

            int PreApprovalStatusId = !string.IsNullOrEmpty(preapprovalstatusid) ? Convert.ToInt32(preapprovalstatusid) : 0;
            int ConnectionStatusId = !string.IsNullOrEmpty(connectionstatusid) ? Convert.ToInt32(connectionstatusid) : 0;
            int ScheduleType = !string.IsNullOrEmpty(scheduletype) ? Convert.ToInt32((SystemEnums.JobScheduleType)Enum.Parse(typeof(SystemEnums.JobScheduleType), scheduletype).GetHashCode()) : 0;
            int JobType = !string.IsNullOrEmpty(jobtype) ? Convert.ToInt32((SystemEnums.JobType)Enum.Parse(typeof(SystemEnums.JobType), jobtype).GetHashCode()) : 0;
            int JobPriority = !string.IsNullOrEmpty(jobpriority) ? Convert.ToInt32((SystemEnums.JobPriority)Enum.Parse(typeof(SystemEnums.JobPriority), jobpriority).GetHashCode()) : 0;
            int StageId = !string.IsNullOrEmpty(stageid) ? Convert.ToInt32(stageid) : 0;
            DateTime? FromDate = null, ToDate = null;
            List<JobView> lstJobsFull = new List<JobView>();
            List<JobView> lstJobsPreparedToReturn = new List<JobView>();
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            bool isJoinBeforeFiters = ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9;
            if (!string.IsNullOrEmpty(fromdate) && !string.IsNullOrEmpty(todate))
            {
                FromDate = Convert.ToDateTime(fromdate);
                ToDate = Convert.ToDateTime(todate);
            }

            DataSet dsJobsPlusColumns = new DataSet(); ;
            if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9)
            {
                dsJobsPlusColumns = _job.GetJobList_UserWiseColumns(SystemEnums.MenuId.JobView.GetHashCode(), ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, pageNumber, gridParam.PageSize, gridParam.SortCol, gridParam.SortDir, Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()), StageId, SolarCompanyId, isarchive, ScheduleType, JobType, JobPriority, searchtext, FromDate, ToDate, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, PreApprovalStatusId, ConnectionStatusId);
                lstJobsFull = CommonBAL.DataTableToListJobs(dsJobsPlusColumns);
                if (dsJobsPlusColumns.Tables.Count > 1 && dsJobsPlusColumns.Tables[1] != null && dsJobsPlusColumns.Tables[1].Rows.Count > 0)
                    listUserWiseColumns = CommonBAL.DataTableToListUserWiseColumns(dsJobsPlusColumns.Tables[1]);
            }
            else
            {
                DataSet dsAllColumnsData = new DataSet();
                IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
                if (SolarCompanyId == 0)
                    SolarCompanyId = ProjectSession.SolarCompanyId;

                if (SolarCompanyId == -1)
                {
                    #region SolarCompanyID value is "All"
                    int ResellerId = !string.IsNullOrEmpty(sResellerId) ? Convert.ToInt32(sResellerId) : 0;

                    if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && ResellerId == 0)
                        ResellerId = ProjectSession.ResellerId;

                    //ISolarCompanyBAL _solarCompanyService = new SolarCompanyBAL();
                    List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                    if (ProjectSession.UserTypeId == 5 && !Convert.ToBoolean(isAllScaJobView))
                        lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByRAMID(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                    if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
                    {
                        for (int iYear = minYear; iYear <= maxYear; iYear++)
                        {
                            var mainRedisKey = string.Format(RedisCacheConfiguration.dsJobAllKeysInfoHashKey, iYear);
                            #region Call SP for those SolarCompanyId which are not found in CacheData
                            List<DistributedCacheAllKeysInfoForHashSetView> mainJobCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainRedisKey);
                            List<int> lstSolarCompanyIdForCachingData = lstSolarCompanyId.Where(X => mainJobCache == null || !mainJobCache.Any(R => R.PID == X)).Select(X => X).ToList();
                            if (lstSolarCompanyIdForCachingData != null && lstSolarCompanyIdForCachingData.Count > 0)
                            {
                                CommonBAL.JobsDistributedCacheHashSet(cache, lstSolarCompanyIdForCachingData, iYear, ref dsAllColumnsData, ref lstJobsFull);
                                if (dsAllColumnsData.Tables.Count > 1 && dsAllColumnsData.Tables[1] != null && dsAllColumnsData.Tables[1].Rows.Count > 0)
                                    listUserWiseColumns = CommonBAL.DataTableToListUserWiseColumns(dsAllColumnsData.Tables[1]);
                            }
                            #endregion

                            #region Fetch SolarCompanyWise JobList Data From Cache
                            List<int> lstSCId = lstSolarCompanyId.Except(lstSolarCompanyIdForCachingData).ToList();
                            if (dsAllColumnsData.Tables.Count == 0)
                            {
                                dsAllColumnsData.Tables.Add(new DataTable());
                            }
                            CommonBAL.JobsDistributedCacheHashGet(cache, lstSCId, iYear, ref lstJobsFull, isJoinBeforeFiters);
                            #endregion
                        }
                    }
                    #endregion
                }
                else
                {
                    for (int iYear = minYear; iYear <= maxYear; iYear++)
                    {
                        var mainRedisKey = string.Format(RedisCacheConfiguration.dsJobAllKeysInfoHashKey, iYear);
                        #region Selected specific SolarCompanyId
                        List<DistributedCacheAllKeysInfoForHashSetView> mainJobCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainRedisKey);
                        if (mainJobCache != null && mainJobCache.Any(R => R.PID == SolarCompanyId))
                        {
                            if (dsAllColumnsData.Tables.Count == 0)
                            {
                                dsAllColumnsData.Tables.Add(new DataTable());
                            }
                            CommonBAL.JobsDistributedCacheHashGet(cache, new List<int> { SolarCompanyId }, iYear, ref lstJobsFull, isJoinBeforeFiters);
                        }
                        else
                        {
                            CommonBAL.JobsDistributedCacheHashSet(cache, new List<int> { SolarCompanyId }, iYear, ref dsAllColumnsData, ref lstJobsFull);
                            listUserWiseColumns = CommonBAL.DataTableToListUserWiseColumns(dsAllColumnsData.Tables[1]);
                        }
                        #endregion
                    }
                }


                if (!isJoinBeforeFiters)
                    CommonBAL.JobsFilteredWithInstallerDesignerSolarCompanyJoins(cache, ref lstJobsPreparedToReturn);
                ///dsJobsPlusColumns.Tables.Add(dsAllColumnsData.Tables[0].DefaultView.ToTable(false));
                //if (dsAllColumnsData.Tables.Count > 0 && dsAllColumnsData.Tables[0] != null && dsAllColumnsData.Tables[0].Rows.Count > 0)
                //{
                //    List<string> colNames = new List<string>() { "JobID", "ColorCode", "IsCustomPrice", "IsReadyToTrade", "PriceDay1", "UpFront", "PriceDay3", "PriceDay7", "PriceOnApproval", "PartialPayment", "RapidPay", "OptiPay", "Commercial", "Custom", "InvoiceStc", "TradeStatus", "SystemSize", "JobTypeId", "RefNumber", "JobAddress", "JobTitle", "JobDescription", "FullOwnerCompanyDetails", "StaffName", "InstallerFullName", "DesignerFullName", "ElectricianFullName", "InstallationState", "Priority", "IsPreApprovaApproved", "IsConnectionCompleted", "IsDeleted", "JobStageChangeDate", "CreatedDate", "InstallationDate", "JobNumber", "SSCID", "IsAccept", "CreatedBy", "IsGst", "GSTDocument", "PropertyType", "IsCustPrice", "PeakPay", "OwnerType" };
                //    colNames.AddRange(listUserWiseColumns.Where(X => !colNames.Contains(X.Name)).Select(X => X.Name).ToList());
                //    dsJobsPlusColumns.Tables.Add(dsAllColumnsData.Tables[0].DefaultView.ToTable(false, colNames.Distinct().ToArray()));
                //}
            }

            if (ProjectSession.UserTypeId == 6)
                lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
            ///dtJobList = dsJobsPlusColumns.Tables[0].Select("SSCID =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId).CopyToDataTable();
            else if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
            {
                lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                ///DataRow[] dr = dsJobsPlusColumns.Tables[0].Select("ScoUserId =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId);
                ///if (dr.Length > 0)
                ///    dtJobList = dr.CopyToDataTable();
            }
            ///else
            ///    dtJobList = dsJobsPlusColumns.Tables[0];
            gridParam.TotalDisplayRecords = lstJobsPreparedToReturn.Count;
            gridParam.TotalRecords = lstJobsPreparedToReturn.Count;
            #region Fetch UserWiseColumns From Database
            if (listUserWiseColumns.Count == 0)
                listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
            #endregion

            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            {
                SavePageSize = 10;
            }
            ViewBag.PageSize = SavePageSize;

            ///List<dynamic> dynamicTable = new List<dynamic>();
            ///if (dsJobsPlusColumns != null && dsJobsPlusColumns.Tables.Count > 0)
            ///{
            ///    if (dsJobsPlusColumns.Tables[0] != null && dsJobsPlusColumns.Tables[0].Rows.Count > 0)
            ///    {
            ///        DataTable dtJobList = new DataTable();
            ///        dtJobList.Columns.Add("Id", typeof(System.String));
            ///        dtJobList.Columns.Add("strInstallationDate", typeof(System.String));
            ///        dtJobList.Columns.Add("strCreatedDate", typeof(System.String));
            ///        dtJobList.Columns.Add("strSignatureDate", typeof(System.String));
            ///        dtJobList.Columns.Add("strInstallerSignatureDate", typeof(System.String));
            ///        dtJobList.Columns.Add("strDesignerSignatureDate", typeof(System.String));
            ///        dtJobList.Columns.Add("strElectricianSignatureDate", typeof(System.String));
            ///        if (!dtJobList.Columns.Contains("Urgent"))
            ///            dtJobList.Columns.Add("Urgent", typeof(System.Boolean));
            ///        for (int i = 0; i < dtJobList.Rows.Count; i++)
            ///        {
            ///            DataRow row = dtJobList.Rows[i];
            ///            row["Id"] = QueryString.QueryStringEncode("id=" + Convert.ToString(row["JobID"]));

            ///            if (dtJobList.Columns.Contains("InstallationDate"))
            ///                row["strInstallationDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallationDate"])) ? Convert.ToDateTime(row["InstallationDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (dtJobList.Columns.Contains("CreatedDate"))
            ///                row["strCreatedDate"] = !string.IsNullOrEmpty(Convert.ToString(row["CreatedDate"])) ? Convert.ToDateTime(row["CreatedDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (dtJobList.Columns.Contains("SignatureDate"))
            ///                row["strSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["SignatureDate"])) ? Convert.ToDateTime(row["SignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (dtJobList.Columns.Contains("InstallerSignatureDate"))
            ///                row["strInstallerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallerSignatureDate"])) ? Convert.ToDateTime(row["InstallerSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (dtJobList.Columns.Contains("DesignerSignatureDate"))
            ///                row["strDesignerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["DesignerSignatureDate"])) ? Convert.ToDateTime(row["DesignerSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (dtJobList.Columns.Contains("ElectricianSignatureDate"))
            ///                row["strElectricianSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["ElectricianSignatureDate"])) ? Convert.ToDateTime(row["ElectricianSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///            if (!dtJobList.Columns.Contains("Urgent") && dtJobList.Columns.Contains("JobStageChangeDate"))
            ///            {
            ///                if (!string.IsNullOrEmpty(Convert.ToString(row["JobStageChangeDate"])))
            ///                {
            ///                    if ((System.DateTime.Now - Convert.ToDateTime(row["JobStageChangeDate"])).TotalDays >= Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()))
            ///                        row["Urgent"] = 1;
            ///                    else
            ///                        row["Urgent"] = 0;
            ///                }
            ///                else
            ///                    row["Urgent"] = 0;
            ///            }

            ///        }

            ///        dynamicTable = DataTableExtension.ToDynamicList(dtJobList, "JobList");
            ///        gridParam.TotalDisplayRecords = dsJobsPlusColumns.Tables[0].Rows.Count;
            ///        gridParam.TotalRecords = dsJobsPlusColumns.Tables[0].Rows.Count;

            ///    }
            ///    if (dsJobsPlusColumns.Tables.Count > 1 && dsJobsPlusColumns.Tables[1] != null && dsJobsPlusColumns.Tables[1].Rows.Count > 0)
            ///    {
            ///        List<UserWiseColumns> listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsJobsPlusColumns.Tables[1]);
            ///        ViewBag.JSUserColumnList = listUserWiseColumns;
            ///        ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ///        ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            ///        var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            ///        if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            ///        {
            ///            SavePageSize = 10;
            ///        }
            ///        ViewBag.PageSize = SavePageSize;
            ///    }
            ///}
            return Serializer.GetJsonResult(lstJobsPreparedToReturn.OrderByDescending(X => X.JobID));
            //JsonResult json = new JsonResult();
            //json.Data = dynamicTable.OrderByDescending(X => X.JobID);
            //json.MaxJsonLength = Int32.MaxValue;
            //json.JsonRequestBehavior = JsonRequestBehavior.AllowGet;
            //return json;
        }


        #region KendoGrid

        [HttpPost]
        //[GZipOrDeflate]
        public async Task<JsonResult> GetJobListUserWiseColumnsKendo(string solarcompanyid = "", string sResellerId = "", bool isarchive = false, string stageid = "", int page = 0, int pageSize = 10, string search = "", KendoFilter filter = null, List<KendoSort> sort = null, bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false, bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true, bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true, bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true, string preapprovalstatusid = "", string connectionstatusid = "", List<string> Searchcols = null, string scheduletype = "", string jobtype = "", string jobpriority = "", string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", string year = "", bool defaultGrid = false)
        {
            GridParam gridParam = new GridParam();
            gridParam.PageStart = 1;
            gridParam.PageSize = 10;
            int total = 0;
            int SolarCompanyId = 0;
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                SolarCompanyId = ProjectSession.SolarCompanyId;
            else
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;

            string searchQuery = "";
            //searchQuery = GlobalSearchQuery(searchQuery, isarchive, Searchcols, search);
            PrepareFilterForJobs(ref filter, ref sort, isarchive, Searchcols, search);
            IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();

            ///DataSet dsJobsPlusColumns = MakeDatatTableOfFlterJob(SolarCompanyId, ref total, sResellerId, isarchive, stageid, page, pageSize, search, filter, sort, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, preapprovalstatusid, connectionstatusid, Searchcols, scheduletype, jobtype, jobpriority, searchQuery, false, isAllScaJobView, isShowOnlyAssignJobsSCO, cache);
            List<JobView> lstJobView = MakeDatatTableOfFlterJob(SolarCompanyId, ref total, sResellerId, isarchive, stageid, page, pageSize, search, filter, sort, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, preapprovalstatusid, connectionstatusid, Searchcols, scheduletype, jobtype, jobpriority, searchQuery, false, isAllScaJobView, isShowOnlyAssignJobsSCO, cache, year, defaultGrid);
            gridParam.TotalDisplayRecords = gridParam.TotalRecords = lstJobView.Count;
            ///List<dynamic> dynamicTable = new List<dynamic>();
            ///if (dsJobsPlusColumns != null && dsJobsPlusColumns.Tables.Count > 0)
            ///{
            ///if (dsJobsPlusColumns.Tables[0] != null && dsJobsPlusColumns.Tables[0].Rows.Count > 0)
            ///{
            ///DataTable dtJobList = new DataTable();
            ///dtJobList = dsJobsPlusColumns.Tables[0];
            ///dtJobList.Columns.Add("Id", typeof(System.String));
            ///dtJobList.Columns.Add("strInstallationDate", typeof(System.String));
            ///dtJobList.Columns.Add("strCreatedDate", typeof(System.String));
            ///dtJobList.Columns.Add("strSignatureDate", typeof(System.String));
            ///dtJobList.Columns.Add("strInstallerSignatureDate", typeof(System.String) );
            ///dtJobList.Columns.Add("strDesignerSignatureDate", typeof(System.String));
            ///dtJobList.Columns.Add("strElectricianSignatureDate", typeof(System.String));
            ///if (!dtJobList.Columns.Contains("Urgent"))
            ///    dtJobList.Columns.Add("Urgent", typeof(System.Boolean));
            ///foreach (DataRow row in dtJobList.Rows)
            ///{
            ///    row["Id"] = QueryString.QueryStringEncode("id=" + Convert.ToString(row["JobID"]));

            ///    if (dtJobList.Columns.Contains("InstallationDate"))
            ///        row["strInstallationDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallationDate"])) ? Convert.ToDateTime(row["InstallationDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (dtJobList.Columns.Contains("CreatedDate"))
            ///        row["strCreatedDate"] = !string.IsNullOrEmpty(Convert.ToString(row["CreatedDate"])) ? Convert.ToDateTime(row["CreatedDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (dtJobList.Columns.Contains("SignatureDate"))
            ///        row["strSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["SignatureDate"])) ? Convert.ToDateTime(row["SignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (dtJobList.Columns.Contains("InstallerSignatureDate"))
            ///        row["strInstallerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["InstallerSignatureDate"])) ? Convert.ToDateTime(row["InstallerSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (dtJobList.Columns.Contains("DesignerSignatureDate"))
            ///        row["strDesignerSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["DesignerSignatureDate"])) ? Convert.ToDateTime(row["DesignerSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (dtJobList.Columns.Contains("ElectricianSignatureDate"))
            ///        row["strElectricianSignatureDate"] = !string.IsNullOrEmpty(Convert.ToString(row["ElectricianSignatureDate"])) ? Convert.ToDateTime(row["ElectricianSignatureDate"]).ToString("dd/MM/yyyy") : null;

            ///    if (!dtJobList.Columns.Contains("Urgent") && dtJobList.Columns.Contains("JobStageChangeDate"))
            ///    {
            ///        if (!string.IsNullOrEmpty(Convert.ToString(row["JobStageChangeDate"])))
            ///        {
            ///            if ((System.DateTime.Now - Convert.ToDateTime(row["JobStageChangeDate"])).TotalDays >= Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()))
            ///                row["Urgent"] = 1;
            ///            else
            ///                row["Urgent"] = 0;
            ///        }
            ///        else
            ///            row["Urgent"] = 0;
            ///    }
            ///}
            /// dynamicTable = DataTableExtension.ToDynamicList(dtJobList, "JobList");
            /// gridParam.TotalDisplayRecords = dsJobsPlusColumns.Tables[0].Rows.Count;
            /// gridParam.TotalRecords = dsJobsPlusColumns.Tables[0].Rows.Count;

            ///}
            ///if (dsJobsPlusColumns.Tables.Count > 1 && dsJobsPlusColumns.Tables[1] != null && dsJobsPlusColumns.Tables[1].Rows.Count > 0)
            ///{
            ///    List<UserWiseColumns> listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsJobsPlusColumns.Tables[1]);
            ///    ViewBag.JSUserColumnList = listUserWiseColumns;
            ///    ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ///    ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            ///    var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            ///    if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            ///    {
            ///        SavePageSize = 10;
            ///    }
            ///    ViewBag.PageSize = SavePageSize;
            ///}
            ///}
            ///return Json(new { total = total, data = dynamicTable }, JsonRequestBehavior.AllowGet);
            return Json(new { total = total, data = lstJobView }, JsonRequestBehavior.AllowGet);
        }
        private List<JobView> MakeDatatTableOfFlterJob(int SolarCompanyId, ref int total, string sResellerId = "", bool isarchive = false, string stageid = "", int page = 0, int pageSize = 10, string search = "", KendoFilter filter = null, List<KendoSort> sort = null, bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false, bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true, bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true, bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true, string preapprovalstatusid = "", string connectionstatusid = "", List<string> Searchcols = null, string scheduletype = "", string jobtype = "", string jobpriority = "", string searchQuery = "", bool isExportExcel = false, string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", IDatabase cache = null, string year = "", bool defaultGrid = false)
        {
            int minYear = 0, maxYear = 0;
            if (year.Contains(","))
            {
                minYear = Convert.ToInt32(year.Split(',').Min());
                maxYear = Convert.ToInt32(year.Split(',').Max());
            }
            else
            {
                minYear = maxYear = Convert.ToInt32(year);
            }

            var timer = new Stopwatch();
            timer.Start();
            bool isJoinBeforeFiters = ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9 || (sort != null && sort.Any(k => CommonBAL.FieldsForInstallerDesignerSolarCompany.Contains(k.Field))) || filter.CheckFilterContains(CommonBAL.FieldsForInstallerDesignerSolarCompany);
            Helper.Log.WriteLog("1. JobDataKendo and ResellerIds are = " + sResellerId + " Time : " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss.fff"));
            int PreApprovalStatusId = !string.IsNullOrEmpty(preapprovalstatusid) ? Convert.ToInt32(preapprovalstatusid) : 0;
            int ConnectionStatusId = !string.IsNullOrEmpty(connectionstatusid) ? Convert.ToInt32(connectionstatusid) : 0;
            int ScheduleType = !string.IsNullOrEmpty(scheduletype) ? Convert.ToInt32((SystemEnums.JobScheduleType)Enum.Parse(typeof(SystemEnums.JobScheduleType), scheduletype).GetHashCode()) : 0;
            int JobType = !string.IsNullOrEmpty(jobtype) ? Convert.ToInt32((SystemEnums.JobType)Enum.Parse(typeof(SystemEnums.JobType), jobtype).GetHashCode()) : 0;
            int JobPriority = !string.IsNullOrEmpty(jobpriority) ? Convert.ToInt32((SystemEnums.JobPriority)Enum.Parse(typeof(SystemEnums.JobPriority), jobpriority).GetHashCode()) : 0;
            int StageId = !string.IsNullOrEmpty(stageid) ? Convert.ToInt32(stageid) : 0;
            DataSet dsJobsPlusColumns = new DataSet();

            List<JobView> lstJobsFull = new List<JobView>();
            List<JobView> lstJobsPreparedToReturn = new List<JobView>();
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9)
            {
                dsJobsPlusColumns = _job.GetJobsForSEAndSC(ProjectSession.LoggedInUserId);
                lstJobsFull = CommonBAL.JobsDistributedCacheHashGetUsingJobIds(cache, dsJobsPlusColumns.Tables[0]);
                //dsJobsPlusColumns = _job.GetJobList_UserWiseColumnsByYear(SystemEnums.MenuId.JobView.GetHashCode(), ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, page, pageSize, "", "", Convert.ToInt32(ConfigurationManager.AppSettings["UrgentJobDay"].ToString()), StageId, SolarCompanyId, isarchive, ScheduleType, JobType, JobPriority, search, null, null, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, PreApprovalStatusId, ConnectionStatusId, year);
                //lstJobsFull = CommonBAL.DataTableToListJobs(dsJobsPlusColumns);

                lstJobsPreparedToReturn = lstJobsFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                total = lstJobsPreparedToReturn.Count;
                if (total > 0)
                {
                    if (!isExportExcel)
                        lstJobsPreparedToReturn = lstJobsPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                }

                if (dsJobsPlusColumns.Tables.Count > 1 && dsJobsPlusColumns.Tables[1] != null && dsJobsPlusColumns.Tables[1].Rows.Count > 0)
                    listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsJobsPlusColumns.Tables[1]);
            }
            else
            {
                JobViewLists jobViewLists = new JobViewLists();
                DataSet dsAllColumnsData = new DataSet();

                if (SolarCompanyId == 0)
                    SolarCompanyId = ProjectSession.SolarCompanyId;
                if (SolarCompanyId == -1)
                {
                    #region SolarCompanyID value is "All"
                    int ResellerId = !string.IsNullOrEmpty(sResellerId) ? Convert.ToInt32(sResellerId) : 0;
                    if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && ResellerId == 0)
                        ResellerId = ProjectSession.ResellerId;
                    List<int> lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByResellerID(ResellerId).Select(X => X.SolarCompanyId).ToList();
                    if (ProjectSession.UserTypeId == 5 && !Convert.ToBoolean(isAllScaJobView))
                        lstSolarCompanyId = _solarCompanyService.GetSolarCompanyByRAMID(ProjectSession.LoggedInUserId).Select(X => X.SolarCompanyId).ToList();
                    if (lstSolarCompanyId != null && lstSolarCompanyId.Count > 0)
                    {
                        if (defaultGrid)
                        {
                            DataTable dtFilter = getDataTableFromKendoFilter(filter);
                            DataTable dtSort = getDataTableFromKendoSort(sort);
                            CommonBAL.JobsWithoutCache(lstSolarCompanyId, minYear, ref jobViewLists, year, page, pageSize, dtFilter, dtSort);
                            listUserWiseColumns = jobViewLists.userWiseColumns;
                            lstJobsPreparedToReturn = jobViewLists.jobViews;

                            if (ProjectSession.UserTypeId == 6)
                                lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                            else if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                                lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                            total = lstJobsPreparedToReturn != null && lstJobsPreparedToReturn.Count > 0 ? lstJobsPreparedToReturn[0].Totalcount : 0;
                        }
                        else
                        {
                            for (int iYear = minYear; iYear <= maxYear; iYear++)
                            {
                                string mainJobCacheKey = string.Format(RedisCacheConfiguration.dsJobAllKeysInfoHashKey, iYear);
                                List<DistributedCacheAllKeysInfoForHashSetView> mainJobCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainJobCacheKey);

                                List<int> lstSolarCompanyIdForCachingData = mainJobCache.Select(m => m.PID).ToList();

                                #region Call SP for those SolarCompanyId which are not found in CacheData
                                List<int> lstSCId = lstSolarCompanyId.Except(lstSolarCompanyIdForCachingData).ToList();
                                if (lstSCId != null && lstSCId.Count > 0)
                                {
                                    CommonBAL.JobsDistributedCacheHashSet(cache, lstSCId, iYear, ref dsAllColumnsData, ref lstJobsFull);
                                    if (dsAllColumnsData.Tables.Count > 1 && dsAllColumnsData.Tables[1] != null && dsAllColumnsData.Tables[1].Rows.Count > 0)
                                        listUserWiseColumns = CommonBAL.DataTableToListUserWiseColumns(dsAllColumnsData.Tables[1]);
                                }
                                #endregion


                                #region Fetch SolarCompanyWise JobList Data From Cache
                                List<int> lstSCIdToGetFromCache = lstSolarCompanyId.Except(lstSCId).ToList();
                                CommonBAL.JobsDistributedCacheHashGet(cache, lstSCIdToGetFromCache, iYear, ref lstJobsFull, isJoinBeforeFiters);
                                #endregion
                            }

                            /// newDatatable = FilteringAndSortingDatatale(newDatatable, filter, sort, searchQuery);
                            lstJobsPreparedToReturn = lstJobsFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                            //Helper.Log.WriteLog("4-2. JobDataKendo (Inside ALL Solar Comp Complete Data get) and ResellerIds are = " + sResellerId + " Time : " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss.fff"));
                            if (ProjectSession.UserTypeId == 6)
                            {
                                lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                            }
                            //Helper.Log.WriteLog("4-3. JobDataKendo (Inside ALL Solar Comp Complete Data get) and ResellerIds are = " + sResellerId + " Time : " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss.fff"));
                            total = lstJobsPreparedToReturn.Count;
                            if (total > 0)
                            {
                                if (!isExportExcel)
                                    lstJobsPreparedToReturn = lstJobsPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                            }
                        }
                    }
                    //Helper.Log.WriteLog("5. JobDataKendo (Inside ALL Solar Comp Complete Whole Flow) and ResellerIds are = " + sResellerId + " Time : " + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss.fff"));
                    #endregion
                }
                else if (SolarCompanyId > 0 && defaultGrid)
                {
                    DataTable dtFilter = getDataTableFromKendoFilter(filter);
                    DataTable dtSort = getDataTableFromKendoSort(sort);
                    CommonBAL.JobsWithoutCache(new List<int> { SolarCompanyId }, minYear, ref jobViewLists, year, page, pageSize, dtFilter, dtSort);
                    listUserWiseColumns = jobViewLists.userWiseColumns;
                    lstJobsPreparedToReturn = jobViewLists.jobViews;

                    if (ProjectSession.UserTypeId == 6)
                        lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    else if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    total = lstJobsPreparedToReturn != null && lstJobsPreparedToReturn.Count > 0 ? lstJobsPreparedToReturn[0].Totalcount : 0;
                }
                else
                {
                    for (int iYear = minYear; iYear <= maxYear; iYear++)
                    {
                        string mainJobCacheKey = string.Format(RedisCacheConfiguration.dsJobAllKeysInfoHashKey, iYear);
                        List<DistributedCacheAllKeysInfoForHashSetView> mainJobCache = CommonBAL.DistributedCacheAllKeysInfoGet(cache, mainJobCacheKey);

                        #region Selected specific SolarCompanyId
                        if (mainJobCache != null && mainJobCache.Any(R => R.PID == SolarCompanyId))
                        {
                            DataSet ds = new DataSet();
                            ds.Tables.Add(new DataTable());
                            CommonBAL.JobsDistributedCacheHashGet(cache, new List<int> { SolarCompanyId }, iYear, ref lstJobsFull, isJoinBeforeFiters);
                        }
                        else
                        {
                            CommonBAL.JobsDistributedCacheHashSet(cache, new List<int> { SolarCompanyId }, iYear, ref dsAllColumnsData, ref lstJobsFull);
                            listUserWiseColumns = CommonBAL.DataTableToListUserWiseColumns(dsAllColumnsData.Tables[1]);
                        }
                    }

                    lstJobsPreparedToReturn = lstJobsFull.AsQueryable().ToDataSourceResultSortFilter(sort, filter);
                    if (ProjectSession.UserTypeId == 6)
                        lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    else if (ProjectSession.UserTypeId == 8 && Convert.ToBoolean(isShowOnlyAssignJobsSCO))
                        lstJobsPreparedToReturn = lstJobsPreparedToReturn.Where(k => k.ScoUserId == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    total = lstJobsPreparedToReturn.Count;
                    if (total > 0)
                    {
                        if (!isExportExcel)
                            lstJobsPreparedToReturn = lstJobsPreparedToReturn.Skip((page - 1) * pageSize).Take(pageSize).ToList();
                    }
                    #endregion
                }
            }
            if (!isJoinBeforeFiters && !defaultGrid)
                CommonBAL.JobsFilteredWithInstallerDesignerSolarCompanyJoins(cache, ref lstJobsPreparedToReturn);
            #region Fetch UserWiseColumns From Database
            if (listUserWiseColumns.Count == 0)
            {
                listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
            }
            #endregion
            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            {
                SavePageSize = 10;
            }
            ViewBag.PageSize = SavePageSize;
            timer.Stop();
            Helper.Log.WriteLog("End JobDataKendo and ResellerIds are = " + sResellerId + " Total Time : " + timer.ElapsedMilliseconds);
            return lstJobsPreparedToReturn;
        }
        private string getSQLWhereFromKendoFilter(KendoFilter filter)
        {
            string isFilter = "";
            if (filter != null)
            {
                foreach (var item in filter.Filters)
                {
                    if (!(item.Operator == null))
                    {
                        if (item.Operator.Equals("contains"))
                        {
                            isFilter += " AND " + item.Field + " LIKE " + "'%" + item.Value + "%'";
                        }
                        else
                        {
                            isFilter += " AND " + item.Field + " " + item.Operator + " " + item.Value;
                        }
                    }
                    else
                    {
                        //If contains Inner Filter for All Fields
                        bool isAllSearch = true;
                        foreach (var item1 in item.Filters)
                        {
                            if (isAllSearch)
                            {
                                isAllSearch = false;
                                isFilter += " AND(";

                                if (item1.Operator.Equals("contains"))
                                {
                                    isFilter += item1.Field + " LIKE " + "'%" + item1.Value + "%'";
                                }
                                else
                                {
                                    isFilter += item1.Field + " " + item1.Operator + " " + item1.Value;
                                }
                            }
                            else
                            {

                                if (item1.Operator.Equals("contains"))
                                {
                                    isFilter += " OR " + item1.Field + " LIKE " + "'%" + item1.Value + "%'";
                                }
                                else
                                {
                                    isFilter += " OR " + item1.Field + " " + item1.Operator + " " + item1.Value;
                                }
                            }
                        }
                        if (!isAllSearch)
                        {
                            isFilter += ")";
                        }
                    }

                }
                isFilter = isFilter.Replace("eq", "=").Replace("False", "0").Replace("True", "1");
            }

            return isFilter;
        }

        private string GlobalSearchQuery(string searchQuery, bool isarchive, List<string> Searchcols, string search)
        {
            if (Searchcols != null)
                Searchcols.Add("SerialNumbers");
            searchQuery += "IsDeleted = " + isarchive;
            string globalsearchQuery = "";
            if (!string.IsNullOrEmpty(search) && (Searchcols != null || Searchcols.Count > 0))
            {

                for (int i = 0; i < Searchcols.Count; i++)
                {
                    int val = 0;
                    if (string.IsNullOrEmpty(globalsearchQuery))
                    {

                        globalsearchQuery += " AND ( ";
                        if (Searchcols[i].Equals("JobID"))
                        {
                            if (int.TryParse(search, out val))
                                globalsearchQuery += "(" + Searchcols[i] + " = " + search.Trim() + ") ";
                        }
                        else
                        {
                            globalsearchQuery += "(" + Searchcols[i] + " like '%" + search.Trim().Replace("'", "''") + "%') ";
                        }
                    }
                    else
                    {
                        if (Searchcols[i].Equals("JobID"))
                        {
                            if (int.TryParse(search, out val))
                                globalsearchQuery += " OR (" + Searchcols[i] + " = " + search.Trim() + ") ";
                        }
                        else
                        {
                            globalsearchQuery += " OR (" + Searchcols[i] + " like '%" + search.Trim().Replace("'", "''") + "%') ";
                        }
                    }

                }
                searchQuery += globalsearchQuery + ")";
            }
            return searchQuery;
        }

        public async Task<JsonResult> GetStaffNameValueForFilter(int SolarCompanyId = 0, int ResellerId = 0, string isAllScaJobView = "", string year = "", bool defaultGrid = true)
        {
            //CommonBAL.ValidateYearForGridData(ref year);
            //var years = CommonBAL.GetYearForJobGrid(year);
            List<SelectListItem> items = new List<SelectListItem>();
            if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9 || ProjectSession.UserTypeId == 10)
                return Json(items, JsonRequestBehavior.AllowGet);
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                SolarCompanyId = ProjectSession.SolarCompanyId;
            if (SolarCompanyId == -1)
            {
                if (ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5)
                    ResellerId = ProjectSession.ResellerId;
                items = _job.GetStaffNameFromResellerOrRam(ResellerId, ProjectSession.UserTypeId, isAllScaJobView).AsEnumerable().Where(x => !string.IsNullOrWhiteSpace(x))
                                            .Distinct()
                                            .Select(s => new SelectListItem() { Text = s, Value = s }).ToList();
            }
            else
            {
                IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
                List<JobView> lstFull = new List<JobView>();
                int minYear = 0, maxYear = 0;
                if (year.Contains(","))
                {
                    minYear = Convert.ToInt32(year.Split(',').Min());
                    maxYear = Convert.ToInt32(year.Split(',').Max());
                }
                else
                {
                    minYear = maxYear = Convert.ToInt32(year);
                }
                if (defaultGrid)
                {
                    //Note:- Start of temp data for testing 
                    int page = 1;
                    int pageSize = 1;
                    JobViewLists jobViewLists = new JobViewLists();
                    // End of temp data for testing

                    CommonBAL.JobsWithoutCache(new List<int> { SolarCompanyId }, minYear, ref jobViewLists, year, page, pageSize, null);
                    lstFull = jobViewLists.jobViews;
                    //lstJobView = jobViewLists.jobViews;
                    //listUserWiseColumns = jobViewLists.userWiseColumns;
                }
                else
                {
                    for (int iYear = minYear; iYear <= maxYear; iYear++)
                    {
                        CommonBAL.JobsDistributedCacheHashGet(cache, new List<int>() { SolarCompanyId }, iYear, ref lstFull, false);
                    }
                }

                if (lstFull.Any())
                {
                    if (ProjectSession.UserTypeId == 6)
                    {
                        lstFull = lstFull.Where(k => k.SSCID == ProjectSession.LoggedInUserId || k.CreatedBy == ProjectSession.LoggedInUserId).ToList();
                    }
                    items = lstFull.Where(x => !string.IsNullOrWhiteSpace(x.StaffName))
                                            .Select(s => s.StaffName)
                                            .Distinct()
                                            .Select(s => new SelectListItem() { Text = s, Value = s }).ToList();
                }
                //if (CacheConfiguration.IsContainsKey(CacheConfiguration.dsJobIndex + "_" + SolarCompanyId))
                //{
                //    DataTable dt = CacheConfiguration.Get<DataTable>(CacheConfiguration.dsJobIndex + "_" + SolarCompanyId).Copy();
                //    if (ProjectSession.UserTypeId == 6)
                //    {
                //        DataRow[] dr = dt.Select("SSCID =" + ProjectSession.LoggedInUserId + " or CreatedBy = " + ProjectSession.LoggedInUserId);
                //        if (dr.Length > 0)
                //            dt = dr.CopyToDataTable();
                //    }
                //    items = dt.AsEnumerable().Where(x => !string.IsNullOrWhiteSpace(x.Field<string>("StaffName")))
                //                            .Select(s => s.Field<string>("StaffName"))
                //                            .Distinct()
                //                            .Select(s => new SelectListItem() { Text = s, Value = s }).ToList();
                //}
            }
            return Json(items, JsonRequestBehavior.AllowGet);
        }


        //private DataTable SortingDatatable(DataTable dt,List<KendoGridSorting> sort)
        //{
        //    if(sort != null && sort.Count > 0)
        //    {
        //        for (int i = 0; i < sort.Count; i++)
        //        {
        //            if (string.IsNullOrEmpty(sort[i].Field))
        //            {
        //                dt.AsEnumerable().OrderByDescending(c => c[sort[i].Field]);
        //            }
        //            else
        //            {

        //            }
        //        }
        //    }
        //    return dt;
        //}

        private DataTable FilteringAndSortingDatatale(DataTable dt, KendoGridData filter, List<KendoGridSorting> sort, string searchQuery)
        {
            string query = "";
            if (filter != null && filter.Filters != null && filter.Filters.Count > 0)
            {
                query += "(";

                for (int i = 0; i < filter.Filters.Count; i++)
                {
                    if (filter.Filters[i] != null)
                    {
                        if (i > 0)
                        {
                            query += " " + filter.Logic + " ";
                        }
                        if (filter.Filters[i].Filters != null)
                        {
                            query = query + "(";
                            for (int j = 0; j < filter.Filters[i].Filters.Count; j++)
                            {
                                if (j > 0)
                                {
                                    query += " " + filter.Filters[i].Logic + " ";
                                }
                                query = FilterMultipleValue(filter.Filters[i], query, j);
                            }
                            query = query + ")";
                            //query = query.Substring(0, query.LastIndexOf(filter.Filters[i].Logic));
                        }
                        else
                        {
                            query = FilterMultipleValue(filter, query, i);
                        }
                    }

                }

                query = query + ")";
                //query = query.Substring(0,query.LastIndexOf(filter.Logic));
                //dv.RowFilter = query;
                //string expression = "Modul =" + value;

            }

            string sortQuery = "JobID desc";
            if (sort != null && sort.Count > 0)
            {
                for (int i = 0; i < sort.Count; i++)
                {
                    if (!string.IsNullOrEmpty(sort[i].Field))
                    {
                        sortQuery = sort[i].Field + " " + sort[i].Dir;
                    }
                }
            }
            if (!string.IsNullOrEmpty(searchQuery) && !string.IsNullOrEmpty(query))
            {
                query = query + " AND " + searchQuery;
            }
            else if (string.IsNullOrEmpty(query))
            {
                query = searchQuery;
            }
            if (sortQuery.Length > 0 || query.Length > 0)
            {
                DataRow[] dr = dt.Select(query, sortQuery);
                if (dr.Length > 0)
                    dt = dr.CopyToDataTable();
                else
                    dt = new DataTable();
                //dt = dt.Select(query, sortQuery).Length > 0 ? dt.Select(query, sortQuery).CopyToDataTable() : new DataTable();
            }

            return dt;
        }


        public string FilterMultipleValue(KendoGridData filter, string query, int i)
        {

            var op = "LIKE";
            if (filter.Filters[i].Operator != "contains")
            {
                int result = 0;
                DateTime date;
                double value = 0;
                var isInt = int.TryParse(filter.Filters[i].Value, out result);
                var isDouble = double.TryParse(filter.Filters[i].Value, out value);
                var isDate = DateTime.TryParse(filter.Filters[i].Value, out date);
                if (filter.Filters[i].Field == "SolarCompany")
                {
                    filter.Filters[i].Field = "SolarCompanyId";
                }
                if (filter.Filters[i].Field == "IsTraded")
                {
                    filter.Filters[i].Field = "TradeStatus";
                }
                if (isDate)
                {
                    if (filter.Filters[i].Operator == "gte")
                    {
                        op = ">=";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "')";
                    }
                    else if (filter.Filters[i].Operator == "lte")
                    {
                        op = "<";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + Convert.ToDateTime(filter.Filters[i].Value).AddDays(1) + "')";
                    }

                }
                if (filter.Filters[i].Operator == "eq")
                {
                    if (isInt || isDouble)
                    {
                        op = "=";
                        query += filter.Filters[i].Field + " " + op + " " + filter.Filters[i].Value.Trim();
                    }
                    else if (isDate)
                    {
                        op = ">=";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim().Replace("'", "''") + "'" + " AND " + filter.Filters[i].Field + " " + "<" + " '" + date.AddDays(1).ToString("dd-MM-yyyy") + "')";
                    }
                    else if (filter.Filters[i].Field.ToLower().Equals("jobstage"))
                    {
                        query += filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "'";
                    }
                    else
                    {
                        query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim().Replace("'", "''") + "%'";
                    }
                }

                if (filter.Filters[i].Operator == "neq")
                {
                    if (isInt || isDouble)
                    {
                        op = "<>";
                        query += filter.Filters[i].Field + " " + op + " " + filter.Filters[i].Value.Trim();
                    }
                    else if (isDate)
                    {
                        op = "<";
                        query += "(" + filter.Filters[i].Field + " " + op + " '" + filter.Filters[i].Value.Trim() + "'" + " OR " + filter.Filters[i].Field + " " + ">" + " '" + date.AddDays(1).ToString("dd-MM-yyyy") + "')";
                    }
                    else
                    {
                        op = "NOT LIKE";
                        query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim().Replace("'", "''") + "%'";
                    }

                }

            }
            else
            {
                query += filter.Filters[i].Field + " " + op + " '%" + filter.Filters[i].Value.Trim().Replace("'", "''") + "%'";
            }


            return query;
        }


        #endregion

        [HttpGet]
        public ActionResult EditColumnsForJobIndex(int MenuId)
        {
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, MenuId);
            return PartialView("_UserWiseColumnsForJobIndex", listUserWiseColumns);
        }

        [HttpGet]
        public ActionResult EditColumnsForSTCSubmission()
        {
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.STCSubmissionView.GetHashCode());
            return PartialView("_UserWiseColumnsForSTCSubmission", listUserWiseColumns);
        }
        [HttpGet]
        public ActionResult AddColumns(int MenuId)
        {
            ListColumnMaster obj = new ListColumnMaster();
            List<ColumnMaster> listColumnMaster = _job.GetColumnMaster(MenuId);
            if (listColumnMaster != null && listColumnMaster.Count > 0)
            {
                obj.lstBasicDetails = listColumnMaster.Where(X => X.Category == 1).Select(X => X).ToList();
                obj.lstOwnerDetails = listColumnMaster.Where(X => X.Category == 2).Select(X => X).ToList();
                obj.lstInstallationDetails = listColumnMaster.Where(X => X.Category == 3).Select(X => X).ToList();
                obj.lstSystemDetails = listColumnMaster.Where(X => X.Category == 4).Select(X => X).ToList();
                obj.lstSTCDetails = listColumnMaster.Where(X => X.Category == 5).Select(X => X).ToList();
                obj.lstInstallerDetails = listColumnMaster.Where(X => X.Category == 6).Select(X => X).ToList();
                obj.lstDesignerDetails = listColumnMaster.Where(X => X.Category == 7).Select(X => X).ToList();
                obj.lstElectricianDetails = listColumnMaster.Where(X => X.Category == 8).Select(X => X).ToList();
                obj.lstSolarCompanyDetails = listColumnMaster.Where(X => X.Category == 9).Select(X => X).ToList();
                obj.lstExtraSpecialColumns = listColumnMaster.Where(X => X.Category == 10).Select(X => X).ToList();
                obj.lstValidationColumns = listColumnMaster.Where(X => X.Category == 11).Select(X => X).ToList();
                obj.lstStcInvoiceDetails = listColumnMaster.Where(X => X.Category == 12).Select(X => X).ToList();
            }
            return PartialView("_ColumnMasterForJobIndex", obj);
        }

        public ActionResult AddColumnsSTCSubmission()
        {
            ListColumnMaster obj = new ListColumnMaster();
            List<ColumnMaster> listColumnMaster = _job.GetColumnMaster(SystemEnums.MenuId.STCSubmissionView.GetHashCode());
            if (listColumnMaster != null && listColumnMaster.Count > 0)
            {
                //obj.lstBasicDetails = listColumnMaster.Where(X => X.Category == 1).Select(X => X).ToList();
                //obj.lstOwnerDetails = listColumnMaster.Where(X => X.Category == 2).Select(X => X).ToList();
                //obj.lstInstallationDetails = listColumnMaster.Where(X => X.Category == 3).Select(X => X).ToList();
                //obj.lstSystemDetails = listColumnMaster.Where(X => X.Category == 4).Select(X => X).ToList();
                obj.lstSTCDetails = listColumnMaster.Where(X => X.Category == 5).Select(X => X).ToList();
                //obj.lstInstallerDetails = listColumnMaster.Where(X => X.Category == 6).Select(X => X).ToList();
                //obj.lstDesignerDetails = listColumnMaster.Where(X => X.Category == 7).Select(X => X).ToList();
                //obj.lstElectricianDetails = listColumnMaster.Where(X => X.Category == 8).Select(X => X).ToList();
                //obj.lstSolarCompanyDetails = listColumnMaster.Where(X => X.Category == 9).Select(X => X).ToList();
                //obj.lstExtraSpecialColumns = listColumnMaster.Where(X => X.Category == 10).Select(X => X).ToList();
                //obj.lstValidationColumns = listColumnMaster.Where(X => X.Category == 11).Select(X => X).ToList();
            }
            return PartialView("_ColumnMasterForSTCSubmission", obj);
        }

        [HttpPost]
        public JsonResult SaveUserWiseColumnsDetails(List<UserWiseColumns> columns, int MenuId)
        {
            try
            {
                if (columns != null && columns.Count > 0)
                {
                    double widthsize = 150;
                    DataTable dtcolumns = Common.CreateUserWiseColumnsTable();
                    columns.ForEach(d =>
                    {
                        if (d.ColumnID > 0)
                        {
                            DataRow dr = dtcolumns.NewRow();
                            dr["UserID"] = ProjectSession.LoggedInUserId;
                            dr["ColumnID"] = d.ColumnID;
                            dr["Width"] = d.Width > 0 ? d.Width : float.Parse(widthsize.ToString());
                            dr["MenuID"] = MenuId;
                            dr["OrderNumber"] = d.OrderNumber;
                            dr["PageSize"] = d.PageSize;
                            dtcolumns.Rows.Add(dr);
                        }
                    });
                    _job.SaveUserWiseColumns(dtcolumns, ProjectSession.LoggedInUserId, MenuId);
                    List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, MenuId);
                    ViewBag.JSUserColumnList = listUserWiseColumns;
                    ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
                    ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
                    var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
                    if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
                    {
                        SavePageSize = 10;
                    }
                    ViewBag.PageSize = SavePageSize;
                    return Json(new { status = true, ListColumnName = ViewBag.ListColumnName, ListColumnWidth = ViewBag.ListColumnWidth, JSUserColumnList = ViewBag.JSUserColumnList, PageSize = ViewBag.PageSize }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { status = false }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { status = false, errorMessage = ex.Message }, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpGet]
        public ActionResult ResetDefaultColumns(int MenuId)
        {
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            listUserWiseColumns = _job.ResetDefaultColumns(ProjectSession.LoggedInUserId, MenuId);
            return PartialView("_UserWiseColumnsForJobIndex", listUserWiseColumns);
        }

        [HttpGet]
        public JsonResult GetUserWiseColumnsDetail(int MenuId)
        {
            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, MenuId);
            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            if (SavePageSize < 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            {
                SavePageSize = 10;
            }
            ViewBag.PageSize = SavePageSize;
            return Json(new { ListColumnName = ViewBag.ListColumnName, ListColumnWidth = ViewBag.ListColumnWidth, JSUserColumnList = ViewBag.JSUserColumnList, PageSize = ViewBag.PageSize }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult UploadALLCESPdf(string[] checkListIds, string JobId, string UserId, string type, string[] pdfname, string[] docid, string[] docpath)
        {
            string JsonData = string.Empty;
            //type = "2";
            string Type = type == "2" ? "CES" : "OTHER";
            if (checkListIds != null)
            {
                for (var i = 0; i < checkListIds.ToList().Count; i++)
                {
                    //string DocPath = Path.Combine("JobDocuments", JobId, "CES", checkListIds[i], pdfname[i].ToLower().Contains(".pdf") ? pdfname[i] : (pdfname[i] + ".pdf"));
                    string DocPath = Path.Combine("JobDocuments", JobId, Type, checkListIds[i], pdfname[i].ToLower().Contains(".pdf") ? pdfname[i] : (pdfname[i] + ".pdf"));
                    string Destination = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), DocPath);

                    bool isFileExists = System.IO.File.Exists(Destination);

                    DataSet dsFiles = _job.GetCesPhotosByVisitCheckListId(Convert.ToInt32(checkListIds[i]));

                    if (dsFiles.Tables[0].Rows.Count > 0)
                    {
                        Helper.Helper.Common.generatePDFfromImage(dsFiles.Tables[0], Destination);
                    }
                    else
                    {
                        _generateStcReportBAL.MoveDeletedDocuments(Destination, JobId);
                        System.IO.File.Delete(Destination);
                    }


                    //delete pdf file
                    if (!isFileExists && dsFiles.Tables[0].Rows.Count > 0)
                    {
                        int JobDocId = _job.InsertCESDocuments(Convert.ToInt32(JobId), DocPath, Convert.ToInt32(UserId), Type, JsonData);
                        CommonMethods.DocumentCreatedLog(JobDocId, _documentSignatureLogBAL);
                    }
                    else//remove whole else part after release the 12.4 app.
                    {
                        if (!string.IsNullOrEmpty(DocPath))
                        {
                            var JobDocumentDetails = _job.JobDocument_GetJobDocumentByDocuementPathJobId(Convert.ToInt32(JobId), DocPath);
                            if (JobDocumentDetails.Tables[0].Rows.Count == 0)
                            {
                                int JobDocId = _job.InsertCESDocuments(Convert.ToInt32(JobId), DocPath, Convert.ToInt32(UserId), Type, JsonData);
                            }
                        }
                    }
                }
            }
            if (docid != null)
            {
                for (var j = 0; j < docid.ToList().Count; j++)
                {
                    string docpathnew = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), docpath[j]);
                    bool isdocexists = System.IO.File.Exists(docpathnew);
                    if (!isdocexists)
                    {
                        DeleteDoc objDoc = new DeleteDoc();
                        objDoc.id = docid[j];
                        objDoc.path = docpathnew;
                        objDoc.deleteFile = true;
                        objDoc.JobId = JobId.ToString();
                        DeleteDocumentNew(objDoc);
                    }
                }
            }

            return Json(true, JsonRequestBehavior.AllowGet);
        }

        //public ActionResult TestMail(string ToMail = "ashish.christian@tatvasoft.com", string Subject = "Test mail", string Body = "this is my test email body")
        //{
        //    var StartDt = DateTime.Now;
        //    SMTPDetails smtpDetail = new SMTPDetails();
        //    smtpDetail.MailFrom = ProjectSession.MailFrom;
        //    smtpDetail.SMTPUserName = ProjectSession.SMTPUserName;
        //    smtpDetail.SMTPPassword = ProjectSession.SMTPPassword;
        //    smtpDetail.SMTPHost = ProjectSession.SMTPHost;
        //    smtpDetail.SMTPPort = Convert.ToInt32(ProjectSession.SMTPPort);
        //    smtpDetail.IsSMTPEnableSsl = ProjectSession.IsSMTPEnableSsl;
        //    string FailReason = "";
        //    MailHelper.SendMail(smtpDetail, ToMail, null, null, Subject, Body, null, true, ref FailReason, false);
        //    var EndDt = DateTime.Now;
        //    var diffInSeconds = (EndDt - StartDt).TotalSeconds;
        //    return Content(string.IsNullOrEmpty(FailReason) ? "Sent - Total Seconds : {"+diffInSeconds+"}" : FailReason);
        //}

        /// <summary>
        /// Gets the electrician list for job.
        /// </summary>
        /// <param name="solarCompanyId">The solar company identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult GetElectricianListForJob(string solarCompanyId = "", int jobId = 0)
        {
            int companyId = 0;

            if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3 || ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5)
                companyId = string.IsNullOrEmpty(solarCompanyId) ? 0 : Convert.ToInt32(solarCompanyId);
            else
                companyId = ProjectSession.SolarCompanyId;


            List<ElectricianList> Items = _user.GetElectricianList(companyId, jobId).Select(a => new ElectricianList { Text = a.Name, Value = a.Id.ToString(), IsSystemUser = a.IsSystemUser, IsCustomElectrician = a.IsCustomElectrician }).ToList();

            //List<SelectListItem> Items = _user.GetInstallerDesignerWithStatus(Convert.ToBoolean(isInstaller), companyId, jobId, ProjectSession.IsSubContractor).Select(a => new SelectListItem { Text = a.Name, Value = a.InstallerDesignerId.ToString(), Disabled = a.IsSystemUser }).ToList();
            return Json(Items, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Deletes the custom electrician.
        /// </summary>
        /// <param name="jobElectricianId">The job electrician identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult DeleteCustomElectrician(int jobElectricianId, int jobId)
        {
            _user.DeleteCustomElectrician(jobElectricianId, jobId);
            return this.Json(new { success = true });
        }

        /// <summary>
        /// Checks the existing custom electrician.
        /// </summary>
        /// <param name="fullName">The full name.</param>
        /// <param name="solarCompanyID">The solar company identifier.</param>
        /// <param name="jobId">The job identifier.</param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult CheckExistingCustomElectrician(string fullName, int solarCompanyID, int jobId)
        {
            try
            {
                bool isExist = _job.CheckExistingCustomElectrician(fullName, solarCompanyID, jobId);
                if (!isExist)
                {
                    return Json(new { status = true, isExist = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { status = true, isExist = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<JsonResult> JobElectricians(int jobId, int profileType, JobElectricians jobElectricians, bool isCreateNew)
        {
            try
            {
                string jobSignPath = string.Empty;
                if (profileType == 3 && jobElectricians != null)
                {
                    jobSignPath = !string.IsNullOrEmpty(jobElectricians.Signature) ? jobElectricians.Signature.Replace(ProjectSession.ProofDocumentsURL, "").Replace(ProjectSession.UploadedDocumentPath, "") : null;
                    string eleSignName = System.IO.Path.GetFileName(jobElectricians.Signature);
                    jobElectricians.Signature = eleSignName;
                }
                int jobElectricianId = _job.JobElectricians_InsertUpdate(jobId, profileType, jobElectricians, ProjectSession.LoggedInUserId, isCreateNew);
                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, jobId);
                return Json(new { jobElectricianId = jobElectricianId, status = true, isExist = false }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult UpdateJobStatusFromREC(int resellerId, bool isSwitch, bool isAutoUpdateCEROn)
        {
            try
            {
                DataTable dt = _job.UpdateJobStatusFromREC(resellerId, isSwitch, isAutoUpdateCEROn);
                if (!isSwitch || isAutoUpdateCEROn)
                {
                    var syncTask = Task.Run(async () =>
                    {
                        UpdateDetailsAfterRECInsertion(dt, resellerId);

                                //CommonBAL.SetCacheDataForSTCInvoiceFromSolarCompany(resellerId);
                            });

                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult UpdateDetailsAfterRECInsertion(DataTable dt, int resellerId)
        {
            try
            {
                DataSet ds = _job.UpdateDetailsAfterRECInsertion(dt, resellerId);
                #region save stcJobHistory into xml
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[3].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[3].Rows)
                    {
                        int JobID = Convert.ToInt32(dr["JobID"]);
                        int STCStatusID = Convert.ToInt32(dr["STCStatusID"]);
                        string Description = dr["Description"].ToString();
                        string CreatedByID = dr["CreatedBy"].ToString();
                        string CreatedBy = "";
                        if (CreatedByID.ToString() == "-1")
                        {
                            CreatedBy = "System";
                        }
                        else
                        {
                            CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                        }
                        string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                        Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                    }
                }
                #endregion
                _commonRECMethodsBAL.ProcessRecData(ds, null);
                //CommonBAL.SetCacheDataForSTCSubmissionFromSolarCompanyId(resellerId);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, error = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GetUpdateJobStatusFromRecByResellerId(int resellerId)
        {
            bool isAutoUpdateCEROn = _job.GetUpdateJobStatusFromRecByResellerId(resellerId);
            return Json(new { isAutoUpdateCEROn = isAutoUpdateCEROn }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<JsonResult> UpdateJobOwnerDetails(int jobId, JobOwnerDetails jobOwnerDetails, bool isGST)
        {
            bool isRegistered = false;

            try
            {

                if (!string.IsNullOrEmpty(jobOwnerDetails.CompanyName))
                {
                    jobOwnerDetails.CompanyName = HttpUtility.HtmlDecode(jobOwnerDetails.CompanyName);
                }

                if (jobOwnerDetails.CompanyABN != jobOwnerDetails.OldABNNumber)
                {
                    if (jobOwnerDetails.OwnerType == "Corporate body" || jobOwnerDetails.OwnerType == "Trustee")
                    {
                        string GSTText = string.Empty;
                        string abnURL = "https://abr.business.gov.au/SearchByAbn.aspx?abn=" + jobOwnerDetails.CompanyABN;
                        try
                        {
                            HttpWebRequest wreq = (HttpWebRequest)WebRequest.Create(abnURL);
                            wreq.Method = "GET";
                            wreq.Timeout = -1;
                            wreq.ContentType = "application/json; charset=UTF-8";
                            var myHttpWebResponse = (HttpWebResponse)wreq.GetResponse();
                            string strResult;
                            using (var reader = new StreamReader(myHttpWebResponse.GetResponseStream(), System.Text.Encoding.UTF8))
                            {
                                strResult = reader.ReadToEnd();
                                myHttpWebResponse.Close();
                            }

                            if (strResult != null)
                            {
                                strResult = WebUtility.HtmlDecode(strResult);
                                HtmlDocument resultat = new HtmlDocument();
                                resultat.LoadHtml(strResult);

                                HtmlNode table = resultat.DocumentNode.SelectSingleNode("//table[1]");
                                if (table != null)
                                {
                                    foreach (var cell in table.SelectNodes(".//tr/th"))
                                    {
                                        string someVariable = cell.InnerText;
                                        if (cell.InnerText.ToLower() == "goods & services tax (gst):")
                                        {
                                            var td = cell.ParentNode.SelectNodes("./td");
                                            string tdValue = td[0].InnerText;
                                            GSTText = tdValue;
                                            if (tdValue.ToLower().Contains("registered from"))
                                            {
                                                isRegistered = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }


                        }
                        catch (Exception ex)
                        {
                            isRegistered = false;
                        }
                        jobOwnerDetails.IsOwnerRegisteredWithGST = isRegistered;
                    }
                }
                _job.UpdateJobOwnerDetails(jobId, jobOwnerDetails, isGST);
                if (jobOwnerDetails.oldOwnerAddress != jobOwnerDetails.NewOwnerAddress)
                {
                    string oldOwnerAddress = jobOwnerDetails.oldOwnerAddress;
                    string newowneraddress = jobOwnerDetails.NewOwnerAddress;
                    string HistoryMessage = "has changed owner address - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Address changed from <b style=\"color: black\"> " + jobOwnerDetails.oldOwnerAddress + "</b> to <b style=\"color: black\"> " + jobOwnerDetails.NewOwnerAddress + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if ((jobOwnerDetails.PreviousFirstName != jobOwnerDetails.FirstName) || (jobOwnerDetails.PreviousLastName != jobOwnerDetails.LastName))// || (jobOwnerDetails.PreviousOwnerType != jobOwnerDetails.OwnerType))
                {
                    //string HistoryMessage = "has changed owner name from ("+jobOwnerDetails.PreviousOwnerType+") " + jobOwnerDetails.PreviousFirstName + " " + jobOwnerDetails.PreviousLastName + " to ("+ jobOwnerDetails.OwnerType+ ") " +jobOwnerDetails.FirstName + " " + jobOwnerDetails.LastName;
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner name changed from <b style=\"color: black\"> " + jobOwnerDetails.PreviousFirstName + " " + jobOwnerDetails.PreviousLastName + "</b> to <b style=\"color: black\">" + jobOwnerDetails.FirstName + " " + jobOwnerDetails.LastName + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousEmail != jobOwnerDetails.Email)
                {
                    //string HistoryMessage = "has changed owner email from " + jobOwnerDetails.PreviousEmail + " to " + jobOwnerDetails.Email;
                    string PreviousEmail = !string.IsNullOrEmpty(jobOwnerDetails.PreviousEmail) ? jobOwnerDetails.PreviousEmail : "null";
                    string NewEmail = !string.IsNullOrEmpty(jobOwnerDetails.Email) ? jobOwnerDetails.Email : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner email changed from <b style=\"color: black\">" + PreviousEmail + "</b> to <b style=\"color: black\">" + NewEmail + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousMobile != jobOwnerDetails.Mobile)
                {
                    //string HistoryMessage = "has changed owner mobile from " + jobOwnerDetails.PreviousMobile + " to " + jobOwnerDetails.Mobile;
                    string PreviousMobile = !string.IsNullOrEmpty(jobOwnerDetails.PreviousMobile) ? jobOwnerDetails.PreviousMobile : "null";
                    string NewMobile = !string.IsNullOrEmpty(jobOwnerDetails.Mobile) ? jobOwnerDetails.Mobile : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Mobile changed from <b style=\"color: black\">" + jobOwnerDetails.PreviousMobile + "</b> to <b style=\"color: black\">" + jobOwnerDetails.Mobile + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousPhone != jobOwnerDetails.Phone)
                {
                    //string HistoryMessage = "has changed owner phone from " + jobOwnerDetails.PreviousPhone + " to " + jobOwnerDetails.Phone;
                    string PreviousPhone = !string.IsNullOrEmpty(jobOwnerDetails.PreviousPhone) ? jobOwnerDetails.PreviousPhone : "null";
                    string NewPhone = !string.IsNullOrEmpty(jobOwnerDetails.Phone) ? jobOwnerDetails.Phone : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Phone changed from <b style=\"color: black\">" + PreviousPhone + "</b> to <b style=\"color: black\">" + NewPhone + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }

                //if ((jobOwnerDetails.PreviousOwnerType != jobOwnerDetails.OwnerType) || (jobOwnerDetails.PreviousCompanyName != jobOwnerDetails.CompanyName) || (jobOwnerDetails.CompanyABN != jobOwnerDetails.OldABNNumber))
                //{
                //    JobHistory jobHistory = new JobHistory();
                //    jobHistory.Name = ProjectSession.LoggedInName;
                //    jobHistory.FunctionalityName = "Updating Job Owner type";
                //    jobHistory.JobID = jobId;
                //    string newABNmsg = jobOwnerDetails.OwnerType.ToLower() != "individual" ? jobOwnerDetails.OwnerType + " " + "ABN: " + jobOwnerDetails.CompanyABN + " - " + jobOwnerDetails.CompanyName : jobOwnerDetails.OwnerType;
                //    string oldABNmsg = jobOwnerDetails.PreviousOwnerType.ToLower() != "individual" ? jobOwnerDetails.PreviousOwnerType + " " + "ABN: " + jobOwnerDetails.OldABNNumber + " - " + jobOwnerDetails.PreviousCompanyName : jobOwnerDetails.PreviousOwnerType;
                //    //bool isHistorySaved = _jobHistory.LogJobHistory(jobHistory, HistoryCategory.ModifiedIsGst);
                //    string JobHistoryMessage = "has changed owner type from <b style=\"color: black\">" + oldABNmsg + "</b> to <b style=\"color: black\">" + newABNmsg + "</b>"; ;
                //    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false);
                //}

                DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, jobId.ToString());

                if (dt.Rows.Count > 0)
                {
                    SortedList<string, string> data = new SortedList<string, string>();
                    data.Add("IsGst", dt.Rows[0]["IsGst"].ToString());
                    //await CommonBAL.SetCacheDataForSTCSubmission(null, jobId, data);
                }
                return Json(new { status = true, isOwnerRegisteredWithGST = isRegistered }, JsonRequestBehavior.AllowGet);
            }

            catch (Exception ex)
            {
                return Json(new { status = false, msg = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public async Task<JsonResult> UpdateJobOwnerDetailsTabularNew(JobOwnerDetails jobOwnerDetails, bool isGST, bool isOverRideSave)
        {
            bool isRegistered = false;
            var jobId = jobOwnerDetails.JobID;
            try
            {

                ////BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobId, true);
                //BusinessRuleStatus businessRuleStatus = GetBusinessRuleStatus(jobId, true, true);
                //if (businessRuleStatus.ErrorLength > 0 && !isOverRideSave)
                //{
                //    return Json(new { status = true, Data = businessRuleStatus }, JsonRequestBehavior.AllowGet);
                //}
                //else
                //{
                if (!string.IsNullOrEmpty(jobOwnerDetails.CompanyName))
                {
                    jobOwnerDetails.CompanyName = HttpUtility.HtmlDecode(jobOwnerDetails.CompanyName);
                }

                if (jobOwnerDetails.CompanyABN != jobOwnerDetails.OldABNNumber)
                {
                    if (jobOwnerDetails.OwnerType == "Corporate body" || jobOwnerDetails.OwnerType == "Trustee")
                    {
                        string GSTText = string.Empty;
                        string abnURL = "https://abr.business.gov.au/SearchByAbn.aspx?abn=" + jobOwnerDetails.CompanyABN;
                        try
                        {
                            HttpWebRequest wreq = (HttpWebRequest)WebRequest.Create(abnURL);
                            wreq.Method = "GET";
                            wreq.Timeout = -1;
                            wreq.ContentType = "application/json; charset=UTF-8";
                            var myHttpWebResponse = (HttpWebResponse)wreq.GetResponse();
                            string strResult;
                            using (var reader = new StreamReader(myHttpWebResponse.GetResponseStream(), System.Text.Encoding.UTF8))
                            {
                                strResult = reader.ReadToEnd();
                                myHttpWebResponse.Close();
                            }

                            if (strResult != null)
                            {
                                strResult = WebUtility.HtmlDecode(strResult);
                                HtmlDocument resultat = new HtmlDocument();
                                resultat.LoadHtml(strResult);

                                HtmlNode table = resultat.DocumentNode.SelectSingleNode("//table[1]");
                                if (table != null)
                                {
                                    foreach (var cell in table.SelectNodes(".//tr/th"))
                                    {
                                        string someVariable = cell.InnerText;
                                        if (cell.InnerText.ToLower() == "goods & services tax (gst):")
                                        {
                                            var td = cell.ParentNode.SelectNodes("./td");
                                            string tdValue = td[0].InnerText;
                                            GSTText = tdValue;
                                            if (tdValue.ToLower().Contains("registered from"))
                                            {
                                                isRegistered = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }


                        }
                        catch (Exception ex)
                        {
                            isRegistered = false;
                        }
                        jobOwnerDetails.IsOwnerRegisteredWithGST = isRegistered;
                    }
                }
                if (jobOwnerDetails.AddressID == 2)
                {
                    jobOwnerDetails.IsPostalAddress = true;
                }
                else
                {
                    jobOwnerDetails.IsPostalAddress = false;
                }
                _job.UpdateJobOwnerDetails(jobId, jobOwnerDetails, isGST);
                if (jobOwnerDetails.oldOwnerAddress != jobOwnerDetails.NewOwnerAddress)
                {
                    string oldOwnerAddress = jobOwnerDetails.oldOwnerAddress;
                    string newowneraddress = jobOwnerDetails.NewOwnerAddress;
                    string HistoryMessage = "has changed owner address - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Address changed from <b style=\"color: black\"> " + jobOwnerDetails.oldOwnerAddress + "</b> to <b style=\"color: black\"> " + jobOwnerDetails.NewOwnerAddress + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if ((jobOwnerDetails.PreviousFirstName != jobOwnerDetails.FirstName) || (jobOwnerDetails.PreviousLastName != jobOwnerDetails.LastName))// || (jobOwnerDetails.PreviousOwnerType != jobOwnerDetails.OwnerType))
                {
                    //string HistoryMessage = "has changed owner name from ("+jobOwnerDetails.PreviousOwnerType+") " + jobOwnerDetails.PreviousFirstName + " " + jobOwnerDetails.PreviousLastName + " to ("+ jobOwnerDetails.OwnerType+ ") " +jobOwnerDetails.FirstName + " " + jobOwnerDetails.LastName;
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner name changed from <b style=\"color: black\"> " + jobOwnerDetails.PreviousFirstName + " " + jobOwnerDetails.PreviousLastName + "</b> to <b style=\"color: black\">" + jobOwnerDetails.FirstName + " " + jobOwnerDetails.LastName + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousEmail != jobOwnerDetails.Email)
                {
                    //string HistoryMessage = "has changed owner email from " + jobOwnerDetails.PreviousEmail + " to " + jobOwnerDetails.Email;
                    string PreviousEmail = !string.IsNullOrEmpty(jobOwnerDetails.PreviousEmail) ? jobOwnerDetails.PreviousEmail : "null";
                    string NewEmail = !string.IsNullOrEmpty(jobOwnerDetails.Email) ? jobOwnerDetails.Email : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner email changed from <b style=\"color: black\">" + PreviousEmail + "</b> to <b style=\"color: black\">" + NewEmail + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousMobile != jobOwnerDetails.Mobile)
                {
                    //string HistoryMessage = "has changed owner mobile from " + jobOwnerDetails.PreviousMobile + " to " + jobOwnerDetails.Mobile;
                    string PreviousMobile = !string.IsNullOrEmpty(jobOwnerDetails.PreviousMobile) ? jobOwnerDetails.PreviousMobile : "null";
                    string NewMobile = !string.IsNullOrEmpty(jobOwnerDetails.Mobile) ? jobOwnerDetails.Mobile : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Mobile changed from <b style=\"color: black\">" + jobOwnerDetails.PreviousMobile + "</b> to <b style=\"color: black\">" + jobOwnerDetails.Mobile + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }
                if (jobOwnerDetails.PreviousPhone != jobOwnerDetails.Phone)
                {
                    //string HistoryMessage = "has changed owner phone from " + jobOwnerDetails.PreviousPhone + " to " + jobOwnerDetails.Phone;
                    string PreviousPhone = !string.IsNullOrEmpty(jobOwnerDetails.PreviousPhone) ? jobOwnerDetails.PreviousPhone : "null";
                    string NewPhone = !string.IsNullOrEmpty(jobOwnerDetails.Phone) ? jobOwnerDetails.Phone : "null";
                    string HistoryMessage = "has changed owner details - <b class=\"blue-title\"> (" + jobId + ") JobRefNo </b>";
                    string description = "Owner Phone changed from <b style=\"color: black\">" + PreviousPhone + "</b> to <b style=\"color: black\">" + NewPhone + "</b>";
                    Common.SaveJobHistorytoXML(jobId, HistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false, description);
                }

                //if ((jobOwnerDetails.PreviousOwnerType != jobOwnerDetails.OwnerType) || (jobOwnerDetails.PreviousCompanyName != jobOwnerDetails.CompanyName) || (jobOwnerDetails.CompanyABN != jobOwnerDetails.OldABNNumber))
                //{
                //    JobHistory jobHistory = new JobHistory();
                //    jobHistory.Name = ProjectSession.LoggedInName;
                //    jobHistory.FunctionalityName = "Updating Job Owner type";
                //    jobHistory.JobID = jobId;
                //    string newABNmsg = jobOwnerDetails.OwnerType.ToLower() != "individual" ? jobOwnerDetails.OwnerType + " " + "ABN: " + jobOwnerDetails.CompanyABN + " - " + jobOwnerDetails.CompanyName : jobOwnerDetails.OwnerType;
                //    string oldABNmsg = jobOwnerDetails.PreviousOwnerType.ToLower() != "individual" ? jobOwnerDetails.PreviousOwnerType + " " + "ABN: " + jobOwnerDetails.OldABNNumber + " - " + jobOwnerDetails.PreviousCompanyName : jobOwnerDetails.PreviousOwnerType;
                //    //bool isHistorySaved = _jobHistory.LogJobHistory(jobHistory, HistoryCategory.ModifiedIsGst);
                //    string JobHistoryMessage = "has changed owner type from <b style=\"color: black\">" + oldABNmsg + "</b> to <b style=\"color: black\">" + newABNmsg + "</b>"; ;
                //    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "JobOwnerDetails", ProjectSession.LoggedInName, false);
                //}

                //DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, jobId.ToString());

                //if (dt.Rows.Count > 0)
                //{
                //    SortedList<string, string> data = new SortedList<string, string>();
                //    data.Add("IsGst", dt.Rows[0]["IsGst"].ToString());
                //    await CommonBAL.SetCacheDataForSTCSubmission(null, jobId, data);
                //}
                return Json(new { status = true, isOwnerRegisteredWithGST = isRegistered }, JsonRequestBehavior.AllowGet);
                //}
            }

            catch (Exception ex)
            {
                return Json(new { status = false, msg = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetDataForTradeJob(List<JobDeleteViewModel> jobs)
        {
            StringBuilder sb = new StringBuilder();
            clsUploadedFileJsonResponseObject JsonResponseObj = new clsUploadedFileJsonResponseObject();
            List<int> lstJobs = new List<int>();
            List<BasicDetails> jobBasicDetails = new List<BasicDetails>();
            foreach (JobDeleteViewModel job in jobs)
            {
                int jID = 0;
                if (!string.IsNullOrEmpty(job.Id))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(job.Id, "id"), out jID);
                    lstJobs.Add(jID);

                    BasicDetails jobDetail = new BasicDetails()
                    {
                        JobID = jID,
                        Title = job.JobTitle
                    };
                    jobBasicDetails.Add(jobDetail);
                }

            }

            List<DeleteJob_Failed> lstNotDeletedJob = new List<DeleteJob_Failed>();
            List<JobList> lstJobTradeData = _job.GetDataForTradeJob(lstJobs);

            return Json(new { data = lstJobTradeData }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult UpdateJobInstallationPropertyType(int jobId, string propertyType, bool isGST)
        {
            try
            {
                _job.UpdateJobInstallationPropertyType(jobId, propertyType, isGST);

                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                jobHistory.FunctionalityName = "Updating Job Installation Property Type";
                jobHistory.JobID = jobId;
                //bool isHistorySaved = _jobHistory.LogJobHistory(jobHistory, HistoryCategory.ModifiedIsGst);
                string JobHistoryMessage = "modified Gst from " + jobHistory.FunctionalityName;
                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "ModifiedIsGst", ProjectSession.LoggedInName, false);
                string JobHistoryMessagePropertyType = "Update job installation propertyType to " + propertyType;
                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessagePropertyType, "General", "JobSTCDetails", ProjectSession.LoggedInName, false);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }

            catch (Exception ex)
            {
                return Json(new { status = false, msg = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        public async Task ExportDatattableExcel(string solarcompanyid = "", string sResellerId = "", bool isarchive = false, string stageid = "", int page = 0, int pageSize = 10, string search = "", KendoFilter filter = null, List<KendoSort> sort = null, bool IsGst = false, bool jobref = true, bool jobdescription = true, bool jobaddress = true, bool jobclient = true, bool jobstaff = false, bool invoiced = true, bool notinvoiced = true, bool readytotrade = true, bool notreadytotrade = true, bool traded = true, bool nottraded = true, bool preapprovalnotapproved = true, bool preapprovalapproved = true, bool connectioncompleted = true, bool connectionnotcompleted = true, bool ACT = true, bool NSW = true, bool NT = true, bool QLD = true, bool SA = true, bool TAS = true, bool WA = true, bool VIC = true, string preapprovalstatusid = "", string connectionstatusid = "", string Searchcols = null, string scheduletype = "", string jobtype = "", string jobpriority = "", string isAllScaJobView = "", string isShowOnlyAssignJobsSCO = "", string year = "")
        {
            int total = 0;
            int SolarCompanyId = 0;
            if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
                SolarCompanyId = ProjectSession.SolarCompanyId;
            else
                SolarCompanyId = !string.IsNullOrEmpty(solarcompanyid) ? Convert.ToInt32(solarcompanyid) : 0;
            List<string> searchColumns = Searchcols.Split(',').ToList();
            DateTime? FromDate = null, ToDate = null;
            string searchQuery = "";
            if (!string.IsNullOrEmpty(Request["filter"]) && Convert.ToString(Request["filter"]).ToLower().Trim() != "undefined" && filter == null)
            {
                try
                {
                    var serializer = new JsonSerializerSettings
                    {
                        ContractResolver = new CamelCasePropertyNamesContractResolver()
                    };
                    filter = JsonConvert.DeserializeObject<KendoFilter>(Request["filter"], serializer);
                }
                catch (Exception ex)
                {
                }
            }
            PrepareFilterForJobs(ref filter, ref sort, isarchive, searchColumns, search);

            List<UserWiseColumns> listUserWiseColumns = new List<UserWiseColumns>();
            IDatabase cache = await RedisCacheConfiguration.GetDatabaseAsync();
            List<JobView> lstJobView = MakeDatatTableOfFlterJob(SolarCompanyId, ref total, sResellerId, isarchive, stageid, page, pageSize, search, filter, sort, IsGst, jobref, jobdescription, jobaddress, jobclient, jobstaff, invoiced, notinvoiced, readytotrade, notreadytotrade, traded, nottraded, preapprovalnotapproved, preapprovalapproved, connectioncompleted, connectionnotcompleted, ACT, NSW, NT, QLD, SA, TAS, WA, VIC, preapprovalstatusid, connectionstatusid, searchColumns, scheduletype, jobtype, jobpriority, searchQuery, true, isAllScaJobView, isShowOnlyAssignJobsSCO, cache, year);
            DataTable dtJobView = CommonBAL.ToDataTable<JobView>(lstJobView);
            DataSet dsJobsPlusColumns = new DataSet();
            dsJobsPlusColumns.Tables.Add(dtJobView);
            if (dsJobsPlusColumns.Tables.Count > 1)
                listUserWiseColumns = DBClient.DataTableToList<UserWiseColumns>(dsJobsPlusColumns.Tables[1]);
            else
                listUserWiseColumns = _job.GetUserWiseColumns(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
            string[] columnns = listUserWiseColumns.Select(x => x.Name).ToArray();
            DataTable dt = new DataView(dsJobsPlusColumns.Tables[0]).ToTable(false, columnns);
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt);
                wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                wb.Style.Font.Bold = true;

                Response.Clear();
                Response.Buffer = true;
                Response.Charset = "";
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;filename= GreenBot-Solar Jobs.xlsx");

                using (MemoryStream MyMemoryStream = new MemoryStream())
                {
                    wb.SaveAs(MyMemoryStream);
                    MyMemoryStream.WriteTo(Response.OutputStream);
                    Response.Flush();
                    Response.End();
                }
            }
        }
        public ActionResult DocViewerOuterPopup()
        {
            return PartialView("_DocumentViewerOuterPopup");
        }


        #region Generate PDF from photos
        [HttpPost]
        public JsonResult GenerateAllImagesOfVisistInPdf(int SchedulingId, int JobId, int UserId, string UniqueVisitId, string VisitChecklistItemIds, bool IsReference = false, bool IsDefault = false, string ClassType = null)
        {

            try
            {
                var AllImages = _job.GetAllPhotosByJobSchedulingId(SchedulingId, VisitChecklistItemIds, IsReference, IsDefault, ClassType, JobId);
                string Type = @"OTHER";
                string DocPath = Path.Combine("JobDocuments", JobId.ToString(), Type, UniqueVisitId + " Report.pdf");
                string Destination = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), DocPath);
                Helper.Helper.Common.generatePDFfromImageCustomImageHightAndWidthRatio(AllImages.Tables[0], Destination);
                var OtherDocumentsDetails = _job.GetJobOtherDocumentByJobID(JobId);
                if (!OtherDocumentsDetails.Any(x => x.DocumentPath.ToLower() == DocPath.ToLower()))
                {
                    int id = _job.InsertCESDocuments(JobId, DocPath, UserId, Type, "");
                    CommonMethods.DocumentCreatedLog(id, _documentSignatureLogBAL);
                }
                return Json("1");
            }
            catch (Exception ex)
            {
                _log.LogException("error in GenerateAllImagesOfVisistInPdf action", ex);
                return Json("Not Generated pdf.");
            }

        }
        #endregion

        [HttpGet]
        public JsonResult LoadCommonJobsWithSameInstallDateAndInstaller(int jobId, int installerId, string installationDate)
        {
            DataSet ds = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, installerId, installationDate);
            List<CommonJobsWithSameInstallDateAndInstaller> commonJobs = new List<CommonJobsWithSameInstallDateAndInstaller>();
            List<CommonJobsWithSameInstallDateAndInstaller> commonJobsWithFailedSTCStaus = new List<CommonJobsWithSameInstallDateAndInstaller>();

            if (ds.Tables.Count > 0)
            {
                commonJobs = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                commonJobsWithFailedSTCStaus = ds.Tables[1].Rows.Count > 0 ? ds.Tables[1].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
            }
            return Json(new { commonJobs = commonJobs, commonJobsWithFailedSTCStaus = commonJobsWithFailedSTCStaus }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult LoadCommonJobsWithSameInstallationAddress(int jobid)
        {
            DataSet commonjobWithSameAddress = _job.CommonJobsWithSameInstallationAddress(jobid);
            List<CommonJobsWithSameInstallationAddress> lstcommonjobs = new List<CommonJobsWithSameInstallationAddress>();
            if (commonjobWithSameAddress.Tables.Count > 0)
            {
                lstcommonjobs = commonjobWithSameAddress.Tables[0].Rows.Count > 0 ? commonjobWithSameAddress.Tables[0].ToListof<CommonJobsWithSameInstallationAddress>() : new List<CommonJobsWithSameInstallationAddress>();
            }
            return Json(new { commonJobs = lstcommonjobs }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult InsertUpdateUserWiseGridConfiguration(UserWiseGridConfiguration objUserWiseGridConfiguration)
        {
            List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
            var sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == objUserWiseGridConfiguration.ViewPageId).FirstOrDefault();
            objUserWiseGridConfiguration.UserId = ProjectSession.LoggedInUserId;
            objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
            objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
            var index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
            if (index != -1)
            {
                lstUserWiseGridConfigurations[index] = objUserWiseGridConfiguration;
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            else
            {
                lstUserWiseGridConfigurations.Add(objUserWiseGridConfiguration);
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            return Json(new { status = true }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public async Task<ActionResult> UploadPVDCode()
        {
            List<string> message = new List<string>();
            string filePath = string.Empty;
            if (ModelState.IsValid)
            {
                HttpPostedFileBase fileUpload = Request.Files[0];
                if (fileUpload != null && fileUpload.ContentLength > 0)
                {
                    string filename = Path.GetFileName(fileUpload.FileName);
                    filePath = Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "UploadPVD" + "\\" + filename);
                    if (System.IO.File.Exists(filePath))
                    {
                        System.IO.File.Delete(filePath);
                    }
                    fileUpload.SaveAs(filePath);

                    DataTable dataTable = new DataTable();
                    try
                    {
                        FileStream stream = System.IO.File.Open(filePath, FileMode.Open, FileAccess.Read);
                        IExcelDataReader excelReader = ExcelReaderFactory.CreateBinaryReader(stream);
                        if (!excelReader.IsValid)
                        {
                            stream = System.IO.File.Open(filePath, FileMode.Open, FileAccess.Read);
                            excelReader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                        }

                        excelReader.IsFirstRowAsColumnNames = true;
                        DataSet result = excelReader.AsDataSet();
                        dataTable.Columns.Add("Accreditationcode", typeof(string));
                        dataTable.Columns.Add("Yourreference", typeof(string));
                        dataTable.Columns.Add("Ownername", typeof(string));
                        if (result != null && result.Tables.Count > 0)
                        {
                            foreach (DataRow excelRow in result.Tables[0].Rows)
                            {
                                DataRow dataRow = dataTable.NewRow();
                                dataRow[0] = excelRow[0];
                                dataRow[1] = excelRow[1];
                                dataRow[2] = excelRow[2];
                                dataTable.Rows.Add(dataRow);
                            }
                        }
                        string StcJobDetailsID = _job.UploadPVDCode(dataTable);
                        List<string> Ids = StcJobDetailsID.Split(',').ToList();
                        //for (int i = 0; i < Ids.Count; i++)
                        //{

                        //    await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(Ids[i]), 0);
                        //}
                        return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                    }
                    catch (Exception ex)
                    {
                        return Json(new { status = false }, JsonRequestBehavior.AllowGet);
                    }
                }

            }

            return Json(message);
        }

        /// <summary>
        /// Remove BatchId from selected jobs
        /// </summary>
        /// <param name="StcJobdetailsId"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ActionResult> RemoveJobFromBatch(string StcJobdetailsId)
        {
            try
            {
                List<string> lstStcJobdetailsId = StcJobdetailsId.Split(',').ToList();
                List<string> lstRECBulkUploadId = new List<string>();
                DataSet ds = _job.GetRECBulkuploadIDandSTCStatusbySTCJobDetailID(StcJobdetailsId);
                //List<int> lstSTCStatus = new List<int>();
                //List<int> lstSTCJobDetailID = new List<int>();

                //foreach(var id in lstStcJobdetailsId)
                //{
                //    DataSet ds = _job.GetRECBulkuploadIDandSTCStatusbySTCJobDetailID(Convert.ToInt32(id));
                //    if(ds != null && ds.Tables.Count > 0)
                //    {
                //        if(ds.Tables[0].Rows.Count > 0)
                //        {
                //            foreach(DataRow dr in ds.Tables[0].Rows)
                //            {
                //                string RECBulkUploadId = dr["GBBatchRECUploadId"].ToString();
                //                var tempRECBulkUploadId = RECBulkUploadId.Split('-');
                //                RECBulkUploadId = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;
                //                int STCStatus = Convert.ToInt32(dr["STCStatus"]);
                //                lstRECBulkUploadId.Add(RECBulkUploadId);
                //                lstSTCStatus.Add(STCStatus);
                //                lstSTCJobDetailID.Add(Convert.ToInt32(id));
                //            }
                //        }
                //    }
                //}
                _job.RemoveJobFromBatch(StcJobdetailsId);
                //if(lstSTCJobDetailID.Count > 0)
                //{
                //    for(int i=0; i<lstSTCJobDetailID.Count; i++)
                //    {
                //        string RecBulkUploadid = lstRECBulkUploadId[i];
                //        int stcstatus = lstSTCStatus[i];
                //        string Description = "removed RECBulkUploadId: " + RecBulkUploadid;
                //        _job.SaveSTCJobHistory(lstSTCJobDetailID[i], stcstatus, ProjectSession.LoggedInUserId, Description, DateTime.Now, ProjectSession.LoggedInUserId);
                //    }
                //}
                if (ds != null && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            string RecBulkUploadid = dr["GBBatchRECUploadId"].ToString();
                            var tempRECBulkUploadId = RecBulkUploadid.Split('-');
                            RecBulkUploadid = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;
                            int STCJobDetailid = Convert.ToInt32(dr["STCJobDetailsID"]);
                            int stcstatus = Convert.ToInt32(dr["STCStatus"]);
                            string Description = "removed RECBulkUploadId: " + RecBulkUploadid;
                            _job.SaveSTCJobHistory(STCJobDetailid, stcstatus, ProjectSession.LoggedInUserId, Description, DateTime.Now, ProjectSession.LoggedInUserId);
                        }
                    }
                }
                //foreach (var id in lstStcJobdetailsId)
                //{
                //    SortedList<string, string> data = new SortedList<string, string>();

                //    data.Add("RECBulkUploadTimeDate", string.Empty);
                //    data.Add("GBBatchRECUploadId", string.Empty);
                //    //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(id), null, data);


                //    Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from RemoveJObFromBatch and set as blank : " + (id.ToString()));
                //}
                // CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(id), 0);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GenerateRecZipJobWise(int jobId, bool isGenerateRecZip)
        {
            try
            {
                string InputDirectory = String.Empty;
                if (isGenerateRecZip)
                {
                    DataSet ds = _job.GetDocumentsForGeneratingRecZip(jobId);
                    DataTable dt = ds.Tables[0];

                    string destFolder = ProjectSession.ProofDocuments + "\\JobDocuments\\" + jobId.ToString() + "\\GenerateRECZip\\";
                    if (!Directory.Exists(destFolder))
                    {
                        GC.Collect();
                        GC.WaitForPendingFinalizers();
                        Directory.CreateDirectory(destFolder);
                    }
                    else
                    {
                        Array.ForEach(Directory.GetFiles(destFolder), System.IO.File.Delete);
                    }

                    foreach (DataRow dr in dt.Rows)
                    {
                        string srcPath = Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), dr["Path"].ToString());//Path.Combine(ProjectSession.ProofDocuments, path);
                        string fileName = System.IO.Path.GetFileName(srcPath);
                        string newFile = Path.Combine(destFolder + "\\" + fileName);
                        if (System.IO.File.Exists(srcPath))
                        {
                            if (System.IO.File.Exists(newFile))
                            {
                                System.IO.File.Delete(newFile);
                            }
                            System.IO.File.Copy(srcPath, newFile);
                            //DownloadFileDocumentChangesWithCompressedPDF(srcPath, newFile, 0);
                            if (Path.GetExtension(newFile).ToLower().Contains("pdf"))
                            {
                                DownloadFileDocumentChanges(srcPath, newFile, 0);
                                //MakeReadOnlyePDF(srcPath, newFile, Convert.ToString(jobId));
                            }
                        }
                    }

                    #region Creating zip file

                    InputDirectory = ProjectSession.ProofDocuments + "\\JobDocuments\\" + jobId.ToString() + "\\GenerateRECZip";

                    //string InputDirectory = Server.MapPath("~/UserDocuments/" + jobId.ToString());
                    string OutputFilename = ProjectSession.ProofDocuments + "\\JobDocuments\\" + jobId.ToString() + "\\" + jobId.ToString() + "_REC.zip";

                    using (Stream zipStream = new FileStream(Path.GetFullPath(OutputFilename), FileMode.Create, FileAccess.Write))
                    {
                        using (ZipArchive archive = new ZipArchive(zipStream, ZipArchiveMode.Create))
                        {
                            foreach (var filePath in System.IO.Directory.GetFiles(InputDirectory, "*.*", System.IO.SearchOption.AllDirectories))
                            {
                                var relativePath = Path.GetFileName(filePath);//filePath.Replace(InputDirectory, string.Empty);
                                using (Stream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                                using (Stream fileStreamInZip = archive.CreateEntry(relativePath).Open())
                                    fileStream.CopyTo(fileStreamInZip);
                            }
                        }
                    }
                    #endregion Creating zip file
                }

                DataTable dtZipDocument = _job.InsertDelete_RecZip_Document(jobId, ProjectSession.LoggedInUserId, "JobDocuments\\" + jobId.ToString() + "\\" + jobId.ToString() + "_REC.zip", isGenerateRecZip).Tables[0];
                //Removing folder after creating zips
                if (dtZipDocument != null & dtZipDocument.Rows.Count > 0)
                {
                    if (Directory.Exists(InputDirectory))
                    {
                        foreach (var filePath in System.IO.Directory.GetFiles(InputDirectory, "*.*", System.IO.SearchOption.AllDirectories))
                        {
                            if (System.IO.File.Exists(filePath))
                                System.IO.File.Delete(filePath);
                        }
                        Directory.Delete(InputDirectory);
                    }
                }
                return Json(new { status = true, data = JsonConvert.SerializeObject(dtZipDocument) }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false, msg = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Installation Verification of JobId and create XML
        /// </summary>
        /// <param name="JobId"></param>
        /// <returns></returns>
        public JsonResult SPVProductVerification(int JobId, string serialNumber = "", bool reProductVerification = false)
        {
            try
            {
                var data = JsonConvert.DeserializeObject<CreateJob>(serialNumber);
                DataSet ds = _job.GetSerialNobyJobID(JobId);
                DataTable oldserialno = ds.Tables[0];
                string oldserial = "";
                foreach (DataRow dr in oldserialno.Rows)
                {
                    oldserial = dr["SerialNumber"].ToString();

                }
                string[] newserials = data.JobSystemDetails.SerialNumbers.Split(new[] { "\r\n" }, StringSplitOptions.None);
                string[] oldserials = oldserial.Split(new[] { "\r\n" }, StringSplitOptions.None);
                List<string> addedserials = new List<string>();
                List<string> removedserials = new List<string>();
                for (int i = 0; i < newserials.Length; i++)
                {
                    string serial = newserials[i];
                    bool isserialnoexist = Array.Exists(oldserials, element => element == serial);
                    if (!isserialnoexist && !string.IsNullOrEmpty(serial))
                    {
                        addedserials.Add(serial);
                    }

                }
                for (int i = 0; i < oldserials.Length; i++)
                {
                    string serial = oldserials[i];
                    bool isserialnoexist = Array.Exists(newserials, element => element == serial);
                    if (!isserialnoexist && !string.IsNullOrEmpty(serial))
                    {
                        removedserials.Add(serial);
                    }

                }
                if (addedserials.Count > 0)
                {
                    string addserialnolist = string.Join(", ", addedserials.ToArray());
                    JobSerialNoupdate objjobserialnoupdate = new JobSerialNoupdate();
                    objjobserialnoupdate.serialno = addserialnolist;
                    objjobserialnoupdate.JobID = Convert.ToInt32(JobId);
                    //_jobHistory.LogJobHistory(objjobserialnoupdate, HistoryCategory.AddedSerialNumber);
                    //string JobHistoryMessage = "has added serial number "+objjobserialnoupdate.serialno+" for JobID "+objjobserialnoupdate.JobID;
                    string JobHistoryMessge = "has added serial numbers - <b class=\"blue-title\">(" + objjobserialnoupdate.JobID + ") JobRefNo</b>";
                    string description = "Old Serial Number: <b style=\"color: black\">" + string.Join(", ", oldserials.ToArray()) + "</b>" + "<br>New Serial Number: <b style=\"color: black\">" + string.Join(", ", newserials.ToArray()) + "</b>";
                    Common.SaveJobHistorytoXML(objjobserialnoupdate.JobID, JobHistoryMessge, "General", "AddedSerialNumber", ProjectSession.LoggedInName, false, description);
                }
                if (removedserials.Count > 0)
                {
                    string removedserialnolist = string.Join(", ", removedserials.ToArray());
                    JobSerialNoupdate objjobserialnoupdate = new JobSerialNoupdate();
                    objjobserialnoupdate.serialno = removedserialnolist;
                    objjobserialnoupdate.JobID = Convert.ToInt32(JobId);
                    //_jobHistory.LogJobHistory(objjobserialnoupdate, HistoryCategory.RemoveSerialNumber);
                    //string JobHistoryMessage = "has removed serial number " + objjobserialnoupdate.serialno + " for JobID " + objjobserialnoupdate.JobID;
                    string JobHistoryMessge = "has removed serial numbers - <b class=\"blue-title\">(" + objjobserialnoupdate.JobID + ") JobRefNo</b>";
                    string description = "<br> Old Serial Number: <b style=\"color: black\">" + string.Join(", ", oldserials.ToArray()) + "</b>" + "<br>New Serial Number: <b style=\"color: black\">" + string.Join(", ", newserials.ToArray()) + "</b>";
                    Common.SaveJobHistorytoXML(objjobserialnoupdate.JobID, JobHistoryMessge, "General", "RemoveSerialNumber", ProjectSession.LoggedInName, false, description);
                }
                string JobHistoryMessgeForPV = "sent SPV product verification request - <b class=\"blue-title\">(" + JobId + ") JobRefNo</b>";
                FormBot.Helper.Log.WriteLog("enter In pV:1 JObid:" + JobId);
                Common.SaveJobHistorytoXML(JobId, JobHistoryMessgeForPV, "Statuses", "ProductVerification", ProjectSession.LoggedInName, false);
                FormBot.Helper.Log.WriteLog("enter In pV:2 JObid:" + JobId);
                _job.UpdateJobSerialNumber(JobId, data.JobSystemDetails.SerialNumbers);
                DataSet dsSPV = _job.GetSPVVerificationUrlSerialNumber(JobId, reProductVerification);
                if (reProductVerification == true)
                {
                    DataSet dsInstallationVerification = _job.GetInstallationVerificationStatus(JobId);
                    bool? isSpvInstallationVerification = false;
                    if (dsInstallationVerification.Tables.Count > 0 && dsInstallationVerification.Tables[0] != null && dsInstallationVerification.Tables[0].Rows.Count > 0)
                    {
                        isSpvInstallationVerification = dsInstallationVerification.Tables[0].Rows[0]["IsSPVInstallationVerified"].ToString() != "" ? Convert.ToBoolean(dsInstallationVerification.Tables[0].Rows[0]["IsSPVInstallationVerified"].ToString()) : false;
                    }
                    if (isSpvInstallationVerification == true)
                    {
                        return Json(new { status = false, IsInstallationVerification = true }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var ProductVerificationXMLPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ProductVerificationXMLPath);
                        var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);
                        SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);
                        DataTable VerifiedSerialNumber = objSPVVerification.SPVProductVerification(dsSPV, ProductVerificationXMLPath, ServerCertificate, reProductVerification);

                        if (VerifiedSerialNumber.Columns[1].ColumnName == "IsPhotoAvailable")
                        {
                            DataRow[] NotExistsPhotoDR = VerifiedSerialNumber.Select("IsPhotoAvailable = " + "false");
                            List<string> lstNotExistPhoto = new List<string>();
                            if (NotExistsPhotoDR.Length > 0)
                            {
                                foreach (DataRow row in NotExistsPhotoDR)
                                {
                                    lstNotExistPhoto.Add(row[0].ToString());
                                }
                            }
                            return Json(new { status = false, IsPhotoUnAvailable = true, lstNotExistPhoto = lstNotExistPhoto }, JsonRequestBehavior.AllowGet);

                        }
                        else
                        {
                            var lstSerialNumber = _job.UpdateVerifiedSerialNumber(VerifiedSerialNumber, JobId);
                            return Json(new { status = true, serialNumber = lstSerialNumber }, JsonRequestBehavior.AllowGet);
                        }

                    }
                }
                else
                {
                    FormBot.Helper.Log.WriteLog("enter In RE-pV:1 JObid:" + JobId);
                    var ProductVerificationXMLPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ProductVerificationXMLPath);
                    var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);
                    SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);
                    DataTable VerifiedSerialNumber = objSPVVerification.SPVProductVerification(dsSPV, ProductVerificationXMLPath, ServerCertificate);
                    FormBot.Helper.Log.WriteLog("enter In RE-pV:2 JObid:" + JobId);
                    if (VerifiedSerialNumber.Columns[1].ColumnName == "IsPhotoAvailable")
                    {
                        DataRow[] NotExistsPhotoDR = VerifiedSerialNumber.Select("IsPhotoAvailable = " + "false");
                        List<string> lstNotExistPhoto = new List<string>();
                        if (NotExistsPhotoDR.Length > 0)
                        {
                            foreach (DataRow row in NotExistsPhotoDR)
                            {
                                lstNotExistPhoto.Add(row[0].ToString());
                            }
                        }
                        return Json(new { status = false, IsPhotoUnAvailable = true, lstNotExistPhoto = lstNotExistPhoto }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        var lstSerialNumber = _job.UpdateVerifiedSerialNumber(VerifiedSerialNumber, JobId);
                        return Json(new { status = true, serialNumber = lstSerialNumber }, JsonRequestBehavior.AllowGet);
                    }

                }

            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult GetSPVProductionVerificationErrorLog(int jobId)
        {

            SpvLog spvFailureReason = new SpvLog();
            spvFailureReason.lstSpvlog = _job.GetSPVProductVerificationLogByJobId(jobId);
            return PartialView(@"~\Views\Job\_SpvProductVerificaionLog.cshtml", spvFailureReason);
        }

        public JsonResult SPVInstallationVerification(int StcJobDetailsId, bool Reverify = false)
        {
            try
            {
                Helper.Log.WriteLog("enter in Installation Verification for jobid: " + StcJobDetailsId);
                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                //string message = string.Empty;
                Nullable<bool> isError = null;

                DataSet dsSPV = _job.GetSPVInstallationVerificationUrlSerialNumber(StcJobDetailsId, Reverify);
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 1)
                {
                    if (dsSPV.Tables.Count > 0)
                    {
                        if (dsSPV.Tables[0].Rows.Count > 0)
                        {
                            var InstallationVerificationXMLPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.InstallationVerificationXMLPath);
                            var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);

                            List<string> ManufactureUrl = dsSPV.Tables[0].AsEnumerable().Select(s => s.Field<string>("SPVManufactureInstallationVerificationUrl")).Distinct().ToList();
                            //Multiple manufacture register with SPV 
                            if (ManufactureUrl.Count < 2)
                            {
                                foreach (var url in ManufactureUrl)
                                {
                                    SPVVerification objSPvVerification = new SPVVerification(_spvLog, _job);
                                    var xmlSPVVerificationResult = objSPvVerification.SPVInstallationVerification(dsSPV, InstallationVerificationXMLPath, ServerCertificate, url);
                                    var lst = xmlSPVVerificationResult.GetElementsByTagName("Code");

                                    if (lst.Count > 0)
                                    {
                                        for (int i = 0; i < lst.Count; i++)
                                        {
                                            var errorCode = (xmlSPVVerificationResult.GetElementsByTagName("Code")[i].InnerText);
                                            var errorDetails = (xmlSPVVerificationResult.GetElementsByTagName("Details")[i].InnerText);
                                            var errorDescription = (xmlSPVVerificationResult.GetElementsByTagName("Description")[i].InnerText);
                                            // jobHistory.HistoryMessage = "code:" + errorCode;
                                            jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                                            jobHistory.ErrorCode = errorCode;
                                            jobHistory.ErrorDescription = errorDescription;
                                            jobHistory.ErrorDetails = errorDetails;
                                            //Convert.ToInt32(objJobDetail.JobID), HTMLTemplate, (int)HistoryCategoryID, ProjectSession.LoggedInUserId, null)
                                            //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.SPVInstallationVerified);
                                            string JobHistoryMessage = "has done Installation Verified -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b> < br/><b class=\"blue-title\">Code:</b> " + jobHistory.ErrorCode + " <br/><b class=\"blue-title\"> Details:</b> " + jobHistory.ErrorDetails + " <br/><b class=\"blue-title\">Description:</b> " + jobHistory.ErrorDescription;
                                            Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "SPVInstallationVerified", ProjectSession.LoggedInName, false);
                                        }
                                        _job.UpdateInstallationVerificationStatus(StcJobDetailsId, false);
                                        //message = "Something went wrong,Please check SPV failure reason.";
                                        isError = true;
                                    }
                                    else
                                    {

                                        jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                                        //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.SPVInstallationVerifiedSuccess);
                                        string JobHistoryMessage = "has done Installation Verified and It has been performed successfully. -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                                        Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "SPVInstallationVerifiedSuccess", ProjectSession.LoggedInName, false);

                                        _job.UpdateInstallationVerificationStatus(StcJobDetailsId, true);
                                        var response = xmlSPVVerificationResult.GetElementsByTagName("InstallationProductVerificationResponse")[0].InnerXml;
                                        //response = response.Replace("\n", String.Empty).Replace("\r", String.Empty).Replace("\t", String.Empty);                                        
                                        XmlDocument xmlDocREC = new XmlDocument();
                                        xmlDocREC.PreserveWhitespace = true;
                                        var RECXmlPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.RECXmlPath);
                                        xmlDocREC.Load(RECXmlPath);

                                        //xmlDocREC.PreserveWhitespace = false;
                                        string NMI = Convert.ToString(dsSPV.Tables[0].Rows[0]["NMI"]);
                                        string JobId = Convert.ToString(dsSPV.Tables[0].Rows[0]["JobID"]);
                                        xmlDocREC.InnerXml = xmlDocREC.InnerXml.Replace("[[InstalltionVerificationResponse]]", response)
                                                                               .Replace("[[NMI]]", NMI);
                                        //XDocument doc = XDocument.Parse(xmlDocREC.InnerXml);
                                        //xmlDocREC.InnerXml = doc.ToString();
                                        string certPath = ServerCertificate;
                                        string certPass = ProjectConfiguration.ServerCertificatePassword;
                                        X509Certificate2 cert = new X509Certificate2(certPath, certPass, X509KeyStorageFlags.Exportable);
                                        RSACryptoServiceProvider rsaCsp = new RSACryptoServiceProvider();
                                        rsaCsp.PersistKeyInCsp = false;
                                        // store the private key for later (signing)
                                        var exportedKeyMaterial = cert.PrivateKey.ToXmlString(true);
                                        rsaCsp.FromXmlString(exportedKeyMaterial);
                                        SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);
                                        objSPVVerification.SignXml(xmlDocREC, rsaCsp, cert, 3);

                                        string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobId, "REC SPV XMl");
                                        if (!Directory.Exists(fullDirectoryPath))
                                            Directory.CreateDirectory(fullDirectoryPath);
                                        string fullFilePath = Path.Combine(fullDirectoryPath, "SpvRec_" + JobId + ".xml");
                                        if (System.IO.File.Exists(fullFilePath))
                                            System.IO.File.Delete(fullFilePath);

                                        XmlWriterSettings settings = new XmlWriterSettings();
                                        settings.Encoding = new UTF8Encoding(false);
                                        // settings.NewLineOnAttributes = false;
                                        settings.Indent = true;
                                        using (XmlWriter writer = XmlWriter.Create(fullFilePath, settings))
                                        {
                                            //xmlDocREC.PreserveWhitespace = false;
                                            xmlDocREC.Save(writer);
                                        }
                                        //string fullZIPFilePath = Path.Combine(fullDirectoryPath, "Spv Rec.zip");
                                        //if (System.IO.File.Exists(fullZIPFilePath))
                                        //    System.IO.File.Delete(fullZIPFilePath);
                                        //using (ZipFile zip = new ZipFile())
                                        //{
                                        //    zip.AddFile(fullFilePath);
                                        //    zip.Save(fullZIPFilePath);
                                        //}
                                        string RefPath = Path.Combine("JobDocuments", JobId, "REC SPV XMl", Path.GetFileName(fullFilePath));
                                        _job.InsertCESDocuments(Convert.ToInt32(JobId), RefPath, ProjectSession.LoggedInUserId, "OTHER", "", true);
                                        SendEmailToOwner(Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]));
                                        //message = "SPV Installation verification has been done successfully.";
                                        isError = false;

                                    }
                                    //CommonBAL.SetCacheDataForSTCSubmission(StcJobDetailsId, 0);
                                    DataTable dt = _job.GetSTCDetailsAndJobDataForCache(StcJobDetailsId.ToString(), null);
                                    if (dt.Rows.Count > 0)
                                    {
                                        string isSPvInstallationVerified = dt.Rows[0]["IsSPVInstallationVerified"].ToString();
                                        string STCStatus = dt.Rows[0]["STCStatus"].ToString();
                                        SortedList<string, string> IsInstallationVerified = new SortedList<string, string>();
                                        IsInstallationVerified.Add("IsSPVInstallationVerified", isSPvInstallationVerified);
                                        IsInstallationVerified.Add("STCStatusId", STCStatus);
                                        // CommonBAL.SetCacheDataForSTCSubmission(StcJobDetailsId, null, IsInstallationVerified).Wait();
                                    }

                                }
                            }
                            else
                            {
                                return Json(new { status = true, iserror = isError }, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                }
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 2)
                {
                    jobHistory.SerialNumbers = dsSPV.Tables[0].Rows[0]["SerialNumber"].ToString();
                    jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                    //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.SerialNumberNotValidForVerify);
                    string JobHistoryMessage = "has done Installation Verified and SerialNumber:" + jobHistory.SerialNumbers + " not valid -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>"; Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "SerialNumberNotValidForVerify", ProjectSession.LoggedInName, false);
                    // message = "Something went wrong,Please check SPV failure reason.";
                    isError = true;
                }
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 3)
                {

                    jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                    //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.AllReadyInstallationVerified);
                    string JobHistoryMessage = "has done Installation Verified and It has been already Verified -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "AllReadyInstallationVerified", ProjectSession.LoggedInName, false);
                    // message = "Something went wrong,Please check SPV failure reason.";
                    isError = true;
                }
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 4)
                {

                    jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                    //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.SPVInstallationAlreadyDoneButFailed);
                    string JobHistoryMessage = "has done Installation Verified and It has been already failed earlier -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "SPVInstallationAlreadyDoneButFailed", ProjectSession.LoggedInName, false);
                    isError = true;
                    // message = "Something went wrong,Please check SPV failure reason.";
                }
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 5)
                {
                    jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                    //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.DoProductVerificationAgain);
                    string JobHistoryMessage = "has done Installation Verified but in this job product verification not done yet so installation verification should failed -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "DoProductVerificationAgain", ProjectSession.LoggedInName, false);
                    isError = true;
                    //message = "Something went wrong,Please check SPV failure reason.";
                }
                if (Convert.ToInt32(dsSPV.Tables[0].Rows[0]["result"]) == 6)
                {
                    jobHistory.JobID = Convert.ToInt32(dsSPV.Tables[0].Rows[0]["JobID"]);
                    //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.InstallationVerificationAlreadyDone);
                    string JobHistoryMessage = "Installation verification is already done for re-submission -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                    Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "InstallationVerificationAlreadyDone", ProjectSession.LoggedInName, false);
                    isError = false;
                }
                return Json(new { status = true, iserror = isError }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }
        #region check sign validation
        //public void LoadXMLPath()
        //{
        //    string JobId = "443246";
        //    string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobId, "REC SPV XMl");
        //    if (!Directory.Exists(fullDirectoryPath))
        //        Directory.CreateDirectory(fullDirectoryPath);
        //    string fullFilePath = Path.Combine(fullDirectoryPath, "SpvRec_" + JobId + ".xml");
        //    if (System.IO.File.Exists(fullFilePath))
        //        System.IO.File.Delete(fullFilePath);

        //    string RefPath = Path.Combine("JobDocuments", JobId, "REC SPV XMl", Path.GetFileName(fullFilePath));
        //    _job.InsertCESDocuments(Convert.ToInt32("443246"), RefPath, ProjectSession.LoggedInUserId, "OTHER", "", true);
        //   // XmlDocument xmlDocREC = new XmlDocument();
        //   // xmlDocREC.PreserveWhitespace = true;
        //   // var RECXmlPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.RECXmlPath);
        //   // xmlDocREC.Load(RECXmlPath);
        //   // //xmlDocREC.PreserveWhitespace = false;
        //   // string NMI = Convert.ToString("654748983");
        //   // var InstallationVerificationXMLPath = "D:/Projects/Formbot/SourceCode/FormBot01082017/FormBot.Main/JobDocuments/SpvRec_443442_Test.xml";
        //   // XmlDocument xmlDocresponse = new XmlDocument();
        //   // xmlDocresponse.Load(InstallationVerificationXMLPath);
        //   // xmlDocREC.InnerXml = xmlDocREC.InnerXml.Replace("[[InstalltionVerificationResponse]]", xmlDocresponse.InnerXml)
        //   //                                        .Replace("[[NMI]]", NMI);




        //   // //XmlDocument xmlDocREC = new XmlDocument();
        //   // //xmlDocREC.PreserveWhitespace = true;
        //   // // var RECXmlPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.RECXmlPath);
        //   // //var InstallationVerificationXMLPath = "D:/Projects/Formbot/SourceCode/FormBot01082017/FormBot.Main/JobDocuments/SpvRec_443442_changed.xml";
        //   // // xmlDocREC.Load(InstallationVerificationXMLPath);

        //   // // XmlNode signnode = xmlDocREC.LastChild;



        //   // XmlNode sbc = xmlDocREC.GetElementsByTagName("Signature")[0];
        //   // //XmlNodeList xmlNodeList = xmlDocREC.GetElementsByTagName("Signature");
        //   // //XmlNode node = xmlNodeList[0];
        //   // //node.ParentNode.RemoveChild(node);
        //   // //XmlNode signnode = xmlDocREC.CreateElement("Signature");
        //   // ////signnode.InnerText = sbc.InnerText;
        //   // //signnode.OuterXml = sbc.OuterXml;
        //   // //signnode.InnerXml = sbc.InnerXml;
        //   // XDocument doc = XDocument.Parse(xmlDocREC.InnerXml);
        //   // xmlDocREC.InnerXml = doc.ToString();
        //   // // xmlDocREC.ReplaceChild(sbc, signnode);
        //   // XmlNode qa = xmlDocREC.SelectSingleNode("RecRegistryApplicationRequest/Registration/InstallationProductVerificationResponse");
        //   // XmlNode start = qa.ChildNodes[3];
        //   // qa.ReplaceChild(sbc, start);
        //   // //XmlNode root = xmlDocREC.DocumentElement;
        //   //// xmlDocREC.GetElementsByTagName("InstallationProductVerificationResponse")[0].ChildNodes[3].ReplaceChild(signnode, sbc);
        //   //// xmlDocREC.InsertAfter(signnode, xmlDocREC.GetElementsByTagName("InstallationProductVerification")[0]);

        //   // //xmlDocREC.DocumentElement.AppendChild(sbc);

        //   // //XDocument xDocument = XDocument.Parse(xmlDocREC.InnerXml);
        //   // //xmlDocREC.InnerXml = xDocument.ToString();

        //   // var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);
        //   // string certPath = ServerCertificate;
        //   // string certPass = ProjectConfiguration.ServerCertificatePassword;
        //   // X509Certificate2 cert = new X509Certificate2(certPath, certPass, X509KeyStorageFlags.Exportable);
        //   // var rsaCsp = new RSACryptoServiceProvider(
        //   //     new CspParameters(24 /* PROV_RSA_AES */));
        //   // rsaCsp.PersistKeyInCsp = false;
        //   // // store the private key for later (signing)
        //   // var exportedKeyMaterial = cert.PrivateKey.ToXmlString(true);
        //   // rsaCsp.FromXmlString(exportedKeyMaterial);
        //   // SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);

        //   // objSPVVerification.SignXml(xmlDocREC, rsaCsp, cert, 3);
        //   // XmlWriterSettings settings = new XmlWriterSettings();
        //   // settings.Encoding = new UTF8Encoding(false);
        //   // // settings.NewLineOnAttributes = false;
        //   // settings.Indent = true;


        //   // string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", "443442", "REC SPV XMl");
        //   // if (!Directory.Exists(fullDirectoryPath))
        //   //     Directory.CreateDirectory(fullDirectoryPath);
        //   // string fullFilePath = Path.Combine(fullDirectoryPath, "SpvRec_" + "443442_signxml" + ".xml");
        //   // if (System.IO.File.Exists(fullFilePath))
        //   //     System.IO.File.Delete(fullFilePath);
        //   // using (XmlWriter writer = XmlWriter.Create(fullFilePath, settings))
        //   // {
        //   //     //xmlDocREC.PreserveWhitespace = false;
        //   //     xmlDocREC.Save(writer);
        //   // }



        //}

        //        public void signXMLDOC()
        //        {
        //            var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);
        //            string certPath = ServerCertificate;
        //            string certPass = ProjectConfiguration.ServerCertificatePassword;
        //            X509Certificate2 cert = new X509Certificate2(certPath, certPass, X509KeyStorageFlags.Exportable);
        //            RSACryptoServiceProvider rsaCsp = new RSACryptoServiceProvider();
        //            rsaCsp.PersistKeyInCsp = false;
        //            // store the private key for later (signing)
        //            var exportedKeyMaterial = cert.PrivateKey.ToXmlString(true);
        //            rsaCsp.FromXmlString(exportedKeyMaterial);
        //            SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);
        //            string str = @"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><InstallationProductVerificationResponse>
        //  <InstallationProductVerification id=""verifiedproducts"">
        //    <VerifiedDateTime>2022-07-18T06:33:55+00:00</VerifiedDateTime>
        //    <Installer>
        //      <ID>A5365510</ID>
        //      <FirstName>Scott Michael Leslie</FirstName>
        //      <LastName>Nichols</LastName>
        //    </Installer>
        //    <InstallationAddress>
        //      <StreetNumber>38</StreetNumber>
        //      <StreetName>Market</StreetName>
        //      <StreetType>PDE</StreetType>
        //      <Suburb>TERRANORA</Suburb>
        //      <Postcode>2486</Postcode>
        //      <State>NSW</State>
        //      <Location>
        //        <Latitude>-28.230505235</Latitude>
        //        <Longitude>153.523301641</Longitude>
        //        <Altitude>48</Altitude>
        //        <Accuracy>68</Accuracy>
        //        <ManuallyEntered>false</ManuallyEntered>
        //      </Location>
        //    </InstallationAddress>
        //    <OwnerEmail>pamela.kill@gjgardner.com.au</OwnerEmail>
        //    <InstallationDate>2022-07-13T12:00:00-07:00</InstallationDate>
        //    <Retailer>
        //      <Name>SAE Group Pty Ltd</Name>
        //      <ABN>34143698864</ABN>
        //    </Retailer>
        //    <Products>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701403162</SerialNumber>
        //        <FlashTest>FF:79.93%,Isc(A):13.36,Voc(V):36.79,Ipm(A):13.35,Vpm (V):29.43,Pmax(W):392.85,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701403258</SerialNumber>
        //        <FlashTest>FF:81.05%,Isc(A):13.24,Voc(V):36.64,Ipm(A):13.24,Vpm (V):29.70,Pmax(W):393.14,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701402527</SerialNumber>
        //        <FlashTest>FF:80.94%,Isc(A):13.18,Voc(V):36.88,Ipm(A):13.25,Vpm (V):29.69,Pmax(W):393.48,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701400696</SerialNumber>
        //        <FlashTest>FF:79.65%,Isc(A):13.57,Voc(V):36.53,Ipm(A):13.06,Vpm (V):30.24,Pmax(W):394.97,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701401293</SerialNumber>
        //        <FlashTest>FF:79.87%,Isc(A):13.39,Voc(V):36.63,Ipm(A):13.25,Vpm (V):29.56,Pmax(W):391.60,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701400098</SerialNumber>
        //        <FlashTest>FF:80.28%,Isc(A):13.31,Voc(V):36.96,Ipm(A):13.08,Vpm (V):30.20,Pmax(W):394.97,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701405011</SerialNumber>
        //        <FlashTest>FF:80.10%,Isc(A):13.28,Voc(V):36.70,Ipm(A):13.07,Vpm (V):29.88,Pmax(W):390.48,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701404962</SerialNumber>
        //        <FlashTest>FF:80.13%,Isc(A):13.24,Voc(V):36.83,Ipm(A):13.35,Vpm (V):29.26,Pmax(W):390.68,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701405084</SerialNumber>
        //        <FlashTest>FF:81.04%,Isc(A):13.11,Voc(V):36.95,Ipm(A):13.10,Vpm (V):29.97,Pmax(W):392.65,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701405085</SerialNumber>
        //        <FlashTest>FF:80.23%,Isc(A):13.36,Voc(V):36.65,Ipm(A):13.05,Vpm (V):30.10,Pmax(W):392.73,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701404948</SerialNumber>
        //        <FlashTest>FF:80.75%,Isc(A):13.14,Voc(V):36.78,Ipm(A):13.08,Vpm (V):29.83,Pmax(W):390.15,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701400337</SerialNumber>
        //        <FlashTest>FF:79.86%,Isc(A):13.31,Voc(V):36.96,Ipm(A):13.23,Vpm (V):29.69,Pmax(W):392.78,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701400962</SerialNumber>
        //        <FlashTest>FF:79.95%,Isc(A):13.34,Voc(V):36.99,Ipm(A):13.14,Vpm (V):30.03,Pmax(W):394.49,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701401235</SerialNumber>
        //        <FlashTest>FF:81.00%,Isc(A):13.10,Voc(V):36.76,Ipm(A):13.05,Vpm (V):29.91,Pmax(W):390.24,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701401740</SerialNumber>
        //        <FlashTest>FF:80.59%,Isc(A):13.33,Voc(V):36.71,Ipm(A):13.09,Vpm (V):30.14,Pmax(W):394.52,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701402851</SerialNumber>
        //        <FlashTest>FF:80.96%,Isc(A):13.05,Voc(V):36.96,Ipm(A):13.19,Vpm (V):29.61,Pmax(W):390.52,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //      <Product>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <SerialNumber>BMA854210701403347</SerialNumber>
        //        <FlashTest>FF:79.62%,Isc(A):13.31,Voc(V):36.89,Ipm(A):13.05,Vpm (V):29.96,Pmax(W):390.89,Watt marking:390</FlashTest>
        //        <ResponsibleSupplier>SERAPHIM RENEWABLES PTY. LTD.</ResponsibleSupplier>
        //      </Product>
        //    </Products>
        //    <Models>
        //      <Model>
        //        <ModelNumber>SRP-390-BMD-HV</ModelNumber>
        //        <Manufacturer>Seraphim Solar System Co Ltd</Manufacturer>
        //        <Wattage>390</Wattage>
        //      </Model>
        //    </Models>
        //  </InstallationProductVerification>
        //<Signature xmlns=""http://www.w3.org/2000/09/xmldsig#""><SignedInfo><CanonicalizationMethod Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""/><SignatureMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/><Reference URI=""#verifiedproducts""><Transforms><Transform Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/><Transform Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""/></Transforms><DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/><DigestValue>VBoayqVkqYcrbEloavskxyjm5rY=</DigestValue></Reference></SignedInfo><SignatureValue>A1MjgpP0gLvcHE4Vks3infsjwgVMULxsfqgUvEOJL9VyQ9+vYiMgHpeL1U9ycqQIwqKScZ0IHY2Hs3f0f/ShlOaMCgeTJma3rCFeK/WJgfu3vLyKVfVm6vjCs+CRGr2P/Wt8ZzlUjQoGpC6z9pDSBkr/Adpx1OjyvuvHdzGa9iGM52HC0g1sY9tya49n3UVpc/CzXDxL0ByQDd7ESihyl7h3XzSC6OSDMAQkQInoEjat9/k7Hro9R3R+qyGYV+fwaCNzR6IEj/DIn0wmtKzQU/9AfB4IRKKB1IH6wvNiy814oUNKOaG1J7AdgExvRIiajhBieRWXvwPh2TziD4Adnd0WYcyjHWbljUc8JxBmAoUT8JV2A+hSnSeukTmETxBABKB6HAceZtswwrKv4KZNp94P/kMGmtKP3UOWyklBlMP1/n3+RhD1NRc0rI3pxeI+uYkb7+tKJHIWtO4QfR91hHtoWbvPPbPLnUDl/hqfY42u4bD6HohTqjxweXHSVjFr4mV5RGlR4vF1KuoPJAqH7+7g2EGIBlJOTsTre1n1EhcQcqbJDnFWuBm3yxoL72p2r7MczDB7gYJR3AFYpXVqeaJNhHK5TBeSRBdvxOGnLK2kVWPALWqHgoxxJhKpxA7L6SpOQB+Wfr1U+0M8v9yAXvc3TrAjcewMoDTWTQ+df8s=</SignatureValue><KeyInfo><X509Data><X509IssuerSerial><X509IssuerName>CN=seraphim2.kickstartagile.com OU=Serial Number Validation O=Kickstart Agile Pty Ltd L=Melbourne S=VIC C=AU</X509IssuerName><X509SerialNumber>15994690898500306187</X509SerialNumber></X509IssuerSerial><X509Certificate>MIIFtDCCA5wCCQDd+I6g8UjFCzANBgkqhkiG9w0BAQ0FADCBmzELMAkGA1UEBhMCQVUxDDAKBgNVBAgMA1ZJQzESMBAGA1UEBwwJTWVsYm91cm5lMSAwHgYDVQQKDBdLaWNrc3RhcnQgQWdpbGUgUHR5IEx0ZDEhMB8GA1UECwwYU2VyaWFsIE51bWJlciBWYWxpZGF0aW9uMSUwIwYDVQQDDBxzZXJhcGhpbTIua2lja3N0YXJ0YWdpbGUuY29tMB4XDTIyMDUxMDE0MjI1MVoXDTI0MDUwOTE0MjI1MVowgZsxCzAJBgNVBAYTAkFVMQwwCgYDVQQIDANWSUMxEjAQBgNVBAcMCU1lbGJvdXJuZTEgMB4GA1UECgwXS2lja3N0YXJ0IEFnaWxlIFB0eSBMdGQxITAfBgNVBAsMGFNlcmlhbCBOdW1iZXIgVmFsaWRhdGlvbjElMCMGA1UEAwwcc2VyYXBoaW0yLmtpY2tzdGFydGFnaWxlLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKzVgWrdNfBeL1+ukePT0JLjC/5K4gaxU9Cidg9PGTUAcxJtAlEt0RC6EwGslBmxiYna+D9BVkE9zDzf0Z+plocrXUnblsVZD/SwJKjprRaDwYOnQ/ZvFisAEBN6MVCc/sGff3rD4cKV3FbX1rLT9QDLNAMgERmeLLgdRjZVZSM5lGO8jpLH+N1FfcUTb+36KEUU3dqpaH5bOm19luwmK9Kqcd117+pRrdyMuD+tbVSOn7bdV2QDmXYoi+LPinzL7t+sBRQdD8pXa5HRM3+t64xGsOceQYAeWTXRltNQKaYE14c4K8pveqEUx/N9a0DX+7rokOIfC8otwDOXKb4dyuMsBuZ1hgrCkRnk+bY8AgokLB+RJl2KXYotuO7I/AQELZNnRBw9ia1PglRTr7UXEsNqBxEeDJO0ETFhIIWYPNECgKST3Zb1JgNEK6Wnc4toTaDaXMqmo/NvgvFtifAy2dbHQyM5QC4TnpQd9VtmDHpRuNDxgdo+Aakz9HYHUrAybLFtkRxea9ORgVDfn5IzWdUlOYihFPr0YWmw6A4XAroCdJ4KydHMXI/X0x5wl860pjNWi3yJ12DEm5JiWSHMqHAXJGltVGH6u8XQAdNbBAPz78aISq9LRXB2trBMkX6gxr5gsO/OB7DUFqnTdXMqq9Ge8eSWR+sOgiwU29NJZZ65AgMBAAEwDQYJKoZIhvcNAQENBQADggIBAJ0leQ3ri3W7bSSReKT8fGYF2szzAF5+E4q/8IhF6K7ixLoo/DF2Pm3vRjY6iLfDJBrhgZ72qBJ8/8qP09y0zV2TGugkShdZJ/XYib5F0R1i2OA06WL9DLAWjhpmR4q7ev0yvmTynMBghbwq0EaJFfVhRmJk++jOUzOlmpMZz/v7c9IfoucZgKblnCy9Sxej9nzSEORO1jam8DWTYW2S+3exPEb5aU5Q/jRYNkzowrK4pbZTzJ9tBlXWG6KScrDJErgveUh71V23cb3IiMY/PA9R+N8eC+ul5dVKrw1xJTGneGp95+WtzeNp8FIV1KtdflUCFUJlDuDOP7aaJKxFW4kugTUt7aLkTXngYzT6eM9XRXdYOl8s2BUR5HIX11W6TixCy0j7G0O2KSUneZiEEC3hhkdtBhR5GnJIlF8Y6muuQdtqId0P5RqMRKrnGpmbMQxWRsFEg0lNr3e3DsxMbqtRNuuIpVtS86/hMWaUICWQqamLJBycUo+JalfplUA3KjdJc36RoTUQkQR7g1X2C65GYPH0Aw+NMUdL3aVjs0hhd7zKQ01ZqNpace1qpc6fz+XefaOrSfSU/29r6iLbGLQgiHQtDbiPKkmzCTAGU/6NjFvoby/sqHzQplTq1DtWWaWu12nPtpReInQ/w+LX/2FJE39RlOttpxH5aI/SwKMR</X509Certificate></X509Data><KeyName>CN=""seraphim2.kickstartagile.com OU=Serial Number Validation O=Kickstart Agile Pty Ltd L=Melbourne S=VIC C=AU""</KeyName><KeyValue><RSAKeyValue><Modulus>rNWBat018F4vX66R49PQkuML/kriBrFT0KJ2D08ZNQBzEm0CUS3RELoTAayUGbGJidr4P0FWQT3MPN/Rn6mWhytdSduWxVkP9LAkqOmtFoPBg6dD9m8WKwAQE3oxUJz+wZ9/esPhwpXcVtfWstP1AMs0AyARGZ4suB1GNlVlIzmUY7yOksf43UV9xRNv7fooRRTd2qlofls6bX2W7CYr0qpx3XXv6lGt3Iy4P61tVI6ftt1XZAOZdiiL4s+KfMvu36wFFB0PyldrkdEzf63rjEaw5x5BgB5ZNdGW01AppgTXhzgrym96oRTH831rQNf7uuiQ4h8Lyi3AM5cpvh3K4ywG5nWGCsKRGeT5tjwC
        //CiQsH5EmXYpdii247sj8BAQtk2dEHD2JrU+CVFOvtRcSw2oHER4Mk7QRMWEghZg80QKApJPdlvUmA0Qrpadzi2hNoNpcyqaj82+C8W2J8DLZ1sdDIzlALhOelB31W2YMelG40PGB2j4BqTP0dgdSsDJssW2RHF5r05GBUN+fkjNZ1SU5iKEU+vRhabDoDhcCugJ0ngrJ0cxcj9fTHnCXzrSmM1aLfInXYMSbkmJZIcyocBckaW1UYfq7xdAB01sEA/PvxohKr0tFcHa2sEyRfqDGvmCw784HsNQWqdN1cyqr0Z7x5JZH6w6CLBTb00llnrk=</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue></KeyInfo></Signature></InstallationProductVerificationResponse>";
        //            var InstallationVerificationXMLPath = "D:/Projects/Formbot/SourceCode/FormBot01082017/FormBot.Main/JobDocuments/SpvRec_443246.xml";

        //            XDocument doc = XDocument.Parse(str,LoadOptions.PreserveWhitespace);
        //            //doc.InnerXml = doc.();
        //           // XmlDocument xmldoc = new XmlDocument();
        //            var xmlDocument = new XmlDocument();
        //            using (var xmlReader = doc.CreateReader())
        //            {
        //                xmlDocument.Load(xmlReader);
        //            }
        //            XmlDocument xmlDocREC = new XmlDocument();
        //            xmlDocREC.PreserveWhitespace = true;
        //            var RECXmlPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.RECXmlPath);
        //            xmlDocREC.Load(RECXmlPath);

        //            xmlDocREC.InnerXml = xmlDocREC.InnerXml.Replace("[[InstalltionVerificationResponse]]", xmlDocument.GetElementsByTagName("InstallationProductVerificationResponse")[0].InnerXml)
        //                                                   .Replace("[[NMI]]", "40013378238");
        //            //XmlNode qa = xmlDocREC.SelectSingleNode("RecRegistryApplicationRequest/Registration/InstallationProductVerificationResponse");


        //            //List<XElement> generated_items = doc.Descendants("InstallationProductVerificationResponse").ToList();

        //            //foreach (XElement generated_item in generated_items)
        //            //{
        //            //    generated_item.AddAfterSelf(generated_item.Descendants());
        //            //    generated_item.Remove();
        //            //}
        //            objSPVVerification.SignXml(xmlDocREC, rsaCsp, cert, 3);
        //        }
        #endregion
        public void checksigntureFromXML()
        {
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.PreserveWhitespace = true;
            var InstallationVerificationXMLPath = "D:/Projects/Formbot/SourceCode/FormBot01082017/FormBot.Main/JobDocuments/443442/REC SPV XMl/SpvRec_443442.xml";
            xmlDoc.Load(InstallationVerificationXMLPath);
            System.Security.Cryptography.Xml.SignedXml signedXml = new System.Security.Cryptography.Xml.SignedXml(xmlDoc);
            XmlNodeList nodeList = xmlDoc.GetElementsByTagName("Signature");
            XmlNodeList certificates = xmlDoc.GetElementsByTagName("X509Certificate");
            X509Certificate2 dcert2 = new X509Certificate2(Convert.FromBase64String(certificates[1].InnerText));
            foreach (XmlElement element in nodeList)
            {
                signedXml.LoadXml(element);
                bool passes = signedXml.CheckSignature(dcert2, true);
            }
        }
        /// <summary>
        /// reset spv installer
        /// </summary>
        /// <param name="stcJobDetailIds"></param>
        /// <param name="stcJobIds"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ResetSPVInstaller(string stcJobDetailIds, string stcJobIds)
        {
            try
            {
                _log.Log(SystemEnums.Severity.Debug, "start spv release");
                ResetInstaller(stcJobDetailIds, stcJobIds);
                _log.Log(SystemEnums.Severity.Debug, "end spv release");
                return this.Json(new { success = true });
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { success = false });
            }
        }

        /// <summary>
        /// Reset SPV after SPV Release
        /// </summary>
        /// <param name="jobids"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ActionResult> SPVReset(string stcJobDetailIds, string jobids)
        {
            try
            {
                _log.Log(SystemEnums.Severity.Debug, "start spv reset");

                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                List<string> lstJobIds = jobids.Split(',').ToList();
                List<string> lststcJobIds = stcJobDetailIds.Split(',').ToList();
                if (lstJobIds != null & lstJobIds.Count > 0)
                {
                    for (int i = 0; i < lstJobIds.Count; i++)
                    {
                        _job.SpvReset(Convert.ToInt32(lstJobIds[i]));
                        jobHistory.JobID = Convert.ToInt32(lstJobIds[i]);
                        //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.ResetSPV);
                        string JobHistoryMessage = "re-set spv successfully -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                        Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "Statuses", "ResetSPV", ProjectSession.LoggedInName, false);
                        //CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(lststcJobIds[i]), 0);
                    }
                    //DataTable dt = _job.GetSTCDetailsAndJobDataForCache(null, jobids);
                    //if (dt.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < dt.Rows.Count; i++)
                    //    {
                    //        string isSpvrequired = dt.Rows[i]["IsSPVRequired"].ToString();
                    //        string isrelease = dt.Rows[i]["IsRelease"].ToString();
                    //        SortedList<string, string> data = new SortedList<string, string>();

                    //        data.Add("IsSPVRequired", isSpvrequired);
                    //        data.Add("IsRelease", isrelease);
                    //        //await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(dt.Rows[i]["JobID"]), data);
                    //    }
                    //}

                }
                else
                {
                    return this.Json(new { success = false });
                }

                _log.Log(SystemEnums.Severity.Debug, "end spv reset");
                return this.Json(new { success = true });
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { success = false });
            }
        }

        [HttpGet]
        public JsonResult GetSPVRequired(int jobId)
        {
            DataSet ds = _job.UpdateIsSpvVerifiedWhenLatLongNullForUploadPhoto(Convert.ToInt32(jobId));
            bool IsSPVRequired = Convert.ToBoolean(ds.Tables[0].Rows[0]["IsSPVRequired"]);
            bool IsGlobalSPVRequired = Convert.ToBoolean(ds.Tables[1].Rows[0]["IsSPVRequired"]);
            return Json(new { IsSPVRequired = IsSPVRequired, GlobalisAllowedSPV = IsGlobalSPVRequired }, JsonRequestBehavior.AllowGet);

        }

        public async Task ResetInstaller(string stcJobDetailIds, string stcJobIds)
        {
            List<string> lstJobIds = stcJobIds.Split(',').ToList();
            List<string> lststcJobIds = stcJobDetailIds.Split(',').ToList();
            JobHistory jobHistory = new JobHistory();
            //jobHistory.Name = ProjectSession.LoggedInName;
            //jobHistory.FunctionalityName = "Release SPV";
            //bool isHistorySaved = _jobHistory.LogJobHistory(jobHistory, HistoryCategory.ModifiedIsGst);
            //string JobHistoryMessage = "Gst is modified by " + jobHistory.Name + " from " + jobHistory.FunctionalityName;
            //Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "ModifiedIsGst", ProjectSession.LoggedInName, false);
            for (int i = 0; i < lstJobIds.Count; i++)
            {
                string destPath = string.Empty;
                _job.SpvRelease(Convert.ToInt32(lstJobIds[i]), Convert.ToInt32(lststcJobIds[i]));

                var OtherDocumentsDetails = _job.GetJobDocumentByJobID(Convert.ToInt32(lstJobIds[i])).Where(x => x.PhysicalPath.ToLower().Contains(".xml")).FirstOrDefault();
                if (OtherDocumentsDetails != null)
                {
                    string sourcePath = Path.Combine(ProjectSession.ProofDocumentsURL + OtherDocumentsDetails.PhysicalPath);
                    destPath = _generateStcReportBAL.MoveDeletedDocuments(sourcePath, lstJobIds[i].ToString(), null);
                    _job.DeleteJobDocumentNew(OtherDocumentsDetails.JobDocumentId, destPath);
                }
                jobHistory.JobID = Convert.ToInt32(lstJobIds[i]);
                //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.ReleaseSPV);
                string jobhistoryMessage = "release spv successfully -<b class=\"blue-title\"> (" + jobHistory.JobID + ") JobRefNo </b>";
                Common.SaveJobHistorytoXML(jobHistory.JobID, jobhistoryMessage, "Statuses", "ReleaseSPV", ProjectSession.LoggedInName, false);

                //CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(lststcJobIds[i]), 0);
            }
            //DataTable dt = _job.GetSTCDetailsAndJobDataForCache(stcJobDetailIds, null);
            //if (dt.Rows.Count > 0)
            //{
            //    for (int i = 0; i < dt.Rows.Count; i++)
            //    {
            //        string isInstallationVerified = dt.Rows[i]["IsSPVInstallationVerified"].ToString();
            //        string isSpvrequired = dt.Rows[i]["IsSPVRequired"].ToString();
            //        string isrelease = dt.Rows[i]["IsRelease"].ToString();
            //        SortedList<string, string> data = new SortedList<string, string>();
            //        data.Add("IsSPVRequired", isSpvrequired);
            //        data.Add("IsRelease", isrelease);
            //        data.Add("IsSPVInstallationVerified", isInstallationVerified);
            //        await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(dt.Rows[i]["STCJobDetailsID"].ToString()), null, data);
            //    }
            //}


        }

        [NonAction]
        public void SendEmailToOwner(int jobId)
        {
            try
            {
                var jobDetail = _job.GetJobBasicDetail(jobId);

                string htmlBody = ReplaceToken(jobDetail);
                string FilePath = Path.Combine("JobDocuments", jobId.ToString(), "Spv", "SpvDetails_" + jobId.ToString() + ".pdf");
                string fullFilePath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, FilePath);

                string fullDirectoryPath = Path.GetDirectoryName(fullFilePath);
                if (!Directory.Exists(fullDirectoryPath))
                    Directory.CreateDirectory(fullDirectoryPath);
                if (System.IO.File.Exists(fullFilePath))
                    System.IO.File.Delete(fullFilePath);


                System.IO.File.WriteAllBytes(fullFilePath, HtmlToBytes(htmlBody).ToArray());

                _job.InsertCESDocuments(jobId, FilePath, ProjectSession.LoggedInUserId, "OTHER", "", false, true);

                if (jobDetail.Email != null && jobDetail.Email != string.Empty)
                {
                    SendMailWithAttechment(jobDetail.Email, jobDetail.OwnerName, FilePath, 44);
                }
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
            }
        }
        public Byte[] HtmlToBytes(string htmlText)
        {
            Byte[] bytes;

            using (var ms = new MemoryStream())
            {
                using (var doc = new iTextSharp.text.Document(PageSize.A4, 10, 10, 10, 10))
                {
                    using (var writer = PdfWriter.GetInstance(doc, ms))
                    {
                        //writer.CloseStream = false;
                        doc.Open();
                        using (var msHtml = new MemoryStream(Encoding.UTF8.GetBytes(htmlText)))
                        {
                            XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, msHtml, Encoding.UTF8);
                        }
                        doc.Close();
                    }
                }
                bytes = ms.ToArray();
            }

            return bytes;
        }
        [NonAction]
        public string ReplaceToken(JobBasicDetail jobDetail)
        {
            string body = string.Empty;
            using (StreamReader reader = new StreamReader(System.Web.HttpContext.Current.Server.MapPath("~/StaticTemplate/SPV/SPVCustomerRecord1.html")))
            {
                body = reader.ReadToEnd();
            }

            return body.Replace("[[GreenbotID]]", jobDetail.JobID.ToString())
                  .Replace("[[OwnerName]]", jobDetail.OwnerName)
                  .Replace("[[SCACompanyName]]", jobDetail.CompanyName)
                  .Replace("[[SCAPhoneNumber]]", jobDetail.Phone)
                  .Replace("[[SCAwebsite]]", jobDetail.CompanyWebsite)
                  .Replace("[[InstallationFullAddress]]", jobDetail.InstallationAddress)
                  .Replace("[[InstallationDate]]", jobDetail.InstallationDate.ToString("dd/MM/yyyy"))
                  .Replace("[[SPVManufacturer]]", jobDetail.Brand)
                  .Replace("[[SPVsuppliername]]", jobDetail.Supplier)
                  .Replace("[[SPVpanelModel]]", jobDetail.Model)
                  .Replace("[[Noofpanels]]", jobDetail.NoOfPanel.ToString())
                  .Replace("[[VerifiedSerialNumbers]]", jobDetail.SerialNumber);
        }

        [NonAction]
        public void SendMailWithAttechment(string Email, string OwnerName, string FilePath, int TemplateID)
        {
            EmailInfo objEmailInfo = new EmailInfo();
            objEmailInfo.OwnerName = OwnerName;
            objEmailInfo.TemplateID = TemplateID;
            List<EmialAttechment> lstEmialAttechment = new List<EmialAttechment>();
            foreach (var path in FilePath.Split(';').ToList())
            {
                string fileExtention = Path.GetExtension(path);
                string fileName = Path.GetFileName(path);
                EmialAttechment objEmialAttechment = new EmialAttechment();
                objEmialAttechment.CreatedDate = DateTime.Now;
                objEmialAttechment.FileMimeType = MimeMapping.GetMimeMapping(fileExtention);
                objEmialAttechment.FileName = fileName;
                objEmialAttechment.FilePath = path;
                lstEmialAttechment.Add(objEmialAttechment);
            }
            _emailBAL.ComposeAndSendEmail(objEmailInfo, Email, null, lstEmialAttechment, Guid.NewGuid());
        }

        /// <summary>
        /// Set SPV on lock serialnumber
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public async Task<ActionResult> SetSPVOnLockSerialNumber(string jobId)
        {
            try
            {
                bool isSPVRequired = _job.SetSPVOnLockSerialNumber(Convert.ToInt32(jobId));

                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                jobHistory.JobID = Convert.ToInt32(jobId);
                //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.LockSerialNumber);
                string JobHistoryMessage = "has locked SerialNumber";
                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "LockSerialNumber", ProjectSession.LoggedInName, false);

                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(jobId));
                //if (Convert.ToInt32(jobId) > 0)
                //{
                //    SortedList<string, string> data = new SortedList<string, string>();
                //    data.Add("IsSPVRequired", Convert.ToString(isSPVRequired));
                //    await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(jobId), data);
                //}

                return this.Json(new { status = true, isSPVRequired = isSPVRequired }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Remove SPV on unlock serialnumber
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public async Task<ActionResult> RemoveSPVOnUnlockSerialnumber(string jobId)
        {
            try
            {
                _job.RemoveSPVOnUnlockSerialnumber(Convert.ToInt32(jobId));

                JobHistory jobHistory = new JobHistory();
                jobHistory.Name = ProjectSession.LoggedInName;
                jobHistory.JobID = Convert.ToInt32(jobId);
                //_jobHistory.LogJobHistory(jobHistory, HistoryCategory.UnLockSerialNumber);
                string JobHistoryMessage = "has UnLocked SerialNumber";
                Common.SaveJobHistorytoXML(jobHistory.JobID, JobHistoryMessage, "General", "UnLockSerialNumber", ProjectSession.LoggedInName, false);

                await CommonBAL.SetCacheDataForJobID(ProjectSession.SolarCompanyId, Convert.ToInt32(jobId));
                //if (Convert.ToInt32(jobId) > 0)
                //{
                //    SortedList<string, string> data = new SortedList<string, string>();
                //    data.Add("IsSPVRequired", Convert.ToString(false));
                //    await CommonBAL.SetCacheDataForSTCSubmission(null, Convert.ToInt32(jobId), data);
                //}
                return this.Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public void PrepareTemplateToSendEmailToInstaller(int jobId)
        {
            EmailInfo emailInfo = _job.GetJobDataForTemplate(Convert.ToInt32(jobId));
            emailInfo.TemplateID = 45;
            if (!string.IsNullOrEmpty(emailInfo.InstallerEmail))
            {
                _emailBAL.ComposeAndSendEmail(emailInfo, emailInfo.InstallerEmail, null, null, default(Guid), Convert.ToString(jobId));
            }
        }
        /// <summary>
        /// get serial number with latest spv verify status
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public JsonResult GetSerialnumberWithSpvStatus(int jobId)
        {
            try
            {
                var lstSerialNumber = _job.GetSerialnumberWithSpvStatus(jobId);
                return Json(new { status = true, serialNumber = lstSerialNumber }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }

        }
        /// <summary>
        /// ignore 200 mtr validation rule in job photos and allow to go for spv Pv
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult SPVIgnore200mtrValidation(int jobId)
        {
            try
            {
                var result = string.Empty;
                var isSPVRequired = string.Empty;
                DataSet ds = _job.SPVIgnore200mtrValidation(jobId);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    result = ds.Tables[0].Rows[0]["result"].ToString();
                    isSPVRequired = ds.Tables[0].Rows[0]["IsSpvRequired"].ToString();
                    return Json(new { status = true, result = result, isSPVRequired = isSPVRequired }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { status = true, result = result, isSPVRequired = isSPVRequired }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                FormBot.Helper.Log.WriteError(ex);
                return this.Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }

        }
        /// <summary>
        /// CreateAndClearCache
        /// </summary>
        /// <returns>PartialView Result</returns>
        [UserAuthorization]
        public ViewResult CreateAndClearCache()
        {
            return View("CreateAndClearCache");
        }
        public ActionResult ResellerSolarCompany()
        {

            return View();
        }

        public JsonResult GetResellerSolarCompany(int id)
        {
            try
            {
                BasicDetails basicDetails = _job.GetResellerSolarCompany(id);
                return Json(new { status = true, data = basicDetails }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                _log.LogException(SystemEnums.Severity.Error, $"JobController/GetResellerSolarCompany", ex);
                return Json(new { }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        [UserAuthorization]
        public ActionResult GenerateFullJobPack(string JobID)
        {
            try
            {
                int jobID = 0;
                if (!string.IsNullOrEmpty(JobID))
                {
                    int.TryParse(QueryString.GetValueFromQueryString(JobID, "id"), out jobID);
                }
                #region get data for Job Pack from database
                DataSet ds = _job.GetFullJobPack(jobID);
                string refNumber = string.Empty;
                string ownerName = string.Empty;
                string CompanyName = string.Empty;
                string installationDate = string.Empty;
                string installationAdd = string.Empty;

                List<string> lstSerialPhoto = new List<string>();
                List<CheckListItem> lstCheckListItem = new List<CheckListItem>();
                if (ds != null && ds.Tables.Count > 0)
                {
                    if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    {
                        refNumber = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["RefNumber"].ToString()) ? ds.Tables[0].Rows[0]["RefNumber"].ToString() : string.Empty;
                        ownerName = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["OwnerName"].ToString()) ? ds.Tables[0].Rows[0]["OwnerName"].ToString() : string.Empty;
                        CompanyName = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["CompanyName"].ToString()) ? ds.Tables[0].Rows[0]["CompanyName"].ToString() : string.Empty;
                        installationDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["InstallationDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["InstallationDate"]).ToString("dd MMMM yyyy") : string.Empty;
                        installationAdd = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["InstallationAdd"].ToString()) ? ds.Tables[0].Rows[0]["InstallationAdd"].ToString() : string.Empty;
                    }

                    if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                        {
                            string photo = !string.IsNullOrEmpty(ds.Tables[1].Rows[i]["Path"].ToString()) ? ds.Tables[1].Rows[i]["Path"].ToString() : string.Empty;
                            lstSerialPhoto.Add(photo);
                        }
                    }

                    if (ds.Tables[2] != null && ds.Tables[2].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[2].Rows.Count; i++)
                        {
                            CheckListItem checkListItem = new CheckListItem();
                            checkListItem.Path = !string.IsNullOrEmpty(ds.Tables[2].Rows[i]["Path"].ToString()) ? ds.Tables[2].Rows[i]["Path"].ToString() : string.Empty;
                            checkListItem.ItemName = !string.IsNullOrEmpty(ds.Tables[2].Rows[i]["ItemName"].ToString()) ? ds.Tables[2].Rows[i]["ItemName"].ToString() : string.Empty;
                            checkListItem.CheckListClassTypeId = Convert.ToInt32(ds.Tables[2].Rows[i]["CheckListClassTypeId"].ToString());
                            lstCheckListItem.Add(checkListItem);
                        }
                    }

                }
                #endregion get data from database
                #region document path
                string path = ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + jobID;

                string pathInSTC = path + "/STC/";
                string pathInCES = path + "/CES/";
                string pathOut = path + "/" + "FullJobPack.pdf";
                string ImagePath = AppDomain.CurrentDomain.BaseDirectory + "/Images/";
                string readOnlySTCPdf = path + "/STC/ReadOnlyPdfSTC/";
                string readOnlyCESPdf = path + "/CES/ReadOnlyPdfCES/";
                #endregion doc path
                #region Fonts,background declaration for first page
                TableHeader tevent = new TableHeader();
                iTextSharp.text.Document document = new iTextSharp.text.Document(PageSize.A4, 20, 20, 30, 30);
                iTextSharp.text.Font whiteFontBig = FontFactory.GetFont("Arial", 45, new BaseColor(System.Drawing.Color.White));
                iTextSharp.text.Font whiteFontMid = FontFactory.GetFont("Arial", 20, new BaseColor(System.Drawing.Color.White));
                iTextSharp.text.Font GreenFont = FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, new BaseColor(System.Drawing.Color.DarkGreen));

                Paragraph paraGraph = new Paragraph();
                PdfPCell Cell = new PdfPCell();
                if (!Directory.Exists(path))
                    Directory.CreateDirectory(path);
                if (System.IO.File.Exists(pathOut))
                {
                    System.IO.File.Delete(pathOut);
                }
                FileStream fs = new FileStream(pathOut, FileMode.CreateNew, FileAccess.ReadWrite);
                PdfWriter pdfWriter = PdfWriter.GetInstance(document, fs);
                pdfWriter.SetLinearPageMode();

                iTextSharp.text.Rectangle rectangle = new iTextSharp.text.Rectangle(20, 20, 550, 800);
                pdfWriter.SetBoxSize("rectangle", rectangle);
                pdfWriter.PageEvent = tevent;

                document.Open();

                tevent.RefNo = jobID.ToString();
                //background img
                iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(ImagePath + "NewLogin/greenbotBg2.jpg");
                jpg.Alignment = iTextSharp.text.Image.UNDERLYING;
                jpg.SetAbsolutePosition(0, 0);
                jpg.ScaleAbsoluteHeight(document.PageSize.Height);
                jpg.ScaleAbsoluteWidth(document.PageSize.Width);
                document.Add(jpg);
                #endregion Background First page,Font declaration

                #region First page-Logo,Owner,Company detail
                string title = "GreenBot full installation details ";
                iTextSharp.text.Image logo = iTextSharp.text.Image.GetInstance(ImagePath + "gb-white_logo.png");
                logo.ScaleAbsolute(200, 40);
                document.Add(logo);

                PdfPTable FirstPageTable = new PdfPTable(2);
                FirstPageTable.SetWidths(new[] { 5, 95 });
                FirstPageTable.TotalWidth = (document.PageSize.Width - 120);
                //FirstPageTable.WidthPercentage = 80f;
                FirstPageTable.HorizontalAlignment = Element.ALIGN_LEFT;
                FirstPageTable.LockedWidth = true;
                FirstPageTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;

                paraGraph = new Paragraph();
                paraGraph.Add(new Chunk("GREENBOT Installation Job Pack", whiteFontBig));
                Cell = new PdfPCell(new Phrase(paraGraph));
                Cell.Colspan = 2;
                Cell.FixedHeight = 100;
                Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                FirstPageTable.AddCell(Cell);

                //first row
                GetRowForFirstPg(FirstPageTable, ImagePath, "job_ic.png", "Owner Name: ", ownerName);

                //second row
                GetRowForFirstPg(FirstPageTable, ImagePath, "white-company.png", "Retailer Company: ", CompanyName);

                //Third row
                GetRowForFirstPg(FirstPageTable, ImagePath, "white-cal.png", "Installation Date: ", installationDate);

                //fourth row
                GetRowForFirstPg(FirstPageTable, ImagePath, "map-icon.png", "Installation Address: ", installationAdd);

                FirstPageTable.WriteSelectedRows(0, -1, document.LeftMargin,
                    FirstPageTable.TotalHeight + document.BottomMargin, pdfWriter.DirectContent);

                #endregion First Page

                #region Stc Doc section
                if (Directory.Exists(pathInSTC))
                {
                    string[] STCFiles = Directory.GetFiles(pathInSTC, "*.pdf");
                    if (STCFiles.Length > 0)
                    {
                        if (!Directory.Exists(System.IO.Path.GetFileName(readOnlySTCPdf)))
                        {
                            Directory.CreateDirectory(readOnlySTCPdf);
                        }
                        document.NewPage();
                        title = "STC Documents";
                        tevent.OnGenericTag(pdfWriter, document, title);
                        tevent.Header = title;
                        bool STCflag = false;
                        for (int k = 0; k < STCFiles.Length; k++)
                        {
                            if (STCflag)
                                document.NewPage();
                            string stcDocName = System.IO.Path.GetFileNameWithoutExtension(STCFiles[k]);
                            tevent.Header = stcDocName;
                            tevent.OnSTCChildNodeTag(pdfWriter, document, stcDocName);

                            string readOnlyFile = Path.Combine(readOnlySTCPdf, Path.GetFileName(STCFiles[k]));
                            if (System.IO.File.Exists(readOnlyFile))
                            {
                                System.IO.File.Delete(readOnlyFile);
                            }
                            System.IO.File.Copy(STCFiles[k], readOnlyFile);
                            DownloadFileDocumentChanges(STCFiles[k], readOnlyFile, 0);
                            ConvertPDFtoImages(pathInSTC, readOnlyFile, jobID, "STC");

                            PdfContentByte cb = pdfWriter.DirectContent;
                            PdfReader pdfStcAssignment = new PdfReader(STCFiles[k]);
                            for (int i = 0; i < pdfStcAssignment.NumberOfPages; i++)
                            {
                                if (STCflag)
                                    document.NewPage();
                                //title = "STC Assignement Form";
                                string imgdestPath = ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + jobID + "/STC/" + System.IO.Path.GetFileNameWithoutExtension(STCFiles[k]).TrimEnd() + "/" + i.ToString() + ".png";
                                var x = document.PageSize.Width - (2 * document.LeftMargin);
                                var y = document.PageSize.Height - (2 * document.TopMargin);
                                //iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(page);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imgdestPath);
                                image.ScaleToFit(x, y);
                                document.Add(image);
                                STCflag = true;
                                System.IO.File.Delete(imgdestPath);


                                //float offset = 0;
                                //PdfImportedPage page = pdfWriter.GetImportedPage(pdfStcAssignment, i);
                                //if (page.Width < document.PageSize.Width)
                                //{
                                //    offset = (document.PageSize.Width - page.Width) / 2;
                                //}
                                //var x = document.PageSize.Width - (2 * document.LeftMargin);
                                //var y = document.PageSize.Height - (2 * document.TopMargin);
                                //iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(page);
                                //image.ScaleToFit(x, y);
                                //document.Add(image);

                            }
                            System.IO.Directory.Delete(ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + jobID + "/STC/" + System.IO.Path.GetFileNameWithoutExtension(STCFiles[k]));
                        }

                    }
                }

                if (Directory.Exists(readOnlySTCPdf))
                {
                    foreach (var item in Directory.GetFiles(readOnlySTCPdf))
                    {
                        System.IO.File.Delete(item);
                    }
                    Directory.Delete(readOnlySTCPdf);
                }
                #endregion  STC Section
                #region CES DOC Section
                //start for add convert ces photo to doc file in CES section
                if (Directory.Exists(pathInCES))
                {
                    string[] subdirectories = Directory.GetDirectories(pathInCES);
                    string[] tempConvertCESToDocFiles;
                    List<string> ConvertCESToDocFiles = new List<string>();
                    foreach (var item in subdirectories)
                    {
                        tempConvertCESToDocFiles = Directory.GetFiles(item, "*.pdf");
                        foreach (var files in tempConvertCESToDocFiles)
                        {
                            ConvertCESToDocFiles.Add(files);
                        }
                    }

                    List<string> CESFiles = Directory.GetFiles(pathInCES, "*.pdf", SearchOption.TopDirectoryOnly).ToList();
                    //CESFiles.AddRange(ConvertCESToDocFiles);
                    //end for add convert ces photo to doc file in CES section
                    if (CESFiles.Count > 0)
                    {
                        if (!Directory.Exists(System.IO.Path.GetFileName(readOnlyCESPdf)))
                        {
                            Directory.CreateDirectory(readOnlyCESPdf);
                        }
                        document.NewPage();
                        title = "CES Documents";
                        tevent.OnGenericTag(pdfWriter, document, title);
                        tevent.Header = title;
                        bool CesFlag = false;
                        for (int k = 0; k < CESFiles.Count; k++)
                        {
                            if (CesFlag)
                                document.NewPage();
                            string cesDocName = System.IO.Path.GetFileNameWithoutExtension(CESFiles[k]);
                            tevent.Header = cesDocName;
                            tevent.OnCESChildNodeTag(pdfWriter, document, cesDocName);

                            string readOnlyFile = Path.Combine(readOnlyCESPdf, Path.GetFileName(CESFiles[k]));
                            if (System.IO.File.Exists(readOnlyFile))
                            {
                                System.IO.File.Delete(readOnlyFile);
                            }
                            System.IO.File.Copy(CESFiles[k], readOnlyFile);
                            DownloadFileDocumentChanges(CESFiles[k], readOnlyFile, 0);
                            ConvertPDFtoImages(pathInCES, readOnlyFile, jobID, "CES");
                            PdfContentByte cb = pdfWriter.DirectContent;
                            PdfReader pdfCESAssignment = new PdfReader(CESFiles[k]);
                            for (int i = 0; i < pdfCESAssignment.NumberOfPages; i++)
                            {

                                if (CesFlag)
                                    document.NewPage();
                                //title = "STC Assignement Form";
                                string imgdestPath = ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + jobID + "/CES/" + System.IO.Path.GetFileNameWithoutExtension(CESFiles[k]).TrimEnd() + "/" + i.ToString() + ".png";
                                var x = document.PageSize.Width - (2 * document.LeftMargin);
                                var y = document.PageSize.Height - (2 * document.TopMargin);
                                //iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(page);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imgdestPath);
                                image.ScaleToFit(x, y);
                                document.Add(image);
                                CesFlag = true;
                                System.IO.File.Delete(imgdestPath);


                                //float offset = 0;
                                //PdfImportedPage page = pdfWriter.GetImportedPage(pdfCESAssignment, i);
                                //if (page.Width < document.PageSize.Width)
                                //{
                                //    offset = (document.PageSize.Width - page.Width) / 2;
                                //}
                                //var x = document.PageSize.Width - (2 * document.LeftMargin);
                                //var y = document.PageSize.Height - (2 * document.TopMargin);
                                //iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(page);
                                //image.ScaleToFit(x, y);
                                //document.Add(image);
                            }
                            System.IO.Directory.Delete(ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + jobID + "/CES/" + System.IO.Path.GetFileNameWithoutExtension(CESFiles[k]));
                        }
                    }
                }
                if (Directory.Exists(readOnlyCESPdf))
                {
                    foreach (var item in Directory.GetFiles(readOnlyCESPdf))
                    {
                        System.IO.File.Delete(item);
                    }
                    Directory.Delete(readOnlyCESPdf);
                }
                #endregion CES Section

                #region Installation ChecklistItems
                //Installation Checklist
                document.NewPage();
                title = "Installation Checklist";
                tevent.OnGenericTag(pdfWriter, document, title);
                tevent.Header = title;
                List<string> checklistTitle = lstCheckListItem.Select(e => e.ItemName).Distinct().ToList();

                PdfPTable ChecklistTable = new PdfPTable(2);
                ChecklistTable.SetWidths(new[] { 5, 95 });
                ChecklistTable.WidthPercentage = 100f;
                ChecklistTable.HorizontalAlignment = 1;

                Cell = new PdfPCell(new Phrase(new Chunk(title, whiteFontMid)));
                Cell.Colspan = 2;
                Cell.FixedHeight = 35;
                Cell.HorizontalAlignment = Element.ALIGN_CENTER;
                Cell.BackgroundColor = new BaseColor(System.Drawing.Color.DarkGreen);
                Cell.BorderColor = iTextSharp.text.BaseColor.GRAY;
                Cell.HorizontalAlignment = Element.ALIGN_CENTER; //0=Left, 1=Centre, 2=Right
                Cell.VerticalAlignment = Element.ALIGN_MIDDLE;
                ChecklistTable.AddCell(Cell);

                for (int i = 1; i <= checklistTitle.Count(); i++)
                {
                    paraGraph = new Paragraph(new Chunk(i.ToString()));
                    Cell = new PdfPCell(paraGraph);
                    Cell.HorizontalAlignment = Element.ALIGN_CENTER;
                    Cell.BorderColor = iTextSharp.text.BaseColor.GRAY;
                    Cell.VerticalAlignment = Element.ALIGN_MIDDLE;
                    Cell.FixedHeight = 25;
                    ChecklistTable.AddCell(Cell);

                    paraGraph = new Paragraph(new Chunk(checklistTitle[i - 1]));
                    Cell = new PdfPCell(paraGraph);
                    Cell.BorderColor = iTextSharp.text.BaseColor.GRAY;
                    Cell.VerticalAlignment = Element.ALIGN_MIDDLE;
                    Cell.FixedHeight = 25;
                    ChecklistTable.AddCell(Cell);
                }
                document.Add(ChecklistTable);

                for (int i = 0; i < checklistTitle.Count(); i++)
                {
                    document.NewPage();
                    title = checklistTitle[i];
                    tevent.OnGenericTag(pdfWriter, document, title);
                    tevent.Header = title;

                    PdfPTable tblcheckListPhoto = new PdfPTable(1);
                    tblcheckListPhoto.SetWidths(new[] { 100f });
                    tblcheckListPhoto.WidthPercentage = 100f;
                    tblcheckListPhoto.HorizontalAlignment = Element.ALIGN_CENTER;

                    PdfPTable tblcheckListSerialPhoto = new PdfPTable(2);

                    tblcheckListSerialPhoto.SetWidths(new[] { 50, 50 });
                    tblcheckListSerialPhoto.WidthPercentage = 100f;
                    tblcheckListSerialPhoto.HorizontalAlignment = Element.ALIGN_CENTER;
                    int items = lstCheckListItem.Where(x => x.CheckListClassTypeId == 1).ToList().Count;
                    bool isOddRowCnt = false;
                    if (items % 2 == 1)
                    {
                        isOddRowCnt = true;
                    }
                    int addedPhotoCellCnt = 0;
                    for (int j = 0; j < lstCheckListItem.Count(); j++)
                    {
                        if (lstCheckListItem[j].ItemName == checklistTitle[i]
                            && lstCheckListItem[j].CheckListClassTypeId == 1)
                        {
                            iTextSharp.text.Image checklistImage = iTextSharp.text.Image.GetInstance(Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), lstCheckListItem[j].Path));
                            checklistImage.ScaleToFit(130, (document.PageSize.Height / 4) - 30);
                            checklistImage.Alignment = Element.ALIGN_CENTER;

                            Cell = new PdfPCell();
                            Cell.FixedHeight = document.PageSize.Height / 4 + 50;
                            Cell.HorizontalAlignment = Element.ALIGN_CENTER;
                            Cell.VerticalAlignment = Element.ALIGN_MIDDLE;
                            Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            //Cell.BorderColor = iTextSharp.text.BaseColor.GRAY;

                            paraGraph = new Paragraph(new Chunk(Path.GetFileNameWithoutExtension(lstCheckListItem[j].Path)));
                            paraGraph.Alignment = Element.ALIGN_CENTER;
                            Cell.AddElement(checklistImage);
                            Cell.AddElement(paraGraph);
                            tblcheckListSerialPhoto.AddCell(Cell);
                            addedPhotoCellCnt++;
                            if (isOddRowCnt == true && addedPhotoCellCnt == (items))
                            {
                                PdfPCell blankCell = new PdfPCell();
                                blankCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                tblcheckListSerialPhoto.AddCell(blankCell);
                            }


                        }
                        else if (lstCheckListItem[j].ItemName == checklistTitle[i])
                        {
                            iTextSharp.text.Image checklistImage = iTextSharp.text.Image.GetInstance(Path.Combine(ConfigurationManager.AppSettings["ProofUploadFolder"].ToString(), lstCheckListItem[j].Path));
                            checklistImage.ScaleToFit(document.PageSize.Width - 300, (document.PageSize.Height / 2) - 50);
                            checklistImage.Alignment = Element.ALIGN_CENTER;

                            Cell = new PdfPCell();
                            Cell.FixedHeight = document.PageSize.Height / 2 - document.TopMargin;
                            Cell.HorizontalAlignment = Element.ALIGN_CENTER;
                            Cell.VerticalAlignment = Element.ALIGN_MIDDLE;
                            Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            //Cell.BorderColor = iTextSharp.text.BaseColor.GRAY;
                            Cell.AddElement(checklistImage);

                            tblcheckListPhoto.AddCell(Cell);
                        }

                    }
                    document.Add(tblcheckListSerialPhoto);
                    document.Add(tblcheckListPhoto);
                }

                #endregion Installation Checklist Items
                #region Index

                document.NewPage();

                iTextSharp.text.Image tocBgImg = iTextSharp.text.Image.GetInstance(ImagePath + "Pdf-Content-BackGround.jpg");
                tocBgImg.Alignment = iTextSharp.text.Image.UNDERLYING;
                tocBgImg.SetAbsolutePosition(0, 0);
                tocBgImg.ScaleAbsoluteHeight(document.PageSize.Height);
                tocBgImg.ScaleAbsoluteWidth(document.PageSize.Width);
                document.Add(tocBgImg);
                tevent.blnLastPage = true;
                paraGraph = new Paragraph(new Chunk("CONTENTS", FontFactory.GetFont("Arial", 25, new BaseColor(System.Drawing.Color.DarkGreen))));
                paraGraph.SpacingBefore = document.TopMargin;
                paraGraph.SpacingAfter = 30;


                document.Add(paraGraph);
                Chunk dottedLine = new Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());
                Dictionary<string, int> entries = tevent.getTOC();
                Dictionary<string, int> STCentries = tevent.getTOCSTC();
                Dictionary<string, int> CESentries = tevent.getTOCCES();

                int srNoIdex = 1;
                PdfPTable ContentTable = new PdfPTable(2);
                ContentTable.SetWidths(new[] { 8, 92 });
                ContentTable.TotalWidth = (document.PageSize.Width - 2 * document.GetLeft(document.LeftMargin));
                ContentTable.LockedWidth = true;
                ContentTable.HorizontalAlignment = Element.ALIGN_RIGHT;
                ContentTable.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;

                foreach (var entry in entries)
                {
                    paraGraph = new Paragraph();
                    paraGraph.Add(new Chunk(srNoIdex.ToString("00"), FontFactory.GetFont("Arial", 20, new BaseColor(System.Drawing.Color.DarkGreen))));

                    Cell = new PdfPCell();
                    Cell.AddElement(paraGraph);
                    Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Cell.FixedHeight = 35;
                    Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    Cell.VerticalAlignment = Element.ALIGN_TOP;
                    ContentTable.AddCell(Cell);
                    if (entry.Key == "STC Documents" && STCentries.Count > 0)
                    {
                        GetsubIndexTbl(entry.Key, entry.Value, document, pdfWriter, STCentries, srNoIdex, ContentTable);
                    }
                    else if (entry.Key == "CES Documents" && CESentries.Count > 0)
                    {
                        GetsubIndexTbl(entry.Key, entry.Value, document, pdfWriter, CESentries, srNoIdex, ContentTable);
                    }
                    else
                    {
                        paraGraph = new Paragraph();
                        paraGraph.Add(new Chunk(entry.Key, FontFactory.GetFont("Arial", 16))
                                .SetAction(PdfAction.GotoLocalPage(entry.Value,
                                                        new PdfDestination(PdfDestination.XYZ, document.Top), pdfWriter)));
                        paraGraph.Add(dottedLine);
                        paraGraph.Add((entry.Value - 1).ToString("00"));



                        Cell = new PdfPCell();
                        Cell.AddElement(paraGraph);
                        Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Cell.FixedHeight = 35;
                        Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                        Cell.VerticalAlignment = Element.ALIGN_TOP;
                        ContentTable.AddCell(Cell);
                    }


                    srNoIdex++;
                }
                document.Add(ContentTable);

                #endregion index
                #region reorder the page
                int toc = pdfWriter.PageNumber;
                document.NewPage();
                int total = pdfWriter.ReorderPages(null);
                int[] order = new int[total];
                for (int i = 0; i < total; i++)
                {
                    if (i == 0)
                    {
                        order[i] = 1;
                    }
                    else if (i == 1)
                    {
                        order[i] = toc;
                    }
                    else
                    {
                        order[i] = (i - 1) + toc;
                        if (order[i] > total)
                        {
                            order[i] -= total;
                            order[i] += 1;
                        }
                    }
                }
                pdfWriter.ReorderPages(order);
                document.Close();
                #endregion reorder page
                #region download final pdf in local system
                var fileData = System.IO.File.ReadAllBytes(pathOut);
                string name = Path.GetFileName(pathOut);
                if (System.IO.File.Exists(pathOut))
                    System.IO.File.Delete(pathOut);
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.ContentType = "application/octet-stream";
                //Response.AddHeader("Content-Disposition", string.Format("attachment; filename=" + name));
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename = \"{0}\"", name));
                Response.BinaryWrite(fileData);
                #endregion download final pdf
                return Json(new { status = true, msg = "Successfully created." }, JsonRequestBehavior.AllowGet);
            }

            catch (Exception ex)
            {
                _log.LogException(SystemEnums.Severity.Error, $"JobController/GenerateFullJobPack", ex);
                return Json(new { status = false, msg = ex.ToString() }, JsonRequestBehavior.AllowGet);
            }
        }

        protected class TableHeader : PdfPageEventHelper
        {
            PdfTemplate total;
            public string Header { get; set; }
            public string RefNo { get; set; }

            public bool blnLastPage = false;

            iTextSharp.text.Font GreenFont = FontFactory.GetFont("Arial", 12, iTextSharp.text.Font.BOLD, new BaseColor(System.Drawing.Color.DarkGreen));
            iTextSharp.text.Font GreyFont = FontFactory.GetFont("Arial", 12, new BaseColor(System.Drawing.Color.Gray));
            string ImagePath = AppDomain.CurrentDomain.BaseDirectory + "/Images/";

            protected Dictionary<String, int> toc = new Dictionary<string, int>();
            protected Dictionary<String, int> tocSTC = new Dictionary<string, int>();
            protected Dictionary<String, int> tocCES = new Dictionary<string, int>();
            public Dictionary<string, int> getTOC()
            {
                return toc;
            }
            public Dictionary<string, int> getTOCSTC()
            {
                return tocSTC;
            }
            public Dictionary<string, int> getTOCCES()
            {
                return tocCES;
            }
            public override void OnOpenDocument(PdfWriter writer, iTextSharp.text.Document document)
            {
                total = writer.DirectContent.CreateTemplate(30, 17);
            }

            public override void OnEndPage(PdfWriter writer, iTextSharp.text.Document document)
            {
                PdfPTable table = new PdfPTable(2);
                try
                {
                    if (writer.PageNumber != 1 && blnLastPage != true)
                    {
                        //Footer 
                        table.SetWidths(new int[] { 50, 50 });
                        table.TotalWidth = 527;
                        table.LockedWidth = true;
                        table.DefaultCell.FixedHeight = 20;
                        table.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        PdfPCell cell1 = new PdfPCell(new Phrase(new Chunk(string.Format("- Page {0} of ", writer.PageNumber - 1), GreyFont)));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        table.AddCell(cell1);
                        PdfPCell cell = new PdfPCell(iTextSharp.text.Image.GetInstance(total));
                        cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        cell.HorizontalAlignment = Element.ALIGN_LEFT;
                        table.AddCell(cell);
                        table.WriteSelectedRows(0, -1, 34, document.BottomMargin, writer.DirectContent);

                        //header

                        PdfPTable tblHeader = new PdfPTable(5);
                        tblHeader.SetWidths(new float[] { 10f, 10f, 25f, 15f, 40f });

                        tblHeader.TotalWidth = document.PageSize.Width - document.LeftMargin;
                        tblHeader.LockedWidth = true;
                        tblHeader.DefaultCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        tblHeader.DefaultCell.FixedHeight = 20;

                        PdfPCell pCell = new PdfPCell();
                        iTextSharp.text.Image logoImage = iTextSharp.text.Image.GetInstance(ImagePath + "GB_Favicon.png");
                        logoImage.ScaleToFit(20, 20);
                        logoImage.Alignment = Element.ALIGN_CENTER;
                        pCell.AddElement(logoImage);
                        pCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        tblHeader.AddCell(pCell);

                        pCell = new PdfPCell(new Phrase(new Chunk("GB ID: ", GreenFont)));
                        pCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        pCell.BorderColor = new BaseColor(System.Drawing.Color.Gray);
                        tblHeader.AddCell(pCell);

                        pCell = new PdfPCell(new Phrase(new Chunk(RefNo, GreyFont)));
                        pCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        pCell.BorderColor = new BaseColor(System.Drawing.Color.Gray);
                        tblHeader.AddCell(pCell);

                        pCell = new PdfPCell(new Phrase(new Chunk("Doc Type: ", GreenFont)));
                        pCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        pCell.BorderColor = new BaseColor(System.Drawing.Color.Gray);
                        tblHeader.AddCell(pCell);

                        pCell = new PdfPCell(new Phrase(new Chunk(Header, GreyFont)));
                        pCell.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                        pCell.BorderColor = new BaseColor(System.Drawing.Color.Gray);
                        tblHeader.AddCell(pCell);

                        tblHeader.WriteSelectedRows(0, -1, 0,
                            document.Top + ((document.TopMargin - 5 + tblHeader.TotalHeight) / 2), writer.DirectContent);



                    }
                }
                catch (DocumentException de)
                {
                    throw de;
                }
            }

            public override void OnCloseDocument(PdfWriter writer, iTextSharp.text.Document document)
            {
                if (writer.PageNumber != 1 && writer.PageNumber != (writer.PageNumber - 1))
                {
                    ColumnText.ShowTextAligned(total, Element.ALIGN_LEFT,
                                            new Phrase(new Chunk((writer.PageNumber - 3).ToString() + " -", GreyFont)), 2, 2, 0);
                }
            }

            internal void OnGenericTag(PdfWriter pdfWriter, iTextSharp.text.Document document, string title)
            {
                toc.Add(title, pdfWriter.PageNumber);
            }
            internal void OnSTCChildNodeTag(PdfWriter pdfWriter, iTextSharp.text.Document document, string title)
            {
                tocSTC.Add(title, pdfWriter.PageNumber);
            }
            internal void OnCESChildNodeTag(PdfWriter pdfWriter, iTextSharp.text.Document document, string title)
            {
                tocCES.Add(title, pdfWriter.PageNumber);
            }
        }

        public void GetRowForFirstPg(PdfPTable table, string ImagePath, string icon, string attrName, string attrValue)
        {

            iTextSharp.text.Image iconImg = iTextSharp.text.Image.GetInstance(ImagePath + icon);
            iconImg.ScaleAbsolute(20, 20);
            PdfPCell cell = new PdfPCell(iconImg);
            cell.FixedHeight = 40;
            cell.HorizontalAlignment = Element.ALIGN_CENTER;
            cell.VerticalAlignment = Element.ALIGN_MIDDLE;
            cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            table.AddCell(cell);

            cell = new PdfPCell();
            Paragraph paraGraph = new Paragraph();
            paraGraph.Add(new Chunk(attrName, FontFactory.GetFont("Arial", 15, iTextSharp.text.Font.BOLD, new BaseColor(System.Drawing.Color.White))));
            paraGraph.Add(new Chunk(attrValue, FontFactory.GetFont("Arial", 15, new BaseColor(System.Drawing.Color.White))));
            cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            cell.AddElement(paraGraph);
            cell.FixedHeight = 40;
            cell.VerticalAlignment = Element.ALIGN_MIDDLE;
            table.AddCell(cell);
        }
        public void GetsubIndexTbl(string Key, int value, iTextSharp.text.Document document, PdfWriter pdfWriter, Dictionary<string, int> subentries, int srNoIdex, PdfPTable ContentTable)
        {
            PdfPTable subtbl = new PdfPTable(2);
            subtbl.SetWidths(new[] { 8f, 92f });
            subtbl.HorizontalAlignment = Element.ALIGN_RIGHT;
            subtbl.WidthPercentage = 100;
            int subsrno = 1;
            Chunk dottedLine = new Chunk(new iTextSharp.text.pdf.draw.DottedLineSeparator());

            //Main heading

            Paragraph paraGraph = new Paragraph();
            paraGraph.Add(new Chunk(Key, FontFactory.GetFont("Arial", 16))
                    .SetAction(PdfAction.GotoLocalPage(value,
                                            new PdfDestination(PdfDestination.XYZ, document.Top), pdfWriter)));
            //paraGraph.Add(dottedLine);
            //paraGraph.Add((entry.Value - 1).ToString("00"));

            PdfPCell Cell = new PdfPCell();
            Cell.AddElement(paraGraph);
            Cell.Colspan = 2;
            Cell.PaddingTop = -5;
            Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Cell.FixedHeight = 35;
            Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
            Cell.VerticalAlignment = Element.ALIGN_TOP;
            subtbl.AddCell(Cell);

            foreach (var item in subentries)
            {
                paraGraph = new Paragraph();
                paraGraph.Add(new Chunk(srNoIdex.ToString() + '.' + subsrno.ToString(), FontFactory.GetFont("Arial", 10, new BaseColor(System.Drawing.Color.DarkGreen))));

                Cell = new PdfPCell();
                Cell.AddElement(paraGraph);
                Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Cell.FixedHeight = 35;
                Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                Cell.VerticalAlignment = Element.ALIGN_TOP;
                subtbl.AddCell(Cell);

                paraGraph = new Paragraph();
                paraGraph.Add(new Chunk(item.Key, FontFactory.GetFont("Arial", 12))
                        .SetAction(PdfAction.GotoLocalPage(item.Value,
                                                new PdfDestination(PdfDestination.XYZ, document.Top), pdfWriter)));
                paraGraph.Add(dottedLine);
                paraGraph.Add((item.Value - 1).ToString("00"));

                Cell = new PdfPCell();
                Cell.AddElement(paraGraph);
                Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                //Cell.FixedHeight = 35;
                Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                Cell.VerticalAlignment = Element.ALIGN_TOP;
                subtbl.AddCell(Cell);
                subsrno++;
            }

            Cell = new PdfPCell();
            Cell.AddElement(subtbl);

            Cell.Border = iTextSharp.text.Rectangle.NO_BORDER;
            //Cell.FixedHeight = 35;
            Cell.HorizontalAlignment = Element.ALIGN_RIGHT;
            Cell.VerticalAlignment = Element.ALIGN_TOP;
            ContentTable.AddCell(Cell);
        }
        public void ConvertPDFtoImages(string path, string pathIn, int JobID, string doctype)
        {
            Spire.Pdf.PdfDocument doc = new Spire.Pdf.PdfDocument();
            Spire.License.LicenseProvider.SetLicenseKey("AdYBAOzaCSfGJ5h01m2zg8rb9GYFntLtkycIYZv3U/15/mHKIWnVpGfKoUjw3gaaU6CmkTP3zOknfO0DIEcDzZK2tHmh1YOgxK3sX71S5ib+vIJ655YEffLc+j7JOCfky25MQUxNZd1a8QJ0JJciGvWfgQWA7CL464B+Z2mSnV1CwL7TkSJ+16pL0mVvlUn1vo3SAomQ9TIYCTNrqaJpO+AvjhAxaoyuW3PbG+BpIOq/f9T0IHO3mkiNlgRIEcmltuN4H/sfd/MnLUdrX0n0RqulLfb7jWkAsLWxkXTP7LrWd9tLmlmw35W8JMK43AZVJoqz9f49g/McMelqL8Oh3a602hyA8MMurR/AqVS/oAgkRV7epwbmH22Pq2u7I3owwlVl4m5SpKM/ebaJKw+xPXEErZ5hxB4IOgFqRK1Fi9tS5Q0ZnBZFDQywtWQRKvGlSF2Or1hdXRpTk6jWCzxViWc6vcGAyB+i4aC6QCaEhz3LTBw8/BQDHRaMMNDItv4SVbXjHskKf5i/paPHTJEBQUMtjCG7MCjgVEXF+Nuxc687dfGUx735D+jjux8ndH1Xixg4mMgiqh5YSKmpIbH67TPWiJjbOKMfBNM5IqsqyZ40RKHQMFsmmjXmoB6RJXp/TLwF8xSbJl7CxUhHGrz3Rmi7GQhg8M3tA5dFcpJtaHajJCMk4GV2jNcEEwmGEfHHAo0lWZ16OHkYjoUId4BqziJpmtxWM43lWFz4+fPwZOebjxLPtEkDiseZ3t+P/FfHRzWvm2cVUbDlGdZ+UGOuIdbdgVPhFB4UHKGuWIMuiW+KWuYV51Vu6nFdIKN5Ja3dv/Mc7nYh0UvilRuBeo3cZFPiLGV73oOuVb31ALC/3dMgbSlqsyFDJmkj69pERkXzBZTJCRYCesT3dXmU/MTownCHOmIAoNW2dUU9FHBaaTZM+7XMmsJcnD+TYi9DaGpuAWFwbnZus/NpRNYv9JvKZg1vGkF1ELN9Rr2Yz27gsmXL7gG4VudrjIIoAtzTA75v+eGN1Ubggrijgi0YWAzVXCna68dh/CHnt3EOL5UJFaxB6+KS51S6XPvGtMkNSZKd1I418rD+8orub18F5pVXr9NuQdnNVTvugToja9g8z4Z/FhCgKer7Gr8wy70Gpic1v9pHMBDBRwvnYFMfi2awBmRS+pd1jOMQwEfW1PgLND6/cAdWS244H+xszg73Y1CbM7R9XMJ6eMCCNiNlHjokyuvPPms4xSbboXZmBFne2N7kNNjtK+IPVUe/gsIDI5NyBfYg5ceY/msoYSHIO0RSmtC8gOu0sJzMkZVN2tBcBgU52V/gk09w2kMQSRUJtwK3Tma/EXkzUr4eawEdXEYKklxMTBleBGYqLvmPO/gSqbqyFBHfK/H9FJr6hYk0BfAFZ7bqUSzpll7N2M0k+lqTe4XX5XI8iKoJr6I62O56aub6hMhE9A+ZBPriCmBBU2NsowHMGcuXUnU7/jlCrASq+L7KCHHhPsZdNJqY1AgymWbh1IpjgYWb5qblYvOokYnf0tvo4GcrbEFtFrnOt40It3rcG9esKA99YM7BmIqIe8A9liGoQ8sltg==");
            doc.LoadFromFile(pathIn);
            if (!Directory.Exists(System.IO.Path.GetFileNameWithoutExtension(path)))
            {
                Directory.CreateDirectory(path + "/" + System.IO.Path.GetFileNameWithoutExtension(pathIn).TrimEnd());
            }
            for (var i = 0; i < doc.Pages.Count; i++)
            {
                System.Drawing.Image emf = doc.SaveAsImage(i, Spire.Pdf.Graphics.PdfImageType.Metafile);
                string imgdestPath = ProjectConfiguration.JobDocumentsToSaveFullPath + "/" + JobID + "/" + doctype + "/" + System.IO.Path.GetFileNameWithoutExtension(pathIn).TrimEnd() + "/" + i.ToString() + ".png";
                using (Bitmap tempImage = new Bitmap(emf))
                {
                    //WriteToLogFile(DateTime.Now + "Path: " +imgdestPath);
                    tempImage.Save(imgdestPath, System.Drawing.Imaging.ImageFormat.Png);
                    tempImage.Dispose();
                }
            }
            doc.Close();
        }
        public List<T> SplitList<T>(List<T> me, int size = 50)
        {
            var list = new List<List<T>>();
            var lst = new List<T>();

            var lstWithBatchId = new List<T>();
            var lstWithoutBatchId = new List<T>();


            foreach (var item in me)
            {
                if (item.ToString().Contains('_'))
                    lstWithBatchId.Add(item);
                else
                    lstWithoutBatchId.Add(item);

            }
            var DistinctItems = lstWithBatchId.GroupBy(x => x.ToString().Split('_')[1]).Select(y => y.First().ToString().Split('_')[1]).Distinct();

            foreach (var distinctItem in DistinctItems)
            {
                var lstItem = string.Join(",", lstWithBatchId.Where(x => x.ToString().Contains(distinctItem)));
                lstItem = lstItem.Replace("_" + distinctItem, "");
                lst.Add((T)Convert.ChangeType(lstItem, typeof(T)));
            }

            for (int i = 0; i < lstWithoutBatchId.Count; i += size)
            {
                list.Add(lstWithoutBatchId.GetRange(i, Math.Min(size, lstWithoutBatchId.Count - i)));
                lst.Add((T)Convert.ChangeType(string.Join(",", lstWithoutBatchId.GetRange(i, Math.Min(size, lstWithoutBatchId.Count - i))), typeof(T)));
            }

            //for (int i = 0; i < me.Count; i += size)
            //{
            //    list.Add(me.GetRange(i, Math.Min(size, me.Count - i)));
            //    lst.Add((T)Convert.ChangeType(string.Join(",", me.GetRange(i, Math.Min(size, me.Count - i))), typeof(T)));
            //}

            //DataTable table = new DataTable();
            //table.Columns.Add("StcJobDetailsId", typeof(string));
            //foreach (var item in lst)
            //{
            //    DataRow row = table.NewRow();
            //    row["StcJobDetailsId"] = item.ToString();
            //    table.Rows.Add(row);
            //}

            return lst;
        }
        public DataTable ListToDataTable<T>(List<T> lst)
        {
            DataTable table = new DataTable();
            table.Columns.Add("SrNo", typeof(int));
            table.Columns.Add("JobId", typeof(string));
            int i = 1;
            foreach (var item in lst)
            {
                DataRow row = table.NewRow();
                row["JobId"] = item.ToString();
                row["SrNo"] = i;
                table.Rows.Add(row);
                i++;
            }
            return table;
        }

        public bool VerificationXMLForSPV(int JobId, CreateJob objCreateJob, string panelXml)
        {
            string xmlPath = ProjectConfiguration.ProofDocumentsURL + "\\" + "JobDocuments" + "\\" + JobId + "\\" + "REC SPV XMl";


            if (System.IO.Directory.Exists(xmlPath))
            {
                string[] files = Directory.GetFiles(xmlPath, "*.xml");
                if (files.Length > 0)
                {
                    for (int i = 0; i < files.Length; i++)
                    {
                        XmlDocument doc = new XmlDocument();
                        doc.Load(files[i]);

                        //installer
                        string JobInstallerId = doc.GetElementsByTagName("ID")[0].InnerText;
                        string FirstName = doc.GetElementsByTagName("FirstName")[0].InnerText;
                        string Surname = doc.GetElementsByTagName("LastName")[0].InnerText;

                        //installation address
                        string StreetNumber = doc.GetElementsByTagName("StreetNumber")[0].InnerText;
                        string StreetName = doc.GetElementsByTagName("StreetName")[0].InnerText;
                        string StreetType = doc.GetElementsByTagName("StreetType")[0].InnerText;
                        string Suburb = doc.GetElementsByTagName("Suburb")[0].InnerText;
                        string Postcode = doc.GetElementsByTagName("Postcode")[0].InnerText;
                        string State = doc.GetElementsByTagName("State")[0].InnerText;

                        //Location
                        string Latitude = doc.GetElementsByTagName("Latitude")[0].InnerText;
                        string Longitude = doc.GetElementsByTagName("Longitude")[0].InnerText;
                        string Altitude = doc.GetElementsByTagName("Altitude")[0].InnerText;
                        string Accuracy = doc.GetElementsByTagName("Accuracy")[0].InnerText;

                        string OwnerEmail = doc.GetElementsByTagName("OwnerEmail")[0].InnerText;
                        string InstallationDate = doc.GetElementsByTagName("InstallationDate")[0].InnerText;


                        //Retailer
                        string Name = doc.GetElementsByTagName("Name")[0].InnerText;
                        string ABN = doc.GetElementsByTagName("ABN")[0].InnerText;

                        //product 
                        List<XMLProduct> lstXMLProduct = new List<XMLProduct>();
                        XmlNodeList productNodeList = doc.DocumentElement.SelectNodes("/RecRegistryApplicationRequest/Registration/InstallationProductVerification/Products/Product");
                        foreach (XmlNode node in productNodeList)
                        {
                            XMLProduct xMLProduct = new XMLProduct();
                            xMLProduct.ModelNumber = node.SelectSingleNode("ModelNumber").InnerText;
                            xMLProduct.SerialNumber = node.SelectSingleNode("SerialNumber").InnerText;
                            xMLProduct.ResponsibleSupplier = node.SelectSingleNode("ResponsibleSupplier").InnerText;
                            lstXMLProduct.Add(xMLProduct);
                        }

                        List<XMLModel> lstXMLModel = new List<XMLModel>();
                        XmlNodeList modelNodeList = doc.DocumentElement.SelectNodes("/RecRegistryApplicationRequest/Registration/InstallationProductVerification/Models/Model");
                        foreach (XmlNode node in modelNodeList)
                        {
                            XMLModel xMLModel = new XMLModel();
                            xMLModel.ModelNumber = node.SelectSingleNode("ModelNumber").InnerText;
                            xMLModel.Manufacturer = node.SelectSingleNode("Manufacturer").InnerText;
                            xMLModel.wattage = node.SelectSingleNode("Wattage").InnerText;
                            lstXMLModel.Add(xMLModel);
                        }

                        //verification 
                        string panelxml = panelXml;
                        XmlSerializer serializer = new XmlSerializer(typeof(List<panel>), new XmlRootAttribute("Panels"));
                        StringReader stringReader = new StringReader(panelxml);
                        List<panel> productList = (List<panel>)serializer.Deserialize(stringReader);
                        string modelno = string.Join(",", productList.Select(m => m.Model).ToArray());
                        string NoOfPanel = productList[0].NoOfPanel.ToString();

                        string SerialNo = objCreateJob.JobSystemDetails.SerialNumbers;
                        List<string> newserials = SerialNo.Split(new[] { "\r\n" }, StringSplitOptions.None).ToList();
                        DateTime installationdate = Convert.ToDateTime(objCreateJob.BasicDetails.InstallationDate);
                        string abc = installationdate.ToString("yyyy-MM-ddThh:mm:sszzz");

                        DataSet ds = _job.GetDataForXMLVerification(Convert.ToInt32(objCreateJob.JobInstallationDetails.StreetTypeID), modelno, JobId);
                        if (ds != null && ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0].Rows.Count > 0)
                            {

                                if (JobInstallerId != objCreateJob.InstallerView.CECAccreditationNumber.ToString())
                                    return false;
                                if (FirstName != objCreateJob.InstallerView.FirstName.ToString())
                                    return false;
                                if (Surname != objCreateJob.InstallerView.LastName.ToString())
                                    return false;

                                if (StreetNumber != objCreateJob.JobInstallationDetails.StreetNumber.ToString())
                                    return false;
                                if (StreetName != objCreateJob.JobInstallationDetails.StreetName.ToString())
                                    return false;
                                if (StreetType != ds.Tables[0].Rows[0]["StreetTypeName"].ToString())
                                    return false;
                                if (State != objCreateJob.JobInstallationDetails.State.ToString())
                                    return false;
                                if (Suburb != objCreateJob.JobInstallationDetails.Town.ToString())
                                    return false;

                                if (Postcode != objCreateJob.JobInstallationDetails.PostCode.ToString())
                                    return false;

                                if (OwnerEmail != "noemail@greenbot.com.au" && OwnerEmail != objCreateJob.JobOwnerDetails.Email.ToString())
                                    return false;

                                if (InstallationDate.Substring(0, 10) != installationdate.ToString("yyyy-MM-dd"))
                                    return false;


                            }
                            else
                                return false;
                            //if (ds.Tables[1].Rows.Count > 0)
                            //{

                            //    if (Latitude != ds.Tables[1].Rows[0]["Latitude"].ToString())
                            //        return false;
                            //    if (Longitude != ds.Tables[1].Rows[0]["Longitude"].ToString())
                            //        return false;
                            //    if (Accuracy != ds.Tables[1].Rows[0]["Accuracy"].ToString())
                            //        return false;
                            //    if (Altitude != ds.Tables[1].Rows[0]["Altitude"].ToString())
                            //        return false;
                            //}
                            //else
                            //    return false;

                            List<string> Xmlserials = new List<string>();
                            for (int j = 0; j < lstXMLProduct.Count; j++)
                            {
                                Xmlserials.Add(lstXMLProduct[j].SerialNumber);
                            }
                            bool XMLserial = newserials.All(Xmlserials.Contains) && Xmlserials.All(newserials.Contains);
                            if (!XMLserial)
                            {
                                return false;
                            }

                            if (lstXMLProduct.Count == Convert.ToInt32(NoOfPanel))
                            {
                                if (ds.Tables[2].Rows.Count > 0)
                                {
                                    //for (int j = 0; j < lstXMLProduct.Count; j++)
                                    //{
                                    if (lstXMLProduct[0].ModelNumber != productList[0].Model)
                                        return false;
                                    //if (lstXMLProduct[j].SerialNumber != ds.Tables[2].Rows[j]["SerialNumber"].ToString())
                                    //    return false;
                                    if (lstXMLProduct[0].ResponsibleSupplier != productList[0].Supplier)
                                        return false;
                                    if (lstXMLModel[0].Manufacturer != productList[0].Brand)
                                        return false;
                                    if (lstXMLModel[0].wattage != ds.Tables[2].Rows[0]["Wattage"].ToString())
                                        return false;
                                    // }
                                }

                                else
                                    return false;
                            }
                            else
                                return false;

                            //if (ds.Tables[3].Rows.Count > 0 )
                            //{
                            //    if (Name != objCreateJob.BasicDetails.Reseller.ToString())
                            //        return false;
                            //    if (ABN != objCreateJob.BasicDetails.CompanyABN.ToString())
                            //        return false;
                            //}
                            //else
                            //    return false;
                        }


                    }
                    return true;
                }
                else
                    return true;

            }
            else
                return true;

        }


        /// <summary>
        /// Installation address validation flag is change
        /// </summary>
        /// <param name="isValid"></param>
        [HttpPost]
        public JsonResult InstallationAddressValidationChange(bool isValid, int JobId)
        {
            _job.installationAddValidChange(isValid, JobId);
            return Json(true, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// owner address validation flag is change
        /// </summary>
        /// <param name="isValid"></param>
        [HttpPost]
        public JsonResult OwnerAddressValidationChange(bool isValid, int JobId)
        {
            _job.OwnerAddValidChange(isValid, JobId);
            return Json(true, JsonRequestBehavior.AllowGet);
        }
        /// <summary>
        /// Restore deleted photo with reference and default foloder photo
        /// </summary>
        /// <param name="vcphotoId"></param>
        /// <param name="jobid"></param>
        /// <param name="jobscId"></param>
        /// <param name="vclId"></param>
        /// <param name="type"></param>
        /// <param name="isReference"></param>
        /// <param name="isDefault"></param>
        /// <returns>Jspn sucess result</returns>
        [HttpGet]
        public JsonResult RestoreDataforReferenceAndDefault(string vcphotoId, int jobid, int? jobscId = 0, int? vclId = 0, int type = 0, bool isReference = false, bool isDefault = false)
        {
            try
            {
                string oldPath = string.Empty;
                string newPath = string.Empty;
                string desPath = string.Empty;
                if (isReference == true)
                {
                    newPath = "JobDocuments\\" + jobid + "\\ReferencePhotos\\";
                    jobscId = null;
                    vclId = null;
                }
                else if (isDefault == true)
                {
                    newPath = "JobDocuments\\" + jobid + "\\DefaultFolder\\";
                    jobscId = null;
                    vclId = null;
                }
                else
                {
                    newPath = "JobDocuments\\" + jobid + "\\checklistitem\\" + vclId + "\\";
                }
                DataSet ds = _job.GetphotosbyMultipleIds(jobid, vcphotoId);

                if (ds != null && ds.Tables.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        oldPath = ProjectSession.ProofDocuments + "\\" + ds.Tables[0].Rows[i]["Path"].ToString();
                        string filename = Path.GetFileName(oldPath);
                        string filenameWithoutExtension = Path.GetFileNameWithoutExtension(oldPath);
                        string filExtension = Path.GetExtension(filename);
                        if (!Directory.Exists(ProjectSession.ProofDocuments + "\\" + newPath))
                        {
                            Directory.CreateDirectory(ProjectSession.ProofDocuments + "\\" + newPath);
                        }
                        desPath = ProjectSession.ProofDocuments + "\\" + newPath + filename;
                        if (System.IO.File.Exists(desPath))
                        {
                            int count = 1;
                            while (true)
                            {
                                string reNameFile = ProjectSession.ProofDocuments + "\\" + newPath + filenameWithoutExtension + '(' + count + ')' + filExtension;
                                if (System.IO.File.Exists(reNameFile))
                                {
                                    count++;
                                }
                                else
                                {
                                    desPath = reNameFile;
                                    filename = Path.GetFileName(desPath);
                                    break;
                                }
                            }
                        }
                        _job.RestoreDataWithAllFolder(Convert.ToInt32(ds.Tables[0].Rows[i]["VisitCheckListPhotoId"]), vclId, jobscId, newPath + filename, isReference, isDefault, type);
                        System.IO.File.Move(oldPath, desPath);
                    }

                }

                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                //WriteToLogFile("Error in Restore Photo:" + ex.Message);
                _log.LogException("Error in Restore Photo:", ex);
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }

        }
        /// <summary>
        /// check serialnumber photo available or not
        /// </summary>
        /// <param name="jobid"></param>
        /// <returns>return result</returns>
        [HttpPost]
        public JsonResult CheckSerialNumberPhotoAvailability(int jobId)
        {
            DataSet ds = _job.GetSerialNumberAndPhotos(jobId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables.Count == 2 && ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
            {
                DataTable dtSerialNumber = ds.Tables[0];
                DataTable dtPhotos = ds.Tables[1];
                DataTable checkSerialnumberPhoto = CheckSerialnumberPhotoDatatable();

                string serialNumberPhotoPath = null;
                foreach (DataRow dr in dtSerialNumber.Rows)
                {
                    DataRow imageData = dtPhotos.AsEnumerable().Where(a =>
                               Path.GetFileName(a.Field<string>("Path")).Contains(Convert.ToString(dr["SerialNumber"]))).FirstOrDefault();
                    if (imageData != null)
                    {
                        serialNumberPhotoPath = imageData["Path"] != null ? Convert.ToString(imageData["Path"]) : null;
                    }
                    if (serialNumberPhotoPath == null)
                    {
                        checkSerialnumberPhoto = SetSerialnumberWithPhotoUnavaibility(checkSerialnumberPhoto, Convert.ToString(dr["SerialNumber"]));
                        //return checkSerialnumberPhoto;
                        //dataProduct = dataProduct.Replace("[[Image]]", "");
                    }
                }
                if (checkSerialnumberPhoto.Rows.Count > 0 && checkSerialnumberPhoto != null)
                {
                    DataTable VerifiedSerialNumber = checkSerialnumberPhoto;
                    if (VerifiedSerialNumber.Columns[1].ColumnName == "IsPhotoAvailable")
                    {
                        DataRow[] NotExistsPhotoDR = VerifiedSerialNumber.Select("IsPhotoAvailable = " + "false");
                        List<string> lstNotExistPhoto = new List<string>();
                        if (NotExistsPhotoDR.Length > 0)
                        {
                            foreach (DataRow row in NotExistsPhotoDR)
                            {
                                lstNotExistPhoto.Add(row[0].ToString());
                            }
                        }
                        return Json(new { status = true, IsPhotoUnAvailable = true, lstNotExistPhoto = lstNotExistPhoto }, JsonRequestBehavior.AllowGet);
                    }
                }


            }

            return Json(new { status = false, IsPhotoUnAvailable = false }, JsonRequestBehavior.AllowGet);

        }
        public DataTable SetSerialnumberWithPhotoUnavaibility(DataTable checkSerialnumberPhoto, string serialnumber)
        {
            //DataTable checkSerialnumberPhoto = CheckSerialnumberPhotoDatatable();
            var newRow = checkSerialnumberPhoto.NewRow();
            newRow["SerialNumber"] = serialnumber;
            newRow["IsPhotoAvailable"] = false;
            checkSerialnumberPhoto.Rows.Add(newRow);
            return checkSerialnumberPhoto;
        }
        private DataTable CheckSerialnumberPhotoDatatable()
        {
            DataTable checkSerialnumberPhoto = new DataTable();
            checkSerialnumberPhoto.Columns.Add("SerialNumber", typeof(string));
            checkSerialnumberPhoto.Columns.Add("IsPhotoAvailable", typeof(bool));
            return checkSerialnumberPhoto;
        }
        private string GenerateTinyURL(string longUrl)
        {
            string shortURL = string.Empty;

            try
            {
                string groupId = ProjectConfiguration.GroupId;
                string domain = ProjectConfiguration.Domain;
                string token = ProjectConfiguration.BitLyToken;

                var url = string.Format(ProjectConfiguration.BitLyURL);
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);

                //WriteToLogFile(url);

                request.Method = "POST";
                request.ContentType = "application/json";
                request.Headers["Authorization"] = "Bearer " + token + "";

                using (var streamWriter = new StreamWriter(request.GetRequestStream()))
                {
                    string json = "{\"group_guid\":" + "\"" + groupId + "\"," +
                                  "\"domain\":" + "\"" + domain + "\"," +
                                  "\"long_url\":" + "\"" + longUrl +
                                  "\"}";
                    //WriteToLogFile(json);
                    _log.LogException(json, null);
                    streamWriter.Write(json);
                }

                WebResponse response = request.GetResponse();
                using (Stream responseStream = response.GetResponseStream())
                {
                    StreamReader reader = new StreamReader(responseStream, Encoding.UTF8);
                    JavaScriptSerializer js = new JavaScriptSerializer();
                    dynamic jsonResponse = js.Deserialize<dynamic>(reader.ReadToEnd());
                    shortURL = jsonResponse["link"];
                    //WriteToLogFile("short URL " + shortURL);
                    _log.LogException("short URL " + shortURL, null);
                }
            }
            catch (WebException ex)
            {
                //WriteToLogFile(ex.Message);
                _log.LogException("Generate Tiny URL : ", ex);
            }
            return shortURL;
        }

        [HttpPost]
        [AcceptVerbs(HttpVerbs.Post)]
        public async Task<JsonResult> SetAutoComplianceNote(string batchId, string Ids)
        {
            try
            {
                DataSet ds = _stcInvoiceServiceBAL.GetRECFailedBatchDetails(batchId, Ids);
                List<RECData> recData = ds.Tables[0].ToListof<RECData>();

                if (recData != null && recData.Count > 0)
                {
                    string StcJobdetailsId = "";
                    for (int i = 0; i < recData.Count; i++)
                    {
                        int stcJobDetailId = Convert.ToInt32(recData[i].StcJobDetailsId);
                        if (!string.IsNullOrWhiteSpace(recData[i].FailureReason))
                        {
                            _job.UpdateComplianceNote(stcJobDetailId, recData[i].FailureReason);
                            SortedList<string, string> data = new SortedList<string, string>();
                            data.Add("ComplianceNotes", recData[i].FailureReason);
                            //await CommonBAL.SetCacheDataForSTCSubmission(stcJobDetailId, null, data);
                            StcJobdetailsId = StcJobdetailsId + recData[i].StcJobDetailsId.ToString() + ",";
                        }
                    }
                    StcJobdetailsId = StcJobdetailsId.Substring(0, StcJobdetailsId.Length - 1);
                    DataSet dsBulkChangeSTCJobStage = _job.BulkChangeSTCJobStage(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, (int)SystemEnums.STCJobStatus.ComplianceIssues, StcJobdetailsId, DateTime.Now);
                    #region save stcJobHistory into xml
                    if (dsBulkChangeSTCJobStage.Tables[1].Rows.Count > 0)
                    {
                        foreach (DataRow drBulkChangeSTCJobStage in dsBulkChangeSTCJobStage.Tables[1].Rows)
                        {
                            int JobID = Convert.ToInt32(drBulkChangeSTCJobStage["JobID"]);
                            int STCStatusID = Convert.ToInt32(drBulkChangeSTCJobStage["STCStatusID"]);
                            string Description = drBulkChangeSTCJobStage["Description"].ToString();
                            string CreatedByID = drBulkChangeSTCJobStage["CreatedBy"].ToString();
                            string CreatedBy = "";
                            if (CreatedByID.ToString() == "-1")
                            {
                                CreatedBy = "System";
                            }
                            else
                            {
                                CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                            }
                            string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                            Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                        }
                    }
                    #endregion
                    DataSet dsSTCJobHistory = _job.GetRECBulkuploadIDandSTCStatusbySTCJobDetailID(StcJobdetailsId);
                    _job.RemoveJobFromBatch(StcJobdetailsId.ToString());
                    if (dsSTCJobHistory != null && dsSTCJobHistory.Tables.Count > 0)
                    {
                        if (dsSTCJobHistory.Tables[0].Rows.Count > 0)
                        {
                            foreach (DataRow dr in dsSTCJobHistory.Tables[0].Rows)
                            {
                                string RecBulkUploadid = dr["GBBatchRECUploadId"].ToString();
                                var tempRECBulkUploadId = RecBulkUploadid.Split('-');
                                RecBulkUploadid = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;
                                int STCJobDetailid = Convert.ToInt32(dr["STCJobDetailsID"]);
                                int stcstatus = Convert.ToInt32(dr["STCStatus"]);
                                string Description = "removed RECBulkUploadId: " + RecBulkUploadid;
                                _job.SaveSTCJobHistory(STCJobDetailid, stcstatus, ProjectSession.LoggedInUserId, Description, DateTime.Now, ProjectSession.LoggedInUserId);
                            }
                        }
                    }
                    List<string> lstStcJobdetailsId = StcJobdetailsId.Split(',').ToList();
                    int stcStatusId = (int)SystemEnums.STCJobStatus.ComplianceIssues;
                    foreach (var stcid in lstStcJobdetailsId)
                    {
                        SortedList<string, string> data = new SortedList<string, string>();
                        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus.ComplianceIssues), "");
                        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus.ComplianceIssues), "");
                        data.Add("STCStatus", stcStatus);
                        data.Add("ColorCode", colorCode);
                        data.Add("STCStatusId", stcStatusId.ToString());
                        data.Add("RECBulkUploadTimeDate", string.Empty);
                        data.Add("GBBatchRECUploadId", string.Empty);

                        //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data);
                        Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from SetAutoComplianceNote and set as blank.. " + (stcid.ToString()));
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        [AcceptVerbs(HttpVerbs.Post)]
        public async Task<JsonResult> SetComplianceNote(string stcJobDetailIds, string Note)
        {
            try
            {
                if (!string.IsNullOrWhiteSpace(stcJobDetailIds) && !string.IsNullOrWhiteSpace(Note))
                {
                    List<string> lstStcJobdetailsId = stcJobDetailIds.Split(',').ToList();

                    for (int i = 0; i < lstStcJobdetailsId.Count; i++)
                    {
                        int stcJobDetailId = Convert.ToInt32(lstStcJobdetailsId[i]);
                        if (!string.IsNullOrWhiteSpace(Note))
                        {
                            _job.UpdateComplianceNote(stcJobDetailId, Note);
                            DataSet dsSTCJobHistory = _job.GetRECBulkuploadIDandSTCStatusbySTCJobDetailID(stcJobDetailIds);
                            _job.RemoveJobFromBatch(stcJobDetailId.ToString());
                            if (dsSTCJobHistory != null && dsSTCJobHistory.Tables.Count > 0)
                            {
                                if (dsSTCJobHistory.Tables[0].Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dsSTCJobHistory.Tables[0].Rows)
                                    {
                                        string RecBulkUploadid = dr["GBBatchRECUploadId"].ToString();
                                        var tempRECBulkUploadId = RecBulkUploadid.Split('-');
                                        RecBulkUploadid = tempRECBulkUploadId.Length > 1 ? tempRECBulkUploadId[0] : string.Empty;
                                        int STCJobDetailid = Convert.ToInt32(dr["STCJobDetailsID"]);
                                        int stcstatus = Convert.ToInt32(dr["STCStatus"]);
                                        string Description = "removed RECBulkUploadId: " + RecBulkUploadid;
                                        _job.SaveSTCJobHistory(STCJobDetailid, stcstatus, ProjectSession.LoggedInUserId, Description, DateTime.Now, ProjectSession.LoggedInUserId);
                                    }
                                }
                            }
                            DataSet dsBulkChangeSTCJobStage = _job.BulkChangeSTCJobStage(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, (int)SystemEnums.STCJobStatus.ComplianceIssues, stcJobDetailId.ToString(), DateTime.Now);
                            #region save stcJobHistory into xml
                            if (dsBulkChangeSTCJobStage.Tables[1].Rows.Count > 0)
                            {
                                foreach (DataRow drBulkChangeSTCJobStage in dsBulkChangeSTCJobStage.Tables[1].Rows)
                                {
                                    int JobID = Convert.ToInt32(drBulkChangeSTCJobStage["JobID"]);
                                    int STCStatusID = Convert.ToInt32(drBulkChangeSTCJobStage["STCStatusID"]);
                                    string Description = drBulkChangeSTCJobStage["Description"].ToString();
                                    string CreatedByID = drBulkChangeSTCJobStage["CreatedBy"].ToString();
                                    string CreatedBy = "";
                                    if (CreatedByID.ToString() == "-1")
                                    {
                                        CreatedBy = "System";
                                    }
                                    else
                                    {
                                        CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                                    }
                                    string JobHistoryMessage = "changed STC Status to " + _job.GetSTCStausNameBySTCStatusID(STCStatusID) + " <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b> - ";
                                    Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                                }
                            }

                            //_job.BulkChangeSTCJobStage(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, (int)SystemEnums.STCJobStatus.ComplianceIssues, stcJobDetailId.ToString(), DateTime.Now);

                            #endregion
                            int stcStatusId = (int)SystemEnums.STCJobStatus.ComplianceIssues;
                            SortedList<string, string> data = new SortedList<string, string>();
                            data.Add("ComplianceNotes", Note);
                            string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus.ComplianceIssues), "");
                            string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus.ComplianceIssues), "");
                            data.Add("STCStatus", stcStatus);
                            data.Add("ColorCode", colorCode);
                            data.Add("STCStatusId", stcStatusId.ToString());
                            data.Add("RECBulkUploadTimeDate", string.Empty);
                            data.Add("GBBatchRECUploadId", string.Empty);
                            //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcJobDetailId), null, data);
                            Helper.Log.WriteLog(DateTime.Now + " Update cache for stcid from SetComplianceNote and set as blank.. " + (stcJobDetailId.ToString()));

                        }
                    }
                    return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpGet]
        public JsonResult AddLogsSerialNo(int jobId, string serialNumber = "")
        {
            try
            {
                var data = JsonConvert.DeserializeObject<CreateJob>(serialNumber);
                DataSet ds = _job.GetSerialNobyJobID(jobId);
                DataTable oldserialno = ds.Tables[0];
                string oldserial = "";
                foreach (DataRow dr in oldserialno.Rows)
                {
                    oldserial = dr["SerialNumber"].ToString();

                }
                string[] newserials = data.JobSystemDetails.SerialNumbers.Split(new[] { "\r\n" }, StringSplitOptions.None);
                string[] oldserials = oldserial.Split(new[] { "\r\n" }, StringSplitOptions.None);
                List<string> addedserials = new List<string>();
                List<string> removedserials = new List<string>();
                for (int i = 0; i < newserials.Length; i++)
                {
                    string serial = newserials[i];
                    bool isserialnoexist = Array.Exists(oldserials, element => element == serial);
                    if (!isserialnoexist && !string.IsNullOrEmpty(serial))
                    {
                        addedserials.Add(serial);
                    }

                }

                for (int i = 0; i < oldserials.Length; i++)
                {
                    string serial = oldserials[i];
                    bool isserialnoexist = Array.Exists(newserials, element => element == serial);
                    if (!isserialnoexist && !string.IsNullOrEmpty(serial))
                    {
                        removedserials.Add(serial);
                    }

                }
                if (addedserials.Count > 0)
                {
                    string addserialnolist = string.Join(", ", addedserials.ToArray());
                    JobSerialNoupdate objjobserialnoupdate = new JobSerialNoupdate();
                    objjobserialnoupdate.serialno = addserialnolist;
                    objjobserialnoupdate.JobID = Convert.ToInt32(jobId);
                    // _jobHistory.LogJobHistory(objjobserialnoupdate, HistoryCategory.AddedSerialNumber);
                    //string JobHistoryMessage = "has added serial number " + objjobserialnoupdate.serialno + " for JobID " + objjobserialnoupdate.JobID;
                    string JobHistoryMessge = " has added serial numbers - <b class=\"blue-title\">(" + objjobserialnoupdate.JobID + ") JobRefNo</b>";
                    string description = "Old Serial Number: <b style=\"color: black\">" + string.Join(", ", oldserials.ToArray()) + "</b>" + "<br>New Serial Number: <b style=\"color: black\">" + string.Join(", ", newserials.ToArray()) + "</b>";
                    Common.SaveJobHistorytoXML(objjobserialnoupdate.JobID, JobHistoryMessge, "General", "AddedSerialNumber", ProjectSession.LoggedInName, false, description);
                }
                if (removedserials.Count > 0)
                {
                    string removedserialnolist = string.Join(", ", removedserials.ToArray());
                    JobSerialNoupdate objjobserialnoupdate = new JobSerialNoupdate();
                    objjobserialnoupdate.serialno = removedserialnolist;
                    objjobserialnoupdate.JobID = Convert.ToInt32(jobId);
                    //_jobHistory.LogJobHistory(objjobserialnoupdate, HistoryCategory.RemoveSerialNumber);
                    //string JobHistoryMessage = "has removed serial number " + objjobserialnoupdate.serialno + " for JobID " + objjobserialnoupdate.JobID;
                    string JobHistoryMessge = "has removed serial numbers - <b class=\"blue-title\">(" + objjobserialnoupdate.JobID + ") JobRefNo</b>";
                    string description = "Old Serial Number: <b style=\"color: black\">" + string.Join(", ", oldserials.ToArray()) + "</b>" + "<br>New Serial Number: <b style=\"color: black\">" + string.Join(", ", newserials.ToArray()) + "</b>";
                    Common.SaveJobHistorytoXML(objjobserialnoupdate.JobID, JobHistoryMessge, "General", "RemoveSerialNumber", ProjectSession.LoggedInName, false, description);
                }
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult SaveNotes(int JobId, string notes, string JobRefno, int PostVisibility, string JobRefNo, string NoteID = null, bool IsImportantNote = false)
        {
            string installationadd = string.Empty;
            string OwnerName = string.Empty;
            string CompanyName = string.Empty;
            DataSet ds = _job.GetDataForEmailOfReplyNotes(JobId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                installationadd = ds.Tables[0].Rows[0]["InstallationAddress"].ToString();
                OwnerName = ds.Tables[0].Rows[0]["name"].ToString();
            }
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[1].Rows.Count > 0)
            {
                CompanyName = ds.Tables[1].Rows[0]["CompanyName"].ToString();
            }
            if (string.IsNullOrEmpty(NoteID))
            {
                try
                {
                    HtmlDocument notesdoc = new HtmlDocument();
                    notesdoc.LoadHtml(notes);
                    var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");
                    var aTagList = notesdoc.DocumentNode.Descendants("a").ToList();
                    //if (aTagList != null && aTagList.Count() > 0 && SelectTaggedUsers == null)
                    //{
                    //    foreach (var item in aTagList)
                    //    {
                    //        item.SetAttributeValue("class", "disabled");
                    //    }
                    //}
                    //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                    //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name")); 

                    List<string> AllTaggedUsers = new List<string>();
                    if (SelectTaggedUsers != null)
                    {
                        for (int j = 0; j < SelectTaggedUsers.Count; j++)
                        {
                            AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                        }
                        AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                        for (int m = 0; m < AllTaggedUsers.Count; m++)
                        {
                            if (AllTaggedUsers[m].Contains('@'))
                            {

                                string[] TaggedList = AllTaggedUsers[m].Split('@');
                                AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                foreach (string tagged in TaggedList)
                                {
                                    AllTaggedUsers.Add(tagged);
                                }
                            }
                        }
                    }
                    List<string> Emailid = new List<string>();
                    List<string> ReceiverUserId = new List<string>();
                    //var emails = notesdoc.DocumentNode.SelectNodes("//a[contains(@class,'tagged)']" + a[@data-emaild] ");
                    var emails = notesdoc.DocumentNode.SelectNodes("//a[@data-emailid]");
                    var receiverUserIds = notesdoc.DocumentNode.SelectNodes("//a[@data-userid]");
                    if (emails != null)
                    {
                        foreach (var email in emails)
                        {
                            Emailid.Add(email.GetAttributeValue("data-emailid", ""));
                        }
                    }
                    if (receiverUserIds != null)
                    {
                        foreach (var receiverUserId in receiverUserIds)
                        {
                            ReceiverUserId.Add(receiverUserId.GetAttributeValue("data-userid", ""));
                        }
                    }


                    if (Emailid.Count > 0)
                    {
                        for (int j = 0; j < Emailid.Count; j++)
                        {
                            EmailInfo emailInfo = new EmailInfo();
                            emailInfo.TemplateID = 50;
                            emailInfo.UserName = AllTaggedUsers[j];
                            emailInfo.JobID = JobId;
                            emailInfo.OwnerName = OwnerName;
                            emailInfo.InstallationAddress = installationadd;
                            emailInfo.LoggedInUsername = ProjectSession.LoggedInName;
                            emailInfo.CompanyName = CompanyName;
                            string jobDetailLink = "<a href=" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + "> (" + JobId + ") "  + JobRefno + "</a>";
                            emailInfo.JobDetailLink = "<a href=" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + ">" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + "</a>";
                            //emailInfo.JobDetailLink = "<a href=http://localhost:56199/Job/Index?id=" + emailInfo.Id + "> http://localhost:56199/Job/Index?id=" + emailInfo.Id + "</a>";
                            emailInfo.ReferenceNumber = JobRefNo;
                            emailInfo.Details = notes;
                            _emailBAL.ComposeAndSendEmail(emailInfo, Emailid[j], null, null, default(Guid), Convert.ToString(JobId));
                            int receiverUserId;
                            Int32.TryParse(ReceiverUserId[j], out receiverUserId);
                            if (PostVisibility == 3)
                            {
                                _userBAL.AddNotesNotificaion(receiverUserId, JobId, jobDetailLink, notes, ProjectSession.LoggedInUserId);
                            }
                        }
                    }
                    //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                    //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name"));
                    var NotesXMLPath = Path.Combine(Path.Combine(ProjectConfiguration.ProofDocumentsURL, "StaticTemplate/SPV/Notes.xml"));

                    string JobSchedulingID = "";
                    string VendorJobNoteID = "";
                    string TaggedUsers = notes;
                    var NotesTypeEnum = (SystemEnums.NotesType)PostVisibility;
                    string NotesTypeString = NotesTypeEnum.ToString();
                    bool isDeleted = false;
                    string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobId.ToString(), "Notes");
                    if (!Directory.Exists(fullDirectoryPath))
                        Directory.CreateDirectory(fullDirectoryPath);
                    string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobId.ToString() + ".xml");
                    if (System.IO.File.Exists(fullFilePath))
                    {
                        XDocument olddoc = XDocument.Load(fullFilePath);
                        var count = olddoc.Descendants("Note").Count();
                        XElement root = new XElement("Note");
                        XElement Notesreplyroot = new XElement("NotesReply");
                        XElement Replyroot = new XElement("Reply");
                        root.Add(new XElement("JobID", Convert.ToString(JobId)));
                        root.Add(new XElement("JobRefNo", JobRefno));
                        root.Add(new XElement("NoteID", count + 1));
                        root.Add(new XElement("IsImportantNote", Convert.ToString(IsImportantNote)));
                        root.Add(new XElement("NotesDescription", notes));
                        root.Add(new XElement("NotesType", NotesTypeString));
                        root.Add(new XElement("JobSchedulingID", string.IsNullOrEmpty(Convert.ToString(JobSchedulingID)) ? JobSchedulingID.ToString() : ""));
                        root.Add(new XElement("VendorJobNoteID", string.IsNullOrEmpty(Convert.ToString(VendorJobNoteID)) ? VendorJobNoteID.ToString() : ""));
                        root.Add(new XElement("STCJobDetailsID", null));
                        root.Add(new XElement("CreatedBy", Convert.ToString(ProjectSession.LoggedInName)));
                        root.Add(new XElement("CreatedByID", Convert.ToString(ProjectSession.LoggedInUserId)));
                        root.Add(new XElement("CreatedDate", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz")));
                        root.Add(new XElement("IsDeleted", Convert.ToString(isDeleted)));
                        root.Add(new XElement("ModifiedBy", null));
                        root.Add(new XElement("ModifiedDate", null));
                        root.Add(new XElement("IsEdit", Convert.ToString(false)));
                        Replyroot.Add(new XElement("ReplyID", "1"));
                        Replyroot.Add(new XElement("ReplyBy", null));
                        Replyroot.Add(new XElement("ReplyDescription", null));
                        Replyroot.Add(new XElement("ReplyTime", null));
                        Notesreplyroot.Add(Replyroot);
                        root.Add(Notesreplyroot);
                        //olddoc.Element("Notes").Element("Note").Add(Notesreplyroot);
                        //olddoc.Element("Notes").Element("Note").Element("NotesReply").Add(Replyroot);
                        olddoc.Element("Notes").Add(root);
                        olddoc.Save(fullFilePath);
                    }
                    //System.IO.File.Delete(fullFilePath);
                    else
                    {
                        XmlDocument xmlDoc = new XmlDocument();
                        xmlDoc.PreserveWhitespace = true;
                        xmlDoc.Load(NotesXMLPath);
                        XDocument doc = XDocument.Parse(xmlDoc.InnerXml);
                        xmlDoc.InnerXml = doc.ToString();
                        xmlDoc.InnerXml = xmlDoc.InnerXml.Replace("[[JobID]]", Convert.ToString(JobId))
                                        .Replace("[[JobRefNo]]", JobRefno)
                                        .Replace("[[NoteID]]", "1")
                                        .Replace("[[IsImportantNote]]", Convert.ToString(IsImportantNote))
                                        .Replace("[[NotesDescription]]", HttpUtility.HtmlEncode(notes))
                                        .Replace("[[NotesType]]", NotesTypeString)
                                        .Replace("[[JobSchedulingID]]", string.IsNullOrEmpty(Convert.ToString(JobSchedulingID)) ? JobSchedulingID.ToString() : "")
                                        .Replace("[[VendorJobNoteID]]", null)
                                        .Replace("[[STCJobDetailsID]]", null)
                                        .Replace("[[CreatedBy]]", Convert.ToString(ProjectSession.LoggedInName))
                                        .Replace("[[CreatedByID]]", Convert.ToString(ProjectSession.LoggedInUserId))
                                        .Replace("[[CreatedDate]]", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz"))
                                        .Replace("[[IsDeleted]]", Convert.ToString(isDeleted))
                                        .Replace("[[ModifiedBy]]", null)
                                        .Replace("[[ModifiedDate]]", null)
                                        .Replace("[[IsEdit]]", Convert.ToString(false))
                                        .Replace("[[ReplyID]]", "1")
                                        .Replace("[[ReplyBy]]", null)
                                        .Replace("[[ReplyDescription]]", null)
                                        .Replace("[[ReplyTime]]", null);


                        XmlWriterSettings settings = new XmlWriterSettings();
                        settings.Encoding = new UTF8Encoding(false);
                        settings.Indent = true;
                        using (XmlWriter writer = XmlWriter.Create(fullFilePath, settings))
                        {
                            xmlDoc.Save(writer);
                            writer.Close();
                            writer.Dispose();
                        }
                    }

                    return Json(new { status = true, message = "Job Note has been added." }, JsonRequestBehavior.AllowGet);

                }
                catch (Exception e)
                {
                    return Json(new { status = false, message = "Job Note has not been saved." }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                try
                {
                    string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobId.ToString(), "Notes");
                    string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobId.ToString() + ".xml");
                    if (System.IO.File.Exists(fullFilePath))
                    {
                        XDocument doc = XDocument.Load(fullFilePath);
                        var Note = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == NoteID);
                        if (Note != null)
                        {
                            //Note.Element("IsDeleted").Value = Convert.ToString(true);
                            if (Note.Element("IsDeleted").Value == "True")
                            {
                                return Json(new { stauts = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                HtmlDocument notesdoc = new HtmlDocument();
                                notesdoc.LoadHtml(notes);
                                var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");
                                //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                                //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name")); 
                                List<string> AllTaggedUsers = new List<string>();
                                if (SelectTaggedUsers != null)
                                {
                                    for (int j = 0; j < SelectTaggedUsers.Count; j++)
                                    {
                                        AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                                    }
                                    AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                    for (int m = 0; m < AllTaggedUsers.Count; m++)
                                    {
                                        if (AllTaggedUsers[m].Contains('@'))
                                        {

                                            string[] TaggedList = AllTaggedUsers[m].Split('@');
                                            AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                            foreach (string tagged in TaggedList)
                                            {
                                                AllTaggedUsers.Add(tagged);
                                            }
                                        }
                                    }
                                }
                                string taggeduserlist = string.Join(",", AllTaggedUsers.ToArray());
                                //string JobHistoryMessage = "edited a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b> <a data-noteid=" + NoteID + " style=\"background:url(../Images/delete-icon.png) no-repeat center; text-decoration:none;\" title=\"Delete\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"DeleteNote(this)\">&nbsp;&nbsp;&nbsp;&nbsp;</a> <a data-noteid=" + NoteID + " style=\"background:url(../Images/edit-icon.png) no-repeat center; text-decoration:none;\" title=\"Edit\"  href=\"javascript: void(0)\" style=\"cursor: pointer\" onclick=\"EditNote(this)\">&nbsp;&nbsp;&nbsp;&nbsp;</a>";
                                bool IsEdit = Convert.ToBoolean(Note.Element("IsEdit").Value);

                                var NotesTypeEnum = (SystemEnums.NotesType)PostVisibility;
                                string NotesTypeString = NotesTypeEnum.ToString();
                                if (!IsEdit)
                                {
                                    string JobHistoryMessageAdd = "";
                                    string JobHistoryMessageEdit = "";
                                    string descriptionadd = "";
                                    string descriptionedit = "";
                                    string JobHistoryAddedBy = Note.Element("CreatedBy").Value;
                                    if (AllTaggedUsers.Count == 0)
                                    {
                                        JobHistoryMessageAdd = "added a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>" + "<span style=\"float:right\">NoteID: " + Note.Element("NoteID").Value + "</span>";
                                    }
                                    else
                                    {
                                        JobHistoryMessageAdd = "added a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>" + "<span style=\"float:right\">NoteID: " + Note.Element("NoteID").Value + "</span>";
                                    }
                                    string JobSchedulingIDAdd = Note.Element("JobSchedulingID").Value;
                                    if (!string.IsNullOrEmpty(JobSchedulingIDAdd))
                                    {
                                        JobHistoryMessageAdd = "<p> added a " + Note.Element("NotesType") + " note for JobSchedulingID: " + JobSchedulingIDAdd + " - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>" + "<span style=\"float:right\">NoteID: " + Note.Element("NoteID").Value + "</span>";
                                    }
                                    descriptionadd = Note.Element("NotesDescription").Value;



                                    JobHistoryMessageEdit = JobHistoryMessageAdd.Replace("added", "edited");
                                    descriptionedit = "Note edited by <b class=\"blue-title\">" + ProjectSession.LoggedInName + "</b> on <span class=\"blue-title\">" + DateTime.Now.ToString("dd/MM/yyyy hh:mmtt") + "</span><p><span class=\"blue-title\">From: </span></p>" + descriptionadd + "<p><span class=\"blue-title\">To: </span>" + notes;
                                    string CreatedDate = Note.Element("CreatedDate").Value;
                                    Common.SaveJobHistorytoXML(JobId, JobHistoryMessageAdd, "General", "EditNote", JobHistoryAddedBy, false, descriptionadd, NoteID, NotesTypeString, CreatedDate);
                                    //Common.SaveJobHistorytoXML(JobId, JobHistoryMessageEdit, "General", "EditNote", ProjectSession.LoggedInName, false, descriptionedit, NoteID, NotesTypeString);
                                }
                                if (IsEdit)
                                {
                                    string JobHistoryMessageEdit = "";
                                    string descriptionEdit = "";
                                    if (AllTaggedUsers.Count == 0)
                                    {
                                        JobHistoryMessageEdit = "edited a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>";
                                    }
                                    else
                                    {
                                        JobHistoryMessageEdit = "edited a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>";
                                    }
                                    string JobSchedulingIDAdd = Note.Element("JobSchedulingID").Value;
                                    if (!string.IsNullOrEmpty(JobSchedulingIDAdd))
                                    {
                                        JobHistoryMessageEdit = "<p> edited a " + Note.Element("NotesType") + " note for JobSchedulingID: " + JobSchedulingIDAdd + " - <b class=\"blue-title\">(" + JobId + ") " + JobRefNo + "</b>";
                                    }
                                    descriptionEdit = "Note edited by <b class=\"blue-title\">" + ProjectSession.LoggedInName + "</b> on <span class=\"blue-title\">" + DateTime.Now.ToString("dd/MM/yyyy hh:mmtt") + "</span><p><span class=\"blue-title\">From: </span></p>" + Note.Element("NotesDescription").Value + "<p><span class=\"blue-title\">To: </span>" + notes;
                                    //Common.SaveJobHistorytoXML(JobId, JobHistoryMessageEdit, "General", "EditNote", ProjectSession.LoggedInName, false, descriptionEdit, NoteID, NotesTypeString);
                                }
                                Note.Element("NotesDescription").Value = notes;
                                Note.Element("ModifiedBy").Value = ProjectSession.LoggedInName;
                                Note.Element("ModifiedDate").Value = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");
                                Note.Element("NotesType").Value = NotesTypeString;
                                Note.Element("IsImportantNote").Value = Convert.ToString(IsImportantNote);
                                Note.Element("IsEdit").Value = Convert.ToString(true);
                                doc.Save(fullFilePath);



                                List<string> Emailid = new List<string>();
                                //var emails = notesdoc.DocumentNode.SelectNodes("//a[contains(@class,'tagged)']" + a[@data-emaild] ");
                                var emails = notesdoc.DocumentNode.SelectNodes("//a[@data-emailid]");
                                if (emails != null)
                                {
                                    foreach (var email in emails)
                                    {
                                        Emailid.Add(email.GetAttributeValue("data-emailid", ""));
                                    }
                                }

                                if (Emailid.Count > 0)
                                {
                                    for (int j = 0; j < Emailid.Count; j++)
                                    {
                                        EmailInfo emailInfo = new EmailInfo();
                                        emailInfo.TemplateID = 50;
                                        emailInfo.UserName = AllTaggedUsers[j];
                                        emailInfo.JobID = JobId;
                                        emailInfo.OwnerName = OwnerName;
                                        emailInfo.InstallationAddress = installationadd;
                                        emailInfo.LoggedInUsername = ProjectSession.LoggedInName;
                                        emailInfo.CompanyName = CompanyName;
                                        emailInfo.JobDetailLink = "<a href=" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + ">" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + "</a>";
                                        //emailInfo.JobDetailLink = "<a href=http://localhost:56199/Job/Index?id=" + emailInfo.Id + "> http://localhost:56199/Job/Index?id=" + emailInfo.Id + "</a>";
                                        emailInfo.ReferenceNumber = JobRefNo;
                                        emailInfo.Details = notes;
                                        _emailBAL.ComposeAndSendEmail(emailInfo, Emailid[j], null, null, default(Guid), Convert.ToString(JobId));
                                    }
                                }
                                return Json(new { status = true, message = "Job Note has been edited successfully." }, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {
                            return Json(new { status = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return Json(new { status = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception e)
                {
                    return Json(new { status = false, message = "Failed to save edited Job Note." }, JsonRequestBehavior.AllowGet);
                }
            }
        }

        [HttpGet]
        public JsonResult GetUserList(string name, int userid = 0, int userTypeId = 0, int JobId = 0)
        {

            //DataSet ds = _job.GetUserList(name);
            //List<Entity.User> lstuser = new List<Entity.User>();

            //foreach (DataRow dr in ds.Tables[0].Rows)

            //{

            //    lstuser.Add(new Entity.User
            //    {
            //        UserId = Convert.ToInt32(dr["UserId"]),
            //        Name = dr["FirstName"].ToString(),
            //        FirstName = dr["FirstName"].ToString()

            //    });

            //}
            //var objusers = JsonConvert.SerializeObject(lstuser);
            ////Username[] objusername = lstuser.ToArray();
            //return Json(lstuser, JsonRequestBehavior.AllowGet);
            DataSet ds;
            if (userid != ProjectSession.LoggedInUserId && userid != 0 && userTypeId != 0)
            {
                /*for tag SE user under SCA from SCA profile user note*/
                //ds = _job.GetUserList(name, userid, userTypeId);
                ds = new DataSet();
            }
            else
            {
                ds = _job.GetUserList(name, ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, JobId);
            }

            List<Username> lstuser = new List<Username>();
            int id = 0;
            if (ds != null && ds.Tables.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    lstuser.Add(new Username
                    {
                        id = id++,
                        name = dr["name"].ToString(),
                        email = !string.IsNullOrEmpty(dr["Email"].ToString()) ? dr["Email"].ToString() : "",
                        userId = Int32.Parse(dr["UserId"].ToString())
                    });
                }
            }

            return Json(lstuser, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetAllUserList(int jobid)
        {
            List<SelectListItem> items = _job.GetAllUserList(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, jobid).Select(a => new SelectListItem { Text = a.name, Value = a.name.ToString() }).OrderBy(x => x.Text).ToList();
            return Json(items, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetNotesType()
        {
            List<SelectListItem> items = (Enum.GetValues(typeof(SystemEnums.NotesType)).Cast<int>().Select(e => new SelectListItem() { Text = Enum.GetName(typeof(SystemEnums.NotesType), e), Value = e.ToString() })).ToList();
            if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
            {
                items = items.Where(x => x.Value != "3").ToList();
            }
            return Json(items, JsonRequestBehavior.AllowGet);
        }
        public void InstallationAddressChangeHistory(string oldInsAdderss, string newInsAddress, int jobid)
        {
            if (oldInsAdderss != newInsAddress)
            {
                string JobHistoryMessage = "has changed installation details -<b class=\"blue-title\"> (" + jobid + ") JobRefNo </b>";
                string description = "Installation address changed from <b class=\"blue-title\">" + oldInsAdderss + "</b> to <b class=\"blue-title\">" + newInsAddress + "</b>";

                Common.SaveJobHistorytoXML(jobid, JobHistoryMessage, "General", "JobInstallationDetails", ProjectSession.LoggedInName, false, description);
            }
        }

        public JsonResult DeleteNote(string Noteid, int JobID)
        {
            try
            {
                //string JobHistoryDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "JobHistory");
                //string JobHistoryFilePath = Path.Combine(JobHistoryDirectoryPath, "JobHistory_" + JobID.ToString() + ".xml");
                //if(System.IO.File.Exists(JobHistoryFilePath))
                //{
                //    XmlDocument historydoc = new XmlDocument();
                //    historydoc.Load(JobHistoryFilePath);
                //    XmlNodeList nodeList = historydoc.SelectNodes("/JobHistory/History[NoteID=Noteid]");
                //    XDocument doc = XDocument.Load(JobHistoryFilePath);
                //    //var Notes = doc.Descendants("History").Select(r => (string)r.Element("NoteID") == Noteid);
                //    var Notes1 = doc.Descendants("History").Where(r => (string)r.Element("NoteID") == Noteid);
                //    foreach(XElement el in Notes1)
                //    {
                //        el.Element("IsImportant").Value = Convert.ToString(false);
                //    }
                //    doc.Save(JobHistoryFilePath);
                //}
                string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "Notes");
                string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobID.ToString() + ".xml");
                if (System.IO.File.Exists(fullFilePath))
                {
                    XDocument doc = XDocument.Load(fullFilePath);

                    //var items = from item in doc.Descendants("Notes")
                    //            where item.Attribute("NoteID").Value == Noteid
                    //            select item;

                    //foreach (XElement itemElement in items)
                    //{
                    //    itemElement.SetAttributeValue("IsDeleted", Convert.ToString(true));
                    //}

                    //var target = doc.Elements("Note").Where(e => e.Attribute("NoteID").Value == Noteid).Single();
                    var Note = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid);
                    //XElement xElemAgent = doc.Descendants("Note")
                    //.Where(arg => arg.Attribute("NoteID").Value == Noteid.ToString()).Single();
                    //xElemAgent.SetAttributeValue("IsDeleted", Convert.ToString(true));
                    //IEnumerable<XElement> rech = from el in doc.Root.Elements("Note") where (string)el.Element("NoteID") == Noteid select el;
                    //if (rech.Count() != 0)
                    //{
                    //    foreach (XElement el in rech)
                    //    {
                    //        el.Element("IsDeleted").SetValue(Convert.ToString(true));
                    //    }
                    //}
                    if (Note.Element("IsDeleted").Value == "True")
                    {
                        return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        if (Note.Element("IsEdit").Value == "False")
                        {
                            string notes = Note.Element("NotesDescription").Value;
                            HtmlDocument notesdoc = new HtmlDocument();
                            notesdoc.LoadHtml(notes);
                            var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");
                            //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                            //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name")); 
                            List<string> AllTaggedUsers = new List<string>();
                            if (SelectTaggedUsers != null)
                            {
                                for (int j = 0; j < SelectTaggedUsers.Count; j++)
                                {
                                    AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                                }
                                AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                for (int m = 0; m < AllTaggedUsers.Count; m++)
                                {
                                    if (AllTaggedUsers[m].Contains('@'))
                                    {

                                        string[] TaggedList = AllTaggedUsers[m].Split('@');
                                        AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                        foreach (string tagged in TaggedList)
                                        {
                                            AllTaggedUsers.Add(tagged);
                                        }
                                    }
                                }
                            }
                            string taggeduserlist = string.Join(",", AllTaggedUsers.ToArray());
                            string JobHistoryMessageAdd = "";
                            string JobHistoryMessageEdit = "";
                            string descriptionadd = "";
                            string descriptionedit = "";
                            string JobHistoryAddedBy = Note.Element("CreatedBy").Value;
                            string NotesTypeString = Note.Element("NotesType").Value;
                            string JobRefNo = Note.Element("JobRefNo").Value;
                            if (AllTaggedUsers.Count == 0)
                            {
                                JobHistoryMessageAdd = "added a " + Note.Element("NotesType").Value + " note - <b class=\"blue-title\">(" + JobID + ") " + JobRefNo + "</b>";
                            }
                            else
                            {
                                JobHistoryMessageAdd = "added a " + Note.Element("NotesType").Value + " note  - <b class=\"blue-title\">(" + JobID + ") " + JobRefNo + "</b>";
                            }
                            string JobSchedulingIDAdd = Note.Element("JobSchedulingID").Value;
                            if (!string.IsNullOrEmpty(JobSchedulingIDAdd))
                            {
                                JobHistoryMessageAdd = "<p> added a " + Note.Element("NotesType") + " note for JobSchedulingID: " + JobSchedulingIDAdd + " - <b class=\"blue-title\">(" + JobID + ") " + JobRefNo + "</b>";
                            }
                            descriptionadd = "<span style=\"float:right\">NoteID: " + Note.Element("NoteID").Value + "</span>" + Note.Element("NotesDescription").Value;



                            JobHistoryMessageEdit = JobHistoryMessageAdd.Replace("added", "edited");
                            descriptionedit = "Note edited by <b class=\"blue-title\">" + ProjectSession.LoggedInName + "</b> on <span class=\"blue-title\">" + DateTime.Now.ToString("dd/MM/yyyy hh:mmtt") + "</span><p><span class=\"blue-title\">From: </span></p>" + descriptionadd + "<p><span class=\"blue-title\">To: </span>" + notes;
                            string CreatedDate = Note.Element("CreatedDate").Value;
                            Common.SaveJobHistorytoXML(JobID, JobHistoryMessageAdd, "General", "EditNote", JobHistoryAddedBy, false, descriptionadd, Noteid, NotesTypeString, CreatedDate);

                        }

                        Note.Element("IsDeleted").Value = Convert.ToString(true);
                        Note.Element("ModifiedBy").Value = ProjectSession.LoggedInName;
                        Note.Element("ModifiedDate").Value = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");
                        doc.Save(fullFilePath);
                        XmlDocument replydoc = new XmlDocument();
                        replydoc.Load(fullFilePath);
                        XmlElement oldCd;
                        XmlElement root = replydoc.DocumentElement;
                        oldCd = (XmlElement)root.SelectSingleNode("/Notes/Note[NoteID='" + Noteid + "']");
                        XmlNodeList replylist = oldCd.SelectNodes("NotesReply/Reply");
                        string Replies = "";
                        //var ReplyList = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid).Descendants("NotesReply").Descendants("Reply").Select(r => r.Element("ReplyID"));
                        //var replies = Note.Descendants("Note").Descendants("NotesReply").Descendants("Reply").Select(elements => new { Notesreply = (string)elements.Attribute("ReplyID") });
                        //var items = from item in doc.Descendants("Notes") where item.Attribute("NoteID").Value == Noteid select item;
                        //IEnumerable<XElement> rech = from el in doc.Root.Elements("Note") where (string)el.Element("NoteID") == Noteid select el;
                        foreach (XmlNode notesreplynode in replylist)
                        {
                            int replyID = Convert.ToInt32(notesreplynode.SelectSingleNode("ReplyID").InnerText);
                            string ReplyBy = notesreplynode.SelectSingleNode("ReplyBy").InnerText;
                            string ReplyDescription = notesreplynode.SelectSingleNode("ReplyDescription").InnerText;

                            if (replyID == 1)
                            {
                                if (!string.IsNullOrEmpty(ReplyBy) && !string.IsNullOrEmpty(ReplyDescription))
                                {
                                    string ReplyTime = Convert.ToDateTime(notesreplynode.SelectSingleNode("ReplyTime").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                    Replies = "<p><b class=\"blue-title\">Replies:</b></p>" + "<p> <span class=\"blue-title\">" + ReplyBy + "</span> replied on <span class=\"blue-title\">" + ReplyTime + "</span><p>" + ReplyDescription + "</p></p>";
                                }
                            }
                            else
                            {
                                string ReplyTime = Convert.ToDateTime(notesreplynode.SelectSingleNode("ReplyTime").InnerText).ToString("dd/MM/yyyy hh:mmtt");
                                Replies = Replies + "<p> <span class=\"blue-title\">" + ReplyBy + "</span> replied on <span class=\"blue-title\">" + ReplyTime + "</span><p>" + ReplyDescription + "</p></p>";
                            }
                        }
                        string NotesType = Note.Element("NotesType").Value;
                        string JobHistoryMessage = "deleted a " + Note.Element("NotesType").Value + " Note - <b class=\"blue-title\"> (" + JobID + ") JobRefNo </b>" + "<span style=\"float:right\">NoteID: " + Note.Element("NoteID").Value + "</span>";
                        string Description = Note.Element("NotesDescription").Value + Replies;
                        //Common.SaveJobHistorytoXML(JobID, JobHistoryMessage, "General", "DeleteNote", ProjectSession.LoggedInName, false, Description,Noteid,NotesType);
                        string JobHistoryDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "JobHistory");
                        string JobHistoryFilePath = Path.Combine(JobHistoryDirectoryPath, "JobHistory_" + JobID.ToString() + ".xml");
                        if (System.IO.File.Exists(JobHistoryFilePath))
                        {
                            XmlDocument historydoc = new XmlDocument();
                            historydoc.Load(JobHistoryFilePath);
                            XmlNodeList nodeList = historydoc.SelectNodes("/JobHistory/History[NoteID=Noteid]");
                            XDocument doc1 = XDocument.Load(JobHistoryFilePath);
                            //var Notes = doc.Descendants("History").Select(r => (string)r.Element("NoteID") == Noteid);
                            var Notes1 = doc1.Descendants("History").Where(r => (string)r.Element("NoteID") == Noteid);
                            foreach (XElement el in Notes1)
                            {
                                el.Element("IsDeleted").Value = Convert.ToString(true);
                            }
                            doc1.Save(JobHistoryFilePath);
                        }

                        return Json(new { status = true, message = "Job Note deleted successfully" }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(new { status = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                return Json(new { status = false, message = "Failed to delete Job Note" }, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult EditNote(string Noteid, int JobID)
        {
            try
            {
                string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "Notes");
                string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobID.ToString() + ".xml");
                if (System.IO.File.Exists(fullFilePath))
                {
                    XDocument doc = XDocument.Load(fullFilePath);
                    var Note = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid);
                    if (Note != null)
                    {
                        if (Note.Element("IsDeleted").Value == "True")
                        {
                            return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            var notesdescription = Note.Element("NotesDescription").Value;
                            var notestype = Note.Element("NotesType").Value;
                            int NotesTypeValue = !string.IsNullOrEmpty(notestype) ? Convert.ToInt32((SystemEnums.NotesType)Enum.Parse(typeof(SystemEnums.NotesType), notestype).GetHashCode()) : 0;
                            bool IsImportant = Convert.ToBoolean(Note.Element("IsImportantNote").Value);
                            return Json(new { status = true, Notes = notesdescription, NotesType = NotesTypeValue, IsImportant = IsImportant }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        return Json(new { status = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(new { status = false, message = "Job Note does not exist." }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult ReplyNotes(string Noteid, int JobID)
        {
            string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "Notes");
            string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobID.ToString() + ".xml");
            if (System.IO.File.Exists(fullFilePath))
            {
                XDocument doc = XDocument.Load(fullFilePath);
                var Note = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid);
                if (Note != null)
                {
                    if (Note.Element("IsDeleted").Value == "True")
                    {
                        return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(new { status = false, message = "Job Note has been delted." }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult SaveReplyForNote(string Noteid, int JobID, string NotesReplyDescription, string JobRefNo)
        {
            string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", JobID.ToString(), "Notes");
            string fullFilePath = Path.Combine(fullDirectoryPath, "Notes_" + JobID.ToString() + ".xml");
            string installationadd = string.Empty;
            string OwnerName = string.Empty;
            string CompanyName = string.Empty;
            int noteCreatedBy = 0;
            string mailTo = string.Empty;

            if (System.IO.File.Exists(fullFilePath))
            {
                XDocument doc = XDocument.Load(fullFilePath);
                var Note = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid);
                if (Note != null)
                {
                    if (Note.Element("IsDeleted").Value == "True")
                    {
                        return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        noteCreatedBy = !string.IsNullOrEmpty(Note.Element("CreatedByID").Value) ? Convert.ToInt32(Note.Element("CreatedByID").Value) : 0;
                        if (noteCreatedBy != 0)
                        {
                            DataSet ds = _job.GetDataForEmailOfReplyNotes(JobID, noteCreatedBy);
                            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                            {
                                installationadd = ds.Tables[0].Rows[0]["InstallationAddress"].ToString();
                                OwnerName = ds.Tables[0].Rows[0]["name"].ToString();
                            }
                            if (ds != null && ds.Tables.Count > 0 && ds.Tables[1].Rows.Count > 0)
                            {
                                CompanyName = ds.Tables[1].Rows[0]["CompanyName"].ToString();
                            }
                            if (ds != null && ds.Tables.Count > 0 && ds.Tables[2].Rows.Count > 0)
                            {
                                mailTo = ds.Tables[2].Rows[0]["Email"].ToString();
                            }
                            EmailInfo emailInfoReplyNote = new EmailInfo();
                            emailInfoReplyNote.TemplateID = 52;
                            emailInfoReplyNote.UserName = ProjectSession.LoggedInName;
                            emailInfoReplyNote.JobID = JobID;
                            emailInfoReplyNote.OwnerName = OwnerName;
                            emailInfoReplyNote.InstallationAddress = installationadd;
                            emailInfoReplyNote.LoggedInUsername = ProjectSession.LoggedInName;
                            emailInfoReplyNote.CompanyName = CompanyName;
                            emailInfoReplyNote.JobDetailLink = "<a href=" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfoReplyNote.Id + ">" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfoReplyNote.Id + "</a>";

                            //emailInfo.JobDetailLink = "<a href=http://localhost:56199/Job/Index?id=" + emailInfo.Id + "> http://localhost:56199/Job/Index?id=" + emailInfo.Id + "</a>";
                            emailInfoReplyNote.ReferenceNumber = JobRefNo;
                            emailInfoReplyNote.Details = NotesReplyDescription;
                            _emailBAL.ComposeAndSendEmail(emailInfoReplyNote, mailTo, null, null, default(Guid), Convert.ToString(JobID));
                        }


                        var Notesreply = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid).Descendants("NotesReply").Descendants("Reply").Single(r => (string)r.Element("ReplyID") == "1");
                        if (Notesreply != null)
                        {
                            if (string.IsNullOrEmpty(Notesreply.Element("ReplyBy").Value) && string.IsNullOrEmpty(Notesreply.Element("ReplyDescription").Value))
                            {
                                Notesreply.Element("ReplyBy").Value = ProjectSession.LoggedInName;
                                Notesreply.Element("ReplyDescription").Value = NotesReplyDescription;
                                Notesreply.Element("ReplyTime").Value = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");
                                doc.Save(fullFilePath);
                            }
                            else
                            {
                                var count = doc.Descendants("Note").Single(r => (string)r.Element("NoteID") == Noteid).Descendants("NotesReply").Descendants("Reply").Count();
                                XmlDocument replydoc = new XmlDocument();
                                replydoc.Load(fullFilePath);
                                XmlElement oldCd;
                                XmlElement root = replydoc.DocumentElement;
                                oldCd = (XmlElement)root.SelectSingleNode("/Notes/Note[NoteID='" + Noteid + "']/NotesReply");

                                if (oldCd != null)
                                {
                                    XmlElement elem = replydoc.CreateElement("Reply"); //item1 ,item2..
                                    XmlElement replyid = replydoc.CreateElement("ReplyID");
                                    XmlElement replyby = replydoc.CreateElement("ReplyBy");
                                    XmlElement replydescription = replydoc.CreateElement("ReplyDescription");
                                    XmlElement replytime = replydoc.CreateElement("ReplyTime");
                                    replyid.InnerText = (count + 1).ToString();
                                    replyby.InnerText = ProjectSession.LoggedInName;
                                    replydescription.InnerText = NotesReplyDescription;
                                    replytime.InnerText = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:sszzz");
                                    elem.AppendChild(replyid);
                                    elem.AppendChild(replyby);
                                    elem.AppendChild(replydescription);
                                    elem.AppendChild(replytime);
                                    oldCd.AppendChild(elem);
                                    replydoc.Save(fullFilePath);
                                }

                            }
                            HtmlDocument notesdoc = new HtmlDocument();
                            notesdoc.LoadHtml(NotesReplyDescription);
                            var SelectTaggedUsers = notesdoc.DocumentNode.SelectNodes("//a[contains(@class, 'tagged')]");
                            //var tagged3 = doc1.DocumentNode.Descendants("a").Where(d => d.Attributes["class"].Value.Contains("tagged"));
                            //IEnumerable<HtmlNode> tagged2 =doc.DocumentNode.Descendants(0).Where(n => n.HasClass("class-name")); 
                            List<string> AllTaggedUsers = new List<string>();
                            if (SelectTaggedUsers != null)
                            {
                                for (int j = 0; j < SelectTaggedUsers.Count; j++)
                                {
                                    AllTaggedUsers.Add(SelectTaggedUsers[j].InnerHtml);
                                }
                                AllTaggedUsers = AllTaggedUsers.Select(p => !string.IsNullOrEmpty(p) ? p.Substring(1) : p).ToList();
                                for (int m = 0; m < AllTaggedUsers.Count; m++)
                                {
                                    if (AllTaggedUsers[m].Contains('@'))
                                    {

                                        string[] TaggedList = AllTaggedUsers[m].Split('@');
                                        AllTaggedUsers.Remove(AllTaggedUsers[m]);
                                        foreach (string tagged in TaggedList)
                                        {
                                            AllTaggedUsers.Add(tagged);
                                        }
                                    }
                                }
                            }
                            List<string> Emailid = new List<string>();
                            //var emails = notesdoc.DocumentNode.SelectNodes("//a[contains(@class,'tagged)']" + a[@data-emaild] ");
                            var emails = notesdoc.DocumentNode.SelectNodes("//a[@data-emailid]");
                            if (emails != null)
                            {
                                foreach (var email in emails)
                                {
                                    Emailid.Add(email.GetAttributeValue("data-emailid", ""));
                                }
                            }
                            if (Emailid.Count > 0)
                            {
                                DataSet ds1 = _job.GetDataForEmailOfReplyNotes(JobID, 0);
                                if (ds1 != null && ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                                {
                                    installationadd = ds1.Tables[0].Rows[0]["InstallationAddress"].ToString();
                                    OwnerName = ds1.Tables[0].Rows[0]["name"].ToString();
                                }
                                if (ds1 != null && ds1.Tables.Count > 0 && ds1.Tables[1].Rows.Count > 0)
                                {
                                    CompanyName = ds1.Tables[1].Rows[0]["CompanyName"].ToString();
                                }
                                for (int j = 0; j < Emailid.Count; j++)
                                {
                                    EmailInfo emailInfo = new EmailInfo();
                                    emailInfo.TemplateID = 50;
                                    emailInfo.UserName = AllTaggedUsers[j];
                                    emailInfo.JobID = JobID;
                                    emailInfo.OwnerName = OwnerName;
                                    emailInfo.InstallationAddress = installationadd;
                                    emailInfo.LoggedInUsername = ProjectSession.LoggedInName;
                                    emailInfo.CompanyName = CompanyName;
                                    emailInfo.JobDetailLink = "<a href=" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + ">" + ProjectSession.LoginLink + Url.Action("Index", "Job") + "?id=" + emailInfo.Id + "</a>";

                                    //emailInfo.JobDetailLink = "<a href=http://localhost:56199/Job/Index?id=" + emailInfo.Id + "> http://localhost:56199/Job/Index?id=" + emailInfo.Id + "</a>";
                                    emailInfo.ReferenceNumber = JobRefNo;
                                    emailInfo.Details = NotesReplyDescription;
                                    _emailBAL.ComposeAndSendEmail(emailInfo, Emailid[j], null, null, default(Guid), Convert.ToString(JobID));
                                }
                            }
                        }
                        else
                        {
                            return Json(new { status = false, message = "Failed to save reply." }, JsonRequestBehavior.AllowGet);
                        }
                        return Json(new { status = true }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(new { status = false, message = "Job Note has been delted." }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(new { status = false, message = "Job Note has been deleted." }, JsonRequestBehavior.AllowGet);
            }
        }
        /// <summary>
        /// upload image in notes section
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult uploadImageCkeditor(int jobId)
        {
            try
            {
                string fullDirectoryPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, "JobDocuments", jobId.ToString(), "Notes_Images");
                if (!Directory.Exists(fullDirectoryPath))
                    Directory.CreateDirectory(fullDirectoryPath);
                string filepath = string.Empty;

                HttpPostedFile httpPostedFile = System.Web.HttpContext.Current.Request.Files[0];

                string filename = httpPostedFile.FileName;
                filepath = Path.Combine(fullDirectoryPath, filename);
                if (System.IO.File.Exists(filepath))
                {
                    string orignalFileName = Path.GetFileNameWithoutExtension(filepath);
                    string fileExtension = Path.GetExtension(filepath);
                    string fileDirectory = Path.GetDirectoryName(filepath);
                    int j = 1;
                    while (true)
                    {
                        string renameFileName = fileDirectory + @"\" + orignalFileName + "(" + j + ")" + fileExtension;
                        if (System.IO.File.Exists(renameFileName))
                        {
                            j++;
                        }
                        else
                        {
                            filepath = renameFileName;
                            break;
                        }

                    }
                }
                httpPostedFile.SaveAs(filepath);

                string imageurl = Path.Combine(ProjectSession.UploadedDocumentPath, "JobDocuments", jobId.ToString(), "Notes_Images", filename);
                //string imageurl = "https://staging.greenbot.com.au/files/JobDocuments/164494/Notes_Images/1%20(1).jpg";// "https://picsum.photos/200/300";

                return Json(new { url = imageurl, success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in UploadImageInNotes: ");
                return Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public JsonResult SearchMultipleFilter(string search)
        {
            List<SearchResults> results = _job.GetSearchResults(search);
            int TotalRecords = results.Count();
            return Json(new { status = true, result = results, TotalRecords = TotalRecords }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult SaveJobAutoSignSettingsData(int UserId, string Position, bool isSubcontractor, bool isEmployee, string Signature, string StringOwnerBaseSignature, string Base30, bool IsUploaded, bool isChangedDesign, int JobId, string Latitude, string Longitude, bool isSignFromAutosetting = false)
        {
            try
            {

                string path = Path.Combine("UserDocuments" + "\\" + UserId + "\\" + JobId + "_" + Signature);
                string installerName = string.Empty;
                string CECAccerdiationNumber = string.Empty;
                if (IsUploaded == false)
                {
                    ConvertIntoImageForRetailer(StringOwnerBaseSignature, UserId, JobId);
                }

                _solarCompanyService.SaveAutoSignSettingsData(UserId, Position, isSubcontractor, isEmployee, Signature, isChangedDesign, JobId, Latitude, Longitude);
                if (isSignFromAutosetting == true)
                {
                    string FileName = string.Empty;
                    FileName = JobId + "_RetailerSign" + "_" + UserId + "." + "png";
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + UserId + "\\");
                    string srcFileName = "RetailerSign" + "_" + UserId + "." + "png";
                    string srcPath = Path.Combine(ProofDocumentsFolder + "\\" + srcFileName);
                    string destPath = Path.Combine(ProofDocumentsFolder + "\\" + FileName);
                    if (System.IO.File.Exists(srcPath))
                    {
                        System.IO.File.Copy(srcPath, destPath, true);
                    }
                }
                Entity.Job.JobRetailerSetting jobRetailerSetting = new Entity.Job.JobRetailerSetting();

                DataSet ds = _job.GetJobRetailerSettingDataByJobId(JobId);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {

                    jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                    jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                    jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                    jobRetailerSetting.PositionHeldlbl = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                    bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                    //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                    bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                    jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                    jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                    jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                    jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                    jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                    jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                    jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                    string isEmployeeOrSSC = jobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : jobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                    string isChangedDesignForJob = jobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                    if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
                    {
                        installerName = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["InstallerName"].ToString()) ? ds.Tables[1].Rows[0]["InstallerName"].ToString() : "";
                        CECAccerdiationNumber = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["CECAccreditationNumber"].ToString()) ? ds.Tables[1].Rows[0]["CECAccreditationNumber"].ToString() : "";
                    }
                    jobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + CECAccerdiationNumber + " " + installerName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesignForJob + "</b>";
                }



                return Json(new { success = true, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }
        }
        /// <summary>
        /// Converts the into image.
        /// </summary>
        /// <param name="ownerBaseSignature">The owner base signature.</param>
        /// <param name="jobid">The job.</param>
        /// <returns>view result</returns>
        [HttpPost]
        public JsonResult ConvertIntoImageForRetailer(string BaseSignature, int userId, int JobId)
        {
            string Signature = BaseSignature;
            byte[] bytIn = null;
            if (Signature != null)
            {
                Signature = Signature.Replace("data:image/png;base64,", "").Replace(' ', '+');
                bytIn = Convert.FromBase64String(Signature);
            }

            System.Drawing.Image img;
            using (var ms = new MemoryStream(bytIn))
            {
                img = System.Drawing.Image.FromStream(ms);
            }

            string FileName = string.Empty;

            FileName = JobId + "_RetailerSign" + "_" + userId + "." + "png";


            string proofDocumentsFolder = ProjectSession.ProofDocuments;
            string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + userId + "\\");
            if (!Directory.Exists(ProofDocumentsFolder))
            {
                Directory.CreateDirectory(ProofDocumentsFolder);
            }

            string path = Path.Combine(ProofDocumentsFolder + "\\" + FileName);
            DeleteDirectory(Path.Combine(ProjectSession.ProofDocumentsURL + "\\" + "UserDocuments" + "\\" + userId, FileName));


            img.Save(path);
            return Json(FileName, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult GetAutoSignSettingsDataForJobWise(int JobId, int SolarCompanyId, int userid = 0)
        {
            JobRetailerSetting jobRetailerSetting = new JobRetailerSetting();

            DataSet ds = _job.GetJobRetailerSettingData(JobId, SolarCompanyId, userid);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                if (!string.IsNullOrEmpty(jobRetailerSetting.Signature))
                {
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + jobRetailerSetting.JobRetailerUserId + "\\");
                    if (Directory.Exists(ProofDocumentsFolder))
                    {

                        string path = Path.Combine(ProofDocumentsFolder + "\\" + jobRetailerSetting.Signature);

                        if (System.IO.File.Exists(path))
                        {

                            jobRetailerSetting.base64Img = ImageToBase64(path);
                        }
                    }
                }



            }
            return Json(new { success = true, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public PartialViewResult GetSCAWrittenStatement(int jobId, int solarCompanyId, string companyName, bool isRetailerStatement = false)
        {
            CreateJob createJob = new CreateJob();
            createJob.BasicDetails = new BasicDetails();
            createJob.BasicDetails.CompanyName = companyName;
            createJob.BasicDetails.JobID = jobId;
            createJob.BasicDetails.SolarCompanyId = solarCompanyId;
            JobRetailerSetting jobRetailerSetting = new JobRetailerSetting();

            DataSet ds = _job.GetJobRetailerSettingDataByJobId(jobId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                string isEmployeeOrSSC = jobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : jobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                jobRetailerSetting.strIsEmployee = isEmployeeOrSSC;
                //string isChangedDesign = jobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                //jobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + createJob.InstallerView.CECAccreditationNumber + " " + createJob.InstallerView.FirstName + " " + createJob.InstallerView.LastName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesign + "</b>";
            }
            createJob.JobRetailerSetting = jobRetailerSetting;

            if (isRetailerStatement)
            {
                DataSet dsUsers = _job.GetThemeByJobId(jobId);
                if (dsUsers != null && dsUsers.Tables[4] != null && dsUsers.Tables[4].Rows.Count > 0)
                {
                    ViewData["CompanyName"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["CompanyName"]);
                    ViewData["CompanyABN"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["CompanyABN"]);
                    ViewData["OwnerName"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["OwnerName"]);
                    ViewData["InstallerName"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["InstallerName"]);
                    ViewData["InstallationAddress"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["InstallationAddress"]);
                    ViewData["RetailerName"] = Convert.ToString(dsUsers.Tables[4].Rows[0]["RetailerName"]);
                    ViewData["Signature"] = FormBot.Helper.ProjectSession.UploadedDocumentPath + "UserDocuments/" + jobRetailerSetting.JobRetailerUserId + "/" + jobRetailerSetting.Signature;
                }
                return PartialView("_RetailerStatement", jobRetailerSetting);
            }
            else
                return PartialView("_SCAWrittenStatement", createJob);
        }
        [HttpGet]
        public JsonResult GetSignFromAutoSetting(int userid)
        {
            DataSet ds = _solarCompanyService.GetAutoSignSettingsData(userid, false);
            string Signature = string.Empty;
            string base64 = string.Empty;
            string pngExtension = "image/png;base64,";
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Signature = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Signature"].ToString()) ? ds.Tables[0].Rows[0]["Signature"].ToString() : "";
                string proofDocumentsFolder = ProjectSession.ProofDocuments;
                string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + userid + "\\");

                string path = Path.Combine(ProofDocumentsFolder + "\\" + Signature);
                if (System.IO.File.Exists(path))
                    Signature = ImageToBase64(path);
                //using (System.Drawing.Image image = System.Drawing.Image.FromFile(path))
                //{
                //    using (MemoryStream m = new MemoryStream())
                //    {
                //        image.Save(m, image.RawFormat);
                //        byte[] imageBytes = m.ToArray();

                //        // Convert byte[] to Base64 String
                //         base64 = Convert.ToBase64String(imageBytes);
                //        m.Close();
                //    }
                //}
            }
            return Json(new { success = true, data = Signature }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult GetJobRetailerSettingDataByJobId(int JobId)
        {
            try
            {
                string installerName = string.Empty;
                string CECAccerdiationNumber = string.Empty;
                Entity.Job.JobRetailerSetting jobRetailerSetting = new Entity.Job.JobRetailerSetting();

                DataSet ds = _job.GetJobRetailerSettingDataByJobId(JobId);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {

                    jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                    jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                    jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                    jobRetailerSetting.PositionHeldlbl = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                    bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                    //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                    bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                    jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                    jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                    jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                    jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                    jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                    jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                    jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                    string isEmployeeOrSSC = jobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : jobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                    string isChangedDesignForJob = jobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                    if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
                    {
                        installerName = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["InstallerName"].ToString()) ? ds.Tables[1].Rows[0]["InstallerName"].ToString() : "";
                        CECAccerdiationNumber = !string.IsNullOrEmpty(ds.Tables[1].Rows[0]["CECAccreditationNumber"].ToString()) ? ds.Tables[1].Rows[0]["CECAccreditationNumber"].ToString() : "";
                    }
                    jobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + CECAccerdiationNumber + " " + installerName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesignForJob + "</b>";
                }



                return Json(new { success = true, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpPost]
        [AcceptVerbs(HttpVerbs.Post)]
        public JsonResult RequestJobData(int jobId, int jobSchedulingId)
        {
            try
            {
                _job.InsertJobRequestData(jobId, jobSchedulingId);
                return Json(new { status = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpGet]
        public JsonResult SetAutoSignSettingsDataInJob(int JobId, int SolarCompanyId, int UserId)
        {
            JobRetailerSetting jobRetailerSetting = new JobRetailerSetting();
            DataSet ds = _job.GetAutoSignSettingsDataForJob(JobId, SolarCompanyId, UserId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                bool IssubContractor = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsSubContractor"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsSubContractor"].ToString()) : false;
                bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                if (!string.IsNullOrEmpty(jobRetailerSetting.Signature))
                {
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + jobRetailerSetting.JobRetailerUserId + "\\");
                    if (Directory.Exists(ProofDocumentsFolder))
                    {
                        string path = Path.Combine(ProofDocumentsFolder + "\\" + jobRetailerSetting.Signature);

                        if (System.IO.File.Exists(path))
                        {
                            jobRetailerSetting.Signature = jobRetailerSetting.Signature;


                            string FileName = string.Empty;
                            FileName = JobId + "_RetailerSign" + "_" + jobRetailerSetting.JobRetailerUserId + "." + "png";
                            string srcFileName = "RetailerSign" + "_" + jobRetailerSetting.JobRetailerUserId + "." + "png";
                            string srcPath = Path.Combine(ProofDocumentsFolder + "\\" + srcFileName);
                            string destPath = Path.Combine(ProofDocumentsFolder + "\\" + FileName);
                            if (System.IO.File.Exists(srcPath))
                            {
                                System.IO.File.Copy(srcPath, destPath, true);
                            }
                            _solarCompanyService.SaveAutoSignSettingsData(jobRetailerSetting.JobRetailerUserId, jobRetailerSetting.PositionHeld, IssubContractor, IsEmployee, FileName, IsChangedDesign, JobId, jobRetailerSetting.Latitude, jobRetailerSetting.Longitude);
                            jobRetailerSetting.base64Img = ImageToBase64(destPath);

                            //            jobRetailerSetting.Signature = FileName;
                        }
                        else
                        {
                            jobRetailerSetting.Signature = "";
                            return Json(new { success = false, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
                        }
                    }
                }

                else
                {
                    return Json(new { success = false, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
                }

            }


            string installerName = string.Empty;
            string CECAccerdiationNumber = string.Empty;
            DataSet dsDataForJob = _job.GetJobRetailerSettingDataByJobId(JobId);
            if (dsDataForJob != null && dsDataForJob.Tables.Count > 0 && dsDataForJob.Tables[0].Rows.Count > 0)
            {

                jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(dsDataForJob.Tables[0].Rows[0]["RetailerUserId"].ToString());
                jobRetailerSetting.RepresentativeName = dsDataForJob.Tables[0].Rows[0]["name"].ToString();
                jobRetailerSetting.PositionHeld = dsDataForJob.Tables[0].Rows[0]["PositionHeld"].ToString();
                jobRetailerSetting.PositionHeldlbl = dsDataForJob.Tables[0].Rows[0]["PositionHeld"].ToString();
                bool IsEmployee = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(dsDataForJob.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                bool IsChangedDesign = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(dsDataForJob.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                jobRetailerSetting.Signature = dsDataForJob.Tables[0].Rows[0]["Signature"].ToString();
                jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["SignedBy"].ToString()) ? dsDataForJob.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(dsDataForJob.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                jobRetailerSetting.Latitude = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["Latitude"].ToString()) ? dsDataForJob.Tables[0].Rows[0]["Latitude"].ToString() : "";
                jobRetailerSetting.Longitude = !string.IsNullOrEmpty(dsDataForJob.Tables[0].Rows[0]["Longitude"].ToString()) ? dsDataForJob.Tables[0].Rows[0]["Longitude"].ToString() : "";
                string isEmployeeOrSSC = jobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : jobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                string isChangedDesignForJob = jobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                if (dsDataForJob.Tables.Count > 1 && dsDataForJob.Tables[1].Rows.Count > 0)
                {
                    installerName = !string.IsNullOrEmpty(dsDataForJob.Tables[1].Rows[0]["InstallerName"].ToString()) ? dsDataForJob.Tables[1].Rows[0]["InstallerName"].ToString() : "";
                    CECAccerdiationNumber = !string.IsNullOrEmpty(dsDataForJob.Tables[1].Rows[0]["CECAccreditationNumber"].ToString()) ? dsDataForJob.Tables[1].Rows[0]["CECAccreditationNumber"].ToString() : "";
                }
                jobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + CECAccerdiationNumber + " " + installerName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesignForJob + "</b>";
            }
            return Json(new { success = true, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public JsonResult GetAutoSignSettingsDataRetailerIdWise(int JobId, int SolarCompanyId, int userid = 0)
        {
            JobRetailerSetting jobRetailerSetting = new JobRetailerSetting();

            DataSet ds = _job.GetJobRetailerSettingDataRetailerIdWise(JobId, SolarCompanyId, userid);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                jobRetailerSetting.JobRetailerUserId = Convert.ToInt32(ds.Tables[0].Rows[0]["RetailerUserId"].ToString());
                jobRetailerSetting.RepresentativeName = ds.Tables[0].Rows[0]["name"].ToString();
                jobRetailerSetting.PositionHeld = ds.Tables[0].Rows[0]["PositionHeld"].ToString();
                bool IsEmployee = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                bool IsChangedDesign = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(ds.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                jobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                jobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                jobRetailerSetting.Signature = ds.Tables[0].Rows[0]["Signature"].ToString();
                jobRetailerSetting.SignedBy = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedBy"].ToString()) ? ds.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                jobRetailerSetting.SignedDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                jobRetailerSetting.Latitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Latitude"].ToString()) ? ds.Tables[0].Rows[0]["Latitude"].ToString() : "";
                jobRetailerSetting.Longitude = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["Longitude"].ToString()) ? ds.Tables[0].Rows[0]["Longitude"].ToString() : "";
                if (!string.IsNullOrEmpty(jobRetailerSetting.Signature))
                {
                    string proofDocumentsFolder = ProjectSession.ProofDocuments;
                    string ProofDocumentsFolder = Path.Combine(proofDocumentsFolder + "\\" + "UserDocuments" + "\\" + jobRetailerSetting.JobRetailerUserId + "\\");
                    if (Directory.Exists(ProofDocumentsFolder))
                    {

                        string path = Path.Combine(ProofDocumentsFolder + "\\" + jobRetailerSetting.Signature);

                        if (System.IO.File.Exists(path))
                        {

                            jobRetailerSetting.base64Img = ImageToBase64(path);
                        }
                    }
                }
                //string isEmployeeOrSSC = jobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : jobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                //string isChangedDesign = jobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                //jobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + createJob.InstallerView.CECAccreditationNumber + " " + createJob.InstallerView.FirstName + " " + createJob.InstallerView.LastName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesign + "</b>";
            }

            return Json(new { success = true, data = jobRetailerSetting }, JsonRequestBehavior.AllowGet);
        }
        public string ImageToBase64(string path)
        {
            string base64String = null;
            using (System.Drawing.Image image = System.Drawing.Image.FromFile(path))
            {
                using (MemoryStream m = new MemoryStream())
                {
                    image.Save(m, image.RawFormat);
                    byte[] imageBytes = m.ToArray();
                    base64String = Convert.ToBase64String(imageBytes);
                    return "data:image/png;base64," + base64String;
                }
            }
        }
        [HttpPost]
        public ContentResult ManageJobRequestLogs(string data)
        {
            Helper.Log.WriteLog("Call Grid With Params " + data);
            return Content("");
        }

        public int ReProductVerificationForCertChanges(int JobId, bool reProductVerification = true)
        {
            int statusflg = 0;

            string JobHistoryMessgeForPV = "sent SPV product verification request after Trade Job or before doing IV- <b class=\"blue-title\">(" + JobId + ") JobRefNo</b>";
            FormBot.Helper.Log.WriteLog("enter In pV:1 JObid:" + JobId);
            Common.SaveJobHistorytoXML(JobId, JobHistoryMessgeForPV, "Statuses", "ProductVerification", ProjectSession.LoggedInName, false);
            DataSet dsSPV = _job.GetSPVVerificationUrlSerialNumber(JobId, reProductVerification);
            if (reProductVerification == true)
            {
                DataSet dsInstallationVerification = _job.GetInstallationVerificationStatus(JobId);
                bool? isSpvInstallationVerification = false;
                if (dsInstallationVerification.Tables.Count > 0 && dsInstallationVerification.Tables[0] != null && dsInstallationVerification.Tables[0].Rows.Count > 0)
                {
                    isSpvInstallationVerification = dsInstallationVerification.Tables[0].Rows[0]["IsSPVInstallationVerified"].ToString() != "" ? Convert.ToBoolean(dsInstallationVerification.Tables[0].Rows[0]["IsSPVInstallationVerified"].ToString()) : false;
                }
                if (isSpvInstallationVerification == true)
                {
                    statusflg = 1;

                }
                else
                {
                    var ProductVerificationXMLPath = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ProductVerificationXMLPath);
                    var ServerCertificate = Path.Combine(ProjectConfiguration.ProofDocumentsURL, ProjectConfiguration.ServerCertificate);
                    SPVVerification objSPVVerification = new SPVVerification(_spvLog, _job);
                    DataTable VerifiedSerialNumber = objSPVVerification.SPVProductVerification(dsSPV, ProductVerificationXMLPath, ServerCertificate, reProductVerification);

                    if (VerifiedSerialNumber.Columns[1].ColumnName == "IsPhotoAvailable")
                    {
                        DataRow[] NotExistsPhotoDR = VerifiedSerialNumber.Select("IsPhotoAvailable = " + "false");
                        List<string> lstNotExistPhoto = new List<string>();
                        if (NotExistsPhotoDR.Length > 0)
                        {
                            foreach (DataRow row in NotExistsPhotoDR)
                            {
                                lstNotExistPhoto.Add(row[0].ToString());
                            }
                        }
                        statusflg = 2;

                    }
                    else
                    {
                        var lstSerialNumber = _job.UpdateVerifiedSerialNumber(VerifiedSerialNumber, JobId);
                        statusflg = 3;
                    }

                }
            }
            return statusflg;
        }

        #region Prepare Filter for Grid
        public static void PrepareFilterForJobs(ref KendoFilter filter, ref List<KendoSort> sort, bool isarchive, List<string> Searchcols, string search)
        {
            if (sort == null || sort.Count == 0)
                sort = sort.AddItem(new KendoSort() { Dir = "desc", Field = "JobID" }).ToList();
            //if (Searchcols != null && !Searchcols.Contains("SerialNumbers"))
            //    Searchcols.Add("SerialNumbers");

            if (filter == null)
                filter = new KendoFilter() { Field = null, Filters = null, Logic = "and", Operator = null, Value = null };
            //if (filter.Logic == null)
            //    filter.Logic = "and";
            if (filter.Logic == null || (filter.Logic != null && filter.Logic == "or"))
                filter.Logic = "and";
            if (filter != null && filter.Filters != null && filter.Filters.Any())
            {
                foreach (var item in filter.Filters.ToList())
                {
                    if (item.Filters != null)
                    {
                        foreach (var subitems in item.Filters.ToList())
                        {
                            if (subitems.Field == "SolarCompany")
                            {
                                subitems.Field = "SolarCompanyId";
                            }

                            if (item.Field == "IsTraded")
                            {
                                item.Field = "TradeStatus";
                            }
                        }
                    }
                    if (item.Field == "SolarCompany")
                    {
                        item.Field = "SolarCompanyId";
                    }

                    if (item.Field == "IsTraded")
                    {
                        item.Field = "TradeStatus";
                    }
                }
            }

            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsDeleted", Operator = "eq", Value = isarchive }).ToList();
            filter.AddFilterItem("IsDeleted", KendoFilterOperator.eq.ToString(), isarchive);
            KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
            if (!string.IsNullOrEmpty(search) && (Searchcols != null || Searchcols.Count > 0))
            {
                for (int i = 0; i < Searchcols.Count; i++)
                {
                    int val = 0;

                    if (Searchcols[i].Equals("JobID"))
                    {
                        if (int.TryParse(search, out val))
                            filterSearchCols.AddFilterItem(Searchcols[i], KendoFilterOperator.eq.ToString(), val);
                        //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = Searchcols[i], Operator = "eq", Value = val }).ToList();
                    }
                    else
                    {
                        filterSearchCols.AddFilterItem(Searchcols[i], KendoFilterOperator.contains.ToString(), search.Trim().Replace("'", "''"));
                    }
                    //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = Searchcols[i], Operator = "contains", Value = search.Trim().Replace("'", "''") }).ToList();
                }
            }
            if (filterSearchCols.Filters != null)
                filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
        }

        public static void PrepareFilterForSTC(ref KendoFilter filter,
            int RamId, string RecCode, int StageId, string refJobId,
            string ownerName, string isAllSCAjobView, int isSPVRequired = -1, int? isSPVInstallationVerified = -1)
        {
            #region Initial Filter Configuration Reset - When Multi select option get selected then filters are being prepared with or operators which won't work as we need to append more filters
            if (filter == null)
                filter = new KendoFilter() { Field = null, Filters = null, Logic = "and", Operator = null, Value = null };
            if (filter.Logic == null)
                filter.Logic = "and";
            if (filter != null && filter.Filters != null && filter.Filters.Any())
            {
                string[] _fields = new string[] { "STCStatus", "SolarCompany" };
                foreach (var item in filter.Filters.ToList())
                {
                    if (item.Filters != null)
                    {
                        foreach (var subitems in item.Filters.ToList())
                        {
                            if (_fields.Contains(subitems.Field))
                                subitems.Field += "Id";

                            if (subitems.Field == "ComplianceOfficer")
                                subitems.Field = "ComplianceBy";

                            if (subitems.Field == "AccountManager")
                                subitems.Field = "RamId";

                            if (subitems.Field == "IsSPVInstallationVerified" && subitems.Value.ToString().Trim() == "")
                            {
                                subitems.Operator = KendoFilterOperator.neq.ToString();
                                subitems.Value = true;
                                KendoFilter filterSearchCols = new KendoFilter() { Logic = "and", Filters = null };
                                filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), false);
                                if (filterSearchCols.Filters != null)
                                {
                                    filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                                }
                            }
                        }
                    }
                    if (_fields.Contains(item.Field))
                        item.Field += "Id";

                    if (item.Field == "ComplianceOfficer")
                        item.Field = "ComplianceBy";

                    if (item.Field == "AccountManager")
                        item.Field = "RamId";

                    if (item.Field == "IsSPVInstallationVerified" && item.Value.ToString().Trim() == "")
                    {
                        item.Operator = KendoFilterOperator.neq.ToString();
                        item.Value = true;
                        KendoFilter filterSearchCols = new KendoFilter() { Logic = "and", Filters = null };
                        filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), false);
                        if (filterSearchCols.Filters != null)
                        {
                            filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                        }
                    }

                    //if (item.Field.ToLower() == "isspvinstallationverified" && item.Value == null)
                    //{
                    //item.Field = "";
                    //KendoFilter filterSearchCols = new KendoFilter() { Logic = "and", Filters = null };
                    //filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), true);
                    //filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), false);
                    //if (filterSearchCols.Filters != null)
                    //    item.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                    //}
                }
            }
            if (filter.Logic == "or")
            {
                KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
                foreach (var item in filter.Filters.ToList())
                {
                    filterSearchCols.Filters = filterSearchCols.Filters.AddItem(item).ToList();
                }

                if (filterSearchCols.Filters != null)
                {
                    filter.Filters = null;
                    filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                }
                filter.Logic = "and";
            }
            #endregion
            filter.AddFilterItem("IsDeleted", KendoFilterOperator.eq.ToString(), false);
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsDeleted", Operator = "eq", Value = false }).ToList();

            if (!(ProjectSession.UserTypeId == 5 && Convert.ToBoolean(isAllSCAjobView)))
            {
                if (RamId != 0)
                    filter.AddFilterItem("RamId", KendoFilterOperator.eq.ToString(), RamId);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "RamId", Operator = "eq", Value = RamId }).ToList();
            }
            if (!string.IsNullOrEmpty(RecCode))
                filter.AddFilterItem("PVDSWHCode", KendoFilterOperator.contains.ToString(), RecCode.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "PVDSWHCode", Operator = "contains", Value = RecCode.Trim() }).ToList();
            if (StageId != 0)
            {
                if (StageId == -1)
                {
                    filter.AddFilterItem("IsUrgentSubmission", KendoFilterOperator.eq.ToString(), true);
                    KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 11);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 13);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 14);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 16);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 17);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 18);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 19);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 20);
                    filterSearchCols.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), 21);
                    if (filterSearchCols.Filters != null)
                        filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                    //filter.AddFilterItem("STCStatusId", KendoFilterOperator.inarray.ToString(), new List<int>() { 11, 13, 14, 16, 17, 18, 19, 20, 21 });
                }
                else
                    filter.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), StageId);
            }
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCStatusId", Operator = "eq", Value = StageId }).ToList();
            if (!string.IsNullOrEmpty(refJobId) && int.TryParse(refJobId, out int jobId))
            {
                KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
                filterSearchCols.AddFilterItem("JobID", KendoFilterOperator.eq.ToString(), refJobId.Trim());
                filterSearchCols.AddFilterItem("RefNumberOwnerName", KendoFilterOperator.contains.ToString(), refJobId.Trim());
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "JobID", Operator = "eq", Value = refJobId.Trim() }).ToList();
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "RefNumberOwnerName", Operator = "contains", Value = refJobId.Trim() }).ToList();
                if (filterSearchCols.Filters != null)
                    filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
            }
            else if (!string.IsNullOrEmpty(refJobId))
                filter.AddFilterItem("RefNumberOwnerName", KendoFilterOperator.contains.ToString(), refJobId.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "RefNumberOwnerName", Operator = "contains", Value = refJobId.Trim() }).ToList();
            if (!string.IsNullOrEmpty(ownerName))
            {
                KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
                filterSearchCols.AddFilterItem("OwnerName", KendoFilterOperator.contains.ToString(), ownerName.Trim());
                filterSearchCols.AddFilterItem("InstallationAddress", KendoFilterOperator.contains.ToString(), ownerName.Trim());
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "OwnerName", Operator = "contains", Value = ownerName.Trim() }).ToList();
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "InstallationAddress", Operator = "contains", Value = ownerName.Trim() }).ToList();
                if (filterSearchCols.Filters != null)
                    filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
            }
            if (isSPVInstallationVerified != -1)
            {
                if (isSPVInstallationVerified == -2)
                {
                    KendoFilter filterSearchCols = new KendoFilter() { Logic = "and", Filters = null };
                    filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), true);
                    filterSearchCols.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.neq.ToString(), false);
                    if (filterSearchCols.Filters != null)
                        filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();

                    //filter.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.eq.ToString(), null);
                    //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVInstallationVerified", Operator = "eq", Value = null }).ToList();
                    //searchQuery += "(IsSPVInstallationVerified is NULL)";
                }
                else
                {
                    filter.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.eq.ToString(), isSPVInstallationVerified);
                    //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVInstallationVerified", Operator = "eq", Value = isSPVInstallationVerified }).ToList();
                }
            }
            if (isSPVRequired != -1)
            {
                filter.AddFilterItem("IsSPVRequired", KendoFilterOperator.eq.ToString(), isSPVRequired);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVRequired", Operator = "eq", Value = isSPVRequired }).ToList();
            }
        }

        private static void PrepareFilterForSTCStatistics(ref KendoFilter filter, ref List<KendoSort> sort, int RamId, string RecCode, int StageId, string refJobId, string ownerName, string isAllSCAjobView, int? isSPVRequired = -1, int? isSPVInstallationVerified = -1, string ComplianceOfficerId = "", string submissionfromdate = "", string submissiontodate = "", string settlementfromdate = "", string settlementtodate = "", string isInvoiced = "", string SettlementTermId = "", string installationAddress = "", string sortCol = "", string sortDir = "")
        {
            if (sortCol != "" && sortCol.ToLower() == "id")
                sort = sort.AddItem(new KendoSort() { Dir = "Desc", Field = "STCSubmissionDate" }).ToList();
            else
                sort = sort.AddItem(new KendoSort() { Dir = sortDir, Field = sortCol }).ToList();

            filter = new KendoFilter() { Field = null, Filters = null, Logic = "and", Operator = null, Value = null };
            filter.AddFilterItem("IsDeleted", KendoFilterOperator.eq.ToString(), false);
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsDeleted", Operator = "eq", Value = false }).ToList();
            if (!(ProjectSession.UserTypeId == 5 && Convert.ToBoolean(isAllSCAjobView)))
            {
                if (RamId != 0)
                    filter.AddFilterItem("RamId", KendoFilterOperator.eq.ToString(), RamId);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "RamId", Operator = "eq", Value = RamId }).ToList();
            }
            if (!string.IsNullOrEmpty(RecCode))
                filter.AddFilterItem("PVDSWHCode", KendoFilterOperator.contains.ToString(), RecCode.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "PVDSWHCode", Operator = "contains", Value = RecCode.Trim() }).ToList();
            if (StageId != 0)
                filter.AddFilterItem("STCStatusId", KendoFilterOperator.eq.ToString(), StageId);
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCStatusId", Operator = "eq", Value = StageId }).ToList();
            if (!string.IsNullOrEmpty(refJobId) && int.TryParse(refJobId, out int jobId))
            {
                KendoFilter filterSearchCols = new KendoFilter() { Logic = "or", Filters = null };
                filterSearchCols.AddFilterItem("JobID", KendoFilterOperator.eq.ToString(), refJobId.Trim());
                filterSearchCols.AddFilterItem("RefNumberOwnerName", KendoFilterOperator.contains.ToString(), refJobId.Trim());
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "JobID", Operator = "eq", Value = refJobId.Trim() }).ToList();
                //filterSearchCols.Filters = filterSearchCols.Filters.AddItem(new KendoFilter() { Field = "RefNumberOwnerName", Operator = "contains", Value = refJobId.Trim() }).ToList();
                if (filterSearchCols.Filters != null)
                    filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
                //filter.Filters = filter.Filters.AddItem(filterSearchCols).ToList();
            }
            else if (!string.IsNullOrEmpty(refJobId))
                filter.AddFilterItem("RefNumberOwnerName", KendoFilterOperator.contains.ToString(), refJobId.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "RefNumberOwnerName", Operator = "contains", Value = refJobId.Trim() }).ToList();
            if (!string.IsNullOrEmpty(ownerName))
                filter.AddFilterItem("OwnerName", KendoFilterOperator.contains.ToString(), ownerName.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "OwnerName", Operator = "contains", Value = ownerName.Trim() }).ToList();
            if (!string.IsNullOrEmpty(installationAddress))
                filter.AddFilterItem("InstallationAddress", KendoFilterOperator.contains.ToString(), installationAddress.Trim());
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "InstallationAddress", Operator = "contains", Value = installationAddress.Trim() }).ToList();

            if (isSPVInstallationVerified != -1)
            {
                if (isSPVInstallationVerified == -2)
                    filter.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.eq.ToString(), null);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVInstallationVerified", Operator = "eq", Value = null }).ToList();
                else
                    filter.AddFilterItem("IsSPVInstallationVerified", KendoFilterOperator.eq.ToString(), isSPVInstallationVerified);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVInstallationVerified", Operator = "eq", Value = isSPVInstallationVerified }).ToList();
            }
            if (isSPVRequired != -1)
                filter.AddFilterItem("IsSPVRequired", KendoFilterOperator.eq.ToString(), isSPVRequired);
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsSPVRequired", Operator = "eq", Value = isSPVRequired }).ToList();
            if (!string.IsNullOrEmpty(ComplianceOfficerId) && Convert.ToInt32(ComplianceOfficerId) != 0)
                filter.AddFilterItem("ComplianceBy", KendoFilterOperator.eq.ToString(), Convert.ToInt32(ComplianceOfficerId));
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "ComplianceBy", Operator = "eq", Value = Convert.ToInt32(ComplianceOfficerId) }).ToList();
            if (!string.IsNullOrEmpty(submissionfromdate) && !string.IsNullOrEmpty(submissiontodate))
            {
                filter.AddFilterItem("STCSubmissionDate", KendoFilterOperator.gt.ToString(), Convert.ToDateTime(submissionfromdate));
                filter.AddFilterItem("STCSubmissionDate", KendoFilterOperator.lt.ToString(), Convert.ToDateTime(submissiontodate));
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCSubmissionDate", Operator = "gt", Value = Convert.ToDateTime(submissionfromdate) }).ToList();
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCSubmissionDate", Operator = "lt", Value = Convert.ToDateTime(submissiontodate) }).ToList();
            }
            if (!string.IsNullOrEmpty(settlementfromdate) && !string.IsNullOrEmpty(settlementtodate))
            {
                filter.AddFilterItem("STCSettlementDate", KendoFilterOperator.gt.ToString(), Convert.ToDateTime(settlementfromdate));
                filter.AddFilterItem("STCSettlementDate", KendoFilterOperator.lt.ToString(), Convert.ToDateTime(settlementtodate));
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCSettlementDate", Operator = "gt", Value = Convert.ToDateTime(settlementfromdate) }).ToList();
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCSettlementDate", Operator = "lt", Value = Convert.ToDateTime(settlementtodate) }).ToList();
            }
            if (!string.IsNullOrEmpty(SettlementTermId))
                filter.AddFilterItem("STCSettlementTerm", KendoFilterOperator.eq.ToString(), Convert.ToInt32(SettlementTermId));
            //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "STCSettlementTerm", Operator = "eq", Value = Convert.ToInt32(SettlementTermId) }).ToList();
            if (!string.IsNullOrEmpty(isInvoiced) && isInvoiced != "0")
            {
                bool bit_isInvoiced = Convert.ToInt32(isInvoiced) == 1 ? true : false;
                filter.AddFilterItem("IsInvoiced", KendoFilterOperator.eq.ToString(), bit_isInvoiced);
                //filter.Filters = filter.Filters.AddItem(new KendoFilter() { Field = "IsInvoiced", Operator = "eq", Value = bit_isInvoiced }).ToList();
            }
        }

        #endregion
        [HttpGet]
        public JsonResult GetStartEndDateForPanel(string manufacturer, string model)
        {
            string startDate = string.Empty;
            string endDate = string.Empty;
            //string decodeBrand= HttpUtility.UrlDecode(manufacturer);
            // string decodeModel= HttpUtility.UrlDecode(model);

            try
            {
                DataSet ds = _job.GetStartEndDateForPanel(manufacturer, model);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    startDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["CECApprovedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["CECApprovedDate"]).ToString("dd/MM/yyyy") : "";
                    endDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["ExpiryDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["ExpiryDate"]).ToString("dd/MM/yyyy") : "";
                }
                return Json(new { status = true, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in GetStartDateEndDateForPanel: ");
                return Json(new { status = false, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetStartEndDateForInverter(string Brand, string Model, string Series)
        {
            string startDate = string.Empty;
            string endDate = string.Empty;
            //string decodeBrand= HttpUtility.UrlDecode(manufacturer);
            // string decodeModel= HttpUtility.UrlDecode(model);

            try
            {
                DataSet ds = _job.GetStartEndDateForInverter(Brand, Model, Series);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    startDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["CECApprovedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["CECApprovedDate"]).ToString("dd/MM/yyyy") : "";
                    endDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["ExpiryDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["ExpiryDate"]).ToString("dd/MM/yyyy") : "";
                }
                return Json(new { status = true, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in GetStartDateEndDateForInverter: ");
                return Json(new { status = false, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult GetStartEndDateForSWHBrandModel(string Brand, string Model)
        {
            string startDate = string.Empty;
            string endDate = string.Empty;
            //string decodeBrand= HttpUtility.UrlDecode(manufacturer);
            // string decodeModel= HttpUtility.UrlDecode(model);

            try
            {
                DataSet ds = _job.GetStartEndDateForSWHBrandModel(Brand, Model);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    startDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["CECApprovedDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["CECApprovedDate"]).ToString("dd/MM/yyyy") : "";
                    endDate = !string.IsNullOrEmpty(ds.Tables[0].Rows[0]["ExpiryDate"].ToString()) ? Convert.ToDateTime(ds.Tables[0].Rows[0]["ExpiryDate"]).ToString("dd/MM/yyyy") : "";
                }
                return Json(new { status = true, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in GetStartDateEndDateForSWH: ");
                return Json(new { status = false, startDate = startDate, endDate = endDate }, JsonRequestBehavior.AllowGet);
            }
        }
        [HttpGet]
        public ActionResult ChangeSCAandRA()
        {
            if (ProjectSession.LoggedInUserId > 0 && (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3))
            {
                return View();
            }
            else
            {
                return RedirectToAction("Logout", "Account");
            }
        }

        [HttpGet]
        public JsonResult GetSolarCompanyByResellerId(string id)
        {
            int ID = (id != "null" && !string.IsNullOrEmpty(id)) ? Convert.ToInt32(id) : 0;
            List<SelectListItem> items = _jobSettingBAL.GetSolarCompanyByResellerID(ID).Select(a => new SelectListItem { Text = a.CompanyName, Value = a.SolarCompanyId.ToString() }).ToList();
            //items.Add(new SelectListItem() { Value = "-1", Text = "All" });
            return Json(items, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult ChangeSCAandRAByJobID(int ResellerID, int SolarCompanyID, string JobIDs)
        {
            //string JobID = JobIDs.Replace("", string.Empty);
            try
            {
                string splitJobID = Regex.Replace(JobIDs, @"\s+", "");
                //bool Jobexists = _job.CheckJobexists(JobIDs);
                List<string> JobIDlist = splitJobID.Split(',').ToList();
                List<string> InvalidJobID = new List<string>();
                List<string> ValidJobID = new List<string>();
                if (JobIDlist.Count > 0)
                {
                    for (int i = 0; i < JobIDlist.Count; i++)
                    {
                        bool Jobexists = _job.CheckJobexists(Convert.ToInt32(JobIDlist[i]));
                        if (!Jobexists)
                        {
                            InvalidJobID.Add(JobIDlist[i]);
                        }
                        else
                        {
                            ValidJobID.Add(JobIDlist[i]);
                        }
                    }
                }
                string ValidJobs = string.Join(",", ValidJobID.ToArray());
                string InvalidJobs = string.Join(",", InvalidJobID.ToArray());
                if (!string.IsNullOrEmpty(ValidJobs))
                {
                    _job.ChangeSCARAInJob(ResellerID, SolarCompanyID, ValidJobs);
                }
                return Json(new { status = true, InvalidJobs = InvalidJobs }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "exception in changeSCARAInjob");
                return Json(new { status = false }, JsonRequestBehavior.AllowGet);
            }

        }
        public DataTable GetLogFilesDataTable()
        {
            DataTable dtLogFiles = new DataTable();
            dtLogFiles.Columns.Add("JobDocumentId", typeof(int));
            dtLogFiles.Columns.Add("JobId", typeof(int));
            dtLogFiles.Columns.Add("DocumentId", typeof(int));
            dtLogFiles.Columns.Add("isUpload", typeof(bool));
            dtLogFiles.Columns.Add("CreatedDate", typeof(DateTime));
            dtLogFiles.Columns.Add("CreatedBy", typeof(int));
            dtLogFiles.Columns.Add("ModifiedDate", typeof(DateTime));
            dtLogFiles.Columns.Add("ModifiedBy", typeof(int));
            dtLogFiles.Columns.Add("IsDeleted", typeof(bool));
            dtLogFiles.Columns.Add("Path", typeof(string));
            dtLogFiles.Columns.Add("JsonData", typeof(string));
            dtLogFiles.Columns.Add("Type", typeof(string));
            dtLogFiles.Columns.Add("VendorJobDocumentId", typeof(string));
            dtLogFiles.Columns.Add("IsSPVXml", typeof(bool));
            dtLogFiles.Columns.Add("IsRecZip", typeof(bool));
            dtLogFiles.Columns.Add("IsCompleted", typeof(bool));
            dtLogFiles.Columns.Add("SentEmailStatus", typeof(string));
            dtLogFiles.Columns.Add("IsLogFile", typeof(bool));
            return dtLogFiles;
        }
        /// <summary>
        /// download gps log files as zip
        /// </summary>
        /// <param name="jobId"></param>
        public JsonResult GPSLogFilesExists(int jobId)
        {
            if (jobId > 0)
            {
                string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "JobDocuments/" + jobId + "/Log/";
                DirectoryInfo dir = new DirectoryInfo(path);
                if (dir.Exists)
                {
                    FileInfo[] Files = dir.GetFiles();
                    if (Files.Count() > 0)
                    {
                        //DownloadFile(jobId);
                        return Json(new { status = true, message = "File downloaded successfully!!!" }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { status = false, message = "File does not exists!!!" }, JsonRequestBehavior.AllowGet);
                    }
                }
                else
                {
                    return Json(new { status = false, message = "File does not exists!!!" }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(new { status = false, message = "File does not exists!!!" }, JsonRequestBehavior.AllowGet);
            }
        }

        public void DownloadGPSLogFiles(int jobId)
        {
            if (jobId > 0)
            {
                string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "JobDocuments/" + jobId + "/Log/";
                DirectoryInfo dir = new DirectoryInfo(path);
                FileInfo[] Files = dir.GetFiles();
                using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                {
                    zip.AlternateEncodingUsage = ZipOption.AsNecessary;

                    foreach (FileInfo file in Files)
                    {

                        var documentFullPath = path + file.Name;
                        if (System.IO.File.Exists(documentFullPath))
                        {
                            zip.AddFile(documentFullPath, "");
                        }
                    }
                    Response.Clear();
                    Response.BufferOutput = false;
                    Response.ContentType = "application/zip";
                    Response.AddHeader("content-disposition", "attachment; filename=" + jobId + "_GPSLogs.zip");
                    zip.Save(Response.OutputStream);
                    Response.End();
                }
            }
        }

        [HttpGet]
        public JsonResult LoadAllPhotos(string JobId)
        {
            CreateJob createJob = new CreateJob();
            createJob.chkPhotosAll = LoadAllPhotosOfNewJob(Convert.ToInt32(JobId));
            var photoView = ControlToString("~/Views/Job/_JobPhotosNewTabular.cshtml", createJob);
            return Serializer.GetJsonResult(new { photoView });
        }

        public JsonResult LoadSerialNumber(string JobId)
        {
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobByIDTabWise(Convert.ToInt32(JobId), 8);
            createJob.UserType = ProjectSession.UserTypeId;
            createJob.SerialNumberwithPhotosAvaibilityList = CheckSerialNumberPhotoAvailability(Convert.ToInt32(JobId));
            var SerialTab = ControlToString("~/Views/Job/_DocumentsSerialNumberView.cshtml", createJob);
            return Serializer.GetJsonResult(new { SerialTab });
        }

        public void GetFirstTabular(string id, int jobId, bool isTabularView, ref CreateJob createJob)
        {
            ProjectSession.IsTabularView = isTabularView;

            if (jobId > 0)
            {
                //createJob = _job.GetJobByIDTabWise(Convert.ToInt32(jobId), 3);
                //CreateJob newcreatejob = new CreateJob();
                //newcreatejob.lstCustomDetails = ReplaceSeperatorValue(createJob.lstCustomDetails);
                createJob = _job.GetJobByIDTabWise(Convert.ToInt32(jobId), 1);
                ViewBag.STCStatusText = GetEnumDescription((SystemEnums.STCJobStatus)createJob.STCStatus);
                ViewBag.SettlementTerm = createJob.STCSettlementTerm;
                ViewBag.IsPartialValidForSTCInvoice = createJob.IsPartialValidForSTCInvoice;
                ViewBag.IsInvoiced = createJob.IsInvoiced;

                createJob.OwnerSignatureSelfie = (string.IsNullOrEmpty(createJob.OwnerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.OwnerSignatureSelfie;
                //createJob.lstCustomDetails = newcreatejob.lstCustomDetails;
                int SSCID = Convert.ToInt32(createJob.BasicDetails.SSCID);
                List<SelectListItem> SSCItemsList = _job.GetSSCUserByJbID(jobId, ProjectSession.SolarCompanyId).Select(a => new SelectListItem { Text = a.FirstName + ' ' + a.LastName, Value = a.UserID.ToString() }).ToList();
                List<SelectListItem> SSCItems = SSCItemsList.Where(x => x.Value.Contains(Convert.ToString(SSCID))).ToList();
                if (SSCItems.Count > 0)
                {
                    createJob.BasicDetails.SSCName = SSCItems[0].Text;
                }

                DataSet commonjobWithSameAddress = _job.CommonJobsWithSameInstallationAddress(jobId);
                if (commonjobWithSameAddress.Tables.Count > 0)
                {
                    createJob.CommonJobsWithSameInstallationAddress = commonjobWithSameAddress.Tables[0].Rows.Count > 0 ? commonjobWithSameAddress.Tables[0].ToListof<CommonJobsWithSameInstallationAddress>() : new List<CommonJobsWithSameInstallationAddress>();
                }

                // check user has rights to access current job
                if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
                {
                    bool isAllow = false;
                    if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && (createJob.BasicDetails.ResellerId == ProjectSession.ResellerId))
                        isAllow = true;
                    else if ((ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8) && (createJob.BasicDetails.SolarCompanyId == ProjectSession.SolarCompanyId))
                        isAllow = true;
                    else if (ProjectSession.UserTypeId == 6 && ((createJob.BasicDetails.SSCID == ProjectSession.LoggedInUserId || createJob.BasicDetails.CreatedBy == ProjectSession.LoggedInUserId)))
                        isAllow = true;
                    else if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9 || ProjectSession.UserTypeId == 10)
                    {
                        if (createJob.ElectricianData.Rows.Count > 0)
                        {
                            for (int data = 0; data < createJob.ElectricianData.Rows.Count; data++)
                            {
                                if (ProjectSession.LoggedInUserId.ToString() == createJob.ElectricianData.Rows[data]["UserId"].ToString())
                                {
                                    isAllow = true;
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        isAllow = false;
                    }

                    if (!isAllow)
                    {
                        //return RedirectToAction("Index");
                    }
                }

                /* For warning section and jobs with same install date and installer */
                if (jobId > 0 && createJob.BasicDetails.InstallerID > 0 && !string.IsNullOrEmpty(Convert.ToString(createJob.BasicDetails.InstallationDate)))
                {
                    //createJob.CommonJobsWithSameInstallDateAndInstaller = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, Convert.ToInt32(createJob.BasicDetails.InstallerID), Convert.ToString(createJob.BasicDetails.InstallationDate));
                    DataSet ds = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, Convert.ToInt32(createJob.BasicDetails.InstallerID), Convert.ToString(createJob.BasicDetails.InstallationDate));
                    if (ds.Tables.Count > 0)
                    {
                        createJob.CommonJobsWithSameInstallDateAndInstaller = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                        createJob.CommonJobsWithSameInstallDateAndInstallerAndFailedStcStatus = ds.Tables[1].Rows.Count > 0 ? ds.Tables[1].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                    }
                }

                //WriteToLogFile("3 : after GetCommonSerialByID" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                createJob.Guid = Convert.ToString(jobId);
                createJob.JobID = jobId;
                createJob.BasicDetails.strInstallationDateTemp = createJob.BasicDetails.InstallationDate != null ? createJob.BasicDetails.InstallationDate.Value.ToString("yyyy/MM/dd") : "";
                createJob.BasicDetails.strSoldByDate = createJob.BasicDetails.SoldByDate != null ? createJob.BasicDetails.SoldByDate.Value.ToString("yyyy/MM/dd") : "";

                createJob.InstallerSignature = createJob.InstallerSignature != null ? createJob.InstallerSignature.Replace("\\", "/") : null;
                createJob.DesignerSignature = createJob.DesignerSignature != null ? createJob.DesignerSignature.Replace("\\", "/") : null;
                createJob.ElectricianSignature = createJob.ElectricianSignature != null ? createJob.ElectricianSignature.Replace("\\", "/") : null;
                createJob.OwnerSignature = createJob.OwnerSignature != null ? createJob.OwnerSignature.Replace("\\", "/") : null;

                createJob.BasicDetails.InstallerSignature = createJob.BasicDetails.InstallerSignature != null ? createJob.BasicDetails.InstallerSignature.Replace("\\", "/") : "";
                createJob.BasicDetails.DesignerSignature = createJob.BasicDetails.DesignerSignature != null ? createJob.BasicDetails.DesignerSignature.Replace("\\", "/") : "";
                createJob.BasicDetails.ElectricianSignature = createJob.BasicDetails.ElectricianSignature != null ? createJob.BasicDetails.ElectricianSignature.Replace("\\", "/") : "";
                createJob.BasicDetails.OwnerSignature = createJob.BasicDetails.OwnerSignature != null ? createJob.BasicDetails.OwnerSignature.Replace("\\", "/") : "";


                ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
                createJob.JobID = jobId;
                createJob.Signature = createJob.JobElectricians.Signature;

                if (!string.IsNullOrEmpty(createJob.BasicDetails.GSTDocument))
                {
                    createJob.BasicDetails.MimeType = MimeMapping.GetMimeMapping(createJob.BasicDetails.GSTDocument).Split('/')[0];
                }

                createJob.UserType = ProjectSession.UserTypeId;

                //WriteToLogFile("9 : after GetJobStage" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                createJob.BasicDetails.PreviousJobStage = createJob.BasicDetails.JobStage;
                Helper.SystemEnums.JobPriority jobPriority;
                if (Enum.TryParse(createJob.BasicDetails.Priority.ToString(), out jobPriority))
                {
                    createJob.BasicDetails.PreviousPriority = jobPriority.ToString();
                }
                createJob.BasicDetails.PreviousSSCID = createJob.BasicDetails.SSCID;
                createJob.BasicDetails.PreviousSCOID = createJob.BasicDetails.ScoID;
                createJob.BasicDetails.CompanyABN = createJob.BasicDetails.CompanyABN;
                createJob.BasicDetails.Reseller = createJob.BasicDetails.Reseller;
                createJob.BasicDetails.PreviousRefNumber = createJob.BasicDetails.RefNumber;
                createJob.JobInstallationDetails.PreviousNMI = createJob.JobInstallationDetails.NMI;
                createJob.JobInstallationDetails.PreviousInstallingNewPanel = createJob.JobInstallationDetails.InstallingNewPanel;
                createJob.JobInstallationDetails.PreviousLocation = createJob.JobInstallationDetails.Location;
                createJob.JobInstallationDetails.PreviousSingleMultipleStory = createJob.JobInstallationDetails.SingleMultipleStory;

                ViewBag.JobId = jobId;
                List<JobWiseUsers> lstJobWiseUsers = _emailService.GetJobWiseUsers(jobId, ProjectSession.LoggedInUserId);

                Session["JobWiseUsers"] = lstJobWiseUsers;
                List<SelectListItem> jobWiseUsers = new List<SelectListItem>();

                ViewBag.JobWiseUsers = jobWiseUsers;

                if (createJob.JobUserComplianceID > 0)
                {
                    ViewBag.UserComplianceID = QueryString.QueryStringEncode("id=" + Convert.ToString(createJob.JobUserComplianceID));
                }
                else
                {
                    ViewBag.UserComplianceID = "0";
                }

                GetSTCStatusAndPreApprovalConnectionComment(Convert.ToInt32(jobId));
                STCBasicDetails stcBasicDetails = new STCBasicDetails();

                DataSet headerDetails = _job.GetHeaderDetails(jobId);
                if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
                {
                    DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                    createJob.Header = dr["Header"].ToString();
                }
                //if (createJob.BasicDetails.IsClassic)
                //{
                //    stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(createJob.BasicDetails.JobID), ProjectSession.UserTypeId);
                //    DataSet headerDetails = _job.GetHeaderDetails(jobId);
                //    if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
                //    {
                //        DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                //        createJob.Header = dr["Header"].ToString();
                //    }
                //}
                //else
                //{
                createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJob(id, true, false, _job, createJob.lstJobSchedule);
                string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";

                JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
                createJob.DocumentJson = result; // new JavaScriptSerializer().Serialize(result.Data);

                var getJobStageData = _emailService.GetStatusForPreApprovalAndConnection();
                List<SelectListItem> listJobStatusPreapproval = getJobStageData.Where(k => k.JobStage == 1).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                ViewBag.listJobStatusPreapproval = listJobStatusPreapproval;
                List<SelectListItem> listJobStatusConnection = getJobStageData.Where(k => k.JobStage == 2).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                ViewBag.listJobStatusConnection = listJobStatusConnection;

                int distributorId = createJob.JobInstallationDetails.DistributorID != null ? Convert.ToInt32(createJob.JobInstallationDetails.DistributorID) : 0;
                if (distributorId != 0)
                {
                    List<FormBot.Entity.Documents.DocumentSteps> preApprovalDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "PreApprovals", jobId);
                    List<FormBot.Entity.Documents.DocumentSteps> connectionDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "Connections", jobId);
                    createJob.lstPreApprovalDocumentSteps = preApprovalDocumentSteps;
                    createJob.lstConnectionDocumentSteps = connectionDocumentSteps;
                }
                //createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);
                createJob.STCDetailsModel = isTabularView ? CommonForSTCJob(jobId, true, true, createJob) : CommonForSTCJob(jobId, false, true, createJob);
                stcBasicDetails = createJob.STCDetailsModel.stcBasicDetails;
                createJob.Header = stcBasicDetails.Header;

                ViewData["Description"] = !string.IsNullOrEmpty(stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : stcBasicDetails.STCDescription;
                createJob.liLength = createJob.STCDetailsModel.ErrorLength;

                if (string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason) && (!string.IsNullOrEmpty(stcBasicDetails.STCDescription)) && stcBasicDetails.STCDescription.Contains("You may recreate"))
                {
                    //HtmlString(string.Format(stcBasicDetails.STCDescription));
                    createJob.JobSTCDetails.CertificateCreated = "Yes";
                    createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), "<br>", Environment.NewLine);
                    string s = createJob.JobSTCDetails.FailedReason;
                    var startTag = "following reason(s):";
                    int startIndex = s.IndexOf(startTag) + startTag.Length;
                    int endIndex = s.IndexOf("You may recreate", startIndex);
                    createJob.JobSTCDetails.FailedReason = s.Substring(startIndex, endIndex - startIndex).Trim();
                }
                if (!string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason))
                {
                    createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(createJob.JobSTCDetails.FailedReason), "<br>", Environment.NewLine);
                }
                createJob.JobSTCDetails.PreviousFailedReason = createJob.JobSTCDetails.FailedReason;
                //WriteToLogFile("end = " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                //}

                if (stcBasicDetails != null)
                {
                    ViewBag.STCStatusName = stcBasicDetails.Status;
                    ViewBag.STCDescription = HttpUtility.HtmlDecode(stcBasicDetails.STCDescription);
                    ViewBag.STCStatusId = stcBasicDetails.STCStatusId;
                    ViewBag.ColorCode = stcBasicDetails.ColorCode;
                }

                if (createJob != null)
                {
                    createJob.ElectricianSignature = Server.HtmlDecode(createJob.ElectricianSignature);
                    createJob.Signature = Server.HtmlDecode(createJob.Signature);

                    if (createJob.BasicDetails != null)
                        createJob.BasicDetails.ElectricianSignature = Server.HtmlDecode(createJob.BasicDetails.ElectricianSignature);

                    if (createJob.JobElectricians != null)
                        createJob.JobElectricians.Signature = Server.HtmlDecode(createJob.JobElectricians.Signature);
                }
                if (createJob.JobOwnerDetails.IsPostalAddress == true)
                {
                    createJob.JobOwnerDetails.AddressID = 2;
                }
                else
                {
                    createJob.JobOwnerDetails.AddressID = 1;
                }

            }

            /*Logic written for scheduling tabs to get values of this variables*/
            //bool isAddEditJobScheduling = false;
            //bool isDeleteJobScheduling = false;
            //bool isJobSchedulingView = false;

            //if (TempData.ContainsKey(SystemEnums.TempDataKey.RoleMenu.ToString()))
            //{
            //    ((List<FormBot.Main.Controllers.MenuIdList>)TempData[SystemEnums.TempDataKey.RoleMenu.ToString()]).ForEach(d =>
            //    {
            //        if (d.MenuId == (int)SystemEnums.MenuId.JobSchedulingAddEdit) { isAddEditJobScheduling = true; }
            //        if (d.MenuId == (int)SystemEnums.MenuId.JobSchedulingDelete) { isDeleteJobScheduling = true; }
            //        if (d.MenuId == (int)SystemEnums.MenuId.JobSchedulingView) { isJobSchedulingView = true; }
            //    });
            //}
            //Session["SE_isAddEditJobScheduling"] = isAddEditJobScheduling;
            //Session["SE_isAddEditJobScheduling"] = isDeleteJobScheduling;
            //Session["SE_isAddEditJobScheduling"] = isJobSchedulingView;            
            Session["TempDataForRoleMenu"] = TempData[SystemEnums.TempDataKey.RoleMenu.ToString()];
            TempData.Keep(SystemEnums.TempDataKey.RoleMenu.ToString());
        }
        [HttpPost]
        public ActionResult GetDocumentsTab(int jobId)
        {
            try
            {
                IRoleBAL role = new RoleBAL();
                var dsMenus = role.CustomAuthorization(ProjectSession.RoleId, "Job", "Index");
                List<MenuIdList> menuIds = DBClient.DataTableToList<MenuIdList>(dsMenus.Tables[0]);
                TempData[SystemEnums.TempDataKey.RoleMenu.ToString()] = menuIds.Where(d => d.ParentId == menuIds.Where(data => data.MenuId == 56).Select(x => x.ParentId).FirstOrDefault()).ToList();

                CreateJob createJob = new CreateJob();
                createJob = _job.GetDocumentsandPhotosTabCount(jobId);
                createJob.JobID = jobId;
                createJob.BasicDetails = new BasicDetails();
                createJob.BasicDetails.JobID = Convert.ToInt32(jobId);
                return PartialView("_DocumentsAndPhotosTabularView", createJob);


            }
            catch (Exception Ex)
            {
                Common.Log("Exception in GetDocumentsTab :" + Ex.Message.ToString());
                throw Ex;
            }
        }
        [HttpPost]
        public ActionResult GetResultByAjax(string Flag, int DATAOPMODE, int jobId, string id)
        {
            try
            {
                IRoleBAL role = new RoleBAL();
                var dsMenus = role.CustomAuthorization(ProjectSession.RoleId, "Job", "Index");
                List<MenuIdList> menuIds = DBClient.DataTableToList<MenuIdList>(dsMenus.Tables[0]);
                TempData[SystemEnums.TempDataKey.RoleMenu.ToString()] = menuIds.Where(d => d.ParentId == menuIds.Where(data => data.MenuId == 56).Select(x => x.ParentId).FirstOrDefault()).ToList();

                #region Tabular               
                bool isTabularView = true;
                CreateJob createJob = new CreateJob();

                if (jobId > 0)
                {
                    createJob = _job.GetJobByIDTabWise(Convert.ToInt32(jobId), DATAOPMODE);

                    DataSet commonjobWithSameAddress = _job.CommonJobsWithSameInstallationAddress(jobId);
                    if (commonjobWithSameAddress.Tables.Count > 0)
                    {
                        createJob.CommonJobsWithSameInstallationAddress = commonjobWithSameAddress.Tables[0].Rows.Count > 0 ? commonjobWithSameAddress.Tables[0].ToListof<CommonJobsWithSameInstallationAddress>() : new List<CommonJobsWithSameInstallationAddress>();
                    }

                    // check user has rights to access current job
                    if (ProjectSession.UserTypeId != 1 && ProjectSession.UserTypeId != 3)
                    {
                        bool isAllow = false;
                        if ((ProjectSession.UserTypeId == 2 || ProjectSession.UserTypeId == 5) && (createJob.BasicDetails.ResellerId == ProjectSession.ResellerId))
                            isAllow = true;
                        else if ((ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8) && (createJob.BasicDetails.SolarCompanyId == ProjectSession.SolarCompanyId))
                            isAllow = true;
                        else if (ProjectSession.UserTypeId == 6 && ((createJob.BasicDetails.SSCID == ProjectSession.LoggedInUserId || createJob.BasicDetails.CreatedBy == ProjectSession.LoggedInUserId)))
                            isAllow = true;
                        else if (ProjectSession.UserTypeId == 7 || ProjectSession.UserTypeId == 9 || ProjectSession.UserTypeId == 10)
                        {
                            if (createJob.ElectricianData.Rows.Count > 0)
                            {
                                for (int data = 0; data < createJob.ElectricianData.Rows.Count; data++)
                                {
                                    if (ProjectSession.LoggedInUserId.ToString() == createJob.ElectricianData.Rows[data]["UserId"].ToString())
                                    {
                                        isAllow = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                            isAllow = false;

                        if (!isAllow)
                            return RedirectToAction("Index");
                    }

                    /* For warning section and jobs with same install date and installer */
                    if (jobId > 0 && createJob.BasicDetails.InstallerID > 0 && !string.IsNullOrEmpty(Convert.ToString(createJob.BasicDetails.InstallationDate)))
                    {
                        DataSet ds = _job.LoadCommonJobs_SameInstallDateAndInstaller(jobId, Convert.ToInt32(createJob.BasicDetails.InstallerID), Convert.ToString(createJob.BasicDetails.InstallationDate));
                        if (ds.Tables.Count > 0)
                        {
                            createJob.CommonJobsWithSameInstallDateAndInstaller = ds.Tables[0].Rows.Count > 0 ? ds.Tables[0].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                            createJob.CommonJobsWithSameInstallDateAndInstallerAndFailedStcStatus = ds.Tables[1].Rows.Count > 0 ? ds.Tables[1].ToListof<CommonJobsWithSameInstallDateAndInstaller>() : new List<CommonJobsWithSameInstallDateAndInstaller>();
                        }
                    }

                    //if (createJob.JobElectricians.JobElectricianID > 0)
                    //{
                    //    ViewBag.ElectricianId = QueryString.QueryStringEncode("id=" + Convert.ToString(createJob.JobElectricians.JobElectricianID));
                    //}
                    //else
                    //{
                    //    ViewBag.ElectricianId = "0";
                    //}

                    if (DATAOPMODE == 5)
                    {
                        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(createJob.JobSystemDetails.SerialNumbers);
                        createJob.JobSystemDetails.StoredSerialNumber = System.Convert.ToBase64String(plainTextBytes);
                        createJob.JobSystemDetails.PreviousSystemSize = createJob.JobSystemDetails.SystemSize != null ? createJob.JobSystemDetails.SystemSize : 0;
                        createJob.JobSystemDetails.CalculatedSTC = !string.IsNullOrEmpty(createJob.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? createJob.JobSystemDetails.ModifiedCalculatedSTC : createJob.JobSystemDetails.CalculatedSTC;
                        createJob.SerialNumberwithPhotosAvaibilityList = CheckSerialNumberPhotoAvailability(Convert.ToInt32(jobId));
                    }
                    if (DATAOPMODE == 11)
                    {

                    }

                    //if (DATAOPMODE == 8|| DATAOPMODE == 6)
                    //{
                    //    createJob.JobID = jobId;
                    //    if (createJob.JobElectricians.JobElectricianID > 0)
                    //    {
                    //        ViewBag.ElectricianId = QueryString.QueryStringEncode("id=" + Convert.ToString(createJob.JobElectricians.JobElectricianID));
                    //    }
                    //    else
                    //    {
                    //        ViewBag.ElectricianId = "0";
                    //    }

                    //}
                    if (DATAOPMODE == 8 || DATAOPMODE == 6)
                    {
                        createJob.JobID = jobId;
                    }

                    if (DATAOPMODE == 1 || DATAOPMODE == 6)
                    {
                        createJob.Guid = Convert.ToString(jobId);
                        createJob.JobID = jobId;
                        createJob.BasicDetails.strInstallationDateTemp = createJob.BasicDetails.InstallationDate != null ? createJob.BasicDetails.InstallationDate.Value.ToString("yyyy/MM/dd") : "";
                        createJob.BasicDetails.strSoldByDate = createJob.BasicDetails.SoldByDate != null ? createJob.BasicDetails.SoldByDate.Value.ToString("yyyy/MM/dd") : "";

                        createJob.InstallerSignature = createJob.InstallerSignature != null ? createJob.InstallerSignature.Replace("\\", "/") : null;
                        createJob.DesignerSignature = createJob.DesignerSignature != null ? createJob.DesignerSignature.Replace("\\", "/") : null;
                        createJob.ElectricianSignature = createJob.ElectricianSignature != null ? createJob.ElectricianSignature.Replace("\\", "/") : null;
                        createJob.OwnerSignature = createJob.OwnerSignature != null ? createJob.OwnerSignature.Replace("\\", "/") : null;

                        createJob.BasicDetails.InstallerSignature = createJob.BasicDetails.InstallerSignature != null ? createJob.BasicDetails.InstallerSignature.Replace("\\", "/") : "";
                        createJob.BasicDetails.DesignerSignature = createJob.BasicDetails.DesignerSignature != null ? createJob.BasicDetails.DesignerSignature.Replace("\\", "/") : "";
                        createJob.BasicDetails.ElectricianSignature = createJob.BasicDetails.ElectricianSignature != null ? createJob.BasicDetails.ElectricianSignature.Replace("\\", "/") : "";
                        createJob.BasicDetails.OwnerSignature = createJob.BasicDetails.OwnerSignature != null ? createJob.BasicDetails.OwnerSignature.Replace("\\", "/") : "";

                        createJob.InstallerSignatureSelfie = (string.IsNullOrEmpty(createJob.InstallerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.InstallerSignatureSelfie;
                        createJob.DesignerSignatureSelfie = (string.IsNullOrEmpty(createJob.DesignerSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.DesignerSignatureSelfie;
                        createJob.ElectritionSignatureSelfie = (string.IsNullOrEmpty(createJob.ElectritionSignatureSelfie)) ? "" : ProjectSession.UploadedDocumentPath + createJob.ElectritionSignatureSelfie;

                        ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
                        createJob.JobID = jobId;
                        createJob.Signature = createJob.JobElectricians.Signature;

                        if (!string.IsNullOrEmpty(createJob.BasicDetails.GSTDocument))
                        {
                            createJob.BasicDetails.MimeType = MimeMapping.GetMimeMapping(createJob.BasicDetails.GSTDocument).Split('/')[0];
                        }

                        if (createJob.BasicDetails.JobType == 2)
                        {
                            createJob.JobSystemDetails.CalculatedSTCForSWH = !string.IsNullOrEmpty(createJob.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? createJob.JobSystemDetails.ModifiedCalculatedSTC : createJob.JobSystemDetails.CalculatedSTC;
                        }
                        else
                        {
                            createJob.JobSystemDetails.CalculatedSTC = !string.IsNullOrEmpty(createJob.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? createJob.JobSystemDetails.ModifiedCalculatedSTC : createJob.JobSystemDetails.CalculatedSTC;
                        }
                    }

                    createJob.UserType = ProjectSession.UserTypeId;

                    if (createJob.JobElectricians.IsPostalAddress == true)
                    {
                        createJob.JobElectricians.AddressID = 2;
                    }
                    else
                    {
                        createJob.JobElectricians.AddressID = 1;
                    }

                    if (DATAOPMODE == 3 || DATAOPMODE == 4)
                    {
                        if (createJob.JobOwnerDetails.IsPostalAddress == true)
                        {
                            createJob.JobOwnerDetails.AddressID = 2;
                        }
                        else
                        {
                            createJob.JobOwnerDetails.AddressID = 1;
                        }
                    }

                    if (DATAOPMODE == 3)
                    {
                        ViewBag.PostalAddressType = new SelectList(EnumExtensions.GetPostalAddressEnumList(), "ID", "Name");
                        if (createJob.JobInstallationDetails.IsPostalAddress == true)
                        {
                            createJob.JobInstallationDetails.AddressID = 2;
                        }
                        else
                        {
                            createJob.JobInstallationDetails.AddressID = 1;
                        }
                        createJob.lstCustomDetails = ReplaceSeperatorValue(createJob.lstCustomDetails);
                    }

                    if (createJob.JobInstallerDetails.IsPostalAddress == true)
                    {
                        createJob.JobInstallerDetails.AddressID = 2;
                    }
                    else
                    {
                        createJob.JobInstallerDetails.AddressID = 1;
                    }

                    //WriteToLogFile("9 : after GetJobStage" + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss.fff"));
                    createJob.BasicDetails.PreviousJobStage = createJob.BasicDetails.JobStage;
                    Helper.SystemEnums.JobPriority jobPriority;
                    if (Enum.TryParse(createJob.BasicDetails.Priority.ToString(), out jobPriority))
                    {
                        createJob.BasicDetails.PreviousPriority = jobPriority.ToString();
                    }

                    if (DATAOPMODE == 1 || DATAOPMODE == 2)
                    {
                        createJob.BasicDetails.PreviousSSCID = createJob.BasicDetails.SSCID;
                        createJob.BasicDetails.PreviousSCOID = createJob.BasicDetails.ScoID;
                        createJob.BasicDetails.CompanyABN = createJob.BasicDetails.CompanyABN;
                        createJob.BasicDetails.Reseller = createJob.BasicDetails.Reseller;
                        createJob.BasicDetails.PreviousRefNumber = createJob.BasicDetails.RefNumber;
                    }

                    if (DATAOPMODE == 4)
                    {
                        createJob.JobOwnerDetails.PreviousFirstName = createJob.JobOwnerDetails.FirstName;
                        createJob.JobOwnerDetails.PreviousLastName = createJob.JobOwnerDetails.LastName;
                        createJob.JobOwnerDetails.PreviousEmail = createJob.JobOwnerDetails.Email;
                        createJob.JobOwnerDetails.PreviousMobile = createJob.JobOwnerDetails.Mobile;
                        createJob.JobOwnerDetails.PreviousPhone = createJob.JobOwnerDetails.Phone;
                        createJob.JobOwnerDetails.PreviousOwnerType = createJob.JobOwnerDetails.OwnerType;
                        createJob.JobOwnerDetails.OldABNNumber = createJob.JobOwnerDetails.CompanyABN;
                        createJob.JobOwnerDetails.PreviousCompanyName = createJob.JobOwnerDetails.CompanyName;
                    }


                    if (DATAOPMODE == 3)
                    {
                        createJob.JobInstallationDetails.PreviousNMI = createJob.JobInstallationDetails.NMI;
                        createJob.JobInstallationDetails.PreviousInstallingNewPanel = createJob.JobInstallationDetails.InstallingNewPanel;
                        createJob.JobInstallationDetails.PreviousLocation = createJob.JobInstallationDetails.Location;
                        createJob.JobInstallationDetails.PreviousSingleMultipleStory = createJob.JobInstallationDetails.SingleMultipleStory;
                    }

                    if (DATAOPMODE == 4)
                    {
                        createJob.JobSTCDetails.PreviousAdditionalLocationInformation = createJob.JobSTCDetails.AdditionalLocationInformation;
                        createJob.JobSTCDetails.PreviousAdditionalSystemInformation = createJob.JobSTCDetails.AdditionalSystemInformation;
                        createJob.JobSTCDetails.PreviousCertificateCreated = createJob.JobSTCDetails.CertificateCreated;
                        createJob.JobSTCDetails.PreviousDeemingPeriod = createJob.JobSTCDetails.DeemingPeriod;
                        createJob.JobSTCDetails.PreviousFailedAccreditationCode = createJob.JobSTCDetails.FailedAccreditationCode;

                        createJob.JobSTCDetails.PreviousLatitude = createJob.JobSTCDetails.Latitude;
                        createJob.JobSTCDetails.PreviousLocation = createJob.JobSTCDetails.Location;
                        createJob.JobSTCDetails.PreviousLongitude = createJob.JobSTCDetails.Longitude;
                        createJob.JobSTCDetails.PreviousMultipleSGUAddress = createJob.JobSTCDetails.MultipleSGUAddress;
                        createJob.JobSTCDetails.PreviousSecondhandWaterHeater = createJob.JobSTCDetails.SecondhandWaterHeater;
                        createJob.JobSTCDetails.PreviousConnectionType = createJob.JobSTCDetails.TypeOfConnection;
                        createJob.JobSTCDetails.PreviousStatutoryDeclarations = createJob.JobSTCDetails.StatutoryDeclarations;
                        createJob.JobSTCDetails.PreviousSystemMountingType = createJob.JobSTCDetails.SystemMountingType;
                        createJob.JobSTCDetails.PreviousVolumetricCapacity = createJob.JobSTCDetails.VolumetricCapacity;
                        createJob.Guid = Convert.ToString(jobId);
                        if (!string.IsNullOrEmpty(createJob.BasicDetails.GSTDocument))
                        {
                            createJob.BasicDetails.MimeType = MimeMapping.GetMimeMapping(createJob.BasicDetails.GSTDocument).Split('/')[0];
                        }
                    }

                    if (Session[FormBot.Email.Constants.sessionAccount] == null)
                    {
                        FormBot.Entity.Email.EmailSignup emailModel = new Entity.Email.EmailSignup();
                        string xmlString = string.Empty;
                        DataSet lstEmail = _user.LoginUserEmailDetails(ProjectSession.LoggedInUserId);

                        if (lstEmail.Tables[0].Rows.Count > 0)
                        {
                            Session[FormBot.Email.Constants.sessionAccount] = null;
                            DataRow dr = (DataRow)lstEmail.Tables[0].Rows[0];

                            emailModel.Login = dr["email"].ToString();
                            emailModel.ConfigurationEmail = dr["email"].ToString();
                            emailModel.ConfigurationPassword = Utils.DecodePassword(Convert.ToString(dr["mail_inc_pass"]));
                            emailModel.IncomingMail = dr["mail_inc_host"].ToString();
                            emailModel.IncomingMailPort = Convert.ToInt32(dr["mail_inc_port"]);
                            emailModel.Login = dr["email"].ToString();
                            emailModel.OutgoingMail = dr["mail_out_host"].ToString();
                            emailModel.OutgoingMailPort = Convert.ToInt32(dr["mail_out_port"]);

                            xmlString = "<?xml version='1.0' encoding='UTF-8'?><webmail><param name='action' value='login' /><param name='request' value='' /><param name='email'><![CDATA[" + emailModel.ConfigurationEmail
                                + "]]></param><param name='mail_inc_login'><![CDATA[" + emailModel.Login + "]]></param><param name='mail_inc_pass'><![CDATA[" + emailModel.ConfigurationPassword + "]]></param><param name='mail_inc_host'><![CDATA[" + emailModel.IncomingMail
                                + "]]></param><param name='mail_inc_port' value='" + emailModel.IncomingMailPort + "' /><param name='mail_protocol' value='0' /><param name='mail_out_host'><![CDATA[" + emailModel.OutgoingMail
                                + "]]></param><param name='mail_out_port' value='" + emailModel.OutgoingMailPort + "' /><param name='mail_out_auth' value='1' /><param name='sign_me' value='0' /><param name='language' /><param name='advanced_login' value='1' /></webmail>";
                            CheckMail checkMail = new CheckMail();
                        }
                    }

                    ViewBag.JobId = jobId;
                    List<JobWiseUsers> lstJobWiseUsers = _emailService.GetJobWiseUsers(jobId, ProjectSession.LoggedInUserId);

                    Session["JobWiseUsers"] = lstJobWiseUsers;
                    List<SelectListItem> jobWiseUsers = new List<SelectListItem>();

                    ViewBag.JobWiseUsers = jobWiseUsers;

                    GetSTCStatusAndPreApprovalConnectionComment(Convert.ToInt32(jobId));
                    STCBasicDetails stcBasicDetails = new STCBasicDetails();

                    if (createJob.BasicDetails.IsClassic)
                    {
                        stcBasicDetails = _jobDetails.GetStcBasicDetailsWithStatus(Convert.ToInt32(createJob.BasicDetails.JobID), ProjectSession.UserTypeId);
                        DataSet headerDetails = _job.GetHeaderDetails(jobId);
                        if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
                        {
                            DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                            createJob.Header = dr["Header"].ToString();
                        }
                    }
                    else
                    {
                        createJob.JobScheduling = _jobSchedule.GetAllSchedulingDataOfJob(id, true, false, _job, createJob.lstJobSchedule);
                        string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";

                        JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
                        createJob.DocumentJson = result; // new JavaScriptSerializer().Serialize(result.Data);

                        var getJobStageData = _emailService.GetStatusForPreApprovalAndConnection();
                        List<SelectListItem> listJobStatusPreapproval = getJobStageData.Where(k => k.JobStage == 1).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                        ViewBag.listJobStatusPreapproval = listJobStatusPreapproval;
                        List<SelectListItem> listJobStatusConnection = getJobStageData.Where(k => k.JobStage == 2).Select(a => new SelectListItem { Text = a.Status, Value = a.Id.ToString() }).ToList();
                        ViewBag.listJobStatusConnection = listJobStatusConnection;

                        int distributorId = createJob.JobInstallationDetails.DistributorID != null ? Convert.ToInt32(createJob.JobInstallationDetails.DistributorID) : 0;
                        if (distributorId != 0)
                        {
                            List<FormBot.Entity.Documents.DocumentSteps> preApprovalDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "PreApprovals", jobId);
                            List<FormBot.Entity.Documents.DocumentSteps> connectionDocumentSteps = _jobDetails.GetDocumentsStepsForPreApprovalAndConn(Convert.ToString(distributorId), "Connections", jobId);
                            createJob.lstPreApprovalDocumentSteps = preApprovalDocumentSteps;
                            createJob.lstConnectionDocumentSteps = connectionDocumentSteps;
                        }
                        //createJob.chkPhotosAll = LoadAllPhotosOfNewJob(jobId);

                        //if (DATAOPMODE == 4 || DATAOPMODE == 8)
                        //{
                        createJob.STCDetailsModel = isTabularView ? CommonForSTCJob(jobId, true, true, createJob) : CommonForSTCJob(jobId, false, true, createJob);
                        stcBasicDetails = createJob.STCDetailsModel.stcBasicDetails;
                        createJob.Header = stcBasicDetails.Header;

                        ViewData["Description"] = !string.IsNullOrEmpty(stcBasicDetails.STCDescription) ? Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), @"\r\n?|\n", "<br>") : stcBasicDetails.STCDescription;
                        createJob.liLength = createJob.STCDetailsModel.ErrorLength;

                        if (string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason) && (!string.IsNullOrEmpty(stcBasicDetails.STCDescription)) && stcBasicDetails.STCDescription.Contains("You may recreate"))
                        {
                            //HtmlString(string.Format(stcBasicDetails.STCDescription));
                            createJob.JobSTCDetails.CertificateCreated = "Yes";
                            createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(stcBasicDetails.STCDescription), "<br>", Environment.NewLine);
                            string s = createJob.JobSTCDetails.FailedReason;
                            var startTag = "following reason(s):";
                            int startIndex = s.IndexOf(startTag) + startTag.Length;
                            int endIndex = s.IndexOf("You may recreate", startIndex);
                            createJob.JobSTCDetails.FailedReason = s.Substring(startIndex, endIndex - startIndex).Trim();
                        }
                        if (!string.IsNullOrEmpty(createJob.JobSTCDetails.FailedReason))
                        {
                            createJob.JobSTCDetails.FailedReason = Regex.Replace(HttpUtility.HtmlDecode(createJob.JobSTCDetails.FailedReason), "<br>", Environment.NewLine);
                        }
                        createJob.JobSTCDetails.PreviousFailedReason = createJob.JobSTCDetails.FailedReason;
                        //}
                    }

                    if (stcBasicDetails != null)
                    {
                        ViewBag.STCStatusName = stcBasicDetails.Status;
                        ViewBag.STCDescription = HttpUtility.HtmlDecode(stcBasicDetails.STCDescription);
                        ViewBag.STCStatusId = stcBasicDetails.STCStatusId;
                        ViewBag.ColorCode = stcBasicDetails.ColorCode;
                    }

                    if (createJob != null)
                    {
                        createJob.ElectricianSignature = Server.HtmlDecode(createJob.ElectricianSignature);
                        createJob.Signature = Server.HtmlDecode(createJob.Signature);

                        if (createJob.BasicDetails != null)
                            createJob.BasicDetails.ElectricianSignature = Server.HtmlDecode(createJob.BasicDetails.ElectricianSignature);

                        if (createJob.JobElectricians != null)
                            createJob.JobElectricians.Signature = Server.HtmlDecode(createJob.JobElectricians.Signature);
                    }
                    // SS
                    if (createJob.BasicDetails.IsClassic)
                        return View("create", createJob);
                    else
                    {
                        if (!string.IsNullOrEmpty(Request["isTabularView"]))
                        {
                            ProjectSession.IsTabularView = isTabularView;
                            _user.UpdateTabularViewConfiguration(isTabularView);
                        }

                        CheckSPVrequired objSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCAOrGlobalLevelOrManufacturer(JobIds: createJob.BasicDetails.JobID.ToString()).FirstOrDefault();
                        createJob.GlobalisAllowedSPV = objSpvRequiredSolarCompanyWise.IsSPVRequired;
                        DataSet jobRetailerSetting = _job.GetJobRetailerSettingData(createJob.BasicDetails.JobID, createJob.BasicDetails.SolarCompanyId);
                        if (jobRetailerSetting != null && jobRetailerSetting.Tables.Count > 0 && jobRetailerSetting.Tables[0].Rows.Count > 0)
                        {
                            createJob.JobRetailerSetting = new JobRetailerSetting();
                            createJob.JobRetailerSetting.JobRetailerUserId = Convert.ToInt32(jobRetailerSetting.Tables[0].Rows[0]["RetailerUserId"].ToString());
                            createJob.JobRetailerSetting.RepresentativeName = jobRetailerSetting.Tables[0].Rows[0]["name"].ToString();
                            createJob.JobRetailerSetting.PositionHeld = jobRetailerSetting.Tables[0].Rows[0]["PositionHeld"].ToString();
                            createJob.JobRetailerSetting.PositionHeldlbl = jobRetailerSetting.Tables[0].Rows[0]["PositionHeld"].ToString();
                            bool IsEmployee = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsEmployee"].ToString()) ? Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsEmployee"].ToString()) : false;
                            //bool IssubContractor =!string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString())?Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsSubContractor"].ToString()):false;
                            bool IsChangedDesign = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["IsChangedDesign"].ToString()) ? Convert.ToBoolean(jobRetailerSetting.Tables[0].Rows[0]["IsChangedDesign"].ToString()) : false;
                            createJob.JobRetailerSetting.IsEmployee = IsEmployee == true ? 1 : 2;
                            createJob.JobRetailerSetting.IsChangedDesign = IsChangedDesign == true ? 1 : 2;
                            createJob.JobRetailerSetting.Signature = jobRetailerSetting.Tables[0].Rows[0]["Signature"].ToString();
                            createJob.JobRetailerSetting.SignedBy = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["SignedBy"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["SignedBy"].ToString() : "";
                            createJob.JobRetailerSetting.SignedDate = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["SignedDate"].ToString()) ? Convert.ToDateTime(jobRetailerSetting.Tables[0].Rows[0]["SignedDate"]).ToString("dd/MM/yyyy") : "";
                            createJob.JobRetailerSetting.Latitude = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["Latitude"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["Latitude"].ToString() : "";
                            createJob.JobRetailerSetting.Longitude = !string.IsNullOrEmpty(jobRetailerSetting.Tables[0].Rows[0]["Longitude"].ToString()) ? jobRetailerSetting.Tables[0].Rows[0]["Longitude"].ToString() : "";
                            string isEmployeeOrSSC = createJob.JobRetailerSetting.IsEmployee == 2 ? "a SubContractor" : createJob.JobRetailerSetting.IsEmployee == 1 ? "an employee" : string.Empty;
                            string isChangedDesign = createJob.JobRetailerSetting.IsChangedDesign == 1 ? "changed the system design" : "not changed the system design";
                            createJob.JobRetailerSetting.Statement = "Installer, <b class=\"blue-title\">" + createJob.InstallerView.CECAccreditationNumber + " " + createJob.InstallerView.FirstName + " " + createJob.InstallerView.LastName + "</b> is <b style=\"color:black\">" + isEmployeeOrSSC + "</b> and have <b style=\"color:black\">" + isChangedDesign + "</b>";
                        }
                        string UserDocuments = "";
                        if (ProjectSession.UserTypeId == 1 || ProjectSession.UserTypeId == 3)
                        {
                            if (createJob.BasicDetails != null && createJob.BasicDetails.InstallerID != null && createJob.BasicDetails.InstallerID > 0)
                            {
                                string strInstallerId = _user.GetUserIdFromCECNumber(createJob.InstallerView.CECAccreditationNumber, createJob.InstallerView.ElectricalContractorsLicenseNumber, createJob.InstallerView.IsPVDUser, createJob.InstallerView.IsSWHUser);

                                if (!string.IsNullOrEmpty(strInstallerId))
                                {
                                    int elecID = !string.IsNullOrEmpty(strInstallerId) ? Convert.ToInt32(strInstallerId) : 0;
                                    string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "UserDocuments/" + elecID + "/";
                                    //string path = FormBot.Helper.ProjectConfiguration.ProofDocumentsURL + "userdocuments/" + ProjectSession.LoggedInUserId + "/";
                                    DirectoryInfo dir = new DirectoryInfo(path);
                                    if (dir.Exists)
                                    {

                                        FileInfo[] Files = dir.GetFiles(); //Getting Text files

                                        foreach (FileInfo file in Files)
                                        {
                                            //for server use
                                            UserDocuments = UserDocuments + ", " + ProjectConfiguration.UploadedDocumentPath + "UserDocuments/" + elecID + "/" + file.Name;
                                            //for local use
                                            //UserDocuments = UserDocuments + ", " + "UserDocuments/" + elecID + "/" + file.Name;
                                        }

                                    }
                                    //check for drivers license 
                                    DirectoryInfo Driverdir = new DirectoryInfo(path + "InstallersDriversLicense"); //Assuming Test is your Folder
                                    if (Driverdir.Exists)
                                    {
                                        FileInfo[] DriverFiles = Driverdir.GetFiles(); //Getting Text files
                                        foreach (FileInfo file in DriverFiles)
                                        {

                                            UserDocuments = UserDocuments + ", " + ProjectConfiguration.UploadedDocumentPath + "UserDocuments/" + elecID + "/InstallersDriversLicense/" + file.Name;
                                            //  for local use
                                            //UserDocuments = UserDocuments + ", " + "UserDocuments/" + elecID + "/InstallersDriversLicense/" + file.Name;
                                        }
                                    }
                                }
                            }
                        }
                        createJob.UserDocuments = UserDocuments;
                    }
                }
                #endregion

                if (Flag == "1")
                {
                    return View("JobTabularViewNew", createJob);
                }
                else if (Flag == "Owner Details")
                {
                    return PartialView("_OwnerDetailTabularView", createJob);
                }
                else if (Flag == "Installation Details")
                {
                    return PartialView("_InstallationDetailsTabularView", createJob);
                }
                else if (Flag == "Custom Details")
                {
                    return PartialView("_CustomInstallationDetailsTabularView", createJob);
                }
                else if (Flag == "STC Details")
                {
                    return PartialView("_STCDetailTabularView", createJob);
                }
                else if (Flag == "STC Status")
                {
                    return PartialView("_STCStatusTabularView", createJob);
                }
                else if (Flag == "System Details")
                {
                    return PartialView("SystemDetailTabularView", createJob);
                }
                else if (Flag == "Installer Details")
                {
                    return PartialView("_InstallerDetalisTabularView", createJob);
                }
                else if (Flag == "Scheduling")
                {
                    return PartialView("_SchedulingTabularView", createJob.JobScheduling);
                }
                else if (Flag == "DocumentsPhotos")
                {
                    return PartialView("_DocumentsAndPhotosTabularView", createJob);
                }
                else if (Flag == "NotesHistory")
                {
                    return PartialView("_NotesAndHistoryTabularNew", createJob);
                }
                else if (Flag == "WrittenStatementsDeclaration")
                {
                    return PartialView("_SCAWrittenStatement", createJob);
                }
                else if (Flag == "RetailerDetails")
                {
                    return PartialView("_RetailerDetails", createJob);
                }
                else if (Flag == "PreApproval")
                {
                    return PartialView("_JobActionPreapproval", createJob);
                }
                else if (Flag == "Connection")
                {
                    return PartialView("_JobActionConnection", createJob);
                }
                return null;
            }
            catch (Exception Ex)
            {
                Common.Log("Exception in GetResultByAjax :" + Ex.Message.ToString());
                throw Ex;
            }
        }
        [HttpGet]
        [UserAuthorization]
        public ActionResult StaticJob(string IsStaticSearch = null)
        {
            FormBot.Entity.JobList job = new FormBot.Entity.JobList();
            job.UserTypeID = ProjectSession.UserTypeId;
            job.SolarCompanyId = ProjectSession.SolarCompanyId;
            //if (ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8)
            //{
            //    job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, ProjectSession.SolarCompanyId);
            //}
            //else
            //{
            //    job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, 0);
            //}
            //job.lstJobStages = _job.GetJobStagesWithCount(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, ProjectSession.UserTypeId == 4 || ProjectSession.UserTypeId == 8 ? ProjectSession.SolarCompanyId : 0);

            var jobSearchType = from SystemEnums.JobScheduleType j in Enum.GetValues(typeof(SystemEnums.JobScheduleType))
                                select new { ID = j, Name = j.ToString() };
            ViewData["JobScheduleType"] = new SelectList(jobSearchType, "ID", "Name");
            var jobType = from SystemEnums.JobType j in Enum.GetValues(typeof(SystemEnums.JobType))
                          select new { ID = j, Name = j.ToString() };
            ViewData["JobType"] = new SelectList(jobType, "ID", "Name");

            var jobPriority = from SystemEnums.JobPriority j in Enum.GetValues(typeof(SystemEnums.JobPriority))
                              select new { ID = j, Name = j.ToString() };
            ViewData["JobPriority"] = new SelectList(jobPriority, "ID", "Name");

            ViewData["JobStage"] = new SelectList(GetJobAllStage(ProjectSession.UserTypeId), "Value", "Text");
            ViewData["PropertyType"] = new string[] { "Residential", "Commercial", "School" };
            ViewData["colPriority"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobPriority);
            ViewData["colJobType"] = Newtonsoft.Json.JsonConvert.SerializeObject(jobType);
            var tradeStatus = from SystemEnums.TradeStatus j in Enum.GetValues(typeof(SystemEnums.TradeStatus))
                              select new { ID = j, Name = j.ToString() };
            ViewData["colTradeStatus"] = Newtonsoft.Json.JsonConvert.SerializeObject(tradeStatus);

            //DataSet dsPreapproval = _job.GetPreApprovalStatus();
            //DataSet dsConnection = _job.GetConnectionStatus();
            //Get PreApprovalStatus and ConnectionStatus in one call
            DataSet dsJobStatusCommonDetails = _job.GetJobStatusCommonDetails(ProjectSession.LoggedInUserId, true);
            if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0 && dsJobStatusCommonDetails.Tables[0] != null && dsJobStatusCommonDetails.Tables[0].Rows.Count > 0)
            {
                job.lstPreApproval = dsJobStatusCommonDetails.Tables[0].ToListof<PreConStatus>();
            }

            if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0 && dsJobStatusCommonDetails.Tables[1] != null && dsJobStatusCommonDetails.Tables[1].Rows.Count > 0)
            {
                job.lstConnection = dsJobStatusCommonDetails.Tables[1].ToListof<PreConStatus>();
            }

            if (TempData["PreApprovalsDashboardStatus"] != null && Convert.ToString(TempData["PreApprovalsDashboardStatus"]) != "")
            {
                job.PreApprovalStatusId = Convert.ToInt32(TempData["PreApprovalsDashboardStatus"]);
            }

            if (TempData["ConnectionsDashboardStatus"] != null && Convert.ToString(TempData["ConnectionsDashboardStatus"]) != "")
            {
                job.ConnectionStatusId = Convert.ToInt32(TempData["ConnectionsDashboardStatus"]);
            }

            List<UserWiseColumns> listUserWiseColumns = _job.GetUserWiseColumnsStatic(ProjectSession.LoggedInUserId, SystemEnums.MenuId.JobView.GetHashCode());
            ViewBag.JSUserColumnList = listUserWiseColumns;
            ViewBag.ListColumnName = string.Join(",", listUserWiseColumns.Select(X => X.Name));
            ViewBag.ListColumnWidth = string.Join(",", listUserWiseColumns.Select(X => X.Width));
            var SavePageSize = listUserWiseColumns.FirstOrDefault().PageSize;
            if (SavePageSize <= 0 || string.IsNullOrEmpty(SavePageSize.ToString()))
            {
                SavePageSize = 10;
            }
            ViewBag.PageSize = SavePageSize;
            //AdvanceSearchCategory is assigned in GetJobStatusCommonDetails method
            //DataSet dsAdvanceSearchCategory = _job.GetAdvanceSearchCategory();
            if (dsJobStatusCommonDetails != null && dsJobStatusCommonDetails.Tables.Count > 0)
            {
                List<AdvanceSearchCategory> lstSearchCategory = new List<AdvanceSearchCategory>();

                if (dsJobStatusCommonDetails.Tables[2].Rows.Count > 0)
                {
                    Int32[] arrSearchCategoryId = dsJobStatusCommonDetails.Tables[2].AsEnumerable().ToList().Select(s => s.Field<Int32>("SearchCategoryId")).Distinct().ToArray<Int32>();
                    foreach (int i in arrSearchCategoryId)
                    {
                        List<DataRow> drSearchCategory = dsJobStatusCommonDetails.Tables[2].AsEnumerable().ToList().Where(s => s.Field<Int32>("SearchCategoryId") == i).ToList();
                        if (drSearchCategory.Count > 0)
                        {
                            AdvanceSearchCategory tmp = new AdvanceSearchCategory();
                            tmp.SearchCategoryId = Convert.ToInt32(drSearchCategory[0]["SearchCategoryId"]);
                            tmp.SearchCategoryName = Convert.ToString(drSearchCategory[0]["SearchCategoryName"]);
                            List<AdvanceSearchSubCategory> lstAdvanceSearchSubCategory = new List<AdvanceSearchSubCategory>();
                            foreach (DataRow dr in drSearchCategory)
                            {
                                AdvanceSearchSubCategory tmpsub = new AdvanceSearchSubCategory();
                                tmpsub.ColumnID = Convert.ToInt32(dr["ColumnID"]);
                                tmpsub.Name = Convert.ToString(dr["Name"]);
                                tmpsub.DisplayName = Convert.ToString(dr["DisplayName"]);
                                lstAdvanceSearchSubCategory.Add(tmpsub);
                            }

                            if (lstAdvanceSearchSubCategory.Count > 0)
                            {
                                tmp.lstAdvanceSearchSubCategory = lstAdvanceSearchSubCategory;
                                tmp.hdnColName = lstAdvanceSearchSubCategory[0].Name;
                            }

                            //if (tmp.SearchCategoryId == 3 && dsAdvanceSearchCategory.Tables[1].Rows.Count > 0)
                            //{
                            //    tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", dsAdvanceSearchCategory.Tables[1].AsEnumerable().ToList().Select(s => s.Field<string>("Abbreviation")).Distinct().ToArray<string>());
                            //}
                            //else 
                            if (tmp.SearchCategoryId == 4)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", jobPriority.Select(x => x.Name).ToList());
                            }
                            else if (tmp.SearchCategoryId == 5)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", tradeStatus.Select(x => x.Name).ToList());
                            }
                            else if (tmp.SearchCategoryId == 6)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = "Pending,Approved";
                            }
                            else if (tmp.SearchCategoryId == 7)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = "Pending,Completed";
                            }
                            else if (tmp.SearchCategoryId == 8)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = string.Join(",", jobType.Select(x => x.Name).ToList());
                            }
                            else if (tmp.SearchCategoryId == 9 || tmp.SearchCategoryId == 11)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = "Yes,No";
                            }
                            else if (tmp.SearchCategoryId == 10)
                            {
                                tmp.AllFilters = tmp.hdnAllFilters = "Commercial,Residential,School";
                            }
                            else
                            {
                                tmp.AllFilters = string.Join(",", string.Join(",", lstAdvanceSearchSubCategory.Select(X => X.DisplayName).ToList()));
                                tmp.hdnAllFilters = string.Join(",", string.Join(",", lstAdvanceSearchSubCategory.Select(X => X.Name).ToList()));
                                tmp.hdnColName = string.Empty;
                            }

                            lstSearchCategory.Add(tmp);
                        }
                    }
                }

                //ViewBag.jsListSearchCategory = Newtonsoft.Json.JsonConvert.SerializeObject(lstSearchCategory);
                job.lstAdvanceSearchCategory = lstSearchCategory;
            }
            UserWiseGridConfiguration objUserWiseGridConfiguration = new UserWiseGridConfiguration()
            {
                IsKendoGrid = true,
                PageSize = 10,
                UserId = ProjectSession.LoggedInUserId,
                ViewPageId = SystemEnums.ViewPageId.JobView.GetHashCode(),
                UserWiseGridConfigurationId = 0
            };
            UserWiseGridConfiguration sessionObjUserWiseGridConfiguration = null;
            List<UserWiseGridConfiguration> lstUserWiseGridConfigurations = new List<UserWiseGridConfiguration>();
            var index = -1;
            try
            {
                lstUserWiseGridConfigurations = (List<UserWiseGridConfiguration>)ProjectSession.UserWiseGridConfiguration;
                sessionObjUserWiseGridConfiguration = lstUserWiseGridConfigurations.Where(m => m.ViewPageId == SystemEnums.ViewPageId.JobView.GetHashCode()).FirstOrDefault();
                index = lstUserWiseGridConfigurations.IndexOf(sessionObjUserWiseGridConfiguration);
            }
            catch (Exception ex) { }
            if (!string.IsNullOrEmpty(IsStaticSearch))
            {
                objUserWiseGridConfiguration.IsKendoGrid = !Convert.ToBoolean(IsStaticSearch);
                objUserWiseGridConfiguration.PageSize = sessionObjUserWiseGridConfiguration == null ? 10 : sessionObjUserWiseGridConfiguration.PageSize;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = sessionObjUserWiseGridConfiguration == null ? 0 : sessionObjUserWiseGridConfiguration.UserWiseGridConfigurationId;
                objUserWiseGridConfiguration.UserWiseGridConfigurationId = _user.InsertUpdateUserWiseGridConfiguration(objUserWiseGridConfiguration);
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            }
            else if (sessionObjUserWiseGridConfiguration == null)
                sessionObjUserWiseGridConfiguration = objUserWiseGridConfiguration;
            if (index != -1)
            {
                lstUserWiseGridConfigurations[index] = sessionObjUserWiseGridConfiguration;
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }
            else
            {
                lstUserWiseGridConfigurations.Add(sessionObjUserWiseGridConfiguration);
                ProjectSession.UserWiseGridConfiguration = lstUserWiseGridConfigurations;
            }

            //SpvRequiredSolarCompanyWise objSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCOrGlobalLevel(job.SolarCompanyId.ToString()).FirstOrDefault();
            //job.GlobalisAllowedSPV = objSpvRequiredSolarCompanyWise.status;
            //if (!string.IsNullOrEmpty(id) && id.ToLower() == "archive")
            //    ViewBag.Archive = true;

            if (sessionObjUserWiseGridConfiguration.IsKendoGrid)
                return View("StaticJob", job);
            else
                return View("StaticJobIndex", job);
        }
        private DataTable getDataTableFromKendoSort(List<KendoSort> sort)
        {
            DataTable table = new DataTable();

            table.Columns.Add("Field");
            table.Columns.Add("Dir");

            if (sort != null && sort.Count() > 0)
            {
                foreach (var item in sort)
                {
                    DataRow dataRow = table.NewRow();
                    dataRow["Field"] = item.Field;
                    dataRow["Dir"] = item.Dir;

                    table.Rows.Add(dataRow);
                }
            }
            return table;

        }

        private static DataTable getDataTableFromKendoFilter(KendoFilter filter)
        {
            DataTable table = new DataTable();

            table.Columns.Add("Field");
            table.Columns.Add("Operator");
            table.Columns.Add("Value");
            table.Columns.Add("Logic");
            table.Columns.Add("Group");

            if (filter != null && filter.Filters != null)
            {
                foreach (var item in filter.Filters)
                {
                    if (item.Operator != null)
                    {
                        DataRow dataRow = table.NewRow();
                        dataRow["Field"] = item.Field;
                        dataRow["Operator"] = item.Operator;
                        dataRow["Value"] = item.Value;
                        dataRow["Logic"] = item.Logic;
                        dataRow["Group"] = null;

                        table.Rows.Add(dataRow);
                    }
                    else
                    {
                        Guid guid = Guid.NewGuid();
                        foreach (var item1 in item.Filters)
                        {
                            DataRow dataRow = table.NewRow();
                            dataRow["Field"] = item1.Field;
                            dataRow["Operator"] = item1.Operator;
                            dataRow["Value"] = item1.Value;
                            dataRow["Logic"] = item1.Logic;
                            dataRow["Group"] = guid;

                            table.Rows.Add(dataRow);
                        }
                    }
                }
            }

            return table;
        }

        public ActionResult BindDocumentSectionTabular(string jobID, int DATAOPMODE)
        {
            int jobId = Convert.ToInt32(jobID);
            bool isTabularView = true;
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobByIDTabWise(jobId, DATAOPMODE);

            createJob.JobID = jobId;
            string distibutorId = createJob.JobInstallationDetails.DistributorID > 0 ? createJob.JobInstallationDetails.DistributorID.ToString() : "";
            JsonResult result = GetDocumentsListAll(createJob.BasicDetails.JobID.ToString(), distibutorId, "stc", "1");
            createJob.DocumentJson = result; // new JavaScriptSerializer().Serialize(result.Data);

            createJob.STCDetailsModel = isTabularView ? CommonForSTCJob(jobId, true, true, createJob) : CommonForSTCJob(jobId, false, true, createJob);

            return this.PartialView("DocumentSectionTabularView", createJob);
        }

        public ActionResult BindPhotosSectionTabular(string jobId)
        {
            CreateJob createJob = new CreateJob();
            DataSet headerDetails = _job.GetHeaderDetails(Convert.ToInt32(jobId));
            if (headerDetails.Tables[0] != null && headerDetails.Tables[0].Rows.Count > 0)
            {
                DataRow dr = (DataRow)headerDetails.Tables[0].Rows[0];
                string headeradd = dr["Header"].ToString();
                headeradd = headeradd.Split(',')[1];
                createJob.Header = headeradd.Trim();
            }
            return this.PartialView("PhotosSectionTabularView", createJob);
        }

        public ActionResult BindSerialNumbersTabular()
        {
            return this.PartialView("SerialNumberSectionTabularView");
        }
        public ActionResult BindJobSummaryTabular(string jobID, int DATAOPMODE)
        {
            int jobId = Convert.ToInt32(jobID);
            bool isTabularView = true;
            CreateJob createJob = new CreateJob();
            createJob = _job.GetJobSummaryTabular(jobId);

            if (createJob.JobInstallationDetails.InstallingNewPanel == "New")
            {
                createJob.JobInstallationDetails.InstallingNewPanel = "New system";
            }

            else if (createJob.JobInstallationDetails.InstallingNewPanel == "Replacing")
            {
                createJob.JobInstallationDetails.InstallingNewPanel = "Replacement system";
            }

            else if (createJob.JobInstallationDetails.InstallingNewPanel == "Adding")
            {
                createJob.JobInstallationDetails.InstallingNewPanel = "Additional system";
            }

            else if (createJob.JobInstallationDetails.InstallingNewPanel == "Extension")
            {
                createJob.JobInstallationDetails.InstallingNewPanel = "Extension system";
            }

            createJob.JobID = jobId;

            return this.PartialView("_JobSummaryTabularView", createJob);
        }


        [HttpGet]
        public JsonResult LoadVisitChecklistItems(string JobId, int jobSchedulingId)
        {
            CreateJob createJob = new CreateJob();
            JobSchedulingPhotos jobSchedulingPhotos = new JobSchedulingPhotos();
            var subphotoView = ControlToString("~/Views/Job/_JobSubPhotosNewTabular.cshtml", jobSchedulingPhotos);
            createJob.chkPhotosAll = LoadAllVisitChecklistItems(Convert.ToInt32(JobId), jobSchedulingId);
            if (createJob.chkPhotosAll.chkJobPhotos != null)
            {
                createJob.chkPhotosAll.chkJobPhotos[0].jobSchedulingId = jobSchedulingId;
                if (createJob.chkPhotosAll.chkJobPhotos[0] != null)
                {

                    subphotoView = ControlToString("~/Views/Job/_JobSubPhotosNewTabular.cshtml", createJob.chkPhotosAll.chkJobPhotos[0]);

                }
            }
            return Serializer.GetJsonResult(new { subphotoView });

        }

        public chkPhotos LoadAllVisitChecklistItems(int jobId, int jobSchedulingId)
        {
            List<JobSchedulingPhotos> objLst = new List<JobSchedulingPhotos>();
            DataSet dsCheckListPhotos = _job.GetChecklistItems(jobId, jobSchedulingId);
            chkPhotos objChk = new chkPhotos();


            if (dsCheckListPhotos.Tables.Count > 0)
            {
                //DataTable dtSchedulingIds = dsCheckListPhotos.Tables[0];
                DataTable dtData = dsCheckListPhotos.Tables[0];
                DataTable dtCheckListCount = dsCheckListPhotos.Tables[1];
                DataTable dtName = dsCheckListPhotos.Tables[2];
                //DataRow[] ReferencePhotos = dtData.Select("IsReference=1");
                //DataRow[] DefaultPhotos = dtData.Select("IsDefault=1");
                JobSchedulingPhotos obj = new JobSchedulingPhotos();
                //DataRow[] result = dtData.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                List<VisitCheckListItems> lstVisitCheckListItem = new List<VisitCheckListItems>();

                int serialNumTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 1).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                int capturePhotoTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 2).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                int signatureTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 3).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();

                DataRow[] checklistitems = dtName.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                foreach (DataRow dr in checklistitems)
                {
                    int count = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                    int visitedCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("VisitedCount")).FirstOrDefault();

                    VisitCheckListItems visitCheckListItem = new VisitCheckListItems();
                    visitCheckListItem.VisitCheckListItemId = Convert.ToString(dr["VisitCheckListItemId"]);
                    visitCheckListItem.FolderName = Convert.ToString(dr["FolderName"]); //if(!string.IsNullOrEmpty(Convert.ToString(dr["FolderName"])) ? Convert.ToString(dr["FolderName"]) : ;

                    visitCheckListItem.TotalCount = count;
                    visitCheckListItem.VisitedCount = visitedCount;
                    visitCheckListItem.CheckListClassTypeId = Convert.ToInt32(dr["CheckListClassTypeId"]); // dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("CheckListClassTypeId")).FirstOrDefault();
                    visitCheckListItem.PDFLocationId = Convert.ToString(dr["PDFLocationId"]);
                    visitCheckListItem.CaptureUploadImagePDFName = Convert.ToString(dr["CaptureUploadImagePDFName"]);
                    visitCheckListItem.Isdeleted = Convert.ToBoolean(dr["IsDeleted"]);
                    visitCheckListItem.CheckListPhotoTypeId = !string.IsNullOrEmpty(dr["CheckListPhotoTypeId"].ToString()) ? Convert.ToInt32(dr["CheckListPhotoTypeId"]) : 0;
                    DataRow[] checkListPhotos = dtData.Select("VisitCheckListItemId = " + visitCheckListItem.VisitCheckListItemId);
                    List<Photo> objList = new List<Photo>();
                    foreach (DataRow drPhotos in checkListPhotos)
                    {
                        Photo p = new Photo();
                        p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                        p.Path = Convert.ToString(drPhotos["Path"]);
                        p.VisitCheckListPhotoId = Convert.ToString(drPhotos["VisitCheckListPhotoId"]);
                        p.VisitSignatureId = Convert.ToString(drPhotos["VisitSignatureId"]);
                        p.Latitude = Convert.ToString(drPhotos["Latitude"]);
                        p.Longitude = Convert.ToString(drPhotos["Longitude"]);
                        p.CreatedDate = Convert.ToString(drPhotos["CreatedDate"]);
                        p.IsUnderInstallationArea = Convert.ToString(drPhotos["IsUnderInstallationArea"]);
                        objList.Add(p);
                    }

                    visitCheckListItem.lstCheckListPhoto = objList;

                    if (visitCheckListItem.CheckListClassTypeId != 5)
                    {
                        lstVisitCheckListItem.Add(visitCheckListItem);
                    }
                }

                obj.serialNumTotalCount = serialNumTotalCount;
                obj.capturePhotoTotalCount = capturePhotoTotalCount;
                obj.signatureTotalCount = signatureTotalCount;
                obj.lstVisitCheckListItem = lstVisitCheckListItem;
                if (obj.lstVisitCheckListItem.Count > 0)
                {
                    objLst.Add(obj);
                }

                //List<Photo> chkReference = new List<Photo>();
                //foreach (DataRow drRef in ReferencePhotos)
                //{
                //    string path = drRef["Path"].ToString();
                //    Photo objPhoto = new Photo();
                //    objPhoto.Path = path;
                //    objPhoto.Name = Path.GetFileName(path);
                //    objPhoto.VisitCheckListPhotoId = Convert.ToString(drRef["VisitCheckListPhotoId"]);
                //    objPhoto.VisitSignatureId = Convert.ToString(drRef["VisitSignatureId"]);
                //    chkReference.Add(objPhoto);
                //}


                //List<Photo> objInstall = new List<Photo>();
                //List<Photo> objSerial = new List<Photo>();

                //foreach (DataRow dRow in DefaultPhotos)
                //{
                //    int ClassType = Convert.ToInt32(dRow["ClassType"]);
                //    Photo p = new Photo();
                //    p.VisitCheckListPhotoId = Convert.ToString(dRow["VisitCheckListPhotoId"]);
                //    p.VisitSignatureId = Convert.ToString(dRow["VisitSignatureId"]);
                //    p.Path = dRow["Path"].ToString();
                //    p.Name = Path.GetFileName(p.Path);
                //    p.Latitude = Convert.ToString(dRow["Latitude"]);
                //    p.Longitude = Convert.ToString(dRow["Longitude"]);

                //    p.CreatedDate = Convert.ToString(dRow["CreatedDate"]);

                //    if (ClassType == 1)
                //        objSerial.Add(p);
                //    else if (ClassType == 2)
                //        objInstall.Add(p);

                //}
                //objChk.InstallationPhotos = objInstall;

                //objChk.SerialPhotos = objSerial;
                objChk.jobId = jobId;
                objChk.chkJobPhotos = objLst;
                //objChk.ReferencePhotos = chkReference;
            }
            return objChk;
        }

        [HttpGet]
        public JsonResult LoadReferencePhotos(string JobId)
        {
            CreateJob createJob = new CreateJob();
            var referencephotoView = ControlToString("~/Views/Job/_JobReferencePhotosNewTabular.cshtml", createJob);
            createJob.chkPhotosAll = LoadAllReferencePhotos(Convert.ToInt32(JobId));
            if (createJob.chkPhotosAll.ReferencePhotos != null)
            {

                referencephotoView = ControlToString("~/Views/Job/_JobReferencePhotosNewTabular.cshtml", createJob);

            }
            return Serializer.GetJsonResult(new { referencephotoView });

        }
        public chkPhotos LoadAllReferencePhotos(int jobId)
        {
            //List<JobSchedulingPhotos> objLst = new List<JobSchedulingPhotos>();
            DataSet dsCheckListPhotos = _job.GetChecklistPhotos(jobId);
            chkPhotos objChk = new chkPhotos();

            if (dsCheckListPhotos.Tables.Count > 0)
            {
                //DataTable dtSchedulingIds = dsCheckListPhotos.Tables[0];
                DataTable dtData = dsCheckListPhotos.Tables[1];
                //DataTable dtCheckListCount = dsCheckListPhotos.Tables[1];
                //DataTable dtName = dsCheckListPhotos.Tables[2];
                DataRow[] ReferencePhotos = dtData.Select("IsReference=1");
                //DataRow[] DefaultPhotos = dtData.Select("IsDefault=1");
                //JobSchedulingPhotos obj = new JobSchedulingPhotos();
                //DataRow[] result = dtData.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                //List<VisitCheckListItems> lstVisitCheckListItem = new List<VisitCheckListItems>();

                //int serialNumTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 1).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //int capturePhotoTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 2).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //int signatureTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 3).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();

                //DataRow[] checklistitems = dtName.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                //foreach (DataRow dr in checklistitems)
                //{
                //    int count = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //    int visitedCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("VisitedCount")).FirstOrDefault();

                //    VisitCheckListItems visitCheckListItem = new VisitCheckListItems();
                //    visitCheckListItem.VisitCheckListItemId = Convert.ToString(dr["VisitCheckListItemId"]);
                //    visitCheckListItem.FolderName = Convert.ToString(dr["FolderName"]); //if(!string.IsNullOrEmpty(Convert.ToString(dr["FolderName"])) ? Convert.ToString(dr["FolderName"]) : ;

                //    visitCheckListItem.TotalCount = count;
                //    visitCheckListItem.VisitedCount = visitedCount;
                //    visitCheckListItem.CheckListClassTypeId = Convert.ToInt32(dr["CheckListClassTypeId"]); // dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("CheckListClassTypeId")).FirstOrDefault();
                //    visitCheckListItem.PDFLocationId = Convert.ToString(dr["PDFLocationId"]);
                //    visitCheckListItem.CaptureUploadImagePDFName = Convert.ToString(dr["CaptureUploadImagePDFName"]);
                //    visitCheckListItem.Isdeleted = Convert.ToBoolean(dr["IsDeleted"]);
                //    visitCheckListItem.CheckListPhotoTypeId = !string.IsNullOrEmpty(dr["CheckListPhotoTypeId"].ToString()) ? Convert.ToInt32(dr["CheckListPhotoTypeId"]) : 0;
                //    DataRow[] checkListPhotos = dtData.Select("VisitCheckListItemId = " + visitCheckListItem.VisitCheckListItemId);
                //    List<Photo> objList = new List<Photo>();
                //    foreach (DataRow drPhotos in checkListPhotos)
                //    {
                //        Photo p = new Photo();
                //        p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                //        p.Path = Convert.ToString(drPhotos["Path"]);
                //        p.VisitCheckListPhotoId = Convert.ToString(drPhotos["VisitCheckListPhotoId"]);
                //        p.VisitSignatureId = Convert.ToString(drPhotos["VisitSignatureId"]);
                //        p.Latitude = Convert.ToString(drPhotos["Latitude"]);
                //        p.Longitude = Convert.ToString(drPhotos["Longitude"]);
                //        p.CreatedDate = Convert.ToString(drPhotos["CreatedDate"]);
                //        p.IsUnderInstallationArea = Convert.ToString(drPhotos["IsUnderInstallationArea"]);
                //        objList.Add(p);
                //    }

                //    visitCheckListItem.lstCheckListPhoto = objList;

                //    if (visitCheckListItem.CheckListClassTypeId != 5)
                //    {
                //        lstVisitCheckListItem.Add(visitCheckListItem);
                //    }
                //}

                //obj.serialNumTotalCount = serialNumTotalCount;
                //obj.capturePhotoTotalCount = capturePhotoTotalCount;
                //obj.signatureTotalCount = signatureTotalCount;
                //obj.lstVisitCheckListItem = lstVisitCheckListItem;
                //if (obj.lstVisitCheckListItem.Count > 0)
                //{
                //    objLst.Add(obj);
                //}

                List<Photo> chkReference = new List<Photo>();
                foreach (DataRow drRef in ReferencePhotos)
                {
                    string path = drRef["Path"].ToString();
                    Photo objPhoto = new Photo();
                    objPhoto.Path = path;
                    objPhoto.Name = Path.GetFileName(path);
                    objPhoto.VisitCheckListPhotoId = Convert.ToString(drRef["VisitCheckListPhotoId"]);
                    objPhoto.VisitSignatureId = Convert.ToString(drRef["VisitSignatureId"]);
                    chkReference.Add(objPhoto);
                }


                //List<Photo> objInstall = new List<Photo>();
                //List<Photo> objSerial = new List<Photo>();

                //foreach (DataRow dRow in DefaultPhotos)
                //{
                //    int ClassType = Convert.ToInt32(dRow["ClassType"]);
                //    Photo p = new Photo();
                //    p.VisitCheckListPhotoId = Convert.ToString(dRow["VisitCheckListPhotoId"]);
                //    p.VisitSignatureId = Convert.ToString(dRow["VisitSignatureId"]);
                //    p.Path = dRow["Path"].ToString();
                //    p.Name = Path.GetFileName(p.Path);
                //    p.Latitude = Convert.ToString(dRow["Latitude"]);
                //    p.Longitude = Convert.ToString(dRow["Longitude"]);

                //    p.CreatedDate = Convert.ToString(dRow["CreatedDate"]);

                //    if (ClassType == 1)
                //        objSerial.Add(p);
                //    else if (ClassType == 2)
                //        objInstall.Add(p);

                //}
                //objChk.InstallationPhotos = objInstall;

                //objChk.SerialPhotos = objSerial;
                objChk.jobId = jobId;
                //objChk.chkJobPhotos = objLst;
                objChk.ReferencePhotos = chkReference;
            }
            return objChk;
        }

        [HttpGet]
        public JsonResult LoadDefaultPhotos(string JobId)
        {
            CreateJob createJob = new CreateJob();
            var defaultphotoView = ControlToString("~/Views/Job/_JobDefaultPhotosNewTabular.cshtml", createJob);
            createJob.chkPhotosAll = LoadAllDefaultPhotos(Convert.ToInt32(JobId));
            if (createJob.chkPhotosAll.InstallationPhotos != null || createJob.chkPhotosAll.SerialPhotos != null)
            {

                defaultphotoView = ControlToString("~/Views/Job/_JobDefaultPhotosNewTabular.cshtml", createJob);

            }
            return Serializer.GetJsonResult(new { defaultphotoView });

        }

        public chkPhotos LoadAllDefaultPhotos(int jobId)
        {
            //List<JobSchedulingPhotos> objLst = new List<JobSchedulingPhotos>();
            DataSet dsCheckListPhotos = _job.GetChecklistPhotos(jobId);
            chkPhotos objChk = new chkPhotos();

            if (dsCheckListPhotos.Tables.Count > 0)
            {
                //DataTable dtSchedulingIds = dsCheckListPhotos.Tables[0];
                DataTable dtData = dsCheckListPhotos.Tables[1];
                //DataTable dtCheckListCount = dsCheckListPhotos.Tables[1];
                //DataTable dtName = dsCheckListPhotos.Tables[2];
                //DataRow[] ReferencePhotos = dtData.Select("IsReference=1");
                DataRow[] DefaultPhotos = dtData.Select("IsDefault=1");
                //JobSchedulingPhotos obj = new JobSchedulingPhotos();
                //DataRow[] result = dtData.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                //List<VisitCheckListItems> lstVisitCheckListItem = new List<VisitCheckListItems>();

                //int serialNumTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 1).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //int capturePhotoTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 2).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //int signatureTotalCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int?>("JobSchedulingId") == Convert.ToInt32(obj.jobSchedulingId) && a.Field<int>("CheckListClassTypeId") == 3).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();

                //DataRow[] checklistitems = dtName.Select("JobSchedulingId = " + jobSchedulingId.ToString());

                //foreach (DataRow dr in checklistitems)
                //{
                //    int count = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("TotalCheckListItemCount")).FirstOrDefault();
                //    int visitedCount = dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("VisitedCount")).FirstOrDefault();

                //    VisitCheckListItems visitCheckListItem = new VisitCheckListItems();
                //    visitCheckListItem.VisitCheckListItemId = Convert.ToString(dr["VisitCheckListItemId"]);
                //    visitCheckListItem.FolderName = Convert.ToString(dr["FolderName"]); //if(!string.IsNullOrEmpty(Convert.ToString(dr["FolderName"])) ? Convert.ToString(dr["FolderName"]) : ;

                //    visitCheckListItem.TotalCount = count;
                //    visitCheckListItem.VisitedCount = visitedCount;
                //    visitCheckListItem.CheckListClassTypeId = Convert.ToInt32(dr["CheckListClassTypeId"]); // dtCheckListCount.AsEnumerable().Where(a => a.Field<int>("VisitCheckListItemId") == Convert.ToInt32(dr["VisitCheckListItemId"])).Select(a => a.Field<int>("CheckListClassTypeId")).FirstOrDefault();
                //    visitCheckListItem.PDFLocationId = Convert.ToString(dr["PDFLocationId"]);
                //    visitCheckListItem.CaptureUploadImagePDFName = Convert.ToString(dr["CaptureUploadImagePDFName"]);
                //    visitCheckListItem.Isdeleted = Convert.ToBoolean(dr["IsDeleted"]);
                //    visitCheckListItem.CheckListPhotoTypeId = !string.IsNullOrEmpty(dr["CheckListPhotoTypeId"].ToString()) ? Convert.ToInt32(dr["CheckListPhotoTypeId"]) : 0;
                //    DataRow[] checkListPhotos = dtData.Select("VisitCheckListItemId = " + visitCheckListItem.VisitCheckListItemId);
                //    List<Photo> objList = new List<Photo>();
                //    foreach (DataRow drPhotos in checkListPhotos)
                //    {
                //        Photo p = new Photo();
                //        p.Name = Path.GetFileName(Convert.ToString(drPhotos["Path"]));
                //        p.Path = Convert.ToString(drPhotos["Path"]);
                //        p.VisitCheckListPhotoId = Convert.ToString(drPhotos["VisitCheckListPhotoId"]);
                //        p.VisitSignatureId = Convert.ToString(drPhotos["VisitSignatureId"]);
                //        p.Latitude = Convert.ToString(drPhotos["Latitude"]);
                //        p.Longitude = Convert.ToString(drPhotos["Longitude"]);
                //        p.CreatedDate = Convert.ToString(drPhotos["CreatedDate"]);
                //        p.IsUnderInstallationArea = Convert.ToString(drPhotos["IsUnderInstallationArea"]);
                //        objList.Add(p);
                //    }

                //    visitCheckListItem.lstCheckListPhoto = objList;

                //    if (visitCheckListItem.CheckListClassTypeId != 5)
                //    {
                //        lstVisitCheckListItem.Add(visitCheckListItem);
                //    }
                //}

                //obj.serialNumTotalCount = serialNumTotalCount;
                //obj.capturePhotoTotalCount = capturePhotoTotalCount;
                //obj.signatureTotalCount = signatureTotalCount;
                //obj.lstVisitCheckListItem = lstVisitCheckListItem;
                //if (obj.lstVisitCheckListItem.Count > 0)
                //{
                //    objLst.Add(obj);
                //}

                //List<Photo> chkReference = new List<Photo>();
                //foreach (DataRow drRef in ReferencePhotos)
                //{
                //    string path = drRef["Path"].ToString();
                //    Photo objPhoto = new Photo();
                //    objPhoto.Path = path;
                //    objPhoto.Name = Path.GetFileName(path);
                //    objPhoto.VisitCheckListPhotoId = Convert.ToString(drRef["VisitCheckListPhotoId"]);
                //    objPhoto.VisitSignatureId = Convert.ToString(drRef["VisitSignatureId"]);
                //    chkReference.Add(objPhoto);
                //}


                List<Photo> objInstall = new List<Photo>();
                List<Photo> objSerial = new List<Photo>();

                foreach (DataRow dRow in DefaultPhotos)
                {
                    int ClassType = Convert.ToInt32(dRow["ClassType"]);
                    Photo p = new Photo();
                    p.VisitCheckListPhotoId = Convert.ToString(dRow["VisitCheckListPhotoId"]);
                    p.VisitSignatureId = Convert.ToString(dRow["VisitSignatureId"]);
                    p.Path = dRow["Path"].ToString();
                    p.Name = Path.GetFileName(p.Path);
                    p.Latitude = Convert.ToString(dRow["Latitude"]);
                    p.Longitude = Convert.ToString(dRow["Longitude"]);

                    p.CreatedDate = Convert.ToString(dRow["CreatedDate"]);

                    if (ClassType == 1)
                        objSerial.Add(p);
                    else if (ClassType == 2)
                        objInstall.Add(p);

                }
                objChk.InstallationPhotos = objInstall;

                objChk.SerialPhotos = objSerial;
                objChk.jobId = jobId;
                //objChk.chkJobPhotos = objLst;
                //objChk.ReferencePhotos = chkReference;
            }
            return objChk;
        }

        [HttpPost]
        public ActionResult ChangeSTCJobStage(string stcjobstage, string jobID)
        {
            try
            {
                Int32.TryParse(jobID, out int jobId);
                int STCJobStageID = Convert.ToInt32(stcjobstage);
                DataSet ds = _job.ChangeSTCJobStage(ProjectSession.LoggedInUserId, ProjectSession.UserTypeId, STCJobStageID, jobId, DateTime.Now);
                List<int> peakpayJobIds = new List<int>();

                DataSet dsUpdatedSTCJobIDs = _job.UpdateUrgentStatusFlagForJobIds(jobId);
                if (dsUpdatedSTCJobIDs != null && dsUpdatedSTCJobIDs.Tables.Count > 0 && dsUpdatedSTCJobIDs.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsUpdatedSTCJobIDs.Tables[0].Rows)
                    {
                        SortedList<string, string> data = new SortedList<string, string>();
                        string stcid = dr["STCJobDetailsID"].ToString();
                        string isUrgentSubmission = !string.IsNullOrEmpty(dr["IsUrgentSubmission"].ToString()) ? dr["IsUrgentSubmission"].ToString() : Convert.ToString(false);
                        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                        data.Add("IsUrgentSubmission", isUrgentSubmission);
                        data.Add("STCStatus", stcStatus);
                        data.Add("ColorCode", colorCode);
                        data.Add("STCStatusId", STCJobStageID.ToString());
                        //await CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data, true, true);
                        Helper.Log.WriteLog(DateTime.Now.ToString() + " setcachedataForStcId: " + stcid + " data: " + data.ToList()[1]);
                    }
                }


                #region save stcJobHistory into xml
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                {
                    if (STCJobStageID == 20 || STCJobStageID == 22 || STCJobStageID == 14)
                        peakpayJobIds = ds.Tables[1].AsEnumerable().Where(r => r.Field<int>("STCSettlementTerm") == 12 || (r.Field<int>("STCSettlementTerm") == 10 && r.Field<int>("CustomSettlementTerm") == 12)).Select(dr => dr.Field<int>("JobID")).Distinct().ToList();
                    foreach (DataRow drBulkChangeSTCJobStage in ds.Tables[1].Rows)
                    {
                        int JobID = Convert.ToInt32(drBulkChangeSTCJobStage["JobID"]);
                        int STCStatusID = Convert.ToInt32(drBulkChangeSTCJobStage["STCStatusID"]);
                        string Description = drBulkChangeSTCJobStage["Description"].ToString();
                        string CreatedByID = drBulkChangeSTCJobStage["CreatedBy"].ToString();
                        string CreatedBy = "";
                        if (CreatedByID.ToString() == "-1")
                        {
                            CreatedBy = "System";
                        }
                        else
                        {
                            CreatedBy = _job.GetUsernameByUserID(Convert.ToInt32(CreatedByID));
                        }
                        string JobHistoryMessage = "changed STC Status to " + GetEnumDescription((SystemEnums.STCJobStatus)STCStatusID);
                        Common.SaveSTCJobHistorytoXML(JobID, JobHistoryMessage, Description, STCStatusID, "Statuses", "STCSubmission", CreatedBy, false);
                    }
                }
                #endregion
                #region update cache for peakpay
                //if (peakpayJobIds.Count > 0)
                //    await CommonBAL.SetCacheDataForPeakPayFromJobId(string.Join(",", peakpayJobIds), "");
                #endregion
                //if (STCJobStageID == 14 || STCJobStageID == 22)
                //{
                //    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                //    {
                //        _jobRules.CreateSTCInvoicePDFForRECData(ds.Tables[0], false);
                //    }
                //}



                //if (STCJobStageID == 17)
                //{
                //    SendMailOnComplianceIssue(stcjobids, 33);
                //}
                //if (STCJobStageID == 18)
                //{
                //    SendMailOnComplianceIssue(stcjobids, 42);
                //}
                //if (STCJobStageID == 14)
                //{
                //    _jobRules.SendMailOnCERFailed(stcjobids);
                //}

                //Spv allow global level or SC specific level
                //List<CheckSPVrequired> lstSpvRequiredSolarCompanyWise = _job.GetSPVRequiredOrNotOnSCAOrGlobalLevelOrManufacturer(JobIds: string.Join(",", checkSPVrequired.Select(a => a.JobId))).ToList();
                // List<string> lststcjobids = stcjobids.Split(',').ToList();
                //List<int> lststcjobids = new List<int>();
                //List<int> lstjobIds = new List<int>();
                //checkSPVrequired.ForEach(x => lstSpvRequiredSolarCompanyWise.First(y => y.JobId == x.JobId).STCJobDetailsID = x.STCJobDetailsID);

                //if (lstSpvRequiredSolarCompanyWise != null)
                //{
                //    if (lstSpvRequiredSolarCompanyWise.Any())
                //    {
                //        lststcjobids = lstSpvRequiredSolarCompanyWise.Where(x => x.IsSPVRequired == true).Select(x => x.STCJobDetailsID).ToList();
                //        lstjobIds = lstSpvRequiredSolarCompanyWise.Where(x => x.IsSPVRequired == true).Select(x => x.JobId).ToList();
                //    }
                //}

                // lststcjobids = lststcjobids.Where(x => checkSPVrequired.Where(z => z.IsSPVRequired == true).Select(y => y.STCJobDetailsID.ToString()).ToArray().Contains(x)).ToList();
                //int reSPVVerified = 0;
                //foreach (var jid in lstjobIds)
                //{
                //    if (STCJobStageID == 19)
                //    {
                //        bool? IsSPVVerified = _job.GetProductVerificationStatusByJobId(jid);
                //        if (IsSPVVerified == null || IsSPVVerified == false)
                //        {
                //            reSPVVerified = ReProductVerificationForCertChanges(jid, true);
                //            if (reSPVVerified == 1)
                //                return Json(new { success = false, message = "JobId- " + jid + " already Installation Verified,So cant do re-Product Verification." }, JsonRequestBehavior.AllowGet);
                //            else if (reSPVVerified == 2)
                //                return Json(new { success = false, message = "JobId- " + jid + " having photo not available issue." }, JsonRequestBehavior.AllowGet);
                //        }
                //    }
                //}
                //if (reSPVVerified == 3 || reSPVVerified == 0)
                //{
                //    foreach (var id in lststcjobids)
                //    {
                //        if (STCJobStageID == 19)
                //        {
                //            SPVInstallationVerification(Convert.ToInt32(id));
                //        }

                //    }
                //}

                //List<string> stcjobidlst = stcjobids.Split(',').ToList();
                //foreach (var stcid in stcjobidlst)
                //{
                //    if (!string.IsNullOrEmpty(stcid))
                //    {
                //        SortedList<string, string> data = new SortedList<string, string>();
                //        string stcStatus = Common.GetDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                //        string colorCode = Common.GetSubDescription((SystemEnums.STCJobStatus)STCJobStageID, "");
                //        if (STCJobStageID==15 || STCJobStageID == 22)
                //        {
                //            string isUrgentSubmission = Convert.ToString(false);
                //            data.Add("IsUrgentSubmission", isUrgentSubmission);
                //        }

                //        data.Add("STCStatus", stcStatus);
                //        data.Add("ColorCode", colorCode);
                //        data.Add("STCStatusId", STCJobStageID.ToString());
                //        CommonBAL.SetCacheDataForSTCSubmission(Convert.ToInt32(stcid), null, data);
                //        Helper.Log.WriteLog(DateTime.Now.ToString() + " setcachedataForStcId: " + stcid + " data: " + data.ToList()[1]);
                //    }
                //}

                return this.Json(new { success = true });
            }
            catch (Exception ex)
            {
                Helper.Log.WriteError(ex, "Exception in ChangeSTCJobStage:");
                return this.Json(new { success = false });
            }
        }

        public string GetEnumDescription(Enum value)
        {
            FieldInfo fi = value.GetType().GetField(value.ToString());

            DescriptionAttribute[] attributes = fi.GetCustomAttributes(typeof(DescriptionAttribute), false) as DescriptionAttribute[];

            if (attributes != null && attributes.Any())
            {
                return attributes.First().Description;
            }

            return value.ToString();
        }
    }
}


