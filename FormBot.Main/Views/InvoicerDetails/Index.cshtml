@model FormBot.Entity.Invoicer
@using FormBot.Entity;
@using FormBot.Helper;
@using FormBot.Helper.Helper;
@{
    ViewBag.Title = "InvoicerDetails";
}
<style>
    .ui-autocomplete {
        z-index: 1051 !important;
    }
</style>

<div class="container-fluid">
    <div class="title">
        <h1>Invoicer Details</h1>
        <a id="btnCreateNewInvoicer" class="btn primary pull-right icon-btn"><span class="sprite-img add_ic"></span>Create New Invoicer</a>
        <input type="button" id="btnSyncAccountCode" value="Sync Account Code" class="primary pull-right mail_ic" data-toggle="modal" data-target="" data-backdrop="static" data-keyboard="false" onclick="SyncAccountCode();" />
    </div>

    <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>

    <form class="form-block" style="margin-top:10px;">
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="form-group">
                <label class="control-label">Invoicer Name:</label>
                <input type="text" id="txtInvoicerName" class="form-control" maxlength="100" onkeyup="if (event.keyCode == 13)document.getElementById('btnSearch').click()">
            </div>
        </div>
        <div class="col-sm-6 col-md-4 col-lg-3">
            <div class="form-group">
                <label class="control-label">Account Code:</label>
                <input type="text" id="txtAccountCode" class="form-control" maxlength="100" onkeyup="if (event.keyCode == 13)document.getElementById('btnSearch').click()">
            </div>
        </div>

        @*<div class="col-sm-6 col-md-4 col-lg-3">
                <div class="form-group">
                    <label class="control-label">Is Active:</label><br />
                    <input type="checkbox" name="IsActive" id="btnchkIsActive" checked="checked" onkeyup="if (event.keyCode == 13)document.getElementById('btnSearch').click()" />
                </div>
            </div>*@

        <div class="form-group col-xs-12">
            <input type="button" id="btnSearch" value="Search" class="primary search_ic" onclick="SearchInvoicer();">

            <div class="default btn icon-btn" onclick="ResetSearchFilters();">
                <span class="sprite-img reset_ic"></span>
                <input type="button" id="btnReset" value="Reset" class="">
            </div>


        </div>
    </form>
    <div class="grid_topbar col-xs-12" ">
        <p class="job_result" id="numRecords"></p>
    </div>

    <div class="row">
        <div id="grid" class="col-xs-12">
            <!-- Grid start -->
            <div class="table-responsive">
                <table id="datatable" class="table table-hover">
                    <thead>
                        <tr>
                            <th style="display:none;"><span>@Html.DisplayName("InvoicerId")</span></th>
                            <th width="5%"><span>@Html.DisplayName("Invoicer Name")</span></th>
                            <th width="5%"><span>@Html.DisplayName("Account Code ")</span></th>
                            <th width="5%"><span>@Html.DisplayName("First Name")</span></th>
                            <th width="5%"><span>@Html.DisplayName("Last Name")</span></th>
                            <th width="5%"><span>@Html.DisplayName("Phone")</span></th>
                            <th class="action">@Html.DisplayName("Action")</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="popupcreatenewinvoicer" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" style="margin-top:200px">
    <div class="modal-dialog  modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header ">
                <button type="button" id="popupcreatenewinvoicerclose" class="close" data-dismiss="modal" aria-label="Close">
                    <img src="/images/close-btn.png" alt="">
                </button>
                <h4 class="modal-title" id="myModalLabel">Create New Invoicer</h4>
            </div>
            <div class="modal-body">
                <div class="form-border">
                    <div class="container-fluid">
                        <div class="alert alert-danger alert-dismissible" role="alert" id="popuperrorMsgRegion" style="display: none">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        </div>
                        <div class="row">
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerName, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.InvoicerName, new { @class = "form-control valid" })
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerFirstName, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.InvoicerFirstName, new { @class = "form-control", @maxlength = 100 })
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerLastName, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.InvoicerLastName, new { @class = "form-control", @maxlength = 256 })
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerPhone, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.InvoicerPhone, new { @class = "form-control", @maxlength = 20, onkeypress = "return isNumber(event);" })
                                </div>
                            </div>
                            <div class="col-sm-4 SAAS">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.UniqueCompanyNumber, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.UniqueCompanyNumber, new { @class = "form-control", @tabindex = 43, id = "UniqueCompanyNumberSAAS" })
                                </div>
                            </div>

                            <div class="col-sm-4 SAAS">
                                <div class="form-group">
                                    @Html.HiddenFor(m => m.AccountCode, new { id = "hdnAccountCode" })
                                    @Html.LabelFor(m => m.AccountCode, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.AccountCode, new List<SelectListItem>(), new { @class = "form-control", id = "AccountCode" })
                                </div>
                            </div>

                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerAddressID, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.InvoicerAddressID, new SelectList((ViewBag.PostalAddressType) as SelectList, "Value", "Text"), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.InvoicerAddressID)
                                </div>
                            </div>

                            <div class="col-sm-6 col-md-4 DPAInvoicer">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerUnitTypeID, new { @class = "control-label", @id = "lblWholesalerUnitTypeID" })
                                    @Html.DropDownListFor(m => m.InvoicerUnitTypeID, new List<SelectListItem>(), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.InvoicerUnitTypeID)
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-4 DPAInvoicer">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerUnitNumber, new { @class = "control-label", @id = "lblWholesalerUnitNumber" })
                                    @Html.TextBoxFor(m => m.InvoicerUnitNumber, new { @class = "form-control", @maxlength = 20 })
                                    @Html.ValidationMessageFor(m => m.InvoicerUnitNumber)
                                </div>
                            </div>
                        </div>
                        <div class="row DPAInvoicer">
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerStreetNumber, new { @class = "control-label required", @id = "lblWholesalerStreetNumber" })
                                    @Html.TextBoxFor(m => m.InvoicerStreetNumber, new { @class = "form-control", @maxlength = 20 })
                                    @Html.ValidationMessageFor(m => m.InvoicerStreetNumber)
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerStreetName, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.InvoicerStreetName, new { @class = "form-control", @maxlength = 20 })
                                    @Html.ValidationMessageFor(m => m.InvoicerStreetName)
                                </div>
                            </div>

                            <div class="DPAInvoicer">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.InvoicerStreetTypeID, new { @class = "control-label required" })
                                        @Html.DropDownListFor(m => m.InvoicerStreetTypeID, new List<SelectListItem>(), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.InvoicerStreetTypeID)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row PDAInvoicer" style="display:none">
                            <div class="col-sm-4 ">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerPostalAddressID, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.InvoicerPostalAddressID, new List<SelectListItem>(), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.InvoicerPostalAddressID)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerPostalDeliveryNumber, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.InvoicerPostalDeliveryNumber, new { @class = "form-control", @maxlength = 50 })
                                    @Html.ValidationMessageFor(m => m.InvoicerPostalDeliveryNumber)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerTown, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.InvoicerTown, new { @class = "form-control", @maxlength = 50 })
                                    @Html.ValidationMessageFor(m => m.InvoicerTown)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerState, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.InvoicerState, new { @class = "form-control", @maxlength = 20 })
                                    @Html.ValidationMessageFor(m => m.InvoicerState)
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InvoicerPostCode, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.InvoicerPostCode, new { @class = "form-control", @maxlength = 20 })
                                    @Html.ValidationMessageFor(m => m.InvoicerPostCode)
                                </div>
                            </div>
                        </div>
                        <div class="form-group defaultFormBot tab_bottomrow">
                            <div class="btn primary icon-btn" id="btnSaveGlobalPricing">
                                <span class="sprite-img save_ic"></span>
                                <input type="button" name="SaveInvoicer" value="Save" class="" id="btnSaveInvoicer" tabindex="44" onclick="SaveInvoicer()">
                            </div>
                            <input type="button" value="Cancel" id="btnCancel" class="default cancel_ic" tabindex="45" onclick="ClearForm()">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var dropDownData = [];
    var Glbl_InvoicerId = '';
    var urlgetAccountCodes = '@Url.Action("GetAccountCodesFromXero", "InvoicerDetails")';
    var urlSaveInvoicerDetails = '@Url.Action("SaveInvoicerDetails", "InvoicerDetails")';
    var urlGetInvoicerList = '@Url.Action("GetInvoicerList", "InvoicerDetails")';
    var processRequestURL = '@Url.Action("ProcessRequest","User")';
    var AccountCode = '@Model.AccountCode';
    var isSync = '@ViewBag.isRecallSync';
    var PageSize = [10, 25, 50,100,200];
    $(document).ready(function () {
        dropDownData.push({ id: 'InvoicerUnitTypeID', key: "UnitType", value: "0", hasSelect: true, callback: null, defaultText: null, proc: 'UnitType_BindDropdown', param: [], bText: 'UnitTypeName', bValue: 'UnitTypeID' },
            { id: 'InvoicerStreetTypeID', key: "StreetType", value: "0", hasSelect: true, callback: null, defaultText: null, proc: 'StreetType_BindDropdown', param: [], bText: 'StreetTypeName', bValue: 'StreetTypeID' },
            { id: 'InvoicerPostalAddressID', key: "PostalAddress", value: "0", hasSelect: true, callback: null, defaultText: null, proc: 'PostalAddress_BindDropdown', param: [], bText: 'PostalDeliveryType', bValue: 'PostalAddressID' },
            { id: 'AccountCode', key: "Code", value: "0", hasSelect: true, callback: null, defaultText: null, proc: 'AccountCode_BindDropdown', param: [], bText: 'Code', bValue: 'Code' });

        if (isSync.toLowerCase() ==  'true') {
            SyncAccountCode();
        }
        dropDownData.bindDropdown();
        DrawInvoicerGrid();

        TownPostcodeAutoComplete($('#InvoicerTown'), $('#InvoicerState'), $('#InvoicerPostCode'));
    });


    $('#btnCreateNewInvoicer').click(function () {
        ClearForm();
        $("#btnSaveInvoicer").val('Save');
        $('#popupcreatenewinvoicer').modal({ backdrop: 'static', keyboard: false });
    });

    $('#popupcreatenewinvoicerclose').click(function () {
        $('#popupcreatenewinvoicer').modal('hide');
    });

    function SyncAccountCode() {
        $.ajax(
            {
                url: urlgetAccountCodes,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'GET',
                data: {},
                success: function (response) {
                    if (response && response.status == false) {
                        if (typeof (response.error) != 'undefined' && (response.error.toLowerCase() == 'specified method is not supported.' || response.error.toLowerCase() == 'renewtokenexception' || response.error.toLowerCase() == 'unauthorizedexception' || response.error.toLowerCase() == 'invalid_grant')) {
                            window.close();
                            window.open("/XeroConnect/Connect", "_blank");
                        }
                        else if (typeof (response.error) != 'undefined' && response.error.toLowerCase() == 'sessiontimeout') {
                            window.location.href = logoutURL;
                        }
                        else if (response.error) {
                            showErrorMessage(response.error);
                        }
                        else {
                            showErrorMessage(response.error);
                        }
                    }
                    else {
                        //showErrorMessage(response.message);
                        var optionhtml = '<option value="' + 0 + '">' + "Select" + '</option>';
                        $('#AccountCode').append(optionhtml);
                        $.each(response.accountsCodes, function (index, value) {
                            $('#AccountCode').append('<option value="' + value.Code + '">' + value.Code + '</option>');
                        });
                        showSuccessMessage("Account codes synced successfully.");
                    }
                },
                error: function (ex) {
                    showErrorMessage(ex);
                }
            }
        );
    }

    function showErrorMessage(message) {
        $(".alert").hide();
        $("#successMsgRegion").hide();
        $("#errorMsgRegion").html(closeButton + message);
        $("#errorMsgRegion").show();
    }

    function showSuccessMessage(message) {
        $(".alert").hide();
        $("#errorMsgRegion").hide();
        $("#successMsgRegion").html(closeButton + message);
        $("#successMsgRegion").show();
    }

    $("#InvoicerAddressID").change(function () {
        var addressID = $('#InvoicerAddressID option:selected').val();
        POInvoicerAddress(addressID);
    });

    function POInvoicerAddress(addressID) {
        if (addressID == 1) {
            $('.DPAInvoicer').show();
            $('.PDAInvoicer').hide();
        }
        else {
            $('.DPAInvoicer').hide();
            $('.PDAInvoicer').show();
        }
    }

    function ClearForm() {
        $("#InvoicerName").val('');
        $("#InvoicerFirstName").val('');
        $("#InvoicerLastName").val('');
        $("#InvoicerPhone").val('');
        $("#UniqueCompanyNumberSAAS").val('');
        $("#AccountCode").val('');
        $("#InvoicerAddressID").val('');
        $("#InvoicerUnitTypeID").val('');
        $("#InvoicerUnitNumber").val('');
        $("#InvoicerStreetNumber").val('');
        $("#InvoicerStreetName").val('');
        $("#InvoicerStreetTypeID").val('');
        $("#InvoicerPostalAddressID").val('');
        $("#InvoicerPostalDeliveryNumber").val('');
        $("#InvoicerTown").val('');
        $("#InvoicerState").val('');
        $("#InvoicerPostCode").val('');
        $('#popupcreatenewinvoicer').modal('hide');
        $("#btnSaveInvoicer").val('Save');
    }

    function SaveInvoicer() {
        if (ValidateForm()) {
            $.ajax({
                type: "POST",
                url: urlSaveInvoicerDetails,
                data: {
                    InvoicerId: $("#btnSaveInvoicer").val() == "Save" ? null : Glbl_InvoicerId,
                    InvoicerName: $("#InvoicerName").val(),
                    InvoicerFirstName: $("#InvoicerFirstName").val(),
                    InvoicerLastName: $("#InvoicerLastName").val(),
                    InvoicerPhone: $("#InvoicerPhone").val(),
                    UniqueCompanyNumber: $("#UniqueCompanyNumberSAAS").val(),
                    AccountCode: $("#AccountCode").val(),
                    InvoicerAddressID: $("#InvoicerAddressID").val(),
                    InvoicerUnitTypeID: $("#InvoicerUnitTypeID").val(),
                    InvoicerUnitNumber: $("#InvoicerUnitNumber").val(),
                    InvoicerStreetNumber: $("#InvoicerStreetNumber").val(),
                    InvoicerStreetName: $("#InvoicerStreetName").val(),
                    InvoicerStreetTypeID: $("#InvoicerStreetTypeID").val(),
                    InvoicerPostalAddressID: $("#InvoicerPostalAddressID").val(),
                    InvoicerPostalDeliveryNumber: $("#InvoicerPostalDeliveryNumber").val(),
                    InvoicerTown: $("#InvoicerTown").val(),
                    InvoicerState: $("#InvoicerState").val(),
                    InvoicerPostCode: $("#InvoicerPostCode").val(),
                    isActive: true,
                    DATAOPMODE: $("#btnSaveInvoicer").val() == "Save" ? 1 : 2
                },
                async: false,
                success: function (response) {
                    $("#btnSaveInvoicer").val() == "Save" ? showSuccessMessage("Invoicer details saved sucessfully.") : showSuccessMessage("Invoicer details updated sucessfully.");
                    DrawInvoicerGrid();
                    ClearForm();
                    Glbl_InvoicerId = '';
                },
                error: function (ex) {
                    showErrorMessage("Error saving invoicer details.");
                }
            });
        }
    }

    function ValidateForm() {
        if ($("#InvoicerAddressID").val() == 1) {
            if ($("#InvoicerName").val() == '') {
                alert('Please enter invoicer.');
                return false;
            }
            else if ($('#InvoicerStreetNumber').val() == '') {
                alert('Please enter invoicer street number.');
                return false;
            }
            else if ($("#InvoicerStreetName").val() == '') {
                alert('Please enter invoicer street name.');
                return false;
            }
            else if ($("#InvoicerStreetTypeID").val() == '') {
                alert('Please enter invoicer street type.');
                return false;
            }
            else if ($("#InvoicerTown").val() == '') {
                alert('Please enter invoicer town.');
                return false;
            }
            else if ($("#InvoicerState").val() == '') {
                alert('Please enter invoicer state.');
                return false;
            }
            else if ($("#InvoicerPostCode").val() == '') {
                alert('Please enter invoicer postcode.');
                return false;
            }
            return true;
        }
        else {
            if ($("#InvoicerName").val() == '') {
                alert('Please enter invoicer.');
                return false;
            }
            else if ($('#InvoicerPostalAddressID').val() == '') {
                alert('Please enter invoicer postal delivery type.');
                return false;
            }
            else if ($("#InvoicerPostalDeliveryNumber").val() == '') {
                alert('Please enter invoicer postal delivery number.');
                return false;
            }
            else if ($("#InvoicerTown").val() == '') {
                alert('Please enter invoicer town.');
                return false;
            }
            else if ($("#InvoicerState").val() == '') {
                alert('Please enter invoicer state.');
                return false;
            }
            else if ($("#InvoicerPostCode").val() == '') {
                alert('Please enter invoicer postcode.');
                return false;
            }
            return true;
        }
    }
    function DrawInvoicerGrid() {
        if ($.fn.DataTable.isDataTable('#datatable')) {
            $('#datatable').DataTable().destroy();
        }
        $('#datatable tbody').empty();
        $('#datatable').DataTable({
            destory: true,
            retrieve: true,
            processing: true,
            serverSide: true,
            autoWidth: false,
            iDisplayLength: 10,
            lengthMenu: PageSize,
            language: {
                sLengthMenu: "Page Size: _MENU_"
            },
            columns: [
                { 'data': 'InvoicerId', visible: false },
                { 'data': 'InvoicerName',"width": "8%" },
                { 'data': 'AccountCode' },
                { 'data': 'InvoicerFirstName' },
                { 'data': 'InvoicerLastName' },
                { 'data': 'InvoicerPhone' },
                {
                    'data': 'Id',
                    'width': '2%',
                    "render": function (data, type, full, meta) {
                        debugger;
                        var deleteButton = "";
                        var title = "";
                        var viewHref = "";
                        var returnHTML = '';
                            imgEdit = 'background:url(../Images/edit-icon.png) no-repeat center; text-decoration:none;';
                        var EditHref = "javascript:EditInvoicer('" + full.InvoicerId + "','" + full.InvoicerName + "', '" + full.InvoicerFirstName + "','" + full.InvoicerLastName + "','" +
                            full.InvoicerPhone + "','" + full.UniqueCompanyNumber + "','" + full.AccountCode + "','" +
                            full.InvoicerAddressID + "','" + full.InvoicerUnitTypeID + "','" + full.InvoicerUnitNumber + "','" +
                            full.InvoicerStreetNumber + "','" + full.InvoicerStreetName + "','" + full.InvoicerStreetTypeID + "','" +
                            full.InvoicerTown + "','" + full.InvoicerState + "','" + full.InvoicerPostCode + "','" +
                            full.InvoicerPostalAddressID + "','" + full.InvoicerPostalDeliveryNumber + "')";
                            returnHTML += '&nbsp;&nbsp;' + '<a href="' + EditHref + '" class="action edit" style="' + imgEdit + '" title="Edit">' + '&nbsp; &nbsp; &nbsp; &nbsp;' + '</a>';

                            //imgdelete = 'background:url(../Images/delete-icon.png) no-repeat center; text-decoration:none; margin-left: 10px;';
                            //var deleteHref = "javascript:DeleteBillableTerm('" + full.Id + "','" + full.BillerCode + "')";
                            //returnHTML += '<a href="' + deleteHref + '" class="action delete" style="' + imgdelete + '" title="Delete">' + '&nbsp; &nbsp; &nbsp; &nbsp;' + '</a>';
                        return returnHTML;
                    },
                    "orderable": false,
                },
            ],
            dom: "<<'table-responsive tbfix't><'paging grid-bottom prevar'p><'bottom'l><'clear'>>",
            "createdRow": function (row, data, dataIndex) {
                if (data.IsEnable == false) {
                    $('td', row).css('background-color', '#D2D2D2');
                }
            },
            bServerSide: true,
            sAjaxSource: urlGetInvoicerList,

            "fnDrawCallback": function () {
                if ($('#chkAll').prop('checked') == true) {
                    chkCount = $('#datatable >tbody >tr').length;
                }
                else {
                    chkCount = 0;
                }
                $("#datatable_wrapper").find(".bottom").find(".dataTables_paginate").remove();
                $(".paging a.previous").html("&nbsp");
                $(".paging a.next").html("&nbsp");
                $('.grid-bottom span:first').attr('id', 'spanMain');
                $("#spanMain span").html("");
                $(".ellipsis").html("...");

                if ($(".paging").find("span").length >= 1) {
                    $("#datatable_length").show();
                } else if ($("#datatable").find("tr").length > 11) { $("#datatable_length").show(); } else { $("#datatable_length").hide(); }

                //--------To show display records from total records-------------------
                var table = $('#datatable').DataTable();
                var info = table.page.info();
                if (info.recordsTotal == 0) {
                    document.getElementById("numRecords").innerHTML = '<b>' + 0 + '</b>  of  <b>' + info.recordsTotal + '</b> Invoicer Details(s) found';
                }
                else {
                    document.getElementById("numRecords").innerHTML = '<b>' + $('#datatable >tbody >tr').length + '</b>  of  <b>' + info.recordsTotal + '</b> Invoicer Details(s) found';
                }
            },
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "InvoicerName", "value": $("#txtInvoicerName").val() });
                aoData.push({ "name": "AccountCode", "value": $("#txtAccountCode").val() });
            }
        });
    }

    function SearchInvoicer() {
        DrawInvoicerGrid();
    }

    function ResetSearchFilters() {
        $("#txtInvoicerName").val('');
        $("#txtAccountCode").val('');
        DrawInvoicerGrid();
    }

    function EditInvoicer(InvoicerId, InvoicerName, InvoicerFirstName, InvoicerLastName, InvoicerPhone, UniqueCompanyNumber, AccountCode,
        InvoicerAddressID, InvoicerUnitTypeID, InvoicerUnitNumber, InvoicerStreetNumber, InvoicerStreetName, InvoicerStreetTypeID, InvoicerTown,
        InvoicerState, InvoicerPostCode, InvoicerPostalAddressID, InvoicerPostalDeliveryNumber) {

        $("#InvoicerName").val(InvoicerName == 'null' ? '' : InvoicerName);
        $("#InvoicerFirstName").val(InvoicerFirstName == 'null' ? '' : InvoicerFirstName);
        $("#InvoicerLastName").val(InvoicerLastName == 'null' ? '' : InvoicerLastName);
        $("#InvoicerPhone").val(InvoicerPhone == 'null' ? '' : InvoicerPhone);
        $("#UniqueCompanyNumberSAAS").val(UniqueCompanyNumber == 'null' ? '' : UniqueCompanyNumber);
        $("#AccountCode").val(AccountCode == 'null' ? '' : AccountCode);
        $("#InvoicerAddressID").val(InvoicerAddressID == 'null' ? '' : InvoicerAddressID);
        $("#InvoicerUnitTypeID").val(InvoicerUnitTypeID == 'null' ? '' : InvoicerUnitTypeID);
        $("#InvoicerUnitNumber").val(InvoicerUnitNumber == 'null' ? '' : InvoicerUnitNumber);
        $("#InvoicerStreetNumber").val(InvoicerStreetNumber == 'null' ? '' : InvoicerStreetNumber);
        $("#InvoicerStreetName").val(InvoicerStreetName == 'null' ? '' : InvoicerStreetName);
        $("#InvoicerStreetTypeID").val(InvoicerStreetTypeID == 'null' ? '' : InvoicerStreetTypeID);
        $("#InvoicerPostalAddressID").val(InvoicerPostalAddressID == 'null' ? '' : InvoicerPostalAddressID);
        $("#InvoicerPostalDeliveryNumber").val(InvoicerPostalDeliveryNumber == 'null' ? '' : InvoicerPostalDeliveryNumber);
        $("#InvoicerTown").val(InvoicerTown == 'null' ? '' : InvoicerTown);
        $("#InvoicerState").val(InvoicerState == 'null' ? '' : InvoicerState);
        $("#InvoicerPostCode").val(InvoicerPostCode == 'null' ? '' : InvoicerPostCode);

        $('#popupcreatenewinvoicer').modal({ backdrop: 'static', keyboard: false });
        $("#btnSaveInvoicer").val('Update');
        Glbl_InvoicerId = InvoicerId;
    }

    function TownPostcodeAutoComplete(objTown, objState, objPostCode) {
        objTown.autocomplete({
            minLength: 3,
            source: function (request, response) {
                $.ajax({
                    type: 'GET',
                    url: processRequestURL,
                    dataType: 'json',
                    data: {
                        excludePostBoxFlag: true,
                        q: request.term
                    },
                    success: function (data) {
                        var data1 = JSON.parse(data);
                        console.log(data1);
                        if (data1.localities.locality instanceof Array)
                            response($.map(data1.localities.locality, function (item) {
                                return {
                                    label: item.location + ', ' + item.state + ', ' + item.postcode,
                                    value: item.location,
                                    state: item.state,
                                    postcode: item.postcode
                                }
                            }));
                        else
                            response($.map(data1.localities, function (item) {
                                return {
                                    label: item.location + ', ' + item.state + ', ' + item.postcode,
                                    value: item.location,
                                    state: item.state,
                                    postcode: item.postcode
                                }
                            }));
                    }
                })
            },
            select: function (event, ui) {
                objState.val(ui.item.state);
                objPostCode.val(ui.item.postcode);
            }
        });

        objPostCode.autocomplete({
            minLength: 3,
            source: function (request, response) {
                $.ajax({
                    type: 'GET',
                    url: processRequestURL,
                    dataType: 'json',
                    data: {
                        excludePostBoxFlag: true,
                        q: request.term
                    },
                    success: function (data) {
                        var data1 = JSON.parse(data);
                        if (data1.localities.locality instanceof Array)
                            response($.map(data1.localities.locality, function (item) {
                                return {
                                    label: item.location + ', ' + item.state + ', ' + item.postcode,
                                    value: item.postcode,
                                    state: item.state,
                                    location: item.location
                                }
                            }));
                        else
                            response($.map(data1.localities, function (item) {
                                return {
                                    label: item.location + ', ' + item.state + ', ' + item.postcode,
                                    value: item.postcode,
                                    state: item.state,
                                    location: item.location
                                }
                            }));
                    }
                })
            },
            select: function (event, ui) {
                objState.val(ui.item.state);
                objTown.val(ui.item.location);
            }
        });
    }
</script>