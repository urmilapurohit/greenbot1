@model FormBot.Entity.CreateJob
@using FormBot.Helper;
<div class="job-com-box coc-form-box">
    <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegionSCAStatementJobScreen" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegionSCAStatementJobScreen" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <div class="sub-title" style="margin-bottom:0px;padding-bottom:0px!important">

        <h4 style="width:300px">Written Statements Declarations</h4>

        <a href="javascript:void(0)" title="Edit Retailer Declaration" class="icon-link sprite-img edit-icon" id="btnUpdateJobRetailer" name="UpdateJobRetailer" style="display:inline-block;margin-bottom:17px"></a>
        <div class="title-btn">
            <div class="btn-group pull-right" role="group">

                <button id="btnAutoSignSetting" type="button" class="btn primary icon-btn" aria-haspopup="true" aria-expanded="false" onclick="AutoSign()">
                    <span class="sprite-img download_ic"></span>Auto Sign Setting
                </button>
            </div>
            @*<button type="button" data-type="other" id="btnGenerateDocSCStatement" class="btn primary icon-btn pull-right" onclick="">
                    <span class="sprite-img add_ic"></span>Generate
                </button>*@

        </div>
    </div>

    <div class="row">
        <div class="col-sm-8" style="margin-top:25px">
            <div class="form-group row">
                <div class="col-sm-4">
                    <label class="control-label" id="lblUserId" style="margin-top:10px">Retailer Representative:</label>
                </div>
                <div class="col-sm-6" style="margin-left:-35px">
                    @Html.TextBoxFor(model => model.JobRetailerSetting.RepresentativeName, new { id = "RepresentativeName", @class = "form-control", @style = "display:inline-block;height:30px;", disabled = "disabled" })
                </div>

            </div>
            <div class="form-group row">
                <div class="col-sm-4">
                    <label class="control-label" id="lblPositionHeld" style="margin-top:10px">Position Held:</label>
                </div>
                <div class="col-sm-6" style="margin-left:-35px">
                    @Html.TextBoxFor(model => model.JobRetailerSetting.PositionHeldlbl, new { id = "JobRetailerPositionHeldlbl", @class = "form-control", @style = "display:inline-block;height:30px", disabled = "disabled" })
                </div>

            </div>

            <div class="form-group" style="margin-top:20px;margin-right:15px">
                <p style="font-size:16px"><span id="statement">@Html.Raw(Model.JobRetailerSetting.Statement)</span></p>
                @*@Html.LabelFor(model => model.JobRetailerSetting.Statement, new { id = "Statement", @class = "form-control"})*@
            </div>
            <div style="margin-top:30px">
                By Signing this <a href="@Url.Action("GetSCAWrittenStatement", "Job", new { jobId = Model.JobID, solarCompanyId = Model.BasicDetails.SolarCompanyId, companyName = Model.BasicDetails.CompanyName, isRetailerStatement = true })" target="_blank">Written Statement</a>  I declare the statements provided in the documents is true and correct
            </div>
            <button type="button" class="btn primary icon-btn" onclick="SignatureInJobAutoSettingFromJobScreen()" style="margin-top:16px;margin-left:0px;float:left">
                <span class="sprite-img signature-ic"></span>Click To Sign
            </button>
            <button type="button" class="btn primary icon-btn" onclick="SetDataFromAutoSignSetting()" style="margin-top:16px;margin-left:0px;float:left;">
                <span class="sprite-img signature-ic"></span>Set Data From AutoSign
            </button>

            @Html.HiddenFor(m => m.JobRetailerSetting.Signature)
            @Html.HiddenFor(m => m.JobRetailerSetting.Latitude)
            @Html.HiddenFor(m => m.JobRetailerSetting.Longitude)
        </div>
        <div class="col-sm-4" style="margin-top:20px">

            <div class="signechar-box scrollSignature" style="width:250px" id="acbcd"><img class="img-responsive" id="imgJobRetailerSignatureJobDetailScreen" alt=""></div>
            <div style="margin-top:10px;font-size:16px">
                <p style="display:inline-block" id="JobRetailer_Latitude"><strong> @Model.JobRetailerSetting.Latitude</strong></p>
                @if (Model.JobRetailerSetting.Latitude != "" && Model.JobRetailerSetting.Longitude != "")
                {<p style="display:inline-block"><strong>,</strong></p>}
                <p style="display:inline-block" id="JobRetailer_Longitude"><strong>@Model.JobRetailerSetting.Longitude</strong></p>
            </div>
            <div style="margin-top:15px;font-size:14px;margin-right:-15px;width:280px">
                <p><strong>Signed By : </strong><span id="SignedBy">@Model.JobRetailerSetting.SignedBy</span></p>
                <p style="margin-top:3px"><strong>Date : </strong><span id="SignedDate">@Model.JobRetailerSetting.SignedDate</span></p>
                <p style="margin-top:3px"><strong>Retailer Name : </strong><span id="Retailer_CompanyName">@Model.BasicDetails.CompanyName</span></p>
            </div>
            @*<div class="SignSavebtnJobRetailer" style="margin-right:13px;display:none">*@
            @*<button type="button" class="btn primary icon-btn" onclick="SignatureInJobAutoSetting()">
                        <span class="sprite-img signature-ic"></span>Sign here
                    </button>
                    <button type="button" class="btn primary icon-btn" id="saveJobRetailerAutoSign" tabindex="239
                " onclick="return SaveJobRetailerAutoSign();">
                        <span class="sprite-img save_ic"></span>Save
                    </button>*@
        </div>
    </div>





</div>
<div class="modal fade" id="UpdateJobRetailer" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog modal-lg vertical-align-center" style="width:39%">
            <div class="modal-content">
                <form id="frmJobAutoAssignment">
                    <div class="modal-header">
                        <h3 class="modal-title" id="myModalLabel">
                            Edit Representative Details
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" tabindex="3">
                                <img src="../images/close-btn.png" alt="">
                            </button>
                        </h3>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegionSCAStatement" style="display: none">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        </div>
                        <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegionSCAStatement" style="display: none">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        </div>

                        <div id="JobAutoAssignmentDiv" class="form-group">
                            @*@Html.Partial("_AutoSignPopUp",Model.RetailerAutoSetting)*@
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label class="control-label required" id="lblUserId">Select Representative:</label>
                                        @Html.DropDownListFor(model => model.JobRetailerSetting.JobRetailerUserId, new List<SelectListItem>(), new { id = "JobRetailerUserId", @class = "form-control", @style = "display:inline-block;height:30px;" })
                                        @Html.ValidationMessageFor(m => m.JobRetailerSetting.JobRetailerUserId)
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label required" id="lblPositionHeld">Position Held:</label>
                                        @Html.TextBoxFor(model => model.JobRetailerSetting.PositionHeld, new { id = "JobRetailerPositionHeld", @class = "form-control", @style = "display:inline-block;height:30px" })
                                        @Html.ValidationMessageFor(m => m.JobRetailerSetting.PositionHeld)
                                    </div>
                                    <div class="form-group" style="margin-bottom:5px">
                                        <label class="control-label required">Installer Relationship To Retailer:</label>
                                    </div>
                                    <div class="form-group">
                                        @*<label class="control-label" id="chkIsEmployee">Installer is an Employee</label>*@
                                        @*@Html.CheckBoxFor(model => model.JobRetailerSetting.IsEmployee, new { id = "IsEmployee", @class = "form-control", @style = "display:inline-block" })*@
                                        @Html.DropDownListFor(model => model.JobRetailerSetting.IsEmployee, new List<SelectListItem> { new SelectListItem() { Text = "IsEmployee", Value = "1" }, new SelectListItem() { Text = "IsSubContractor", Value = "2" } }, new { id = "JobWiseIsEmployee", @class = "form-control", @tabindex = 53 })
                                    </div>
                                    @*<div class="form-group">
                                            <label class="control-label" id="chkIsSubContractor">Installer is a subcontractor</label>
                                            @Html.CheckBoxFor(model => model.JobRetailerSetting.IsSubContractor, new { id = "IsSubContractor", @class = "form-control", @style = "display:inline-block" })
                                        </div>*@

                                    <div class="form-group">
                                        @*<label class="control-label" id="chkIsChangedDesign">Installer have changed system design</label>
                                            @Html.CheckBoxFor(model => model.RetailerAutoSetting.IsChangedDesign, new { id = "IsChangedDesign", @class = "form-control", @style = "display:inline-block" })*@
                                        <label class="control-label required" id="chkIsChangedDesign">System Design</label>
                                        @Html.DropDownListFor(model => model.JobRetailerSetting.IsChangedDesign, new List<SelectListItem> { new SelectListItem() { Text = "Installer have changed system design", Value = "1" }, new SelectListItem() { Text = "Installer have not changed system design", Value = "2" } }, new { id = "JobWiseIsChangedDesign", @class = "form-control", @tabindex = 53 })
                                    </div>
                                </div>
                                <div class="col-sm-6" style="margin-top:24px;">
                                    @*<div class="form-group">
                                            <label class="control-label required" id="lblSignature">Signature:</label>
                                            @Html.TextAreaFor(model => model.RetailerAutoSetting.Signature, new { id = "Signature", @class = "form-control", @style = "height:100px" })
                                        </div>*@
                                    @*<div class="signechar-box scrollSignature"><img class="img-responsive" id="imgRetailerSignature" alt=""></div>
                                        <div style="margin-right:13px">
                                            <button type="button" class="btn primary icon-btn" onclick="SignatureInAutoSetting()">
                                                <span class="sprite-img signature-ic"></span>Sign here
                                            </button>
                                        </div>*@
                                    <div class="signechar-box scrollSignature" style="width: 100%;"><img class="img-responsive required" id="imgJobRetailerSignature" alt=""></div>
                                    <div style="margin-right:-7px;margin-top:5px">
                                        <button type="button" class="btn primary icon-btn" onclick="SignatureInJobAutoSetting()" style="margin-top:5px">
                                            <span class="sprite-img signature-ic"></span>Sign here
                                        </button>
                                        <button type="button" class="btn primary icon-btn" onclick="SignatureInJobFromAutoSetting()" style="margin-top:5px">
                                            <span class="sprite-img signature-ic"></span>Sign From Auto Setting
                                        </button>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn primary icon-btn" id="saveJobRetailerAutoSign" tabindex="239
            " onclick="return SaveJobRetailerAutoSign();">
                            <span class="sprite-img save_ic"></span>Save
                        </button>
                        <button type="button" class="btn default cancel_ic" id="cancelJobAutoSignPopup">Cancel</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="AutoAssignment" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog modal-lg vertical-align-center" style="width:39%">
            <div class="modal-content">
                <form id="frmAutoAssignment">
                    <div class="modal-header">
                        <h3 class="modal-title" id="myModalLabel">
                            Auto Assignment
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" tabindex="3">
                                <img src="../images/close-btn.png" alt="">
                            </button>
                        </h3>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegionAutoSetting" style="display: none">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        </div>
                        <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegionAutoSetting" style="display: none">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        </div>

                        <div id="AutoAssignmentDiv" class="form-group">
                            @*@Html.Partial("_AutoSignPopUp",Model.RetailerAutoSetting)*@
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label class="control-label required" id="lblUserId">Select Representative:</label>
                                        @Html.DropDownListFor(model => model.RetailerAutoSetting.RetailerUserId, new List<SelectListItem>(), new { id = "RetailerUserId", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.RetailerAutoSetting.RetailerUserId)
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label required" id="lblPositionHeld">Position Held:</label>
                                        @Html.TextBoxFor(model => model.RetailerAutoSetting.PositionHeld, new { id = "PositionHeld", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.RetailerAutoSetting.PositionHeld)
                                    </div>
                                    <div class="form-group" style="margin-bottom:5px">
                                        <label class="control-label required">Installer Relationship To Retailer:</label>
                                    </div>
                                    <div class="form-group">
                                        @*<label class="control-label" id="chkIsEmployee">Installer is an Employee</label>*@
                                        @*@Html.CheckBoxFor(model => model.RetailerAutoSetting.IsEmployee, new { id = "IsEmployee", @class = "form-control", @style = "display:inline-block" })*@
                                        @Html.DropDownListFor(model => model.RetailerAutoSetting.IsEmployee, new List<SelectListItem> { new SelectListItem() { Text = "IsEmployee", Value = "1" }, new SelectListItem() { Text = "IsSubContractor", Value = "2" } }, new { id = "IsEmployee", @class = "form-control", @tabindex = 53 })
                                    </div>
                                    @*<div class="form-group">
                                            <label class="control-label" id="chkIsSubContractor">Installer is a subcontractor</label>
                                            @Html.CheckBoxFor(model => model.RetailerAutoSetting.IsSubContractor, new { id = "IsSubContractor", @class = "form-control", @style = "display:inline-block" })
                                        </div>*@
                                    <div class="form-group">
                                        @*<label class="control-label" id="chkIsChangedDesign">Installer have changed system design</label>
                                            @Html.CheckBoxFor(model => model.RetailerAutoSetting.IsChangedDesign, new { id = "IsChangedDesign", @class = "form-control", @style = "display:inline-block" })*@
                                        <label class="control-label required" id="chkIsChangedDesign">System Design</label>
                                        @Html.DropDownListFor(model => model.RetailerAutoSetting.IsChangedDesign, new List<SelectListItem> { new SelectListItem() { Text = "Installer have changed system design", Value = "1" }, new SelectListItem() { Text = "Installer have not changed system design", Value = "2" } }, new { id = "IsChangedDesign", @class = "form-control", @tabindex = 53 })
                                    </div>
                                </div>
                                <div class="col-sm-6" style="margin-top:24px;">
                                    @*<div class="form-group">
                                            <label class="control-label required" id="lblSignature">Signature:</label>
                                            @Html.TextAreaFor(model => model.RetailerAutoSetting.Signature, new { id = "Signature", @class = "form-control", @style = "height:100px" })
                                        </div>*@
                                    <div class="signechar-box scrollSignature"><img class="img-responsive required" id="imgRetailerSignature" alt=""></div>
                                    <div style="margin-right:-7px;margin-top:5px">
                                        <button type="button" class="btn primary icon-btn" onclick="SignatureInAutoSetting()">
                                            <span class="sprite-img signature-ic"></span>Sign here
                                        </button>
                                    </div>

                                </div>
                            </div>



                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn primary icon-btn" id="saveAutoSignPopup" tabindex="239
            " onclick="return SaveAutoSignPopUp();">
                            <span class="sprite-img save_ic"></span>Save
                        </button>
                        <button type="button" class="btn default cancel_ic" id="cancelAutoSignPopup">Cancel</button>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>
<div class="modal fade popupSignature" tabindex="-1" id="popupAutoSignSignature">
    @Html.Partial("_SignaturePopup", new ViewDataDictionary { { "isCopySign", false } }););
</div>
<div class="modal fade popupSignature" tabindex="-1" id="popupJobAutoSignSignature">
    @Html.Partial("_SignaturePopup", new ViewDataDictionary { { "isCopySign", false } }););
</div>

<script src="~/Scripts/jquery.fileupload.js"></script>
<script src="~/Scripts/FormBot.js"></script>
<script src="../../Scripts/jSignature.dev.js" type="text/javascript"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&amp;key=AIzaSyC9JGh32nUUr3-ArB0sn_BeP7r3g5pVacw&amp;libraries=places"></script>
<script src="~/Scripts/View/Job/_SCAWrittenStatement.dev.js"></script>

<script>
    var JobId = '@Model.BasicDetails.JobID';
    var urlGetAutoSignSettingsData = '@Url.Action("GetAutoSignSettingsData", "SolarCompany")';
    var urlGetAutoSignSettingsDataJobWise = '@Url.Action("GetAutoSignSettingsDataForJobWise", "Job")';
    var urlGetAutoSignSettingsDataRetailerIdWise = '@Url.Action("GetAutoSignSettingsDataRetailerIdWise", "Job")';
    var urlSaveAutoSignSettingsData = '@Url.Action("SaveAutoSignSettingsData", "SolarCompany")';
    var SolarCompanyId = '@Model.BasicDetails.SolarCompanyId';
    var JobRetailerSign = '@Model.JobRetailerSetting.Signature';
    var JobRetailerId = '@Model.JobRetailerSetting.JobRetailerUserId';
    var urlSaveJobAutoSignSettingsData = '@Url.Action("SaveJobAutoSignSettingsData","Job")';
    var urlReloadSCAWrittenStatement = '@Url.Action("GetSCAWrittenStatement", "job")?jobId=';
    var urlGetSignFromAutoSetting = '@Url.Action("GetSignFromAutoSetting","job")';
    var urlGetJobRetailerSettingDataByJobId = '@Url.Action("GetJobRetailerSettingDataByJobId","Job")';
    var urlSetAutoSignSettingsDataInJob='@Url.Action("SetAutoSignSettingsDataInJob", "job")';
    var isSignFromAutosetting = false;
    var isFromJobScreen = false;
    $(document).ready(function () {        
        FillDropDown('JobRetailerUserId', '@Url.Action("GetRepresentative", "SolarCompany")?JobId=' + jobID, JobRetailerId, true, null);
        FillDropDown('RetailerUserId', '@Url.Action("GetRepresentative", "SolarCompany")?JobId=' + jobID, 0, true, null);

        if (JobRetailerSign != null && JobRetailerSign != '' && JobRetailerSign != undefined) {
            var modelJobRetailerSignURL = "UserDocuments/" + JobRetailerId + "/" + JobRetailerSign;
            $("#imgJobRetailerSignatureJobDetailScreen").attr('src', signatureURL + modelJobRetailerSignURL);
        }
        else {
            $("#imgJobRetailerSignatureJobDetailScreen").attr('src', "");
        }
        $("#popupAutoSignSignature #aUploadSign").css("display", "none");
        $("#popupJobAutoSignSignature #aUploadSign").css("display", "none");
        GetAutoSignSettingsData(SolarCompanyId, true);
        getLocation();

             var url = '@Url.Action("UploadRetailerSignature", "SolarCompany")';
        var logoWidth = 0, logoHeight = 0, SRCOwnerSign;
        $('#popupAutoSignSignature #uploadBtnSignature').on("click", function () {
            UploadSignForJobRetailer();
        });
        $('#popupJobAutoSignSignature #uploadBtnSignature').on("click", function () {
            UploadSign();
        });
        function UploadSign() {            
            $('#popupAutoSignSignature #uploadBtnSignature').fileupload({
                url: url,
                dataType: 'json',
                done: function (e, data) {                    
                    var UploadFailedFiles = [];
                    UploadFailedFiles.length = 0;

                    for (var i = 0; i < data.result.length; i++) {
                        if (data.result[i].Status == true) {
                            var userid = $("#RetailerUserId").val();
                            var signName = $('#imgUploadSign').attr('class');
                            var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                            var imagePath = proofDocumentURL + "UserDocuments" + "/" + userid;
                            var SRC = imagePath + "/" + data.result[i].FileName.replace("%", "$");
                            SRCOwnerSign = SRC;
                            $('#imgUploadSign').attr('class', data.result[i].FileName.replace("%", "$"));
                        }
                        else {
                            UploadFailedFiles.push(data.result[i].FileName.replace("%", "$"));
                        }
                    }
                    if (UploadFailedFiles.length > 0) {
                        showErrorMessageForPopup("Signature has not been uploaded.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                    }
                    else {
                        $('#imgUploadSign').show();
                        $("#imgUploadSign").attr('src', SRCOwnerSign);
                        $("#deleteSign").show();
                        showSuccessMessageForPopup("Signature has been uploaded successfully.", $("#successMsgRegionSignPopup"), $("#errorMsgRegionSignPopup"));
                    }
                },
                progressall: function (e, data) { },
                singleFileUploads: false,
                send: function (e, data) {

                    var documentType = data.files[0].type.split("/");
                    var mimeType = documentType[0];
                    if (data.files.length > 1) {
                        for (var i = 0; i < data.files.length; i++) {
                            if (data.files[i].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                                showErrorMessageForPopup(" " + data.files[i].name + " Maximum file size limit exceeded. Please upload a file smaller  than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                                return false;
                            }
                        }
                    }
                    else {
                        if (data.files[0].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                            showErrorMessageForPopup("Maximum  file size limit exceeded.Please upload a  file smaller than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                            return false;
                        }
                    }
                    if (mimeType != "image") {
                        showErrorMessageForPopup("Please upload a file with .jpg , .jpeg or .png extension.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    if (data.files[0].size > parseInt(1024000)) {
                        showErrorMessageForPopup("Please upload Signature Within 1 MB otherwise it will slow down your job performance", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    $(".alert").hide();
                    $("#errorMsgRegion").html("");
                    $("#errorMsgRegion").hide();
                    return true;
                },
                formData: {  userId: $("#RetailerUserId").val() }
            });
        }
         function UploadSignForJobRetailer() {            
             $('#popupJobAutoSignSignature #uploadBtnSignature').fileupload({
                url: url,
                dataType: 'json',
                done: function (e, data) {                    
                    var UploadFailedFiles = [];
                    UploadFailedFiles.length = 0;

                    for (var i = 0; i < data.result.length; i++) {
                        if (data.result[i].Status == true) {
                            var userid = $("#RetailerUserId").val();
                            var signName = $('#imgUploadSign').attr('class');
                            var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                            var imagePath = proofDocumentURL + "UserDocuments" + "/" + userid;
                            var SRC = imagePath + "/" + data.result[i].FileName.replace("%", "$");
                            SRCOwnerSign = SRC;
                            $('#imgUploadSign').attr('class', data.result[i].FileName.replace("%", "$"));
                        }
                        else {
                            UploadFailedFiles.push(data.result[i].FileName.replace("%", "$"));
                        }
                    }
                    if (UploadFailedFiles.length > 0) {
                        showErrorMessageForPopup("Signature has not been uploaded.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                    }
                    else {
                        $('#imgUploadSign').show();
                        $("#imgUploadSign").attr('src', SRCOwnerSign);
                        $("#deleteSign").show();
                        showSuccessMessageForPopup("Signature has been uploaded successfully.", $("#successMsgRegionSignPopup"), $("#errorMsgRegionSignPopup"));
                    }
                },
                progressall: function (e, data) { },
                singleFileUploads: false,
                send: function (e, data) {

                    var documentType = data.files[0].type.split("/");
                    var mimeType = documentType[0];
                    if (data.files.length > 1) {
                        for (var i = 0; i < data.files.length; i++) {
                            if (data.files[i].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                                showErrorMessageForPopup(" " + data.files[i].name + " Maximum file size limit exceeded. Please upload a file smaller  than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                                return false;
                            }
                        }
                    }
                    else {
                        if (data.files[0].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                            showErrorMessageForPopup("Maximum  file size limit exceeded.Please upload a  file smaller than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                            return false;
                        }
                    }
                    if (mimeType != "image") {
                        showErrorMessageForPopup("Please upload a file with .jpg , .jpeg or .png extension.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    if (data.files[0].size > parseInt(1024000)) {
                        showErrorMessageForPopup("Please upload Signature Within 1 MB otherwise it will slow down your job performance", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    $(".alert").hide();
                    $("#errorMsgRegion").html("");
                    $("#errorMsgRegion").hide();
                    return true;
                },
                formData: {  userId: $("#RetailerUserId").val() }
            });
        }
        $("#deleteSign").on("click", function () {
             deleteSignature();
            return false;
        });
        function deleteSignature() {            
            var FolderName = $("#RetailerUserId").val() ;
            var fileDelete = $('#imgUploadSign').attr('class');
            if (confirm('Are you sure you want to delete this file ?')) {
                $.ajax({
                    url: '@Url.Action("deleteRetailerSignFromFolderandTable", "SolarCompany")',
                    data: { fileName: fileDelete, FolderName: FolderName },
                    contentType: 'application/json',
                    method: 'get',
                    success: function () {
                        var sign = $('#imgUploadSign').attr('class');
                        $('#imgUploadSign').removeAttr('src');
                        $('#imgUploadSign').removeAttr('class');
                        $('#deleteSign').hide();
                        showSuccessMessageForPopup("Signature has been deleted successfully.", $("#successMsgRegionSignPopup"), $("#errorMsgRegionSignPopup"));
                        return false;
                    }
                });
            }
        }
            
            $('#popupAutoSignSignature').off().on('shown.bs.modal', function () {
                var widthVal = $('#popupAutoSignSignature #cSignature .jSignature').width();
                $('#popupAutoSignSignature #cSignature').find("canvas.jSignature").width(widthVal)
                $('#popupAutoSignSignature #cSignature').find('canvas').attr('width', widthVal + 'px !important');
                $('#popupAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").$controlbarLower.css('margin-bottom', '3.0em')
                $('#popupAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").resetCanvas($('#popupAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['data'])
            });
        $('#popupJobAutoSignSignature').off().on('shown.bs.modal', function () {
            var widthVal = $('#popupJobAutoSignSignature #cSignature .jSignature').width();
            $('#popupJobAutoSignSignature #cSignature').find("canvas.jSignature").width(widthVal)
            $('#popupJobAutoSignSignature #cSignature').find('canvas').attr('width', widthVal + 'px !important');
            $('#popupJobAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupJobAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").$controlbarLower.css('margin-bottom', '3.0em')
            $('#popupJobAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupJobAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").resetCanvas($('#popupJobAutoSignSignature #cSignature').find("canvas.jSignature").add($('#popupJobAutoSignSignature #cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['data'])
        });
        var $sigdiv = $("#popupAutoSignSignature #cSignature").jSignature({ height: 220, mousedown: function () { $('#popupAutoSignSignature #IsSignature').val('True') }, signatureLine: true });
        var cdIsmouseIn = false;
        var $jobsignDiv = $("#popupJobAutoSignSignature #cSignature").jSignature({ height: 220, mousedown: function () { $('#popupJobAutoSignSignature #IsSignature').val('True') }, signatureLine: true });
            $("#aDrawSign").click(function () {
                showHideDrawUploadSection(this);
            });

        $("#popupAutoSignSignature #aUploadSign").click(function () {
                showHideDrawUploadSection(this);
        });
        $("#popupJobAutoSignSignature #aUploadSign").click(function () {
            showHideDrawUploadSection(this);
        });
        $("#btnUpdateJobRetailer").click(function () {
            validateFormAutoSign();
            isFromJobScreen = false;            
            $.ajax({
                url: urlGetAutoSignSettingsDataJobWise,
                type: "GET",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8', // Not to set any content header
                data: {
                    JobId: JobId, SolarCompanyId: SolarCompanyId},
                cache: false,
                success: function (result) {                    
                    if (result.success) {
                        $("#JobRetailerUserId option[value=" + result.data.JobRetailerUserId + "]").prop('selected', true);
                        $("#JobRetailerPositionHeld").val(result.data.PositionHeld);
                        //var isEmployee = result.data.IsEmployee == true ? true : false;
                        //var isSubContractor = result.data.IsSubContractor == true ? true : false;
                        // var isChangedDesign = result.data.IsChangedDesign == true ? true : false;
                        $("#JobWiseIsEmployee option[value=" + result.data.IsEmployee + "]").prop('selected', true);
                        //$('#IsSubContractor').prop('checked', isSubContractor);
                        $("#JobWiseIsChangedDesign option[value=" + result.data.IsChangedDesign + "]").prop('selected', true);
                        //$('#IsChangedDesign').prop('checked', isChangedDesign);                        
                      //  location.reload(true);
                        $("#imgJobRetailerSignature").attr('src', result.data.base64Img);
                    }

                    else {
                        showErrorMessageForAutoSign("Something wrong happen");
                    }

                }
            })
            setTimeout(function () {
                $('#UpdateJobRetailer').modal('toggle');
            }, 100);

            //$(".SignSavebtnJobRetailer").css("display", "block");
            //$("#JobRetailerUserId").removeAttr("disabled");
            //$("#JobRetailerPositionHeld").removeAttr("disabled");
        });

            function showHideDrawUploadSection(obj) {                
                $(".alert").hide();
                $("#errorMsgRegionSignPopup").hide();
                $("#successMsgRegionSignPopup").hide();
                if ($("#popupAutoSignSignature.in").length == 1) {
                    if ($(obj).attr('id').toLowerCase() == "auploadsign") {
                        $("#popupAutoSignSignature #divDraw").hide();
                        $("#popupAutoSignSignature #divUpload").show();
                    }
                    else {
                        $("#popupAutoSignSignature #divDraw").show();
                        $("#popupAutoSignSignature #divUpload").hide();
                    }
                }
                else {
                    if ($(obj).attr('id').toLowerCase() == "auploadsign") {
                        $("#popupJobAutoSignSignature #divDraw").hide();
                        $("#popupJobAutoSignSignature #divUpload").show();
                    }
                    else {
                        $("#popupJobAutoSignSignature #divDraw").show();
                        $("#popupJobAutoSignSignature #divUpload").hide();
                    }
                }


                $(obj).closest('ul').find('.active').removeClass('active');
                $(obj).closest('ul').find('.primary').removeClass('primary');
                $(obj).closest('li').addClass('active');
                $(obj).closest('li').addClass('primary');
            }

        $("#popupAutoSignSignature #cSignature").bind('change', function (e) {
                if ($sigdiv.jSignature('getData', 'native').length > 0)
                    $("#popupAutoSignSignature #cSignature .signLabel").addClass('hidden');
                else
                    $("#popupAutoSignSignature #cSignature .signLabel").removeClass('hidden');
        });
        $("#popupJobAutoSignSignature #cSignature").bind('change', function (e) {
            if ($jobsignDiv.jSignature('getData', 'native').length > 0)
                $("#popupJobAutoSignSignature #cSignature .signLabel").addClass('hidden');
            else
                $("#popupJobAutoSignSignature #cSignature .signLabel").removeClass('hidden');
        });

            $("#cancelAutoSignPopup").click(function () {
                $("#RetailerUserId").val('');
                $("#PositionHeld").val('');
                $("#IsEmployee").val('');
                //$("#IsSubContractor").attr("checked", false);
                $("#IsChangedDesign").val('');
                $("#imgRetailerSignature").attr("src", "")
                $("#successMsgRegionAutoSetting").hide();
                $("#errorMsgRegionAutoSetting").hide();
                $('#AutoAssignment').modal('toggle');
            });
        $("#cancelJobAutoSignPopup").click(function () {

            $("#JobRetailerUserId").val('');
            $("#JobRetailerPositionHeld").val('');
            $("#JobWiseIsEmployee").val('');
            //$("#IsSubContractor").attr("checked", false);
            $("#JobWiseIsChangedDesign").val('');
            $("#imgJobRetailerSignature").attr("src", "")
            $("#successMsgRegionSCAStatement").hide();
            $("#errorMsgRegionSCAStatement").hide();
            $('#UpdateJobRetailer').modal('toggle');
        });
        $("#popupJobAutoSignSignature #resetSignBtn").click(function () {
            $('#popupJobAutoSignSignature #cSignature').jSignature('reset');
            $('#popupJobAutoSignSignature #IsSignature').val('False');
        });
        $("#popupAutoSignSignature #resetSignBtn").click(function () {
            $('#popupAutoSignSignature #cSignature').jSignature('reset');
            $('#popupAutoSignSignature #IsSignature').val('False');
        })
        });

</script>

@Scripts.Render("~/bundles/jobmodularsubviews?v=" + ProjectConfiguration.ScriptVersion)