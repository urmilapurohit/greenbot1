@model FormBot.Entity.CreateJob
@using FormBot.Helper;
<script src="~/Scripts/Calendar/moment.min.js"></script>


@{
    ////Todo
    bool isAddJob = false;
    bool isDeleteJob = false;
    bool isEditjob = false;
    bool isAssignSSC = false;
    bool isAssignSCO = false;
    if (TempData.ContainsKey(SystemEnums.TempDataKey.RoleMenu.ToString()))
    {
        ((List<FormBot.Main.Controllers.MenuIdList>)TempData[SystemEnums.TempDataKey.RoleMenu.ToString()]).ForEach(d =>
        {
            if (d.MenuId == (int)SystemEnums.MenuId.JobAdd) { isAddJob = true; }
            if (d.MenuId == (int)SystemEnums.MenuId.JobDelete) { isDeleteJob = true; }
            if (d.MenuId == (int)SystemEnums.MenuId.JobEdit) { isEditjob = true; }
            if (d.MenuId == (int)SystemEnums.MenuId.JobAssignToSSC.GetHashCode()) { isAssignSSC = true; }
            if (d.MenuId == (int)SystemEnums.MenuId.JobAssignToSCO.GetHashCode()) { isAssignSCO = true; }
        });
    }
}

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container-fluid">
    <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <form id="frmCreateJob">
        <div class="title">
            <h1>Job Details </h1>
            @if (Model.Header != null)
            {<span class="subtitle">@Model.Header</span>}
            <a href='@Url.Action("Index", "Job", new { id = Url.RequestContext.RouteData.Values["id"] })' title="Back" class="back-btn pull-right"><img src="~/Images/back-icon.png" alt="" />Back</a>
        </div>
        @Html.HiddenFor(m => m.BasicDetails.JobID)
        @Html.HiddenFor(m => m.panelXml)
        @Html.HiddenFor(m => m.inverterXml)
        @Html.HiddenFor(m => m.UserType)
        @Html.HiddenFor(m => m.BasicDetails.SSCID)
        @Html.HiddenFor(m => m.BasicDetails.ScoID)
        @Html.Hidden("hdnNMI", (@Model != null && @Model.JobInstallationDetails != null) ? @Model.JobInstallationDetails.NMI : "")
        @Html.HiddenFor(m => m.JobInstallationDetails.AddressDisplay)
        @Html.HiddenFor(m => m.BasicDetails.PreviousJobStage)
        @Html.HiddenFor(m => m.BasicDetails.CurrentJobStage)
        @Html.HiddenFor(m => m.BasicDetails.PreviousPriority)
        @Html.HiddenFor(m => m.BasicDetails.CurrentPriority)
        @Html.HiddenFor(m => m.BasicDetails.PreviousSSCID)
        @Html.HiddenFor(m => m.BasicDetails.SSCName)

        <div id="horizontalTab">
            <ul class="resp-tabs-list">
                <li id="t1">Basic Details</li>
                <li id="t2">Owner Details</li>
                <li id="t3">Installation Details</li>
                <li id="t4">Installer Details</li>
                <li id="t5">STC Details</li>
                <li id="t6">System Details</li>
            </ul>
            <div class="resp-tabs-container">
                <div class="tab1">
                    <div class="form-box">

                        @Html.HiddenFor(m => m.BasicDetails.IsGst)
                        @Html.HiddenFor(m => m.BasicDetails.GSTDocument)

                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.JobType, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.BasicDetails.JobType, new List<SelectListItem> { new SelectListItem() { Text = "PVD", Value = "1" }, new SelectListItem() { Text = "SWH", Value = "2" } }, new { @class = "form-control", @tabindex = 1, @autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.JobType)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.RefNumber, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.BasicDetails.RefNumber, new { @class = "form-control", @maxlength = "255", @tabindex = 2 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.RefNumber)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.Title, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.BasicDetails.Title, new { @class = "form-control", @maxlength = "100", @tabindex = 3 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.Title)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.Description, new { @class = "control-label required" })
                                    @Html.TextAreaFor(m => m.BasicDetails.Description, new { @class = "form-control", @maxlength = "4000", @tabindex = 4 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.Description)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.JobNumber, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.BasicDetails.JobNumber, new { @class = "form-control", @maxlength = "20", @readonly = "readonly", @tabindex = 5 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.JobNumber)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.Priority, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.BasicDetails.Priority, new List<SelectListItem>(), new { @class = "form-control", @id = "BasicDetails_Priority", @tabindex = 6 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.Priority)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.JobStage, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.BasicDetails.JobStage, new List<SelectListItem>(), new { @class = "form-control", @id = "BasicDetails_JobStage", @tabindex = 7 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.JobStage)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.strInstallationDate, new { @class = "control-label" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.BasicDetails.strInstallationDate, new { @class = "form-control date-pick", @tabindex = 9 })
                                        <span class="input-group-addon sprite-img date-picker"></span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.BasicDetails.strInstallationDate)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Sold By :</label>
                                    @Html.DropDownListFor(m => m.BasicDetails.JobSoldBy, new List<SelectListItem>(), new { @data_val = "false", @class = "form-control", @tabindex = 34 })

                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Sold By Name :</label>
                                    @Html.TextBoxFor(m => m.BasicDetails.SoldBy, new { @class = "form-control", @maxlength = "200", @tabindex = 10 })
                                    @Html.ValidationMessageFor(m => m.BasicDetails.SoldBy)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.BasicDetails.strSoldByDate, new { @class = "control-label" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.BasicDetails.strSoldByDate, new { @class = "form-control", @tabindex = 35 })
                                        <span class="input-group-addon sprite-img date-picker"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab_bottomrow">
                        <button type="button" class="btn default next_btn" onclick='return validateForm() ? $("#t2").click() : false' tabindex="714">Next</button>
                    </div>
                </div>
                <div class="tab2" style="display:none">
                    <div class="form-box">
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.OwnerType, new { @class = "control-label required" })
                                    @Html.DropDownListFor(m => m.JobOwnerDetails.OwnerType, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Individual", Value = "Individual" }, new SelectListItem() { Text = "Government body", Value = "Government body" }, new SelectListItem() { Text = "Corporate body", Value = "Corporate body" }, new SelectListItem() { Text = "Trustee", Value = "Trustee" } }, new { @class = "form-control", @tabindex = 100 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.OwnerType)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.CompanyName, new { @class = "control-label", @id = "OwnerCompanyName" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.CompanyName, new { @class = "form-control", @maxlength = 50, @tabindex = 101, @autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.CompanyName, "", new { id = "OwnerCompanyNameValidate" })
                                </div>
                            </div>

                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.FirstName, new { @class = "control-label required", @id = "OwnerFirstName" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.FirstName, new { @class = "form-control", @maxlength = 100, @tabindex = 102 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.FirstName, "", new { id = "OwnerFirstNameValidate" })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.LastName, new { @class = "control-label required", @id = "OwnerLastName" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.LastName, new { @class = "form-control", @maxlength = 100, @tabindex = 103 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.LastName, "", new { id = "OwnerLastNameValidate" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.Email, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.Email, new { @class = "form-control", @maxlength = 255, @tabindex = 104 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.Email)
                                </div>
                            </div>


                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.Phone, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.Phone, new { @class = "form-control", @maxlength = 16, @tabindex = 105, onkeypress = "return isValidPhone(event,this);" })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.Phone)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.Mobile, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.Mobile, new { @class = "form-control", @maxlength = 16, @tabindex = 106, onkeypress = "return isValidPhone(event,this);" })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.Mobile)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label required">Postal Address Type :</label>
                                    @Html.DropDownListFor(m => m.JobOwnerDetails.AddressID, new SelectList((ViewBag.PostalAddressType) as SelectList, "Value", "Text"), new { @class = "form-control OwnerAddress", @tabindex = 107 })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="OwnerPDA" style="display:none">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobOwnerDetails.PostalAddressID, new { @class = "control-label required" })
                                        @Html.DropDownListFor(model => model.JobOwnerDetails.PostalAddressID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 108 })
                                        @Html.ValidationMessageFor(m => m.JobOwnerDetails.PostalAddressID)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobOwnerDetails.PostalDeliveryNumber, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobOwnerDetails.PostalDeliveryNumber, new { @class = "form-control", @maxlength = 11, @tabindex = 109 })
                                        @Html.ValidationMessageFor(m => m.JobOwnerDetails.PostalDeliveryNumber)
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-3 OwnerDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.UnitTypeID, new { @class = "control-label", @id = "lblOwnerUnitTypeID" })
                                    @Html.DropDownListFor(model => model.JobOwnerDetails.UnitTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 110 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.UnitTypeID)
                                </div>
                            </div>
                            <div class="col-sm-3 OwnerDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.UnitNumber, new { @class = "control-label", @id = "lblOwnerUnitNumber" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.UnitNumber, new { @class = "form-control", @maxlength = 10, @tabindex = 111 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.UnitNumber)
                                </div>
                            </div>


                            <div class="OwnerDPA">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobOwnerDetails.StreetNumber, new { @class = "control-label required", @id = "lblOwnerStreetNumber" })
                                        @Html.TextBoxFor(m => m.JobOwnerDetails.StreetNumber, new { @class = "form-control", @maxlength = 15, @tabindex = 112 })
                                        @Html.ValidationMessageFor(m => m.JobOwnerDetails.StreetNumber)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobOwnerDetails.StreetName, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobOwnerDetails.StreetName, new { @class = "form-control", @maxlength = 45, @tabindex = 113 })
                                        @Html.ValidationMessageFor(m => m.JobOwnerDetails.StreetName)
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 OwnerDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.StreetTypeID, new { @class = "control-label required" })
                                    @Html.DropDownListFor(model => model.JobOwnerDetails.StreetTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 114 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.StreetTypeID)
                                </div>
                            </div>



                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.Town, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.Town, new { @class = "form-control", @maxlength = 80, @tabindex = 115 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.Town)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.State, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.State, new { @class = "form-control", @maxlength = 3, @tabindex = 116, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.State)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobOwnerDetails.PostCode, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobOwnerDetails.PostCode, new { @class = "form-control", @maxlength = 8, @tabindex = 117 })
                                    @Html.ValidationMessageFor(m => m.JobOwnerDetails.PostCode)
                                </div>
                            </div>
                        </div>
                        @if (Model.BasicDetails.JobID != 0 && (Model.UserType == 4 || (Model.UserType == 8 && Convert.ToInt32(FormBot.Helper.ProjectSession.IsSubContractor) == 0)))
                        {
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">Send Mail To:</label>
                                        <div class="form-group">
                                            <select class="form-control" id="drpSendMail" tabindex="13">
                                                <option value="1">Owner</option>
                                                <option value="2">Installer</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <div style="display:inline-block;margin-top:25px">

                                            <input type="button" class="btn primary upload_ic" value="Get Signature" id="btnCollectSignature" />
                                            <span id="spantxtCollectDignature" class="" style="color: #b94a48; display: none;"></span>
                                        </div>
                                        <div class="bxcont" style="margin-top: 7px; display:inline-block">
                                            <a id="imgOwnerSignatureView" href="javascript:void(0)" style="display: none; margin-top: 7px; display: none; text-decoration: none; " tabindex="14">&nbsp; &nbsp; View Image</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="tab_bottomrow">
                        <button type="button" class="btn default prev_btn" onclick='return validateForm() ? $("#t1").click() : false' tabindex="714">Previous</button>
                        <button type="button" class="btn default next_btn" onclick='return validateForm() ? $("#t3").click() : false' tabindex="714">Next</button>
                    </div>
                </div>
                <div class="tab3 popupAddress" style="display:none">
                    <div class="form-box">
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Same as Owner Address:</label>
                                    @Html.CheckBoxFor(m => m.JobInstallationDetails.IsSameAsOwnerAddress, new { @tabindex = 15 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label style="margin-top:5px;"> Map :</label>
                                    <span class="input-group-icon-btn">
                                        <button class="btn" id="btnMap" style="padding:0px;" type="button" tabindex="18"><img src='@Url.Content("~/images/map-icon.png")' alt="" title="Map"></button>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label required">Postal Address Type :</label>
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.AddressID, new SelectList((ViewBag.PostalAddressType) as SelectList, "Value", "Text"), new { @class = "form-control InstallationAddress", @tabindex = 701 })
                                </div>
                            </div>


                            <div class="InstallationPDA" style="display:none">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallationDetails.PostalAddressID, new { @class = "control-label required" })
                                        @Html.DropDownListFor(model => model.JobInstallationDetails.PostalAddressID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 702 })
                                        @Html.ValidationMessageFor(m => m.JobInstallationDetails.PostalAddressID)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallationDetails.PostalDeliveryNumber, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallationDetails.PostalDeliveryNumber, new { @class = "form-control", @maxlength = 50, @tabindex = 703 })
                                        @Html.ValidationMessageFor(m => m.JobInstallationDetails.PostalDeliveryNumber)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-3 InstallationDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.UnitTypeID, new { @class = "control-label", @id = "lblInstallationUnitTypeID" })
                                    @Html.DropDownListFor(model => model.JobInstallationDetails.UnitTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 704 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.UnitTypeID)
                                </div>
                            </div>
                            <div class="col-sm-3 InstallationDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.UnitNumber, new { @class = "control-label", @id = "lblInstallationUnitNumber" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.UnitNumber, new { @class = "form-control", @maxlength = 10, @tabindex = 705 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.UnitNumber)
                                </div>
                            </div>
                            <div class="col-sm-3 InstallationDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.StreetNumber, new { @class = "control-label required", @id = "lblInstallationStreetNumber" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.StreetNumber, new { @class = "form-control", @maxlength = 15, @tabindex = 706 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.StreetNumber)
                                </div>
                            </div>
                            <div class="col-sm-3 InstallationDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.StreetName, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.StreetName, new { @class = "form-control", @maxlength = 45, @tabindex = 708 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.StreetName)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 InstallationDPA">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.StreetTypeID, new { @class = "control-label required" })
                                    @Html.DropDownListFor(model => model.JobInstallationDetails.StreetTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 709 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.StreetTypeID)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.Town, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.Town, new { @class = "form-control", @maxlength = 80, @tabindex = 710, })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.Town)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.State, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.State, new { @class = "form-control", @maxlength = 3, @tabindex = 711, @readonly = "readonly" })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.State)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.PostCode, new { @class = "control-label required" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.PostCode, new { @class = "form-control", @maxlength = 8, @tabindex = 712 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.PostCode)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.DistributorID, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.DistributorID, new List<SelectListItem>(), new { @class = "form-control", @data_val = "false", @tabindex = 18 })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.DistributorID)
                                </div>
                            </div>
                            <div class="col-sm-3" id="NMI">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.NMI, new { @class = "control-label", @id = "NMI" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.NMI, new
                               {
                                   @class = "form-control",
                                   @maxlength = 25,
                                   @onkeypress = "return isInt(event);", @*@onpaste = "return false;",*@ @tabindex = 19
                               })
                                    @Html.ValidationMessageFor(m => m.JobInstallationDetails.NMI)
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.PropertyName, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.PropertyName, new { @class = "form-control", @maxlength = 25, @tabindex = 20 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.AdditionalInstallationInformation, new { @class = "control-label" })
                                    @Html.TextAreaFor(m => m.JobInstallationDetails.AdditionalInstallationInformation, new { @class = "form-control", @maxlength = 4000, @tabindex = 61 })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.PhaseProperty, new { @class = "control-label", @id = "PhaseProperty" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.PhaseProperty, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "1", Value = "1" }, new SelectListItem() { Text = "2", Value = "2" }, new SelectListItem() { Text = "3", Value = "3" }, new SelectListItem() { Text = "4", Value = "4" }, new SelectListItem() { Text = "5", Value = "5" } }, new { @class = "form-control", @tabindex = 22 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.ElectricityProviderID, new { @class = "control-label", @id = "ElectricityProviderID" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.ElectricityProviderID, new List<SelectListItem>(), new { @class = "form-control", @data_val = "false", @tabindex = 23 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.MeterNumber, new { @class = "control-label", @id = "MeterNumber" })
                                    @Html.TextBoxFor(m => m.JobInstallationDetails.MeterNumber, new { @class = "form-control", @maxlength = 25, @tabindex = 21 })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3" id="ExistingSystem1">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.ExistingSystem, new { @class = "control-label", @id = "ExistingSystem1", @style = "display:inline;" })
                                    @Html.CheckBoxFor(m => m.JobInstallationDetails.ExistingSystem, new { @tabindex = 24 })
                                </div>
                            </div>
                            <div id="ExistingSystem" style="display:none;">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallationDetails.ExistingSystemSize, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobInstallationDetails.ExistingSystemSize, new { @class = "form-control", @maxlength = 13, @data_val = "false", @tabindex = 25, @onkeypress = "return isDecimal(event,10,2,this);" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallationDetails.NoOfPanels, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobInstallationDetails.NoOfPanels, new { @class = "form-control", @maxlength = 9, @data_val = "false", @onkeypress = "return isNumber(event);", @tabindex = 26 })
                                        <span id="spanJobInstallationDetailsNoOfPanelValue" class="" style="color: #b94a48;display:none">Number of panel should be between 1 to 10000</span>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallationDetails.SystemLocation, new { @class = "control-label" })
                                        @Html.TextAreaFor(m => m.JobInstallationDetails.SystemLocation, new { @class = "form-control", @maxlength = 250, @tabindex = 27 })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab_bottomrow">
                        <button type="button" class="btn default prev_btn" onclick='return validateForm() ? $("#t2").click() : false' tabindex="714">Previous</button>
                        <button type="button" class="btn default next_btn" onclick='return validateForm() ? $("#t4").click() : false' tabindex="714">Next</button>

                    </div>
                </div>
                <div class="tab4" style="display:none">
                    <div class="form-box">
                        <div class="row">
                            <div class="col-sm-3">
                                <div id="installContent" style="display:none;">
                                    <label class="control-label">Installer Name :</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="txtInstallerName" readonly="readonly" tabindex="29">
                                        <span id="spantxtInstallerNames" class="" style="color: #b94a48;display:none">Installer details are required.</span>
                                        <span class="input-group-btn input-group-icon-btn">
                                            <button class="btn" type="button" id="btnInstallerDetails" tabindex="30"><img src='@Url.Content("~/images/add-btn.png")' alt="" title="Add"></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group" id="electricianDetail">
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.BasicDetails.InstallerID, new { @class = "control-label", @id = "InstallerID" })
                                        @Html.DropDownListFor(m => m.BasicDetails.InstallerID, new List<SelectListItem>(), new { @data_val = "false", @class = "form-control", @tabindex = 31 })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.BasicDetails.DesignerID, new { @class = "control-label", @id = "DesignerID" })
                                        @Html.DropDownListFor(m => m.BasicDetails.DesignerID, new List<SelectListItem>(), new { @data_val = "false", @class = "form-control", @tabindex = 32 })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">Electrician:</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control" rows="3" id="txtBasicAddress" readonly="readonly" tabindex="42" />
                                            <span id="spantxtBasicAddress" class="" style="color: #b94a48;display:none">Electricians Address details are required.</span>
                                            <span class="input-group-btn input-group-icon-btn" tabindex="43">
                                                <button class="btn" type="button" id="btnBasicAddressDetail"><img src='@Url.Content("~/images/add-btn.png")' alt="" title="Add"></button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="tab_bottomrow">
                                    <button type="button" class="btn default prev_btn" onclick='return validateForm() ? $("#t3").click() : false' tabindex="714">Previous</button>
                                    <button type="button" class="btn default next_btn" onclick='return validateForm() ? $("#t5").click() : false' tabindex="714">Next</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab5" style="display:none">
                    <div class="form-box">
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.PropertyType, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.PropertyType, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Residential", Value = "Residential" }, new SelectListItem() { Text = "School", Value = "School" }, new SelectListItem() { Text = "Commercial", Value = "Commercial" } }, new { @class = "form-control", @tabindex = 46 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.SingleMultipleStory, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.SingleMultipleStory, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Single story", Value = "Single story" }, new SelectListItem() { Text = "Multi story", Value = "Multi story" } }, new { @class = "form-control", @tabindex = 47 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobInstallationDetails.InstallingNewPanel, new { @class = "control-label", @id = "InstallingNewPanel" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.InstallingNewPanel, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "New system [the first system installed at the address]", Value = "New" }, new SelectListItem() { Text = "Replacement system [all previous system components removed/decommissioned]", Value = "Replacing" }, new SelectListItem() { Text = "Additional system [new separate system at the same address]", Value = "Adding" }, new SelectListItem() { Text = "Extension system [components added to existing system]", Value = "Extension" } }, new { @class = "form-control", @tabindex = 48 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group" id="installationLocation" style="display:none;">
                                    @Html.LabelFor(m => m.JobInstallationDetails.Location, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobInstallationDetails.Location, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "North", Value = "North" }, new SelectListItem() { Text = "North-East", Value = "North-East" }, new SelectListItem() { Text = "East", Value = "East" }, new SelectListItem() { Text = "South-East", Value = "South-East" }, new SelectListItem() { Text = "South", Value = "South" }, new SelectListItem() { Text = "South-West", Value = "South-West" }, new SelectListItem() { Text = "West", Value = "West" }, new SelectListItem() { Text = "North-West", Value = "North-West" } }, new { @class = "form-control", @tabindex = 49 })
                                    <span id="spanInstallationLocation" style="display: none; color:#b94a48">This Field is Required.</span>
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.TypeOfConnection, new { @class = "control-label", id = "TypeOfConnection" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.TypeOfConnection, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Connected to an electricity grid without battery storage", Value = "Connected to an electricity grid without battery storage" }, new SelectListItem() { Text = "Connected to an electricity grid with battery storage", Value = "Connected to an electricity grid with battery storage" }, new SelectListItem() { Text = "Stand-alone (not connected to an electricity grid)", Value = "Stand-alone (not connected to an electricity grid)" } }, new { @class = "form-control", @tabindex = 50 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.SystemMountingType, new { @class = "control-label", id = "SystemMountingType" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.SystemMountingType, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Building or structure", Value = "Building or structure" }, new SelectListItem() { Text = "Ground mounted or free standing", Value = "Ground mounted or free standing" } }, new { @class = "form-control", @tabindex = 51 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.DeemingPeriod, new { @class = "control-label", id = "DeemingPeriod" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.DeemingPeriod, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 52 })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                @if (Model.UserType == 1 || Model.UserType == 3)
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobSTCDetails.CertificateCreated, new { @class = "control-label", id = "CertificateCreated" })
                                        @Html.DropDownListFor(m => m.JobSTCDetails.CertificateCreated, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Yes", Value = "Yes" }, new SelectListItem() { Text = "No", Value = "No" } }, new { @class = "form-control", @tabindex = 53 })
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3" id="FailedAccreditationCode" style="display:none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.FailedAccreditationCode, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.JobSTCDetails.FailedAccreditationCode, new { @class = "form-control", @maxlength = 255, @style = "display:none;", @tabindex = 54 })
                                    <span id="spanFailedAccreditationCode" style="display: none; color:#b94a48">Failed accreditation code is required.</span>
                                </div>
                            </div>
                            <div class="col-sm-3" id="FailedReason" style="display:none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.FailedReason, new { @class = "control-label" })
                                    @Html.TextAreaFor(m => m.JobSTCDetails.FailedReason, new { @class = "form-control", @style = "display:none; resize:none;" })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.MultipleSGUAddress, new { @class = "control-label", @id = "MultipleSGUAddress" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.MultipleSGUAddress, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Yes", Value = "Yes" }, new SelectListItem() { Text = "No", Value = "No" } }, new { @class = "form-control", @tabindex = 55 })
                                </div>
                            </div>
                            <div class="col-sm-3" id="STCLocation" style="display:none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.Location, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.Location, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "North", Value = "North" }, new SelectListItem() { Text = "North-East", Value = "North-East" }, new SelectListItem() { Text = "East", Value = "East" }, new SelectListItem() { Text = "South-East", Value = "South-East" }, new SelectListItem() { Text = "South", Value = "South" }, new SelectListItem() { Text = "South-West", Value = "South-West" }, new SelectListItem() { Text = "West", Value = "West" }, new SelectListItem() { Text = "North-West", Value = "North-West" } }, new { @class = "form-control", @tabindex = 56 })
                                    <span id="spanSTCLocation" style="display: none; color:#b94a48">This Field is required.</span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3" id="divVolumetricCapacity" style="display:none">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.VolumetricCapacity, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.VolumetricCapacity, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Yes", Value = "Yes" }, new SelectListItem() { Text = "No", Value = "No" } }, new { @class = "form-control", @tabindex = 58 })
                                </div>
                            </div>
                            <div class="col-sm-3" id="divStatutoryDeclarations" style="display:none">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.StatutoryDeclarations, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.StatutoryDeclarations, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Yes", Value = "Yes" }, new SelectListItem() { Text = "No", Value = "No" } }, new { @class = "form-control", @tabindex = 59 })
                                    <span id="spanStatutoryDeclarations" class="" style="color: #b94a48;display:none">This Field is Required</span>
                                </div>
                            </div>
                            <div class="col-sm-3" id="divSecondhandWaterHeater" style="display:none">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.JobSTCDetails.SecondhandWaterHeater, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.JobSTCDetails.SecondhandWaterHeater, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "Yes", Value = "Yes" }, new SelectListItem() { Text = "No", Value = "No" } }, new { @class = "form-control", @tabindex = 60 })
                                </div>
                            </div>
                            @if (Model.BasicDetails.JobType == 2)
                            {
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">Installation type:</label>
                                        @Html.DropDownListFor(m => m.JobSystemDetails.InstallationType, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "New building", Value = "New building" }, new SelectListItem() { Text = "Replaced electric heater", Value = "Replaced electric heater" }, new SelectListItem() { Text = "Replaced solar water heater", Value = "Replaced solar water heater" }, new SelectListItem() { Text = "First solar water heater at existing building", Value = "First solar water heater at existing building" }, new SelectListItem() { Text = "Replaced gas water heater", Value = "Replaced gas water heater" }, new SelectListItem() { Text = "Other", Value = "Other" } }, new { @class = "form-control", @tabindex = 61 })
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="tab_bottomrow">
                            <button type="button" class="btn default prev_btn" onclick='return validateForm() ? $("#t4").click() : false' tabindex="714">Previous</button>
                            <button type="button" class="btn default next_btn" onclick='return validateForm() ? $("#t6").click() : false' tabindex="714">Next</button>
                        </div>
                    </div>
                </div>
                <div class="tab6" style="display:none">
                    <div class="form-box">
                        <div class="row">
                            <div class="SWSystemDetails" style="display:none">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">System Brand:</label>
                                        @Html.DropDownListFor(m => m.JobSystemDetails.SystemBrand, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 62 })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">System Model:</label>
                                        @Html.DropDownListFor(m => m.JobSystemDetails.SystemModel, new List<SelectListItem>(), new { @class = "form-control", @disabled = "true", @tabindex = 63 })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">Calculated STC:</label>
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.JobSystemDetails.CalculatedSTCForSWH, new { @class = "form-control", @readonly = "readonly", @data_val = "false", @tabindex = 64 })
                                            <span id="spanJobSystemDetails_CalculatedSTCForSWH" class="" style="color: #b94a48;display:none"></span>
                                            <span class="input-group-btn input-group-icon-btn">
                                                <button class="btn" type="button" id="btnCalculatedSTCSWH" tabindex="65"><img src='@Url.Content("~/images/ic-calculator.png")' alt="" title="Calculate STC"></button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label">Installation type:</label>
                                        @Html.DropDownListFor(m => m.JobSystemDetails.InstallationType, new List<SelectListItem> { new SelectListItem() { Text = "Select", Value = "" }, new SelectListItem() { Text = "New building", Value = "New building" }, new SelectListItem() { Text = "Replaced electric heater", Value = "Replaced electric heater" }, new SelectListItem() { Text = "Replaced solar water heater", Value = "Replaced solar water heater" }, new SelectListItem() { Text = "First solar water heater at existing building", Value = "First solar water heater at existing building" }, new SelectListItem() { Text = "Replaced gas water heater", Value = "Replaced gas water heater" }, new SelectListItem() { Text = "Other", Value = "Other" } }, new { @class = "form-control", @tabindex = 66 })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="PVDSystemDetail">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobSystemDetails.SystemSize, new { @class = "control-label", @id = "JobSystemDetailsSystemSize" })
                                        @Html.TextBoxFor(m => m.JobSystemDetails.SystemSize, new { @class = "form-control", @maxlength = 7, @data_val = "false", @tabindex = 67, @onkeypress = "return isDecimal(event,3,3,this);" })
                                        <span id="spanJobSystemDetails_SystemSize" class="" style="color: #b94a48;display:none">Sytem size must be greater than 0</span>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label class="control-label" id="JobSystemDetailsCalculatedSTC">Calculated STC:</label>
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.JobSystemDetails.CalculatedSTC, new { @class = "form-control", @readonly = "readonly", @data_val = "false", @tabindex = 68 })
                                            <span id="spanJobSystemDetails_CalculatedSTC" class="" style="color: #b94a48;display:none"></span>
                                            <span class="input-group-btn input-group-icon-btn">
                                                <button class="btn" type="button" id="btnCalculatedSTC" tabindex="69"><img src='@Url.Content("~/images/ic-calculator.png")' alt="" title="Calculate STC"></button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row PVDSystemDetail">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label" id="JobSystemDetailsPanelBrand">Panel Brand:</label>
                                    @Html.DropDownListFor(m => m.JobPanelDetails.Brand, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 70 })
                                    <span id="spanJobPanelDetails_Brand" class="" style="color: #b94a48;display:none">Panel Brand  is required.</span>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label" id="JobSystemDetailsPanelModel">Panel Model:</label>
                                    @Html.DropDownListFor(m => m.JobPanelDetails.Model, new List<SelectListItem>(), new { @class = "form-control", @disabled = "true", @tabindex = 71 })
                                    <span id="spanJobPanelDetails_Model" class="" style="color: #b94a48;display:none">Panel Model  is required.</span>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label" id="JobSystemDetailsNumberOfPanel">Number Of Panel:</label>
                                    @Html.TextBoxFor(m => m.JobPanelDetails.NoOfPanel, new { @class = "form-control", @data_val = "false", @maxlength = 5, @onkeypress = "return isNumber(event);", @tabindex = 72 })
                                    <span id="spanJobPanelDetails_NoOfPanel" class="" style="color: #b94a48;display:none">Number Of Panel is required.</span>
                                    <span id="spanNoOfPanelValue" class="" style="color: #b94a48;display:none">Number Of Panel is  between 1 to 10000</span>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">

                                    <button type="button" class="btn primary icon-btn" id="btnAddPanel" tabindex="73" style="margin-top:27px"><span class="sprite-img add_ic"></span>Add</button>
                                    <button type="button" class="btn primary edit_ic" id="btnEditPanel" onclick="PanelEditAction(this)" style="display: none; margin-top: 27px" tabindex="74">@*<span class="sprite-img edit_ic"></span>*@Edit</button>
                                </div>
                            </div>
                        </div>
                        <div class="row PVDSystemDetail">
                            <div class="col-sm-12" style="display:none" id="gridPanel">
                                <div id="grid">
                                    <!-- Grid start -->
                                    <div class="table-responsive">
                                        <table id="Paneldatatable" class="table table-hover">
                                            <thead>
                                                @if (Model.BasicDetails.JobID != 0)
                                                {
                                                    <tr>
                                                        <th width="40%">@Html.DisplayName("Brand ")</th>
                                                        <th width="35%">@Html.DisplayName("Model")</th>
                                                        <th width="10%">#</th>
                                                        @if (Model.UserType == 4 || Model.UserType == 8 || Model.UserType == 3 || Model.UserType == 1)
                                                        {
                                                            <th class="action" id="tdAction" width="15%">@Html.DisplayName("Action")</th>
                                                        }
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <th width="40%">@Html.DisplayName("Brand ")</th>
                                                        <th width="35%">@Html.DisplayName("Model")</th>
                                                        <th width="10%">#</th>
                                                        <th class="action" id="tdAction" width="15%">@Html.DisplayName("Action")</th>
                                                    </tr>
                                                }
                                            </thead>
                                            <tbody id="tblPanel">
                                                @if (Model.BasicDetails.JobID != 0)
                                                {
                                                    if (Model.lstJobPanelDetails != null)
                                                    {
                                                        foreach (var lstUserDocument in @Model.lstJobPanelDetails)
                                                        {
                                                            <tr id=@lstUserDocument.JobPanelID>
                                                                <td class="@lstUserDocument.Brand" width="40%" style="text-align:left">@lstUserDocument.Brand</td>
                                                                <td class="@lstUserDocument.Model" width="35%">@lstUserDocument.Model</td>
                                                                <td class="@lstUserDocument.NoOfPanel" width="10%">@lstUserDocument.NoOfPanel</td>
                                                                @if (Model.UserType == 4 || Model.UserType == 8 || Model.UserType == 3 || Model.UserType == 1)
                                                                {
                                                                    <td class="action @lstUserDocument.JobPanelID" data-supplier="@lstUserDocument.Supplier" id="tdAction" width="15%"><a class="edit sprite-img" title="Edit" id="signEdit" href="javascript:void(0)" style="cursor: pointer" onclick="editPanel(@lstUserDocument.JobPanelID)"></a>&nbsp;&nbsp;<a class="delete sprite-img" title="Delete" id="signDelete" style="cursor: pointer" onclick="DeletePanelFromGrid(@lstUserDocument.JobPanelID)"></a></td>
                                                                }
                                                            </tr>
                                                        }
                                                    }
                                                }
                                            </tbody>

                                        </table>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row PVDSystemDetail" style="padding-top:10px;">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Inverter Brand:</label>
                                    @Html.DropDownListFor(m => m.JobInverterDetails.Brand, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 75 })
                                    @Html.ValidationMessageFor(m => m.JobInverterDetails.Brand)
                                    <span id="spanJobInverterDetails_Brand" class="" style="color: #b94a48;display:none">Inverter Brand  is required.</span>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Inverter Series:</label>
                                    @Html.DropDownListFor(m => m.JobInverterDetails.Series, new List<SelectListItem>(), new { @class = "form-control", @disabled = "true", @tabindex = 76 })
                                    @Html.ValidationMessageFor(m => m.JobInverterDetails.Series)
                                    <span id="spanJobInverterDetails_Series" class="" style="color: #b94a48;display:none"></span>
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Inverter Model:</label>
                                    @Html.DropDownListFor(m => m.JobInverterDetails.Model, new List<SelectListItem>(), new { @class = "form-control", @disabled = "true", @tabindex = 77 })
                                    @Html.ValidationMessageFor(m => m.JobInverterDetails.Model)
                                    <span id="spanJobInverterDetails_Model" class="" style="color: #b94a48;display:none"> Inverter Modelis required.</span>
                                </div>
                            </div>
                            <div class="col-sm-3">

                                <div class="form-group">
                                    <button type="button" class="btn primary icon-btn" id="btnAddInverter" tabindex="78" style="margin-top:27px"><span class="sprite-img add_ic"></span>Add</button>
                                    <button type="button" class="btn primary edit_ic" id="btnEditInverter" onclick="InverterEditAction(this)" style="display:none;margin-top:27px">@*<span class="sprite-img edit_ic"></span>*@Edit</button>
                                </div>
                            </div>
                        </div>
                        <div class="row PVDSystemDetail">
                            <div class="col-sm-12" style="display:none" id="gridInverter">
                                <div id="grid">
                                    <!-- Grid start -->
                                    <div class="table-responsive">
                                        <table id="Inverterdatatable" class="table table-hover">
                                            <thead>
                                                @if (Model.BasicDetails.JobID != 0)
                                                {
                                                    <tr>
                                                        <th width="35%">@Html.DisplayName("Brand ")</th>
                                                        <th width="25%">@Html.DisplayName("Series")</th>
                                                        <th width="25%">@Html.DisplayName("Model")</th>
                                                        @if (Model.UserType == 4 || Model.UserType == 8 || Model.UserType == 3 || Model.UserType == 1)
                                                        {
                                                            <th class="action" id="tdAction" width="15%" style="text-align:center;">@Html.DisplayName("Action")</th>
                                                        }
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <th width="35%">@Html.DisplayName("Brand ")</th>
                                                        <th width="25%">@Html.DisplayName("Series")</th>
                                                        <th width="25%">@Html.DisplayName("Model")</th>
                                                        <th class="action" id="tdAction" width="15%" style="text-align:center;">@Html.DisplayName("Action")</th>
                                                    </tr>
                                                }
                                            </thead>
                                            <tbody id="tblInverter">
                                                @if (Model.BasicDetails.JobID != 0)
                                                {
                                                    if (Model.lstJobInverterDetails != null)
                                                    {
                                                        foreach (var lstJobInverterDetails in @Model.lstJobInverterDetails)
                                                        {
                                                            <tr id=@lstJobInverterDetails.JobInverterID>
                                                                <td class="@lstJobInverterDetails.Brand" width="35%">@lstJobInverterDetails.Brand</td>
                                                                <td class="@lstJobInverterDetails.Series" width="25%">@lstJobInverterDetails.Series</td>
                                                                <td class="@lstJobInverterDetails.Model" width="25%">@lstJobInverterDetails.Model</td>
                                                                @if (Model.UserType == 4 || Model.UserType == 8 || Model.UserType == 3 || Model.UserType == 1)
                                                                {
                                                                    <td class="action @lstJobInverterDetails.JobInverterID" id="tdAction" width="15%" style="text-align:center;"><a class="edit sprite-img" title="Edit" id="signEdit" style="cursor: pointer" href="javascript:void(0)" onclick="editInverter(@lstJobInverterDetails.JobInverterID)"></a>&nbsp;&nbsp;<a class="delete sprite-img" title="Delete" id="signDelete" style="cursor: pointer" onclick="DeleteInverterFromGrid(@lstJobInverterDetails.JobInverterID)"></a></td>
                                                                }
                                                            </tr>
                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="row" style="margin-top:10px;">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label class="control-label">Total Number of Panels:</label>
                                    @Html.TextBoxFor(m => m.JobSystemDetails.NoOfPanel, new { @class = "form-control", @maxlength = 5, @onkeypress = "return isNumber(event);", @tabindex = 79, @readonly = "readonly" })
                                    <span id="spanNoOfPanelSystemValue" class="" style="color: #b94a48;display:none">Number Of Panel must be  between 0 to 10000</span>
                                </div>
                            </div>
                            <div class="col-sm-8">
                                <div class="form-group">
                                    <label class="control-label" id="serialNumberLable">Tank serial number(s):</label>
                                    <label class="control-label" style="font-family:Open Sans Semibold">
                                        You can enter multiple serial numbers in this field. Each serial number
                                        must appear on a new line and be less than 101 characters.
                                    </label>
                                    <div class="col-sm-5" style="padding-left:0px;padding-right:0px;">
                                        @Html.TextAreaFor(m => m.JobSystemDetails.SerialNumbers, new { @class = "form-control", @tabindex = 80, @style = "resize:none;" })
                                        <span id="spanSerialNumbers" class="" style="color: #b94a48;display:none">Serial Numbers's maximum length  is of 100 characters.</span>
                                    </div>
                                    <div class="col-sm-5" style="padding-left:0px;padding-right:0px;">
                                        <span class="pull-left input-group-btn input-group-icon-btn" tabindex="80">
                                            <button class="btn" type="button" id="btnPopupSerialNumber"><img src='@Url.Content("~/images/add-btn.png")' alt="" title="Add"></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-1">

                            </div>
                        </div>
                    </div>
                    <div class="tab_bottomrow">
                        <button type="button" class="btn default prev_btn" onclick="$('#t5').click();" tabindex="714">Previous</button>
                        <button type="button" class="btn primary icon-btn" id="saveJob" onclick="" tabindex="713"><span class="sprite-img save_ic"></span>Save</button>
                        <button type="button" class="btn default cancel_ic" onclick="" tabindex="714">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@*Serial number popup*@
<div class="modal fade popupSerialNumber" tabindex="-1" id="popupSerialNumber">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center-serial">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <img src='@Url.Content("~/images/close-btn.png")' alt="">
                    </button>
                    <h4 class="modal-title">Serial Numbers</h4>
                </div>
                <div class="modal-body">
                    <div class="form-box">
                        <div style="width: 12px; height: 12px; background-color: rgba(39, 108, 171, 0.15); display: inline-block; border-radius: 6px;"></div> <span>Serial numbers exist in master file.</span><br />
                        <div style="width: 12px; height: 12px; background-color: rgba(210, 71, 98, 0.15); display: inline-block; border-radius: 6px;"></div> <span>Serial numbers exist in jobs.</span>
                        <hr style="margin-left: -15px; margin-right: -15px; margin-bottom: 10px; margin-top: 10px; " />
                        <ul id="serialNumberPopup"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*popup job Owner Signature*@
<div class="modal fade" id="popupOwnerSign" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" aria-label="Close" id="btnClosepopupOwnerSign">
                    <img src='@Url.Content("~/images/close-btn.png")' alt="">
                </button>
                <h4 class="modal-title" id="myModalLabel">Signature</h4>
            </div>
            <div class="modal-body">
                <div class="form-border">
                    @*<div style="height:480px;">
                            <img src="@Model.JobOwnerDetails.OwnerSignature" id="imgOwnerSign" class="" style="display:inline;width:100%;height:100%;" />
                        </div>*@
                    <div>
                        <img src="@Model.JobOwnerDetails.OwnerSignature" id="imgOwnerSign" class="" style="display:inline;" />
                    </div>
                </div>
                <div class="modal-footer">

                </div>
            </div>
        </div>
    </div>
</div>



<div class="modal fade add-visits" tabindex="-1" id="warning">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <form>
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <img src='@Url.Content("~/images/close-btn.png")' alt="">
                        </button>
                        <h4 class="modal-title">Warning</h4>
                    </div>
                    <div class="modal-body">
                        <div style="display:block !important;margin-bottom:0px">
                            <ul class="modelBodyMessage"></ul>
                            <br />
                            <h5>Are you sure you want to continue ?</h5>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn primary" id="yesWarning">Yes</button>
                        <button type="button" class="btn default" data-dismiss="modal" id="noWarning">No</button>
                    </div>
                </form>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
</div>

@*popupmap*@
<div class="modal fade" tabindex="-1" role="dialog" id="popupMap">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                    <img src='@Url.Content("~/images/close-btn.png")' alt="">
                </button>
                <h4 class="modal-title">Map</h4>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegionMap" style="display: none">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                </div>
                <div class="form-box">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label class="control-label">Source</label>
                                <input type="text" id="txtSource" class="form-control" placeholder="Source" tabindex="301" />
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label class="control-label">Destination</label>
                                <input type="text" id="txtDestination" class="form-control" placeholder="Destination" tabindex="302" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <button type="button" class="btn default pull-right" onclick="GetLocation()" tabindex="303">Get Location</button>
                            <button type="button" class="btn default pull-right" onclick="GetRoute()" tabindex="304">Get Route</button>
                            <div id="dvDistance" style="font-weight: bold;color:black">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div id="dvMap" style="height:400px;margin-top:10px">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>

<div class="modal fade add-visits" tabindex="-1" id="STCwarning">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <form>
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <img src='@Url.Content("~/images/close-btn.png")' alt="">
                        </button>
                        <h4 class="modal-title">Warning</h4>
                    </div>
                    <div class="modal-body">
                        <div style="display:block !important;margin-bottom:0px">
                            <ul class="STCmodelBodyMessage"></ul>
                            <br />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn primary" id="CloseWarning">Ok</button>
                    </div>
                </form>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
</div>

@*popup installer*@
<div class="modal fade popupInstaller" tabindex="-1" role="dialog" id="popupInstaller">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                        <img src='@Url.Content("~/images/close-btn.png")' alt="">
                    </button>
                    <h4 class="modal-title">Installer Detail</h4>
                </div>
                <div class="modal-body">
                    <form id="Installer">
                        <div class="form-box">
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.FirstName, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.FirstName, new { @class = "form-control", @maxlength = 100, @tabindex = 401 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.FirstName)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.Surname, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.Surname, new { @class = "form-control", @maxlength = 100, @tabindex = 402 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.Surname)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.Email, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.Email, new { @class = "form-control", @maxlength = 255, @tabindex = 403 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.Email)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.Phone, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.Phone, new { @class = "form-control", @maxlength = 16, @tabindex = 404, onkeypress = "return isValidPhone(event,this);" })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.Phone)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.Mobile, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.Mobile, new { @class = "form-control", @maxlength = 16, @tabindex = 405, onkeypress = "return isValidPhone(event,this);" })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.Mobile)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        <label class="control-label required">Postal Address Type :</label>
                                        @Html.DropDownListFor(m => m.JobInstallerDetails.AddressID, new SelectList((ViewBag.PostalAddressType) as SelectList, "Value", "Text"), new { @class = "form-control InstallerAddress", @tabindex = 406 })
                                    </div>
                                </div>
                                <div class="InstallerPDA" style="display:none">
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobInstallerDetails.PostalAddressID, new { @class = "control-label required" })
                                            @Html.DropDownListFor(model => model.JobInstallerDetails.PostalAddressID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 407 })
                                            @Html.ValidationMessageFor(m => m.JobInstallerDetails.PostalAddressID)
                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobInstallerDetails.PostalDeliveryNumber, new { @class = "control-label required" })
                                            @Html.TextBoxFor(m => m.JobInstallerDetails.PostalDeliveryNumber, new { @class = "form-control", @maxlength = 50, @tabindex = 408 })
                                            @Html.ValidationMessageFor(m => m.JobInstallerDetails.PostalDeliveryNumber)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 InstallerDPA">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.UnitTypeID, new { @class = "control-label", @id = "lblInstallerUnitTypeID" })
                                        @Html.DropDownListFor(model => model.JobInstallerDetails.UnitTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 409 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.UnitTypeID)
                                    </div>
                                </div>
                                <div class="col-sm-4 InstallerDPA">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.UnitNumber, new { @class = "control-label", @id = "lblInstallerUnitNumber" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.UnitNumber, new { @class = "form-control", @maxlength = 10, @tabindex = 410 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.UnitNumber)
                                    </div>
                                </div>
                            </div>
                            <div class="row InstallerDPA">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.StreetNumber, new { @class = "control-label required", @id = "lblInstallerStreetNumber" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.StreetNumber, new { @class = "form-control", @maxlength = 15, @tabindex = 411 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.StreetNumber)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.StreetName, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.StreetName, new { @class = "form-control", @maxlength = 45, @tabindex = 412 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.StreetName)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.StreetTypeID, new { @class = "control-label required" })
                                        @Html.DropDownListFor(model => model.JobInstallerDetails.StreetTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 413 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.StreetTypeID)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.Town, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.Town, new { @class = "form-control", @maxlength = 80, @tabindex = 414, })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.Town)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.State, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.State, new { @class = "form-control", @maxlength = 3, @tabindex = 415, @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.State)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobInstallerDetails.PostCode, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobInstallerDetails.PostCode, new { @class = "form-control", @maxlength = 8, @tabindex = 416 })
                                        @Html.ValidationMessageFor(m => m.JobInstallerDetails.PostCode)
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn primary icon-btn" onclick="validateInstaller()" tabindex="100"><span class="sprite-img save_ic"></span>Save</button>
                                <button type="button" class="btn default icon-btn" onclick="clearPopupInstaller()" tabindex="101"><span class="sprite-img reset_ic"></span>Reset</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
</div>

@*Popup Electrician Detail*@
<div class="modal fade popupBasicAddress " tabindex="-1" role="dialog" id="popupBasicAddress">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-label="Close" data-dismiss="modal">
                        <img src='@Url.Content("~/images/close-btn.png")' alt="">
                    </button>
                    @*<h4 class="modal-title">Address Detail</h4>*@
                    <h4 class="modal-title">Electricians Details</h4>
                </div>
                <div class="modal-body">
                    <form id="JobElectricians">
                        <div class="form-box">
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.InstallerID, new { @class = "control-label" })
                                        @Html.DropDownListFor(m => m.JobElectricians.InstallerID, new List<SelectListItem>(), new { @data_val = "false", @class = "form-control", @tabindex = 33 })
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.ElectricianID, new { @class = "control-label" })
                                        @Html.DropDownListFor(m => m.JobElectricians.ElectricianID, new List<SelectListItem>(), new { @data_val = "false", @class = "form-control", @tabindex = 34 })
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.CompanyName, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobElectricians.CompanyName, new { @class = "form-control", @maxlength = 50, @autofocus = "autofocus", @tabindex = 35 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.CompanyName)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.FirstName, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobElectricians.FirstName, new { @class = "form-control", @maxlength = 100, @tabindex = 36 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.FirstName)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.LastName, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobElectricians.LastName, new { @class = "form-control", @maxlength = 100, @tabindex = 37 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.LastName)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.Email, new { @class = "control-label " })
                                        @Html.TextBoxFor(m => m.JobElectricians.Email, new { @class = "form-control", @maxlength = 255, @tabindex = 38 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.Email)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.Phone, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobElectricians.Phone, new { @class = "form-control", @maxlength = 16, onkeypress = "return isValidPhone(event,this);", @tabindex = 39 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.Phone)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.Mobile, new { @class = "control-label" })
                                        @Html.TextBoxFor(m => m.JobElectricians.Mobile, new { @class = "form-control", @maxlength = 16, onkeypress = "return isValidPhone(event,this);", @tabindex = 40 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.Mobile)
                                    </div>
                                </div><div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.LicenseNumber, new { @class = "control-label " })
                                        @Html.TextBoxFor(m => m.JobElectricians.LicenseNumber, new { @class = "form-control", @maxlength = 100, @tabindex = 41 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.LicenseNumber)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        <label class="control-label required">Postal Address Type :</label>
                                        @Html.DropDownListFor(m => m.JobElectricians.AddressID, new SelectList((ViewBag.PostalAddressType) as SelectList, "Value", "Text"), new { @class = "form-control ElectriciansAddress", @tabindex = 201 })
                                    </div>
                                </div>
                                <div class="ElectriciansPDA" style="display:none">
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobElectricians.PostalAddressID, new { @class = "control-label required" })
                                            @Html.DropDownListFor(model => model.JobElectricians.PostalAddressID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 202 })
                                            @Html.ValidationMessageFor(m => m.JobElectricians.PostalAddressID)
                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobElectricians.PostalDeliveryNumber, new { @class = "control-label required" })
                                            @Html.TextBoxFor(m => m.JobElectricians.PostalDeliveryNumber, new { @class = "form-control", @maxlength = 50, @tabindex = 203 })
                                            @Html.ValidationMessageFor(m => m.JobElectricians.PostalDeliveryNumber)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-4 ElectriciansDPA">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.UnitTypeID, new { @class = "control-label", @id = "lblElectriciansUnitTypeID" })
                                        @Html.DropDownListFor(model => model.JobElectricians.UnitTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 204 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.UnitTypeID)
                                    </div>
                                </div>
                                <div class="col-sm-4 ElectriciansDPA">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.UnitNumber, new { @class = "control-label", @id = "lblElectriciansUnitNumber" })
                                        @Html.TextBoxFor(m => m.JobElectricians.UnitNumber, new { @class = "form-control", @maxlength = 10, @tabindex = 205 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.UnitNumber)
                                    </div>
                                </div>
                            </div>
                            <div class="ElectriciansDPA">
                                <div class="row">
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobElectricians.StreetNumber, new { @class = "control-label required", @id = "lblElectriciansStreetNumber" })
                                            @Html.TextBoxFor(m => m.JobElectricians.StreetNumber, new { @class = "form-control", @maxlength = 15, @tabindex = 206 })
                                            @Html.ValidationMessageFor(m => m.JobElectricians.StreetNumber)
                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobElectricians.StreetName, new { @class = "control-label required" })
                                            @Html.TextBoxFor(m => m.JobElectricians.StreetName, new { @class = "form-control", @maxlength = 45, @tabindex = 207 })
                                            @Html.ValidationMessageFor(m => m.JobElectricians.StreetName)
                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.JobElectricians.StreetTypeID, new { @class = "control-label required" })
                                            @Html.DropDownListFor(model => model.JobElectricians.StreetTypeID, new List<SelectListItem>(), new { @class = "form-control", @tabindex = 208 })
                                            @Html.ValidationMessageFor(m => m.JobElectricians.StreetTypeID)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.Town, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobElectricians.Town, new { @class = "form-control", @maxlength = 80, @tabindex = 209, })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.Town)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.State, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobElectricians.State, new { @class = "form-control", @maxlength = 3, @tabindex = 210, @readonly = "readonly" })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.State)
                                    </div>
                                </div>
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.JobElectricians.PostCode, new { @class = "control-label required" })
                                        @Html.TextBoxFor(m => m.JobElectricians.PostCode, new { @class = "form-control", @maxlength = 8, @tabindex = 211 })
                                        @Html.ValidationMessageFor(m => m.JobElectricians.PostCode)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group"></div>
                                    <div>
                                        @Html.LabelFor(m => m.JobElectricians.Signature, new { @class = "control-label" })
                                    </div>
                                    <div class="fileUpload btn primary upload_ic" id="divUpload" style="margin-left: 0px;" tabindex="44">
                                        <span>Upload</span>
                                        <input id="uploadBtnJobSignature" type="file" class="upload fileUpload" />
                                    </div>
                                    <a id="imgSignature" href="javascript:void(0)" style="display:none;" tabindex="45">&nbsp; &nbsp; View Image</a>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn primary icon-btn" onclick="validateBasicAddress()" tabindex="212"><span class="sprite-img save_ic"></span>Save</button>
                                <button type="button" class="btn default icon-btn" onclick="clearPopupBasicAddress()" tabindex="213"><span class="sprite-img reset_ic"></span>Reset</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
</div>

@*popup signature*@
<div class="modal fade" id="popupbox1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" aria-label="Close" id="btnClosePopUpBox">
                    <img src='@Url.Content("~/images/close-btn.png")' alt="">
                </button>
                <h4 class="modal-title" id="myModalLabel">Signature</h4>
            </div>
            <div class="modal-body">
                <div class="form-border">
                    @*<div style="height:480px;">
                            <img src='' id="imgSign" class="" style="display:inline;width:100%;height:100%;" />
                        </div>*@
                    <div>
                        <img src='' id="imgSign" class="" style="display:inline;" />
                    </div>
                </div>
                <div class="modal-footer"><p class="remove_ic" onclick="deleteImageJob('imgSign');"><img src="~/images/delete-icon.png" id="signDelete">Remove</p></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @*<script src="~/Scripts/jquery.validate-vsdoc.js"></script>
        <script src="~/Scripts/jquery-1.11.0.min.js"></script>
        <link href="~/Content/jquery-ui.css" rel="stylesheet" />
        <script src="~/Scripts/jquery-1.10.2.js"></script>
        <script src="~/Scripts/jquery-ui-1.0.js"></script>
        <link href="~/Content/jquery-ui.css" rel="stylesheet" />
        <script src="~/Scripts/bootstrap.min.js"></script>
        <script src="~/Scripts/easyResponsiveTabs.js" type="text/javascript"></script>
        @Scripts.Render("~/bundles/jqueryval")
        <script src="~/Scripts/jquery.fileupload.js"></script>
        @Scripts.Render("~/Scripts/FormBot.js")
        <script src="~/Scripts/jquery.fileupload.js"></script>
        <script src="~/Scripts/bootstrap-datepicker.js"></script>*@

    <script src="~/Scripts/easyResponsiveTabs.js" type="text/javascript"></script>
    @*@Scripts.Render("~/Scripts/FormBot.js")
        <script src="~/Scripts/jquery.fileupload.js"></script>*@

    <script type="text/javascript">

        var $ = $.noConflict();
        var activeTab = 't1';
        var isValid = false;
        var isPopup = false;
        var ElectrianAddressJson = [];
        var InstallerJson = [];
        var documentSizeLimit = '@FormBot.Helper.ProjectSession.MaxImageSize' / 1024000;
        var maxsize = Math.round(documentSizeLimit);
        var count = 0;
        var logoWidth = 0, logoHeight = 0, SRCSign;
        var ownerSignWidth = 0, ownerSignHeight = 0, SRCOwnerSign;

        $(document).on('ajaxStart', function () {
            count++;
            if (count === 1) {
                $("#loading-image").show();
            }
        }).on('ajaxStop', function () {
            //count is decrementing and on same time checking whether it becomes zero
            if (!--count) {
                $("#loading-image").hide();
            }
        });

        $('#loading-image').show();
        $('#horizontalTab').on('load', function () {
            $('#loading-image').delay(9000).fadeOut(); // Time in milliseconds.
        });

        $("#BasicDetails_JobStage").change(function () {
            var jobStage = $("#BasicDetails_JobStage option:selected").text();
            $('#BasicDetails_CurrentJobStage').val(jobStage);
        });

        $("#BasicDetails_Priority").change(function () {
            var jobPriority = $("#BasicDetails_Priority option:selected").text();
            $('#BasicDetails_CurrentPriority').val(jobPriority);
        });

        var fillJobStage = function () {
            $("#BasicDetails_JobStage").find("option").eq(0).remove();
        };

        function fillJobType() {
            if ('@Model.BasicDetails.JobID' == 0) {
                $("#BasicDetails_JobType").val('1').change();
                $('#BasicDetails_JobType option').first().remove();
            }
        }

        $("#noWarning").click(function () {
            $("#warning").modal('hide');
            if ($("#BasicDetails_JobID").val() != "0") {
                $("#BasicDetails_JobType").attr('disabled', 'disabled');
                $("#BasicDetails_JobType").change();
            }
        });

        $("#CloseWarning").click(function () {
            $("#STCwarning").modal('hide');
            if ($("#BasicDetails_JobID").val() != "0") {
                $("#BasicDetails_JobType").attr('disabled', 'disabled');
                $("#BasicDetails_JobType").change();
            }
        });

        $("#yesWarning").click(function () {
        debugger
            $("#warning").modal('hide');
            SaveJob(jobSaveType);
        });

        function fillJobType() {
            if ('@Model.BasicDetails.JobID' == 0) {
                $("#BasicDetails_JobType").val('1').change();
                $('#BasicDetails_JobType option').first().remove();
            }
        }

        function SaveJob(saveType) {
        debugger
            EnableDropDownbyUsertype();
            $("#BasicDetails_JobType").removeAttr("disabled");
            var panelData = '';
            var xmlPanel = '';
            var inverterData = '';
            var xmlInverter = '';

            if (PanelXml.length > 0) {
                var jsonp = JSON.stringify(PanelXml);
                var sName = '';
                var obj = $.parseJSON(jsonp);
                $.each(obj, function () {
                    sName += '<panel><Brand>' + htmlEncode(this['Brand']) + '</Brand>' + '<Model>' + htmlEncode(this['Model']) + '</Model>' +
                     '<NoOfPanel>' + this['Count'] + '</NoOfPanel></panel>';
                });
                xmlPanel = '<Panels>' + sName + '</Panels>'
            }
            if (InverterXml.length > 0) {

                var jsonp = JSON.stringify(InverterXml);
                var sName = '';
                var obj = $.parseJSON(jsonp);
                $.each(obj, function () {
                    sName += '<inverter><Brand>' + htmlEncode(this['Brand']) + '</Brand>' + '<Model>' + htmlEncode(this['Model']) + '</Model>' +
                     '<Series>' + htmlEncode(this['Series']) + '</Series></inverter>';
                });
                xmlInverter = '<Inverters>' + sName + '</Inverters>';
            }

            $("#panelXml").val(xmlPanel);
            $("#inverterXml").val(xmlInverter);
            var data = JSON.stringify($('form').serializeToJson());
            var postUrl = '';
            if ('@isAddJob' == 'True') {
                postUrl = '@Url.Action("Create", "Job")';
            } else if ('@isEditjob' == 'True') {
                postUrl = '@Url.Action("Edit", "Job")';
            }

            $.ajax({
                url: postUrl,
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8', // Not to set any content header
                processData: false, // Not to process data
                data: data,
                cache: false,
                async: true,
                success: function (result) {
                    if (result.insert) {
                        $("#successMsgRegion").html(closeButton + " Job has been saved successfully.");
                        $("#successMsgRegion").show();
                        $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                        $('body').animate({ scrollTop: 0 }, 'slow');
                        window.location.href = '@Url.Action("Edit", "Job")' + '/' + result.id;
                        DisableDropDownbyUsertype();
                    }
                    else if (result.update) {
                        $("#successMsgRegion").html(closeButton + " Job has been updated.");
                        $("#successMsgRegion").show();
                        $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                        $('body').animate({ scrollTop: 0 }, 'slow');
                        DisableDropDownbyUsertype();
                    }
                    else if (result.error) {
                        $("#errorMsgRegion").html(closeButton + result.errorMessage);
                        //$("#errorMsgRegion").html(closeButton + "The field cannot contain symbols like < > ^ [ ].");
                        $("#errorMsgRegion").show();
                        $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                        $('body').animate({ scrollTop: 0 }, 'slow');
                        DisableDropDownbyUsertype();
                    } else {
                        $("#errorMsgRegion").html(closeButton + " Job not save.");
                        $("#errorMsgRegion").show();
                        $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                        $('body').animate({ scrollTop: 0 }, 'slow');
                        DisableDropDownbyUsertype();
                    }
                }
            });
        }

        $(document).ready(function () {

            $('#BasicDetails_strSoldByDate').datepicker({
                format: '@ProjectConfiguration.GetDateFormat',
                autoclose: true
            }).on('change', function () {
                $(this).valid();
            });


            $("#BasicDetails_strSoldByDate").keydown(function (e) {
                if (e.which == 9) {
                    return true;
                }
                return false;
            });

            $('#date-pick, #date-pick1, .date-pick').datepicker({
                format: '@ProjectConfiguration.GetDateFormat',
                autoclose: true
            }).on('change', function () {
                $(this).valid();
            });


            $(".date-pick").keydown(function (e) {
                if (e.which == 9) {
                    return true;
                }
                return false;
            });


            var SoldByDate = $('#BasicDetails_strSoldByDate').val();
            if (SoldByDate != null && SoldByDate != undefined && SoldByDate != '') {
                $('#BasicDetails_strSoldByDate').val('').removeAttr('value');
                $('#BasicDetails_strSoldByDate').datepicker({
                    format: '@ProjectConfiguration.GetDateFormat',
                    autoclose: true
                }).on('changeDate', function () {
                    $(this).datepicker('hide');
                });
                var SoldByDateEdit = moment(SoldByDate).format('@ProjectConfiguration.GetDateFormat'.toUpperCase());
                $('#BasicDetails_strSoldByDate').val(SoldByDateEdit);
            } else {
                $('#BasicDetails_strSoldByDate').datepicker({
                    format: '@ProjectConfiguration.GetDateFormat',
                    autoclose: true
                }).on('changeDate', function () {
                    $(this).datepicker('hide');
                });
            }




            $('#popupbox1').on('show', function () {
                alert('aa');
                $('#popupBasicAddress').css('opacity', .0);
                $('#popupBasicAddress').unbind();
            });

            $('#BasicDetails_JobSoldBy').change(function () {                
                var jobsoldBy = $('#BasicDetails_JobSoldBy').val();
                $('#BasicDetails_SoldBy').val(jobsoldBy);

            });
            $('#BasicDetails_strSoldByDate').change(function () {                
                var jobsoldbyDate = $('#BasicDetails_strSoldByDate').val();
                $('#BasicDetails_SoldByDate').val(jobsoldbyDate);

            });

            $('#btnBasicAddressDetail').click(function () {

                $('#popupBasicAddress').modal({ backdrop: 'static', keyboard: false });
                setTimeout(function () {
                    $('#JobElectricians_InstallerID').focus();
                }, 1000);

                $(".popupBasicAddress").find('input[type=text]').each(function () {

                    $(this).attr('class', 'form-control valid');
                });
                $(".popupBasicAddress").find('.field-validation-error').attr('class', 'field-validation-valid');
                $.each(ElectrianAddressJson, function (key, value) {
                    $("#JobElectricians_CompanyName").val(value.CompanyName);
                    $("#JobElectricians_FirstName").val(value.FirstName);
                    $("#JobElectricians_LastName").val(value.LastName);
                    $("#JobElectricians_Email").val(value.Email);
                    $("#JobElectricians_Phone").val(value.Phone);
                    $("#JobElectricians_Mobile").val(value.Mobile);
                    $("#JobElectricians_LicenseNumber").val(value.LicenseNumber);
                    $('#JobElectricians_AddressID').val(value.PostalAddressType);
                    $('#JobElectricians_UnitNumber').val(value.UnitNumber);
                    $('#JobElectricians_UnitTypeID').val(value.UnitType);
                    $('#JobElectricians_StreetNumber').val(value.StreetNumber);
                    $('#JobElectricians_StreetName').val(value.StreetName);
                    $('#JobElectricians_StreetTypeID').val(value.StreetType);
                    $('#JobElectricians_Town').val(value.Town);
                    $('#JobElectricians_State').val(value.State);
                    $('#JobElectricians_PostCode').val(value.PostCode);
                    $("#JobElectricians_PostalDeliveryNumber").val(value.PostalDeliveryNumber);
                    $('#JobElectricians_PostalAddressID').val(value.PostalAddressID);
                });

                if ($('#JobElectricians_UnitTypeID option:selected').val() == "") {
                    $('#lblElectriciansUnitNumber').removeClass("required");
                    $('#lblElectriciansUnitTypeID').removeClass("required");
                    $('#lblElectriciansStreetNumber').addClass("required");
                }
                else {
                    $('#lblElectriciansUnitNumber').addClass("required");
                    $('#lblElectriciansUnitTypeID').addClass("required");
                    $('#lblElectriciansStreetNumber').removeClass("required");
                }

                if ($('#JobElectricians_AddressID').val() == 1) {
                    $('.ElectriciansDPA').show();
                    $('.ElectriciansPDA').hide();
                }
                else {
                    $('.ElectriciansPDA').show();
                    $('.ElectriciansDPA').hide();
                }
            });

            $('#btnInstallerDetails').click(function () {
                $('#popupInstaller').modal({ backdrop: 'static', keyboard: false });
                setTimeout(function () {
                    $('#JobInstallerDetails_FirstName').focus();
                }, 1000);
                $(".popupInstaller").find('input[type=text]').each(function () {

                    $(this).attr('class', 'form-control valid');
                });
                $(".popupInstaller").find('.field-validation-error').attr('class', 'field-validation-valid');
                $.each(InstallerJson, function (key, value) {
                    $("#JobInstallerDetails_FirstName").val(value.FirstName);
                    $('#JobInstallerDetails_Surname').val(value.Surname);
                    $('#JobInstallerDetails_Email').val(value.Email);
                    $('#JobInstallerDetails_Phone').val(value.Phone);
                    $('#JobInstallerDetails_Mobile').val(value.Mobile);
                    $('#JobInstallerDetails_AddressID').val(value.PostalAddressType);
                    $('#JobInstallerDetails_UnitNumber').val(value.UnitNumber);
                    $('#JobInstallerDetails_UnitTypeID').val(value.UnitType);
                    $('#JobInstallerDetails_StreetNumber').val(value.StreetNumber);
                    $('#JobInstallerDetails_StreetName').val(value.StreetName);
                    $('#JobInstallerDetails_StreetTypeID').val(value.StreetType);
                    $('#JobInstallerDetails_Town').val(value.Town);
                    $('#JobInstallerDetails_State').val(value.State);
                    $('#JobInstallerDetails_PostCode').val(value.PostCode);
                    $("#JobInstallerDetails_PostalDeliveryNumber").val(value.PostalDeliveryNumber);
                    $('#JobInstallerDetails_PostalAddressID').val(value.PostalAddressID);
                });
                if ($('#JobInstallerDetails_UnitTypeID option:selected').val() == "") {
                    $('#lblInstallerUnitNumber').removeClass("required");
                    $('#lblInstallerUnitTypeID').removeClass("required");
                    $('#lblInstallerStreetNumber').addClass("required");
                }
                else {
                    $('#lblInstallerUnitNumber').addClass("required");
                    $('#lblInstallerUnitTypeID').addClass("required");
                    $('#lblInstallerStreetNumber').removeClass("required");
                }
                if ($('#JobInstallerDetails_AddressID').val() == 1) {
                    $('.InstallerDPA').show();
                    $('.InstallerPDA').hide();
                }
                else {
                    $('.InstallerPDA').show();
                    $('.InstallerDPA').hide();
                }

            });

            //Installer Detail
            var Installername;
            var FirstName = $("#JobInstallerDetails_FirstName").val();
            var Surname = $("#JobInstallerDetails_Surname").val();
            Installername = FirstName + ' ' + Surname;
            $("#txtInstallerName").val(Installername);

            $("#t2").click(function (e) {
                $("#JobOwnerDetails_OwnerType").change();
            })
            $(".cancel_ic").click(function (e) {
                window.location.href = "/Job/Index/" + '@Url.RequestContext.RouteData.Values["id"]';
            })

            $('#horizontalTab').easyResponsiveTabs({
                type: 'default', //Types: default, vertical, accordion
                width: 'auto', //auto or any width like 600px
                fit: true,   // 100% fit in a container
                closed: 'accordion', // Start closed if in accordion view
                deactivate: function (event) { console.log(activeTab); },
                activate: function (event) {
                    var $this = $(this);
                    if (isValid && isPopup && SerialNumbersValidation()) {
                        activeTab = $this.attr('id');
                        return true;
                    } else {
                        $this.removeClass('resp-tab-active');
                        $('.resp-tab-content-active').css('display', 'none').removeClass('resp-tab-content-active');
                        $('#' + activeTab).addClass('resp-tab-active');
                        $('.tab' + activeTab.replace('t', '')).addClass('resp-tab-content-active').css('display', 'block');
                        return false;
                    }
                },
            });
        });

        $('.resp-tabs-list li').click(function (e, c) {
            var $this = $(this);
            isValid = validateForm();
            isPopup = CheckShowErrorMessagesForPopup();
        });

        function CheckShowErrorMessagesForPopup() {

            var ReturnValue = true;
            var FailedCode = $("#JobSTCDetails_FailedAccreditationCode").val();
            var StatutoryDeclarations = $('#JobSTCDetails_StatutoryDeclarations').val();

            if ($("#JobInstallationDetails_InstallingNewPanel").val() != 'New' && $("#JobInstallationDetails_InstallingNewPanel").val() != "" && $("#JobInstallationDetails_Location").val() == "") {
                $("#spanInstallationLocation").show();
                ReturnValue = false;
            } else { $("#spanInstallationLocation").hide(); }

            if ('@Model.BasicDetails.JobType' == 1) {
                if ($("#JobSTCDetails_MultipleSGUAddress").val() == 'Yes' && $("#JobSTCDetails_Location").val() == "") {
                    $("#spanSTCLocation").show();
                    ReturnValue = false;
                } else { $("#spanSTCLocation").hide(); }
            }

            if ($('#JobSTCDetails_CertificateCreated').val() == "Yes") {
                if (FailedCode.trim() == "" || FailedCode == null || FailedCode == undefined) {
                    $("#spanFailedAccreditationCode").show();
                    ReturnValue = false;
                }
            }

            if ($("#JobSTCDetails_VolumetricCapacity").val() == "Yes") {
                if (StatutoryDeclarations == "Select" || StatutoryDeclarations == null || StatutoryDeclarations == undefined || StatutoryDeclarations.trim() == "") {
                    $("#spanStatutoryDeclarations").show();
                    ReturnValue = false;
                }
            }
            if ($('#BasicDetails_JobType').val() == 1) {
                if (parseFloat($("#JobSystemDetails_SystemSize").val()) <= 0) {
                }
            }
            return ReturnValue;
        }

        function validateForm() {
            addressElectricianValidationRules();
            addressOwnerValidationRules();
            addressInstallationValidationRules();
            addressInstallerValidationRules();
            return $("#frmCreateJob").valid();
        }
        function addressElectricianValidationRules() {


            $("#JobElectricians_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobElectricians_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobElectricians_UnitTypeID").val() == "" && $("#JobElectricians_UnitNumber").val() == "") {
                $('#lblElectriciansUnitNumber').removeClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblElectriciansStreetNumber').addClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }

            if ($("#JobElectricians_UnitTypeID").val() > 0 && $("#JobElectricians_UnitNumber").val() != "") {
                $('#lblElectriciansStreetNumber').removeClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: false,
                });
                $('#lblElectriciansUnitNumber').removeClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobElectricians_UnitTypeID").val() > 0 && $("#JobElectricians_UnitNumber").val() == "") {
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblElectriciansUnitNumber').addClass("required");
                $('#lblElectriciansStreetNumber').removeClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: false,
                });
            }
            if ($("#JobElectricians_UnitTypeID").val() == "" && $("#JobElectricians_UnitNumber").val() != "") {
                $('#lblElectriciansUnitNumber').addClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblElectriciansStreetNumber').addClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
        }

        function addressOwnerValidationRules() {


            $("#JobOwnerDetails_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobOwnerDetails_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobOwnerDetails_UnitTypeID").val() == "" && $("#JobOwnerDetails_UnitNumber").val() == "") {
                $('#lblOwnerUnitNumber').removeClass("required");
                $('#lblOwnerUnitTypeID').removeClass("required");
                $("#JobOwnerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobOwnerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblOwnerStreetNumber').addClass("required");
                $("#JobOwnerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }

            if ($("#JobOwnerDetails_UnitTypeID").val() > 0 && $("#JobOwnerDetails_UnitNumber").val() != "") {
                $('#lblOwnerStreetNumber').removeClass("required");
                $("#JobOwnerDetails_StreetNumber").rules("add", {
                    required: false,
                });
                $('#lblOwnerUnitNumber').removeClass("required");
                $('#lblOwnerUnitTypeID').removeClass("required");
                $("#JobOwnerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobOwnerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobOwnerDetails_UnitTypeID").val() > 0 && $("#JobOwnerDetails_UnitNumber").val() == "") {
                $("#JobOwnerDetails_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblOwnerUnitNumber').addClass("required");
                $('#lblOwnerStreetNumber').removeClass("required");
                $("#JobOwnerDetails_StreetNumber").rules("add", {
                    required: false,
                });
            }
            if ($("#JobOwnerDetails_UnitTypeID").val() == "" && $("#JobOwnerDetails_UnitNumber").val() != "") {
                $('#lblOwnerUnitNumber').addClass("required");
                $('#lblOwnerUnitTypeID').removeClass("required");
                $("#JobOwnerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobOwnerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblOwnerStreetNumber').addClass("required");
                $("#JobOwnerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
        }

        function addressInstallationValidationRules() {


            $("#JobInstallationDetails_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobInstallationDetails_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobInstallationDetails_UnitTypeID").val() == "" && $("#JobInstallationDetails_UnitNumber").val() == "") {
                $('#lblInstallationUnitNumber').removeClass("required");
                $('#lblInstallationUnitTypeID').removeClass("required");
                $("#JobInstallationDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallationDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                //$('#lblInstallationStreetNumber').addClass("required");
                //$("#JobInstallationDetails_StreetNumber").rules("add", {
                //    required: true,
                //    messages: {
                //        required: "Street Number is required."
                //    }
                //});
            }

            if ($("#JobInstallationDetails_UnitTypeID").val() > 0 && $("#JobInstallationDetails_UnitNumber").val() != "") {
                //$('#lblInstallationStreetNumber').removeClass("required");
                //$("#JobInstallationDetails_StreetNumber").rules("add", {
                //    required: false,
                //});
                $('#lblInstallationUnitNumber').removeClass("required");
                $('#lblInstallationUnitTypeID').removeClass("required");
                $("#JobInstallationDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallationDetails_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobInstallationDetails_UnitTypeID").val() > 0 && $("#JobInstallationDetails_UnitNumber").val() == "") {
                $("#JobInstallationDetails_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblInstallationUnitNumber').addClass("required");
                //$('#lblInstallationStreetNumber').removeClass("required");
                //$("#JobInstallationDetails_StreetNumber").rules("add", {
                //    required: false,
                //});
            }
            if ($("#JobInstallationDetails_UnitTypeID").val() == "" && $("#JobInstallationDetails_UnitNumber").val() != "") {
                $('#lblInstallationUnitNumber').addClass("required");
                $('#lblInstallationUnitTypeID').removeClass("required");
                $("#JobInstallationDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallationDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                //$('#lblInstallationStreetNumber').addClass("required");
                //$("#JobInstallationDetails_StreetNumber").rules("add", {
                //    required: true,
                //    messages: {
                //        required: "Street Number is required."
                //    }
                //});
            }
        }

        function addressInstallerValidationRules() {


            $("#JobInstallerDetails_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobInstallerDetails_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobInstallerDetails_UnitTypeID").val() == "" && $("#JobInstallerDetails_UnitNumber").val() == "") {
                $('#lblInstallerUnitNumber').removeClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblInstallerStreetNumber').addClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }

            if ($("#JobInstallerDetails_UnitTypeID").val() > 0 && $("#JobInstallerDetails_UnitNumber").val() != "") {
                $('#lblInstallerStreetNumber').removeClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: false,
                });
                $('#lblInstallerUnitNumber').removeClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobInstallerDetails_UnitTypeID").val() > 0 && $("#JobInstallerDetails_UnitNumber").val() == "") {
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblInstallerUnitNumber').addClass("required");
                $('#lblInstallerStreetNumber').removeClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: false,
                });
            }
            if ($("#JobInstallerDetails_UnitTypeID").val() == "" && $("#JobInstallerDetails_UnitNumber").val() != "") {
                $('#lblInstallerUnitNumber').addClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblInstallerStreetNumber').addClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
        }

        function editPanel(trId) {

            $.each(PanelXml, function (i, e) {
                if (e.ID.replace("action", "").trim() == trId) {
                    // setTimeout(function(){$("#JobPanelDetails_Model").val(e.Model)} , 10000);
                    $("#JobPanelDetails_Brand").val(e.Brand);
                    $("#JobPanelDetails_Model").prop("disabled", false);
                    $("#JobPanelDetails_NoOfPanel").prop("disabled", false);
                    FillDropDown('JobPanelDetails_Model', '@Url.Action("GetPanelModel", "Job")?Mode=cer&CertificateHolder=' + e.Brand + '&JobType=1', e.Model, true, null);
                    $("#JobPanelDetails_NoOfPanel").val(e.Count);
                    $("#btnEditPanel").show();
                    $('#btnAddPanel').hide();
                    $("#btnEditPanel").attr("name", trId);
                }
            });
        }
    </script>

    @*<script src="@FormBot.Helper.ProjectSession.JobMapKeyUrl"></script>*@

    <script type="text/javascript">
        var source, destination;
        var directionsDisplay;
        var latitude;
        var longitude;
        var latitude1;
        var longitude1;
        var locations = [];
        var sourcedetail = [];
        var destinationdetail = [];
        var PanelXml = [];
        var panel = [];
        var inverter = [];
        var InverterXml = [];
        function loadMap() {
            var map = new google.maps.Map(document.getElementById('dvMap'));
            directionsService = new google.maps.DirectionsService();
            //google.maps.event.addDomListener(window, 'load', function () {
            new google.maps.places.SearchBox(document.getElementById('txtSource'));
            new google.maps.places.SearchBox(document.getElementById('txtDestination'));


            // });
            directionsDisplay = new google.maps.DirectionsRenderer({
                draggable: false
            });

            google.maps.event.addListener(directionsDisplay, 'directions_changed', function () {

                directions = directionsDisplay.getDirections();
                var distance = directions.routes[0].legs[0].distance.text;
                var duration = directions.routes[0].legs[0].duration.text;
                var source = directions.routes[0].legs[0].start_address;
                var dest = directions.routes[0].legs[0].end_address;
                var dvDistance = document.getElementById("dvDistance");
                dvDistance.innerHTML = "";
                dvDistance.innerHTML += "Distance: " + distance + "   ";
                dvDistance.innerHTML += "Duration:" + duration;
                $("#txtSource").val(source);
                $("#txtDestination").val(dest);
            });

        }
        function GetRoute() {
            $("#dvDistance").html('');
            $("#errorMsgRegionMap").hide();
            source = document.getElementById("txtSource").value;
            destination = document.getElementById("txtDestination").value;

            if (source != "" && destination != "") {
                var India = new google.maps.LatLng(51.508742, -0.120850);
                var mapOptions = {
                    zoom: 4,
                    center: India
                };
                map = new google.maps.Map(document.getElementById('dvMap'), mapOptions);

                directionsDisplay.setMap(map);
                //*********DIRECTIONS AND ROUTE**********************//
                var request = {
                    origin: source,
                    destination: destination,
                    travelMode: google.maps.TravelMode.DRIVING
                };
                directionsService.route(request, function (response, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
                    }
                    else {
                        createMarker(destination, 25.2744, 133.7751);
                        $("#errorMsgRegionMap").html(closeButton + " Both Source and Destination  are not in same country.");
                        $("#errorMsgRegionMap").show();
                    }

                });
            }
            else {
                $("#errorMsgRegionMap").html(closeButton + " Both Source and Destination  address are  required");
                $("#errorMsgRegionMap").show();
            }
        }
        function GetLocation() {

            latitude = '';
            longitude = '';
            latitude1 = '';
            longitude1 = '';

            $("#dvDistance").html('');
            $("#errorMsgRegionMap").hide();
            //$("#dvMap").html('');
            locations = [];
            source = document.getElementById("txtSource").value;
            destination = document.getElementById("txtDestination").value;


            geocoder = new google.maps.Geocoder();

            if (source != "" || destination != "") {

                if (source != "") {
                    geocoder.geocode({ 'address': source }, function (results, status) {

                        if (status == google.maps.GeocoderStatus.OK) {
                            latitude = results[0].geometry.location.lat();
                            longitude = results[0].geometry.location.lng();
                            sourcedetail = [source, latitude, longitude];
                            locations.push(sourcedetail);
                            GetLocationOnMap(latitude, longitude);
                        }
                        else {
                            $("#errorMsgRegionMap").html(closeButton + "Invalid source Address.");
                            $("#errorMsgRegionMap").show();
                            createMarker('Victoria , Australia', -37.4713, 144.7852);
                        }
                    });
                }
                if (destination != "") {
                    geocoder.geocode({ 'address': destination }, function (results, status) {

                        if (status == google.maps.GeocoderStatus.OK) {
                            latitude1 = results[0].geometry.location.lat();
                            longitude1 = results[0].geometry.location.lng();
                            destinationdetail = [destination, latitude1, longitude1];
                            locations.push(destinationdetail);
                            GetLocationOnMap(latitude1, longitude1);
                        }
                        else {
                            $("#errorMsgRegionMap").html(closeButton + "Invalid Destination Address.");
                            $("#errorMsgRegionMap").show();
                            createMarker('Victoria , Australia', -37.4713, 144.7852);
                        }
                    });
                }
            }
            else {
                $("#errorMsgRegionMap").html(closeButton + "Source or Destination address  are  required");
                $("#errorMsgRegionMap").show();
            }
        }
        function GetLocationOnMap(latitude, longitude) {

            var bounds = new google.maps.LatLngBounds();
            var infowindow = new google.maps.InfoWindow();
            var lat = latitude;
            var lng = longitude;
            var map = new google.maps.Map(document.getElementById('dvMap'), {
                zoom: 10,
                center: new google.maps.LatLng(lat, lng),
                mapTypeId: google.maps.MapTypeId.DRIVING
            });

            var marker, i;
            for (i = 0; i < locations.length; i++) {
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(locations[i][1], locations[i][2]),
                    draggable: false,
                    map: map
                });

                //extend the bounds to include each marker's position
                bounds.extend(marker.position);

                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infowindow.setContent(locations[i][0]);
                        infowindow.open(map, marker);
                    }
                })(marker, i));
            }

            //now fit the map to the newly inclusive bounds
            map.fitBounds(bounds);
        }
        function geocodeAddress(address) {

            $("#errorMsgRegionMap").hide();
            //var India = new google.maps.LatLng(51.508742, -0.120850);
            //var mapOptions = {
            //    zoom: 11,
            //    center: India
            //};

            //map = new google.maps.Map(document.getElementById('dvMap'),mapOptions);
            var geocoder = new google.maps.Geocoder();
            if (address.trim() == "") {

                createMarker('Victoria , Australia', -37.4713, 144.7852);
            }
            else {
                geocoder.geocode({ address: address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        var p = results[0].geometry.location;
                        var lat = p.lat();
                        var lng = p.lng();
                        createMarker(address, lat, lng);
                    }
                    else {
                        $("#errorMsgRegionMap").html(closeButton + "Invalide Destination Address.");
                        $("#errorMsgRegionMap").show();
                        createMarker('Victoria , Australia', -37.4713, 144.7852);
                    }

                }
            );
            }
        }
        function createMarker(add, lat, lng) {

            //var delay = 1;
            var infowindow = new google.maps.InfoWindow();
            var latlng = new google.maps.LatLng(lat, lng);

            var map = new google.maps.Map(document.getElementById('dvMap'), {
                zoom: 12,
                center: new google.maps.LatLng(lat, lng),
                mapTypeId: google.maps.MapTypeId.DRIVING
            });
            var bounds = new google.maps.LatLngBounds();

            var contentString = add;
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(lat, lng),
                center: latlng,
                map: map,
                draggable: false
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.setContent(contentString);
                infowindow.open(map, marker);
            });

            // bounds.extend(marker.position);

        }
        function isValidPhone(event, obj) {
            if (event.which == 43 && $("#" + obj.id).val().length < 2) {
                if ($("#" + obj.id).val().indexOf('+') == -1) {
                    return true;
                }
            }
            if (event.which > 31 && (event.which < 48 || event.which > 57)) {
                return false;
            }
            return true;
        }

        var OwnerEmailFromJson;
        var MasterSerialArray = [];
        var JobSerialArray = [];

        var JOBType = '@Model.BasicDetails.JobType';
        var IsUnderSSC = '@ProjectSession.IsSubContractor';
        var USERType = '@Model.UserType';
        var dateaa = '';
        function fillJobType() {
            if ('@Model.BasicDetails.JobID' == 0) {
                $("#BasicDetails_JobType").val('1').change();
            }
        }

        $(document).ready(function () {

            $("#loading-image").show();
            $('#btnPopupSerialNumber').click(function () {
                $('#popupSerialNumber').modal({ backdrop: 'static', keyboard: false });
                $('#serialNumberPopup').html('');
                var SerialNumberText = $("#JobSystemDetails_SerialNumbers").val().trim();
                var data = JSON.stringify({ "serialNumbers": $("#JobSystemDetails_SerialNumbers").val(), "jobID": $("#BasicDetails_JobID").val() });
                $.ajax({
                    url: '@Url.Action("CheckDuplicateSerialNumbers", "Job")',
                    type: "post",
                    async: false,
                    dataType: "json",
                    data: data,
                    cache: false,
                    async: true,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        if (data.length > 0) {
                            MasterSerialArray = [];
                            JobSerialArray = [];
                            var SetialArray = $.parseJSON(data);
                            $.grep(SetialArray, function (e, i) {
                                if (!e.IsExistInMaster) { MasterSerialArray.push(e.ExistsSerialNumber); }
                                else { JobSerialArray.push(e.ExistsSerialNumber); }
                            });

                            var lines = SerialNumberText.split("\n");
                            lines = lines.filter(function (n) { return n.length > 0 });
                            for (var lineCount = 1; lineCount < lines.length + 1; lineCount++) {
                                if (JobSerialArray.indexOf(lines[lineCount - 1]) !== -1) {
                                    $('#serialNumberPopup').append("<li><span style='background-color: rgba(39, 108, 171, 0.15);'>" + lineCount + ' :' + lines[lineCount - 1] + "</span></li>");
                                }
                                else if (MasterSerialArray.indexOf(lines[lineCount - 1]) !== -1) {
                                    $('#serialNumberPopup').append("<li><span style='background-color: rgba(210, 71, 98, 0.14);'>" + lineCount + ' :' + lines[lineCount - 1] + "</span></li>");
                                }
                                else {
                                    $('#serialNumberPopup').append("<li><span>" + lineCount + ' :' + lines[lineCount - 1] + "</span></li>");
                                }
                            }
                        } else {
                            MasterSerialArray = [];
                            JobSerialArray = [];
                        }
                    },
                });
            });

            $("#JobOwnerDetails_UnitTypeID").change(function () {
                if ($('#JobOwnerDetails_UnitTypeID option:selected').val() == "") {
                    $('#lblOwnerUnitNumber').removeClass("required");
                    $('#lblOwnerUnitTypeID').removeClass("required");
                    $('#lblOwnerStreetNumber').addClass("required");
                }
                else {
                    $('#lblOwnerUnitNumber').addClass("required");
                    $('#lblOwnerUnitTypeID').addClass("required");
                    $('#lblOwnerStreetNumber').removeClass("required");
                }
            });


            $("#JobInstallationDetails_UnitTypeID").change(function () {
                if ($('#JobInstallationDetails_UnitTypeID option:selected').val() == "") {
                    $('#lblInstallationUnitNumber').removeClass("required");
                    $('#lblInstallationUnitTypeID').removeClass("required");
                    $('#lblInstallationStreetNumber').addClass("required");
                }
                else {
                    $('#lblInstallationUnitNumber').addClass("required");
                    $('#lblInstallationUnitTypeID').addClass("required");
                    //$('#lblInstallationStreetNumber').removeClass("required");
                }
            });

            $("#JobElectricians_UnitTypeID").change(function () {
                if ($('#JobElectricians_UnitTypeID option:selected').val() == "") {
                    $('#lblElectriciansUnitNumber').removeClass("required");
                    $('#lblElectriciansUnitTypeID').removeClass("required");
                    $('#lblElectriciansStreetNumber').addClass("required");
                }
                else {
                    $('#lblElectriciansUnitNumber').addClass("required");
                    $('#lblElectriciansUnitTypeID').addClass("required");
                    $('#lblElectriciansStreetNumber').removeClass("required");
                }
            });


            $("#JobInstallerDetails_UnitTypeID").change(function () {
                if ($('#JobInstallerDetails_UnitTypeID option:selected').val() == "") {
                    $('#lblInstallerUnitNumber').removeClass("required");
                    $('#lblInstallerUnitTypeID').removeClass("required");
                    $('#lblInstallerStreetNumber').addClass("required");
                }
                else {
                    $('#lblInstallerUnitNumber').addClass("required");
                    $('#lblInstallerUnitTypeID').addClass("required");
                    $('#lblInstallerStreetNumber').removeClass("required");
                }
            });

            var isMapsApiLoaded = false;
            window.mapsCallback = function () {
                isMapsApiLoaded = true;
                loadMap();
                // initialize map, etc.
            };

            $('#btnMap').click(function () {
                if (isMapsApiLoaded) {
                    loadMap();
                }
                else {
                    var scriptMap = document.createElement("script");
                    scriptMap.type = "text/javascript";
                    scriptMap.async = true;
                    var src = '@System.Web.HttpUtility.HtmlDecode(FormBot.Helper.ProjectSession.JobMapKeyUrl)' + '&callback=mapsCallback';
                    scriptMap.src = src.toString().replace(/&amp;/g, '&');

                    document.body.appendChild(scriptMap);

                    // loadMap();
                }

                $('#popupMap').modal({ backdrop: 'static', keyboard: false });

                setTimeout(function () {
                    $('#txtSource').focus();
                }, 1000);
                $('#txtSource').val('');

                $("#dvDistance").html('');
                $("#errorMsgRegionMap").hide();
                var address;
                var UnitTypeId = $("#JobInstallationDetails_UnitTypeID").find("option:selected").text();
                var UnitNumber = $("#JobInstallationDetails_UnitNumber").val();
                var StreetNumber = $("#JobInstallationDetails_StreetNumber").val();
                var StreetName = $("#JobInstallationDetails_StreetName").val();
                var StreetTypeId = $("#JobInstallationDetails_StreetTypeID").find("option:selected").text();
                var PostalAddressID = $("#JobInstallationDetails_PostalAddressID").find("option:selected").text();
                var PostalDeliveryNumber = $("#JobInstallationDetails_PostalDeliveryNumber").val();
                var Town = $("#JobInstallationDetails_Town").val();
                var State = $("#JobInstallationDetails_State").val();
                var PostCode = $("#JobInstallationDetails_PostCode").val();
                if ($("#JobInstallationDetails_AddressID").val() == 1) {
                    if (UnitNumber != "") {
                        address = UnitTypeId + ' ' + UnitNumber + "/" + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                        address = address.replace("Select", "");
                    } else {
                        address = UnitTypeId + ' ' + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                        address = address.replace("Select", "");
                    }
                } else {
                    address = PostalAddressID + ' ' + PostalDeliveryNumber + ', ' + Town + ' ' + State + ' ' + PostCode;
                }
                $('#txtDestination').val(address);
                var a = setTimeout(function () { 
                    if (ProjectSession_UserTypeId == 1) {
                        geocodeAddress(address);
                    }
                }, 1000);
            });
            $("#JobOwnerDetails_OwnerType").change();
            $("#JobOwnerDetails_OwnerType").change(function (e) {
                if (this.value == 'Government body' || this.value == 'Corporate body' || this.value == 'Trustee') {
                    //add company mendatory
                    $("#OwnerCompanyName").addClass("required");
                    if ($("#JobOwnerDetails_CompanyName").val() != '') {
                        //$("#JobOwnerDetails_CompanyName").addClass('input-validation-error');
                    } else {
                        $("#JobOwnerDetails_CompanyName").removeClass('valid');
                        $("#OwnerCompanyNameValidate").addClass("field-validation-error");
                    }
                    $("#OwnerCompanyNameValidate").show();
                    $("#JobOwnerDetails_CompanyName").rules("add", {
                        required: true,
                        messages: {
                            required: "Company Name is required."
                        }
                    });

                    ////add firstname mendatory
                    //$("#JobOwnerDetails_FirstName").rules('remove');
                    //$("#JobOwnerDetails_FirstName").removeClass('input-validation-error');
                    //$("#OwnerFirstName").removeClass("required");
                    //$("#OwnerFirstNameValidate").hide();

                    ////add lastname mendatory
                    //$("#JobOwnerDetails_LastName").rules('remove');
                    //$("#JobOwnerDetails_LastName").removeClass('input-validation-error');
                    //$("#OwnerLastName").removeClass("required");
                    //$("#OwnerLastNameValidate").hide();

                } else {
                    //remove company mendatory
                    $("#JobOwnerDetails_CompanyName").rules('remove');
                    $("#JobOwnerDetails_CompanyName").removeClass('input-validation-error');
                    $("#OwnerCompanyName").removeClass("required");
                    $("#OwnerCompanyNameValidate").hide();

                    //remove firstname mendatory
                    $("#OwnerFirstName").addClass("required");
                    if ($("#JobOwnerDetails_FirstName").val() != '') {
                        //$("#JobOwnerDetails_FirstName").addClass('input-validation-error');
                    } else {
                        $("#JobOwnerDetails_FirstName").removeClass('valid');
                        $("#OwnerFirstNameValidate").addClass("field-validation-error");
                    }
                    $("#OwnerFirstNameValidate").show();
                    $("#JobOwnerDetails_FirstName").rules("add", {
                        required: true,
                        messages: {
                            required: "First Name is required."
                        }
                    });

                    //remove lastname mendatory
                    $("#OwnerLastName").addClass("required");
                    if ($("#JobOwnerDetails_LastName").val() != '') {
                        //$("#JobOwnerDetails_LastName").addClass('input-validation-error');
                    } else {
                        $("#JobOwnerDetails_LastName").removeClass('valid');
                        $("#OwnerLastNameValidate").addClass("field-validation-error");
                    }
                    $("#OwnerLastNameValidate").show();
                    $("#JobOwnerDetails_LastName").rules("add", {
                        required: true,
                        messages: {
                            required: "Last Name is required."
                        }
                    });
                }
            });
            $("#JobInstallationDetails_InstallingNewPanel").change(function (e) {
                if ($("#JobInstallationDetails_InstallingNewPanel").val() != "New" && $("#JobInstallationDetails_InstallingNewPanel").val() != "") {
                    $("#installationLocation").show();
                } else {
                    $("#installationLocation").hide()
                }
            });

            $("#JobSTCDetails_MultipleSGUAddress").change(function (e) {
                if ('@Model.BasicDetails.JobType' == 1) {
                    if (this.value == 'Yes') {
                        $("#STCLocation").show();
                    } else { $("#STCLocation").hide(); }
                }
            });

            setTimeout(function () {
                $("#BasicDetails_JobType").focus();
            }, 3000);

            //InstalltionDetail
            if ('@Model.JobInstallationDetails.PostalAddressID' == '')
            { var InstallationpostalAddressID = 0; } else { var InstallationpostalAddressID = '@Model.JobInstallationDetails.PostalAddressID' }
            if ('@Model.JobInstallationDetails.UnitTypeID' != '' && '@Model.JobInstallationDetails.UnitTypeID' != null)
            { var InstallationUnitTypeID = '@Model.JobInstallationDetails.UnitTypeID'; } else { var InstallationUnitTypeID = 0; }
            if ('@Model.JobInstallationDetails.StreetTypeID' != '' && '@Model.JobInstallationDetails.StreetTypeID' != null)
            { var InstallationStreetTypeID = '@Model.JobInstallationDetails.StreetTypeID'; } else { var InstallationStreetTypeID = 0; }
            FillDropDown('JobInstallationDetails_UnitTypeID', '@Url.Action("GetUnitType", "UnitType")', InstallationUnitTypeID, true, null);
            FillDropDown('JobInstallationDetails_StreetTypeID', '@Url.Action("GetStreetType", "StreetType")', InstallationStreetTypeID, true, null);
            FillDropDown('JobInstallationDetails_PostalAddressID', '@Url.Action("GetPostalAddress", "User")', InstallationpostalAddressID, true, null);

            //JobOwnerDetail
            if ('@Model.JobOwnerDetails.PostalAddressID' == '')
            { var OwnerpostalAddressID = 0; } else { var OwnerpostalAddressID = '@Model.JobOwnerDetails.PostalAddressID' }
            if ('@Model.JobOwnerDetails.UnitTypeID' != '' && '@Model.JobOwnerDetails.UnitTypeID' != null)
            { var OwnerUnitTypeID = '@Model.JobOwnerDetails.UnitTypeID'; } else { var OwnerUnitTypeID = 0; }
            if ('@Model.JobOwnerDetails.StreetTypeID' != '' && '@Model.JobOwnerDetails.StreetTypeID' != null)
            { var OwnerStreetTypeID = '@Model.JobOwnerDetails.StreetTypeID'; } else { var OwnerStreetTypeID = 0; }
            FillDropDown('JobOwnerDetails_UnitTypeID', '@Url.Action("GetUnitType", "UnitType")', OwnerUnitTypeID, true, null);
            FillDropDown('JobOwnerDetails_StreetTypeID', '@Url.Action("GetStreetType", "StreetType")', OwnerStreetTypeID, true, null);
            FillDropDown('JobOwnerDetails_PostalAddressID', '@Url.Action("GetPostalAddress", "User")', OwnerpostalAddressID, true, null);

            //JobInstallerrDetail
            if ('@Model.JobInstallerDetails.PostalAddressID' == '' && '@Model.JobInstallerDetails.PostalAddressID' == null)
            { var InstallerpostalAddressID = 0; } else { var InstallerpostalAddressID = '@Model.JobInstallerDetails.PostalAddressID' }
            if ('@Model.JobInstallerDetails.UnitTypeID' != '' && '@Model.JobInstallerDetails.UnitTypeID' != null)
            { var InstallerUnitTypeID = '@Model.JobOwnerDetails.UnitTypeID'; } else { var InstallerUnitTypeID = 0; }
            if ('@Model.JobInstallerDetails.StreetTypeID' != '' && '@Model.JobInstallerDetails.StreetTypeID' != null)
            { var InstallerStreetTypeID = '@Model.JobInstallerDetails.StreetTypeID'; } else { var InstallerStreetTypeID = 0; }
            FillDropDown('JobInstallerDetails_UnitTypeID', '@Url.Action("GetUnitType", "UnitType")', InstallerUnitTypeID, true, fillInstallerAddress);
            FillDropDown('JobInstallerDetails_StreetTypeID', '@Url.Action("GetStreetType", "StreetType")', InstallerStreetTypeID, true, fillInstallerAddress);
            FillDropDown('JobInstallerDetails_PostalAddressID', '@Url.Action("GetPostalAddress", "User")', InstallerpostalAddressID, true, fillInstallerAddress);

            //BasicDetails
            if ('@Model.BasicDetails.InstallerID' != '' && '@Model.BasicDetails.InstallerID' != null)
            { var insatallerid = '@Model.BasicDetails.InstallerID'; } else { var insatallerid = 0; }
            if ('@Model.BasicDetails.DesignerID' != '' && '@Model.BasicDetails.DesignerID' != null)
            { var designerid = '@Model.BasicDetails.DesignerID'; } else { var designerid = 0; }
            var distributorid = 0;
            if ('@Model.JobInstallationDetails.DistributorID' != '' && '@Model.JobInstallationDetails.DistributorID' != null)
            { distributorid = '@Model.JobInstallationDetails.DistributorID'; } else { var distributorid = 0; }
            FillDropDownInstaller('BasicDetails_InstallerID', '@Url.Action("GetSEUserWithStatus", "Job")' + '?isInstaller=true&existUserId=' + insatallerid, insatallerid, true, null);
            FillDropDownInstaller('BasicDetails_DesignerID', '@Url.Action("GetSEUserWithStatus", "Job")' + '?isInstaller=false&existUserId=' + designerid, designerid, true, null);
            FillDropDown('JobElectricians_ElectricianID', '@Url.Action("GetElectrician", "Job")?JobID=' + $("#BasicDetails_JobID").val(), 0, true, null);
            FillDropDown('JobInstallationDetails_DistributorID', '@Url.Action("GetDestributors", "Job")', distributorid, true, null);
            var jobtype, jobstage, priority, deemingperiod;
            if ('@Model.BasicDetails.JobType' == '0')
            { jobtype = 0; } else { jobtype = '@Model.BasicDetails.JobType'; }
            if ('@Model.BasicDetails.JobStage' == '')
            { jobstage = 0; } else { jobstage = '@Model.BasicDetails.JobStage'; }
            if ('@Model.BasicDetails.Priority' == '')
            { priority = 0; } else { priority = '@Model.BasicDetails.Priority'; }
            if ('@Model.JobSTCDetails.DeemingPeriod' == '')
            { deemingperiod = 0; } else { deemingperiod = '@Model.JobSTCDetails.DeemingPeriod'; }
            FillDropDown('BasicDetails_JobStage', '@Url.Action("GetJobStage", "Job")', jobstage, true, fillJobStage);
            FillDropDown('BasicDetails_Priority', '@Url.Action("GetPriority", "Job")', priority, true, null);
            if ('@Model.JobInstallationDetails.ElectricityProviderID' != null && '@Model.JobInstallationDetails.ElectricityProviderID' != '')
            { var Installationid = '@Model.JobInstallationDetails.ElectricityProviderID'; } else { var Installationid = 0; }

            //InstallationDetails
            FillDropDown('JobInstallationDetails_ElectricityProviderID', '@Url.Action("GetElectricityProvider", "Job")', Installationid, true, null);
            var installationDate = $("#BasicDetails_strInstallationDate").val();
            var installationDateEdit = '';
            var finalYear = '';
            if (installationDate != null && installationDate != undefined && installationDate != '') {
                finalYear = moment(installationDate).format('yyyy'.toUpperCase());
            }

            //STC Details
            FillDropDown('JobSTCDetails_DeemingPeriod', '@Url.Action("GetDeemingPeriod", "Job")?year=' + finalYear, deemingperiod, true, null);

            //JobElectricians
            if ('@Model.JobElectricians.PostalAddressID' == '' && '@Model.JobElectricians.PostalAddressID' == null)
            { var ElectricianspostalAddressID = 0; } else { var ElectricianspostalAddressID = '@Model.JobElectricians.PostalAddressID' }
            if ('@Model.JobElectricians.UnitTypeID' != null)
            { var ElectriciansUnitTypeID = '@Model.JobElectricians.UnitTypeID'; } else { var ElectriciansUnitTypeID = 0; }
            if ('@Model.JobElectricians.StreetTypeID' != '' && '@Model.JobElectricians.StreetTypeID' != null)
            { var ElectriciansStreetTypeID = '@Model.JobElectricians.StreetTypeID'; } else { var ElectriciansStreetTypeID = 0; }
            FillDropDown('JobElectricians_UnitTypeID', '@Url.Action("GetUnitType", "UnitType")', ElectriciansUnitTypeID, true, fillBasicAddress);
            FillDropDown('JobElectricians_StreetTypeID', '@Url.Action("GetStreetType", "StreetType")', ElectriciansStreetTypeID, true, fillBasicAddress);
            FillDropDown('JobElectricians_PostalAddressID', '@Url.Action("GetPostalAddress", "User")', ElectricianspostalAddressID, true, fillBasicAddress);
            FillDropDownInstaller('JobElectricians_InstallerID', '@Url.Action("GetSEUserWithStatus", "Job")' + '?isInstaller=true&existUserId=' + insatallerid, insatallerid, true, null);
            FillDropDown('BasicDetails_JobSoldBy', '@Url.Action("GetSoldBy", "Job")', 0, true, null);
            var JobPanelDetailsBrand = '';
            if ('@Model.JobPanelDetails' != null) {
                JobPanelDetailsBrand = '@Model.JobPanelDetails.Brand';
            } else { JobPanelDetailsBrand = '0'; }
            FillDropDown('JobPanelDetails_Brand', '@Url.Action("GetPanelBrand", "Job")?Mode=Brand&CertificateHolder=null&JobType=1', JobPanelDetailsBrand, true, null);

            $("#btnCalculatedSTC,#btnCalculatedSTCSWH").click(function (e) {
                CalculateStc1();
            })

            $("#JobPanelDetails_Brand").change(function (e) {
                if (this.selectedIndex > 0) {
                    $("#JobPanelDetails_Model").prop("disabled", false);
                    FillDropDown('JobPanelDetails_Model', '@Url.Action("GetPanelModel", "Job")?Mode=cer&CertificateHolder=' + $("#JobPanelDetails_Brand").val() + '&JobType=1', 0, true, null);
                } else {
                    $("#JobPanelDetails_Model").prop("disabled", true);
                    $("#JobPanelDetails_NoOfPanel").prop("disabled", true);
                }
            });

            $("#JobPanelDetails_Model").change(function (e) {
                if (this.selectedIndex > 0) {
                    $("#JobPanelDetails_NoOfPanel").prop("disabled", false);
                } else {
                    $("#JobPanelDetails_NoOfPanel").prop("disabled", true);
                    $("#JobPanelDetails_NoOfPanel").val("");
                }
            });
            //JobInverterDetails
            var JobInverterDetailsBrand = ''
            if ('@Model.JobInverterDetails.Brand' == '')
            { JobInverterDetailsBrand = 0; } else { JobInverterDetailsBrand = '@Model.JobInverterDetails.Brand' }
            FillDropDown('JobInverterDetails_Brand', '@Url.Action("GetInverterBrand", "Job")?Mode=Manufacturer', JobInverterDetailsBrand, true, null);
            $("#JobInverterDetails_Brand").change(function () {
                if (this.selectedIndex > 0) {
                    $("#JobInverterDetails_Series").prop("disabled", false);
                    FillDropDown('JobInverterDetails_Series', '@Url.Action("GetInverterModel", "Job")?Mode=Series&Search=' + $("#JobInverterDetails_Brand").val(), 0, true, null);
                } else {
                    $("#JobInverterDetails_Model").prop("disabled", true);
                    $("#JobInverterDetails_Series").prop("disabled", true);
                }
            });

            $("#JobInverterDetails_Series").change(function () {
                if (this.selectedIndex > 0) {
                    $("#JobInverterDetails_Model").prop("disabled", false);
                    FillDropDown('JobInverterDetails_Model', '@Url.Action("GetInverterSeries", "Job")?Mode=Model&Search=' + $("#JobInverterDetails_Series").val() + '&Manufacturer=' + $("#JobInverterDetails_Brand").val(), 0, true, null);
                } else {
                    $("#JobInverterDetails_Model").prop("disabled", true);
                }
            });

            $("#JobPanelDetails_Brand").change(function () {
                if (this.selectedIndex > 0) {
                    $("#JobPanelDetails_Model").prop("disabled", false);
                    FillDropDown('JobPanelDetails_Model', '@Url.Action("GetPanelModel", "Job")?Mode=cer&CertificateHolder=' + $("#JobPanelDetails_Brand").val() + '&JobType=1', 0, true, null);
                } else {
                    $("#JobPanelDetails_Model").prop("disabled", true);
                }
            });

            //JobSystemDetails
            var JobSystemDetailsSystemBrand = '';
            if ('@Model.JobSystemDetails.SystemBrand' == '') {
                JobSystemDetailsSystemBrand = 0;
            } else { JobSystemDetailsSystemBrand = '@Model.JobSystemDetails.SystemBrand' }
            FillDropDown('JobSystemDetails_SystemBrand', '@Url.Action("GetPanelBrand", "Job")?Mode=Brand&CertificateHolder=null&JobType=2', JobSystemDetailsSystemBrand, true, null);
            $("#JobSystemDetails_SystemBrand").change(function () {
                if (this.selectedIndex > 0) {
                    $("#JobSystemDetails_SystemModel").prop("disabled", false);
                    FillDropDown('JobSystemDetails_SystemModel', '@Url.Action("GetPanelModel", "Job")?Mode=cer&CertificateHolder=' + $("#JobSystemDetails_SystemBrand").val() + '&JobType=2', 0, true, null);
                } else {
                    $("#JobSystemDetails_SystemModel").prop("disabled", true);
                }
            });

            var latitude;
            var longitude;
            var latitude1;
            var longitude1;
            var locations = [];
            var sourcedetail = [];
            var destinationdetail = [];
            var USERID = '@Model.Guid';
            var documentSizeLimit = '@FormBot.Helper.ProjectSession.MaxImageSize' / 1024000;
            var maxsize = Math.round(documentSizeLimit);

            $("#JobSystemDetails_NoOfPanel").attr("data-val", "false");
            if ($("#BasicDetails_JobID").val() == "0") {
                $("#JobPanelDetails_NoOfPanel").val("");
                $("#JobInstallationDetails_ExistingSystemSize").val("");
                $("#JobInstallationDetails_NoOfPanels").val("");
                $("#JobSystemDetails_SystemSize").val("");
                $("#JobSystemDetails_CalculatedSTC").val("");
                $("#JobSystemDetails_CalculatedSTCForSWH").val("");
                $("#JobSystemDetails_NoOfPanel").val("");
                $("#JobPanelDetails_NoOfPanel").prop("disabled", true);
                $("#deletejob").hide();
                $("#ExistingSystem").hide();
                setTimeout(function () {
                    $("#BasicDetails_JobType").change();
                    $('#JobOwnerDetails_AddressID').change();
                }, 1000);
            } else {
                if ($("#JobPanelDetails_NoOfPanel").val() == "0") { $("#JobPanelDetails_NoOfPanel").val(""); }
                $("#JobPanelDetails_NoOfPanel").prop("disabled", true);
                if ($("#JobInstallationDetails_ExistingSystemSize").val() == "0.00") { $("#JobInstallationDetails_ExistingSystemSize").val(""); }
                if ($("#JobInstallationDetails_NoOfPanels").val() == "0") { $("#JobInstallationDetails_NoOfPanels").val(""); }
                if ($("#JobSystemDetails_CalculatedSTC").val() == "0.00") { $("#JobSystemDetails_CalculatedSTC").val(""); }
                if ($("#JobSystemDetails_CalculatedSTCForSWH").val() == "0.00") { $("#JobSystemDetails_CalculatedSTCForSWH").val(""); }
                if ($("#JobSystemDetails_NoOfPanel").val() == "0") { $("#JobSystemDetails_NoOfPanel").val(""); }
                if ($("#JobSystemDetails_SystemSize").val() == "0.00") { $("#JobSystemDetails_SystemSize").val(""); }
            }
            var installationDate = $("#BasicDetails_strInstallationDate").val();
            if (installationDate != null && installationDate != undefined && installationDate != '') {
                $("#BasicDetails_strInstallationDate").val('').removeAttr('value');
                $('.date-pick, .date-pick1, .date-pick').datepicker({
                    format: '@ProjectConfiguration.GetDateFormat',
                    autoclose: true
                }).on('changeDate', function () {
                    $(this).datepicker('hide');
                });
                var installationDateEdit = moment(installationDate).format('@ProjectConfiguration.GetDateFormat'.toUpperCase());
                $("#BasicDetails_strInstallationDate").val(installationDateEdit);
            } else {
                $('.date-pick, .date-pick1, .date-pick').datepicker({
                    format: '@ProjectConfiguration.GetDateFormat',
                    autoclose: true
                }).on('changeDate', function () {
                    $(this).datepicker('hide');
                });
            }

            if ('@Model.BasicDetails.JobType' == '1') {
                if ('@Model.JobSTCDetails.MultipleSGUAddress' == 'Yes') {
                    $("#STCLocation").show();
                } else {
                    $("#STCLocation").hide();
                }
            }

            $("#InvoiceStartDate").val('').removeAttr('value');

            if ('@Model.JobInstallationDetails.InstallingNewPanel' == 'Replacing' || '@Model.JobInstallationDetails.InstallingNewPanel' == 'Adding' || '@Model.JobInstallationDetails.InstallingNewPanel' == 'Extension') {
                $("#installationLocation").show();
            }

            //$("#BasicDetails_JobType").prop("disabled", true);
            if ('@Model.JobElectricians.Signature' != null && '@Model.JobElectricians.Signature' != '' && '@Model.JobElectricians.Signature' != undefined) {
                var SRC = '@Model.JobElectricians.Signature';
                $('#imgSign').attr('src', SRC);
                var SignName = $('#imgSign').attr('src');
                var guid = '@Model.Guid';
                var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                var imagePath = proofDocumentURL + "JobDocuments" + "/" + guid;
                var SRC = imagePath + "/" + SignName;
                //$('#imgSign').attr('src', SRC).load(function () { logoWidth = this.width; logoHeight = this.height });
                $('#imgSign').attr('class', SignName);
                $('#imgSignature').show();
            }

            if ($('#imgOwnerSign').attr('src') != "" && $('#imgOwnerSign').attr('src') != null && $('#imgOwnerSign').attr('src') != undefined) {
                var SignName = $('#imgOwnerSign').attr('src');
                var guid = '@Model.Guid';
                var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                var imagePath = proofDocumentURL + "JobDocuments" + "/" + guid;
                var SRC = imagePath + "/" + SignName;
                SRCOwnerSign = SRC;
                //$('#imgOwnerSign').attr('src', SRC).load(function () { ownerSignWidth = this.width; ownerSignHeight = this.height;});
                $('#imgOwnerSign').attr('class', SignName);
                $('#imgOwnerSignatureView').show();
            }

            $('#imgOwnerSignatureView').click(function () {

                $("#loading-image").css("display", "");
                $('#imgOwnerSign').attr('src', SRCOwnerSign).load(function () {
                    ownerSignWidth = this.width;
                    ownerSignHeight = this.height;

                    $('#popupOwnerSign').modal({ backdrop: 'static', keyboard: false });
                    if ($(window).height() <= ownerSignHeight) {
                        //$("#imgOwnerSign").height($(window).height() - 205);
                        $("#imgOwnerSign").closest('div').height($(window).height() - 205);
                        $("#imgOwnerSign").closest('div').css('overflow-y', 'scroll');
                        $("#imgOwnerSign").height(ownerSignHeight);
                    }
                    else {
                        $("#imgOwnerSign").height(ownerSignHeight);
                        $("#imgOwnerSign").closest('div').removeAttr('style');
                    }

                    if (screen.width <= ownerSignWidth || ownerSignWidth >= screen.width - 250) {
                        //$("#imgOwnerSign").width(screen.width - 10);
                        //$('#popupOwnerSign').find(".modal-dialog").width(screen.width - 10);

                        $('#popupOwnerSign').find(".modal-dialog").width(screen.width - 250);
                        $("#imgOwnerSign").width(ownerSignWidth);
                    }
                    else {
                        $("#imgOwnerSign").width(ownerSignWidth);
                        $('#popupOwnerSign').find(".modal-dialog").width(ownerSignWidth);
                    }

                    $("#loading-image").css("display", "none");

                });
                $("#imgOwnerSign").unbind("error");
                $('#imgOwnerSign').attr('src', SRCOwnerSign).error(function () {
                    alert('Image does not exist.');
                    $("#loading-image").css("display", "none");
                });
            });

            $("#btnClosepopupOwnerSign").click(function () {
                $('#popupOwnerSign').modal('toggle');
            });

            $('#tblPanel tr').each(function () {
                $("#gridPanel").show();
                var PanelBrand = $(this).find("td").eq(0).attr("class");
                var PanelModel = $(this).find("td").eq(1).attr("class");
                var NoOfPanel = $(this).find("td").eq(2).attr("class");
                var trId = $(this).find("td").eq(3).attr("class");
                var PanelSupplier = $(this).find("td").eq(3).attr("data-supplier");
                PanelXml.push({ ID: trId, Brand: PanelBrand, Model: PanelModel, Count: NoOfPanel, Supplier: PanelSupplier });
            });
            $('#tblInverter tr').each(function () {
                $("#gridInverter").show();
                var InverterBrand = $(this).find("td").eq(0).attr("class");
                var series = $(this).find("td").eq(1).attr("class");
                var InverterModel = $(this).find("td").eq(2).attr("class");
                var trId = $(this).find("td").eq(3).attr("class");
                InverterXml.push({ ID: trId, Brand: InverterBrand, Series: series, Model: InverterModel });
            });

            //Address hide-show
            if ('@Model.JobOwnerDetails.AddressID' == 1) {
                $('.OwnerDPA').show();
                $('.OwnerPDA').hide();
            }
            else {
                $('.OwnerPDA').show();
                $('.OwnerDPA').hide();
            } if ('@Model.JobInstallerDetails.AddressID' == 1) {
                $('.InstallerDPA').show();
                $('.InstallerPDA').hide();
            }
            else {
                $('.InstallerPDA').show();
                $('.InstallerDPA').hide();
            }
            if ('@Model.JobInstallationDetails.AddressID' == 1) {
                $('.InstallationDPA').show();
                $('.InstallationPDA').hide();
            }
            else {
                $('.InstallationPDA').show();
                $('.InstallationDPA').hide();
            }
            if ('@Model.JobElectricians.AddressID' == 1) {
                $('.ElectriciansDPA').show();
                $('.ElectriciansPDA').hide();
            }
            else {
                $('.ElectriciansPDA').show();
                $('.ElectriciansDPA').hide();
            }
            if ('@Model.BasicDetails.JobType' == '2') {
                $("#TypeOfConnection,#JobSTCDetails_TypeOfConnection,#SystemMountingType,#JobSTCDetails_SystemMountingType").hide();
                $("#DeemingPeriod,#JobSTCDetails_DeemingPeriod,#InstallerID,#BasicDetails_InstallerID,#DesignerID,#BasicDetails_DesignerID").hide();
                $("#NMI,#JobInstallationDetails_NMI,#InstallingNewPanel,#InstallingNewPanel,#InstallingNewPanel,#JobInstallationDetails_InstallingNewPanel,#MeterNumber,#JobInstallationDetails_MeterNumber,#PhaseProperty,#JobInstallationDetails_PhaseProperty,#ElectricityProviderID,#JobInstallationDetails_ElectricityProviderID,#ExistingSystem1,#JobInstallationDetails_ExistingSystem,#ExistingSystem").hide();
                $("#installContent").show();
                $(".SWSystemDetails").show();
                $(".PVDSystemDetail").hide();
                $("#serialNumberLable").html("Tank serial number(s):");
                $("#MultipleSGUAddress").html("Is there more than one SWH/ASHP at this address:");
                $("#CertificateCreated").html("Creating certificates for previously failed SWH:");
                $("#divVolumetricCapacity").show();
                $("#divSecondhandWaterHeater").show();
                $("#JobSystemDetails_NoOfPanel").removeAttr("readonly");
                $("#electricianDetail").hide();
                if ('@Model.JobSTCDetails.VolumetricCapacity' == 'Yes') {
                    $("#divStatutoryDeclarations").show();
                }
            } else if ('@Model.BasicDetails.JobType' == '1') {
                $("#TypeOfConnection,#JobSTCDetails_TypeOfConnection,#SystemMountingType,#JobSTCDetails_SystemMountingType").show();
                $("#DeemingPeriod,#JobSTCDetails_DeemingPeriod,#InstallerID,#BasicDetails_InstallerID,#DesignerID,#BasicDetails_DesignerID").show();
                $("#NMI,#JobInstallationDetails_NMI,#InstallingNewPanel,#InstallingNewPanel,#InstallingNewPanel,#JobInstallationDetails_InstallingNewPanel,#MeterNumber,#JobInstallationDetails_MeterNumber,#PhaseProperty,#JobInstallationDetails_PhaseProperty,#ElectricityProviderID,#JobInstallationDetails_ElectricityProviderID,#ExistingSystem1,#JobInstallationDetails_ExistingSystem").show();
                $("#installContent").hide();
                $("#serialNumberLable").html("Equipment model serial number(s):");
                $("#MultipleSGUAddress").html("Is there more than one SGU at this address?:");
                $("#CertificateCreated").html("Are you creating certificates for a system that has previously been failed by the Clean Energy Regulator?:");
                $(".SWSystemDetails").hide();
                $(".PVDSystemDetail").show();
                $("#divVolumetricCapacity").hide();
                $("#divStatutoryDeclarations").hide();
                $("#divSecondhandWaterHeater").hide();
                $("#JobSystemDetails_NoOfPanel").attr("readonly");
                $("#electricianDetail").show();
            }

            //Existing system
            if ('@Model.JobInstallationDetails.ExistingSystem' == 'False') {
                $("#ExistingSystem").hide();
            } else {
                $("#ExistingSystem").show();
            }

            if ("@Model.JobSTCDetails.CertificateCreated" == "No") {
                $("#FailedAccreditationCode").hide();
                $("#JobSTCDetails_FailedAccreditationCode").hide();

                $("#FailedReason").hide();
                $("#JobSTCDetails_FailedReason").hide();
            } else if ("@Model.JobSTCDetails.CertificateCreated" == "Yes") {
                $("#FailedAccreditationCode").show();
                $("#JobSTCDetails_FailedAccreditationCode").show();

                $("#FailedReason").show();
                $("#JobSTCDetails_FailedReason").show();
            }

            $("#JobSystemDetails_SystemModel").prop("disabled", false);
            var JobSystemDetailsSystemModel = '';
            if ('@Model.JobSystemDetails.SystemModel' == '') {
                JobSystemDetailsSystemModel = 0;
            } else { JobSystemDetailsSystemModel = '@Model.JobSystemDetails.SystemModel' }
            FillDropDown('JobSystemDetails_SystemModel', '@Url.Action("GetPanelModel", "Job")?Mode=cer&CertificateHolder=' + '@Model.JobSystemDetails.SystemBrand' + '&JobType=' + '@Model.BasicDetails.JobType', JobSystemDetailsSystemModel, true, null);

            if (JOBType == 1) {
                if (USERType == 6 || (USERType == 8 && IsUnderSSC == "True")) {
                    //Readonly & disable
                    $("#JobInstallationDetails_IsSameAsOwnerAddress").attr('disabled', 'disabled');
                    $("#JobInstallationDetails_ExistingSystem").attr('disabled', 'disabled');
                    $("#JobOwner").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#frmCreateJob").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('textarea').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    //button hide
                    $("#JobInstallationAddress").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobOwner").find('button[type=button]').each(function () {

                        $(this).hide();
                    });
                    $("#btnCalculatedSTC").hide();
                    $("#btnAddPanel").hide();
                    $("#btnAddInverter").hide();
                    //for some remove Readonly & disable
                    $("#BasicDetails_InstallerID").removeAttr("disabled");
                    $("#BasicDetails_DesignerID").removeAttr("disabled");
                    $('#JobElectricians_InstallerID').removeAttr("disabled");
                    $('#JobElectricians_CompanyName').removeAttr("Readonly");
                    $('#JobElectricians_FirstName').removeAttr("Readonly");
                    $('#JobElectricians_LastName').removeAttr("Readonly");
                    $('#JobElectricians_Email').removeAttr("Readonly");
                    $('#JobElectricians_Phone').removeAttr("Readonly");
                    $('#JobElectricians_Mobile').removeAttr("Readonly");
                    $('#JobElectricians_LicenseNumber').removeAttr("Readonly");
                }
                if (USERType == 7 || USERType == 9) {
                    $("#JobInstallationDetails_IsSameAsOwnerAddress").attr('disabled', 'disabled');
                    $("#JobInstallationDetails_ExistingSystem").attr('disabled', 'disabled');
                    $("#JobElectricians").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobOwner").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('textarea').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    //button hide
                    $("#JobElectricians").find('button[type=button]').each(function () {

                        $(this).hide();
                    });
                    $("#JobInstallationAddress").find('button[type=button]').each(function () {

                        $(this).hide();
                    });
                    $("#JobOwner").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#divUpload").hide();
                    $("#btnCalculatedSTC").hide();
                    $("#btnAddPanel").hide();
                    $("#btnAddInverter").hide();
                    $("#BasicDetails_strInstallationDate").removeAttr("Readonly");
                }
                if (USERType == 2 || USERType == 5) {
                    $("#JobInstallationDetails_IsSameAsOwnerAddress").attr('disabled', 'disabled');
                    $("#JobInstallationDetails_ExistingSystem").attr('disabled', 'disabled');
                    $("#JobElectricians").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobOwner").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('input[type=text]').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('textarea').each(function () {

                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    $("#JobElectricians").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobInstallationAddress").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobOwner").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#divUpload").hide();
                    $("#btnCalculatedSTC").hide();
                    $("#btnAddPanel").hide();
                    $("#btnAddInverter").hide();
                    $("#btnDropMainSave").hide();
                    $("#btnMainCancel").hide();
                }
            }
            if (JOBType == 2) {
                if (USERType == 6 || USERType == 7 || USERType == 9 || (USERType == 8 && IsUnderSSC == "True")) {
                    $("#JobInstallationDetails_IsSameAsOwnerAddress").attr('disabled', 'disabled');
                    $("#JobInstallationDetails_ExistingSystem").attr('disabled', 'disabled');
                    $("#JobElectricians").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobElectricians").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobOwner").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobOwner").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('textarea').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    $("#JobElectricians").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobInstallationAddress").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobOwner").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#divUpload").hide();
                    $("#btnCalculatedSTCSWH").hide();
                    $("#btnAddPanel").hide();
                    $("#btnAddInverter").hide();
                    $("#BasicDetails_strInstallationDate").removeAttr("Readonly");
                }
                if (USERType == 2 || USERType == 5) {
                    $("#JobInstallationDetails.IsSameAsOwnerAddress").attr('disabled', 'disabled');
                    $("#JobInstallationDetails_ExistingSystem").attr('disabled', 'disabled');
                    $("#JobElectricians").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobElectricians").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobOwner").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobOwner").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#Installer").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#Installer").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('input[type=text]').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('textarea').each(function () {
                        $(this).attr('Readonly', 'true');
                    });
                    $("#frmCreateJob").find('Select').each(function () {
                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    $("#JobElectricians").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#JobInstallationAddress").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#Installer").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#Installer").find('button[type=button]').each(function () {
                        $(this).hide();
                    });
                    $("#divUpload").hide();
                    $("#btnCalculatedSTCSWH").hide();
                    $("#btnAddPanel").hide();
                    $("#btnAddInverter").hide();
                    $("#btnDropMainSave").hide();
                    $("#btnMainCancel").hide();
                }
            }

            $('#imgSignature').click(function () {
                $("#loading-image").css("display", "");
                $('#imgSign').attr('src', SRCSign).load(function () {
                    logoWidth = this.width;
                    logoHeight = this.height;
                    $('#popupbox1').modal({ backdrop: 'static', keyboard: false });
                    if ($(window).height() <= logoHeight) {
                        //$("#imgSign").height($(window).height() - 205);

                        $("#imgSign").closest('div').height($(window).height() - 205);
                        $("#imgSign").closest('div').css('overflow-y', 'scroll');
                        $("#imgSign").height(logoHeight);
                    }
                    else {
                        $("#imgSign").height(logoHeight);
                        $("#imgSign").closest('div').removeAttr('style');
                    }

                    if (screen.width <= logoWidth || logoWidth >= screen.width - 250) {
                        //$("#imgSign").width(screen.width - 10);
                        //$('#popupbox1').find(".modal-dialog").width(screen.width - 10);

                        $('#popupbox1').find(".modal-dialog").width(screen.width - 250);
                        $("#imgSign").width(logoWidth);
                    }
                    else {
                        $("#imgSign").width(logoWidth);
                        $('#popupbox1').find(".modal-dialog").width(logoWidth);
                    }
                    $("#loading-image").css("display", "none");
                });
                $("#imgSign").unbind("error");
                $('#imgSign').attr('src', SRCSign).error(function () {
                    alert('Image does not exist.');
                    $("#loading-image").css("display", "none");
                });

            });
            $("#btnClosePopUpBox").click(function () {
                $('#popupbox1').modal('toggle');
            });

            $("#BasicDetails_JobType").change(function (e) {
                jobChange();
                if (this.value == "1" || this.value == "2") {
                    $.ajax({
                        url: '@Url.Action("GetJobNumber", "Job")' + '?jobType=' + this.value,
                        type: "GET",
                        dataType: 'json',
                        contentType: 'application/json; charset=utf-8', // Not to set any content header
                        processData: false, // Not to process data
                        success: function (result) {
                            $("#BasicDetails_JobNumber").val(result);
                        }
                    });
                }
            });

            $("#JobSTCDetails_CertificateCreated").change(function (e) {
                $("#spanFailedAccreditationCode").hide();
                $('#JobSTCDetails_FailedAccreditationCode').val('');

                $("#JobSTCDetails_FailedReason").val('');
                if (this.value == "No") {
                    $("#FailedAccreditationCode").hide();
                    $("#JobSTCDetails_FailedAccreditationCode").hide();

                    $("#FailedReason").hide();
                    $("#JobSTCDetails_FailedReason").hide();
                } else if (this.value == "Yes") {
                    $("#FailedAccreditationCode").show();
                    $("#JobSTCDetails_FailedAccreditationCode").show();

                    $("#FailedReason").show();
                    $("#JobSTCDetails_FailedReason").show();
                }
            });

            $("#saveJob").click(function (e) {
                $("#loading-image1").show();
                $("#BasicDetails_JobType").change();
                $('#JobInstallationDetails_ExistingSystem').change();
                fillElectrianPopup();
                if ($('#BasicDetails_JobType').val() == 2) {
                    fillInstallerPopup();
                }
                var serialVal = SerialNumbersValidation();
                var popup = CheckShowErrorMessagesForPopup();
                //var validpage = $("#frmCreateJob").valid();
                var validpage = validateForm();
                if (validpage && popup && serialVal) {
                    jobSaveType = $(this).index();
                    checkBusinessRules($(this).index(), false);
                } else {
                    $("#errorMsgRegion").html(closeButton + "Please fill  all required fields.");
                    $("#errorMsgRegion").show();
                    $("#loading-image1").hide();
                    return;
                }
                $("#loading-image1").hide();
            });

            Array.prototype.pushArray = function () {
                var toPush = this.concat.apply([], arguments);
                for (var i = 0, len = toPush.length; i < len; ++i) {
                    this.push(toPush[i]);
                }
            };

            $.fn.serializeToJson = function () {
                var $form = $(this[0]);
                var items = $form.serializeArray();
                var $electrician = $("#JobElectricians");
                var $installer = $("#Installer");
                var items = $form.serializeArray();
                items.pushArray($electrician.serializeArray());
                items.pushArray($installer.serializeArray());
                var returnObj = {};
                var nestedObjectNames = [];

                $.each(items, function (i, item) {
                    //Split nested objects and assign properties
                    //You may want to make this recursive - currently only works one step deep, but that's all I need
                    if (item.name == 'BasicDetails.strInstallationDate') {
                        if (item.value != '' && item.value != undefined && item.value != null) {
                            var installationTick = ConvertDateToTick(item.value, '@ProjectConfiguration.GetDateFormat');
                            installationDateSerialize = moment(installationTick).format("YYYY-MM-DD");
                            item.value = installationDateSerialize;
                        }
                    }

                    if (item.name == 'BasicDetails.strSoldByDate') {
                        if (item.value != '' && item.value != undefined && item.value != null) {
                            var soldbyDateTick = ConvertDateToTick(item.value, '@ProjectConfiguration.GetDateFormat');
                            soldbyDatSerialize = moment(soldbyDateTick).format("YYYY-MM-DD");
                            item.value = soldbyDatSerialize;
                        }
                    }

                    if (item.name.indexOf('.') != -1) {
                        var nameArray = item.name.split('.');
                        if (nestedObjectNames.indexOf(nameArray[0]) < 0) {
                            nestedObjectNames.push(nameArray[0]);
                        }
                        var tempObj = returnObj[nestedObjectNames[nestedObjectNames.indexOf(nameArray[0])]] || {};
                        if (!tempObj[nameArray[1]]) {
                            tempObj[nameArray[1]] = item.value;
                        }
                        returnObj[nestedObjectNames[nestedObjectNames.indexOf(nameArray[0])]] = tempObj;
                    } else if (!returnObj[item.name]) {
                        returnObj[item.name] = item.value;
                    }
                });

                return returnObj;
            };

            $('#JobInstallationDetails_ExistingSystem').change(function () {
                if ($(this).is(":checked")) {
                    $("#ExistingSystem").show();
                } else {
                    $("#ExistingSystem").hide();
                }

            });

            $("#JobInstallationDetails_Town").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobInstallationDetails_State').val(ui.item.state);
                    $('#JobInstallationDetails_PostCode').val(ui.item.postcode);
                }
            });

            $("#JobInstallationDetails_PostCode").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobInstallationDetails_State').val(ui.item.state);
                    $('#JobInstallationDetails_Town').val(ui.item.location);
                }
            });


            $("#JobOwnerDetails_Town").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobOwnerDetails_State').val(ui.item.state);
                    $('#JobOwnerDetails_PostCode').val(ui.item.postcode);
                }
            });

            $("#JobOwnerDetails_PostCode").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobOwnerDetails_State').val(ui.item.state);
                    $('#JobOwnerDetails_Town').val(ui.item.location);
                }
            });


            $("#JobElectricians_Town").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            //$('#JobElectricians_State').val(data1.localities.locality[0].location);
                            //$('#JobElectricians_State').val(data1.localities.locality[0].state);
                            //$('#JobElectricians_PostCode').val(data1.localities.locality[0].postcode);
                            console.log(data1);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobElectricians_State').val(ui.item.state);
                    $('#JobElectricians_PostCode').val(ui.item.postcode);
                }
            });

            $("#JobElectricians_PostCode").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobElectricians_State').val(ui.item.state);
                    $('#JobElectricians_Town').val(ui.item.location);
                }
            });

            $("#JobInstallerDetails_Town").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            //$('#JobElectricians_State').val(data1.localities.locality[0].location);
                            //$('#JobElectricians_State').val(data1.localities.locality[0].state);
                            //$('#JobElectricians_PostCode').val(data1.localities.locality[0].postcode);

                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.location,
                                        state: item.state,
                                        postcode: item.postcode
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobInstallerDetails_State').val(ui.item.state);
                    $('#JobInstallerDetails_PostCode').val(ui.item.postcode);
                }
            });

            $("#JobInstallerDetails_PostCode").autocomplete({
                minLength: 3,
                source: function (request, response) {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ProcessRequest","User")',
                        dataType: 'json',
                        data: {
                            excludePostBoxFlag: true,
                            q: request.term
                        },
                        success: function (data) {
                            var data1 = JSON.parse(data);
                            if (data1.localities.locality instanceof Array)
                                response($.map(data1.localities.locality, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                            else
                                response($.map(data1.localities, function (item) {
                                    return {
                                        label: item.location + ', ' + item.state + ', ' + item.postcode,
                                        value: item.postcode,
                                        state: item.state,
                                        location: item.location
                                    }
                                }));
                        }
                    })
                },
                select: function (event, ui) {
                    $('#JobInstallerDetails_State').val(ui.item.state);
                    $('#JobInstallerDetails_Town').val(ui.item.location);
                }
            });

            $('#JobInstallationDetails_NoOfPanels').blur(function () {
                if (parseInt($(this).val()) > 10000) {
                    $('#spanJobInstallationDetailsNoOfPanelValue').show();
                    $(this).val('');
                }
                else {
                    $('#spanJobInstallationDetailsNoOfPanelValue').hide();
                }
                if (parseInt($(this).val()) < 1) {

                    $(this).val('');
                }
            });

            $('#JobSystemDetails_SystemSize').blur(function () {
                if ($(this).val() == "" || parseFloat($(this).val()) <= 0) {
                    $('#spanJobSystemDetails_SystemSize').show();
                }
                else {
                    $('#spanJobSystemDetails_SystemSize').hide();
                }
            });

            $('#JobPanelDetails_NoOfPanel').blur(function () {
                if (parseInt($(this).val()) > 10000) {
                    $('#spanNoOfPanelValue').show();
                    $(this).val('');
                }
                else {
                    $('#spanNoOfPanelValue').hide();
                }

                if (parseInt($(this).val()) < 1) {

                    $(this).val('');
                }
            });

            $('#JobSystemDetails_NoOfPanel').blur(function () {
                if (parseInt($(this).val()) > 10000) {
                    $('#spanNoOfPanelSystemValue').show();
                    $(this).val('');
                }
                else {
                    $('#spanNoOfPanelSystemValue').hide();
                }
            });

            $('#JobSTCDetails_FailedAccreditationCode').blur(function () {
                if ($(this).val() != "" && $(this).val() != null && $(this).val() != undefined) {
                    $("#spanFailedAccreditationCode").hide();
                }

            });

            $('#JobSTCDetails_StatutoryDeclarations').change(function () {
                if ($(this).val() != "Select" && $(this).val() != null && $(this).val() != undefined && $(this).val() != "") {
                    $("#spanStatutoryDeclarations").hide();
                }
            });

            $("#JobSTCDetails_VolumetricCapacity").change(function () {
                $("#spanStatutoryDeclarations").hide();
                if ($(this).val() == "Yes") {
                    $("#divStatutoryDeclarations").show();
                }
                else {
                    //$("#divStatutoryDeclarations").find('option:first').attr('selected', 'selected');
                    $("#divStatutoryDeclarations").val($("#divStatutoryDeclarations option:first").val());
                    $("#divStatutoryDeclarations").hide();
                }
            });


            $("#JobOwnerDetails_AddressID").change(function () {
                $(".OwnerDPA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });
                $(".OwnerDPA").find('Select').each(function () {
                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".OwnerDPA").find('.field-validation-error').attr('class', 'field-validation-valid');
                //PDA
                $(".OwnerPDA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });
                $(".OwnerPDA").find('Select').each(function () {

                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".OwnerPDA").find('.field-validation-error').attr('class', 'field-validation-valid');

                if ($(this).val() == 1) {
                    $('.OwnerDPA').show();
                    $('.OwnerPDA').hide();
                }
                else {
                    $('.OwnerPDA').show();
                    $('.OwnerDPA').hide();
                }
            });

            $(".InstallerAddress").change(function () {

                $(".InstallerDPA").find('Select').each(function () {

                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".InstallerDPA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });
                $(".InstallerDPA").find('.field-validation-error').attr('class', 'field-validation-valid');
                //PDA
                $(".InstallerPDA").find('Select').each(function () {
                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".InstallerPDA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });

                $(".InstallerPDA").find('.field-validation-error').attr('class', 'field-validation-valid');

                if ($(this).val() == 1) {
                    $('.InstallerDPA').show();
                    $('.InstallerPDA').hide();
                }
                else {
                    $('.InstallerPDA').show();
                    $('.InstallerDPA').hide();
                }
            });

            $(".InstallationAddress").change(function () {
                $(".InstallationDPA").find('Select').each(function () {
                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".InstallationDPA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });

                $(".InstallationDPA").find('.field-validation-error').attr('class', 'field-validation-valid');

                //PDA

                $(".InstallationPDA").find('Select').each(function () {

                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".InstallationPDA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });

                $(".InstallationPDA").find('.field-validation-error').attr('class', 'field-validation-valid');

                if ($(this).val() == 1) {
                    $('.InstallationDPA').show();
                    $('.InstallationPDA').hide();
                }
                else {
                    $('.InstallationPDA').show();
                    $('.InstallationDPA').hide();
                }
            });

            $(".ElectriciansAddress").change(function () {
                $(".ElectriciansDPA").find('Select').each(function () {
                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".ElectriciansDPA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });

                $(".ElectriciansDPA").find('.field-validation-error').attr('class', 'field-validation-valid');

                //PDA

                $(".ElectriciansPDA").find('Select').each(function () {

                    $(this).find('option:first').attr('selected', 'selected');
                });
                $(".ElectriciansPDA").find('input[type=text]').each(function () {
                    $(this).val('');
                    $(this).attr('class', 'form-control valid');
                });

                $(".ElectriciansPDA").find('.field-validation-error').attr('class', 'field-validation-valid');


                if ($(this).val() == 1) {
                    $('.ElectriciansDPA').show();
                    $('.ElectriciansPDA').hide();
                }
                else {
                    $('.ElectriciansPDA').show();
                    $('.ElectriciansDPA').hide();
                }
            });

            //Generate New GUID
            function Fuid() {

                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                      .toString(16)
                      .substring(1);
                }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                  s4() + '-' + s4() + s4() + s4();
            }

            $('#btnAddPanel').click(function () {

                var panelBrand = $("#JobPanelDetails_Brand").val();
                var panelModel = $("#JobPanelDetails_Model").val();
                var noOfPanel = $("#JobPanelDetails_NoOfPanel").val();
                var drpSupplier = $("#drpSupplier").val();

                //var isDuplicate = false;
               // alert(hi);
                if ($("#drpSupplier option").not("option[value='']").length > 0 && ( drpSupplier == "")) {
                    $("#spanJobPanelDetails_Supplier").show();
                    return false;
                }
                else {
                    if ((panelBrand != null && panelBrand != "") && (panelModel != null && panelModel != "") && (noOfPanel != null && noOfPanel != "" && noOfPanel != 0)
                        ) {
                        //this is comment code for check duplicate entry
                        //    for (var i = 0; i < PanelXml.length; i++) {
                        //        if(PanelXml[i].Brand == panelBrand && PanelXml[i].Model == panelModel)
                        //        {
                        //            isDuplicate = true;
                        //            $.each(PanelXml,function(i ,e){
                        //                if(e.Brand == panelBrand && e.Model == panelModel)
                        //                {
                        //                    var FinalPanelCount = parseInt(e.Count) + parseInt(noOfPanel)
                        //                    e.Count = FinalPanelCount;
                        //                    $('#tblPanel tr').each(function(j,item) {

                        //                        var PanelBrand = $(this).find("td").eq(0).attr("class");
                        //                        var PanelModel = $(this).find("td").eq(1).attr("class");
                        //                        //var NoOfPanel = $(this).find("td").eq(2).attr("class");
                        //                        var trId = $(this).find("td").eq(2).attr("class");

                        //                        if(PanelBrand == panelBrand && PanelModel ==  panelModel)
                        //                        {
                        //                            //var FinalCount = parseInt(NoOfPanel) + parseInt(noOfPanel) ;
                        //                            $(this).find("td").eq(0).attr("class", panelBrand);
                        //                            $(this).find("td").eq(1).attr("class" ,panelModel);
                        //                            //$(this).find("td").eq(2).attr("class" , FinalCount);
                        //                            //$(this).find("td").eq(2).text(FinalCount);
                        //                        }

                        //                    });

                        //                }
                        //            })
                        //            break;
                        //        }
                        //    }

                        //    if (isDuplicate) {
                        //        $("#spanJobPanelDetails_Model").show().text('Same panel is exist.').fadeOut(3000);
                        //        return;
                        //    }



                        var trId = Fuid();
                        var trID = trId;
                        var count = 1;
                        var content = "<tr id='" + trID + "'>"
                        content += '<td class="' + panelBrand + '"  width="40%">' + panelBrand + ' </td>';
                        content += '<td class="' + panelModel + '"  width="35%">' + panelModel + ' </td>';
                        content += '<td class="' + noOfPanel + '"  width="10%" >' + noOfPanel + ' </td>';
                        content += '<td  class="' + 'action' + " " + trID + '" data-supplier="' + drpSupplier + '" id="tdAction" style="text-align:center;" width="15%"><a class="edit sprite-img" title="Edit" id="signEdit" style="cursor: pointer" href="javascript:void(0)" onclick="editPanel(\'' + trID + '\')"></a>&nbsp;&nbsp;<a class="delete sprite-img" title="Delete" id="signDelete" style="cursor: pointer" onclick="DeletePanelFromGrid(\'' + trID + '\')"></a></td>';
                        content += "</tr>"
                        $('#tblPanel').append(content);
                        $('#gridPanel').show();
                        var panel = 0;
                        if ($("#JobSystemDetails_NoOfPanel").val() != '') {
                            panel = $("#JobSystemDetails_NoOfPanel").val();
                        }
                        $("#JobSystemDetails_NoOfPanel").val(parseInt(panel) + parseInt(noOfPanel));
                        PanelXml.push({ ID: trID, Brand: panelBrand, Model: panelModel, Count: noOfPanel, Supplier: drpSupplier });
                        //PanelXml.push(panel);
                    }
                    else {
                        if (panelBrand == null || panelBrand.trim() == "") {
                            $("#spanJobPanelDetails_Brand").show().fadeOut(3000);
                        }

                        if (panelModel == null || panelModel.trim() == "") {
                            $("#spanJobPanelDetails_Model").show().text('Panel Model  is required..').fadeOut(3000);
                        }

                        if (noOfPanel == null || noOfPanel.trim() == "" || noOfPanel == "0") {
                            $("#spanNoOfPanelValue").show().fadeOut(5000);
                        }
                        if (drpSupplier == null || drpSupplier.trim() == "" || drpSupplier == 0) {
                            $("#spanJobPanelDetails_Supplier").show();
                        }

                    }
                }
                
            });

            $('#btnAddInverter').click(function () {
                var inverterBrand = $("#JobInverterDetails_Brand").val();
                var inverterModel = $("#JobInverterDetails_Model").val();
                var series = $("#JobInverterDetails_Series").val();
                if ((inverterBrand != null && inverterBrand != "") && (inverterModel != null && inverterModel != "") && (series != null && series != "")) {
                    var trId = Fuid();
                    var count = 1;
                    var content = "<tr id='+ trId +'>"
                    content += '<td class="' + inverterBrand + '"  width="35%">' + inverterBrand + ' </td>';
                    content += '<td class="' + inverterModel + '" width="25%">' + inverterModel + ' </td>';
                    content += '<td class="' + series + '"  width="25%">' + series + ' </td>';
                    content += '<td  class="' + 'action' + " " + trId + '" id="tdAction"  width="15%" style="text-align:center;"><a class="edit sprite-img" title="Edit" id="signEdit" style="cursor: pointer" href="javascript:void(0)" onclick="editInverter(\'' + trId + '\')"></a>&nbsp;&nbsp;<a class="delete sprite-img" title="Delete" id="signDelete" style="cursor: pointer" onclick="DeleteInverterFromGrid(\'' + trId + '\')"></a></td>';
                    content += "</tr>"
                    $('#tblInverter').append(content);
                    $('#gridInverter').show();
                    InverterXml.push({ ID: trId, Brand: inverterBrand, Model: inverterModel, Series: series });
                }
                else {
                    if (inverterBrand == null || inverterBrand.trim() == "")
                        $("#spanJobInverterDetails_Brand").show().fadeOut(3000);

                    if (inverterModel == null || inverterModel.trim() == "")
                        $("#spanJobInverterDetails_Model").show().fadeOut(3000);

                    if (series == null || series.trim() == "")
                        $("#spanJobInverterDetails_Series").show().text("Inverter Series  is required.").fadeOut(3000);
                }
            });

            $('#JobInstallationDetails_IsSameAsOwnerAddress').change(function () {
                if ($(this).is(":checked")) {
                    $("#JobInstallationDetails_UnitTypeID").val($("#JobOwnerDetails_UnitTypeID").val());
                    $("#JobInstallationDetails_UnitNumber").val($("#JobOwnerDetails_UnitNumber").val());
                    $("#JobInstallationDetails_StreetNumber").val($("#JobOwnerDetails_StreetNumber").val());
                    $("#JobInstallationDetails_StreetName").val($("#JobOwnerDetails_StreetName").val());
                    $("#JobInstallationDetails_StreetTypeID").val($("#JobOwnerDetails_StreetTypeID").val());
                    $("#JobInstallationDetails_PostalAddressID").val($("#JobOwnerDetails_PostalAddressID").val());
                    $("#JobInstallationDetails_PostalDeliveryNumber").val($("#JobOwnerDetails_PostalDeliveryNumber").val());
                    $("#JobInstallationDetails_Town").val($("#JobOwnerDetails_Town").val());
                    $("#JobInstallationDetails_State").val($("#JobOwnerDetails_State").val());
                    $("#JobInstallationDetails_PostCode").val($("#JobOwnerDetails_PostCode").val());
                    if ($(".OwnerAddress").val() == 1) {
                        $(".InstallationAddress").val(1);
                        $('.InstallationDPA').show();
                        $('.InstallationPDA').hide();
                    } else {
                        $(".InstallationAddress").val(2);
                        $('.InstallationPDA').show();
                        $('.InstallationDPA').hide();
                    }
                    $(".popupAddress").find('input[type=text]').each(function () {
                        $(this).attr('class', 'form-control valid');
                    });
                    $(".popupAddress").find('.field-validation-error').attr('class', 'field-validation-valid');
                    $('#spantxtAddress').hide();
                } else {
                    $(".popupAddress").find('input[type=text]').each(function () {
                        $(this).val('');
                        $(this).attr('class', 'form-control valid');
                    });
                    $(".popupAddress").find('.field-validation-error').attr('class', 'field-validation-valid');
                    $("#JobInstallationDetails_UnitTypeID").val($("#JobInstallationDetails_UnitTypeID option:first").val());
                    $("#JobInstallationDetails_StreetTypeID").val($("#JobInstallationDetails_StreetTypeID option:first").val());
                    $("#JobInstallationDetails_PostalAddressID").val($("#JobInstallationDetails_PostalAddressID option:first").val());
                }
            });

            $('#JobElectricians_InstallerID').change(function () {
                var id = $('#JobElectricians_InstallerID').val();
                $.ajax(
                       {
                           url: '@Url.Action("GetElectricianDetailbyInstaller", "Job")',
                           data: { Id: id },
                           contentType: 'application/json',
                           method: 'get',
                           success: function (data) {

                               if (data != false) {
                                   var obj = JSON.parse(data);
                                   $('#JobElectricians_CompanyName').val(obj[0].CompanyName);
                                   $('#JobElectricians_FirstName').val(obj[0].FirstName);
                                   $('#JobElectricians_LastName').val(obj[0].LastName);
                                   $('#JobElectricians_Email').val(obj[0].Email);
                                   $('#JobElectricians_Phone').val(obj[0].Phone);
                                   $('#JobElectricians_Mobile').val(obj[0].Mobile);
                                   $('#JobElectricians_LicenseNumber').val(obj[0].ElectricalContractorsLicenseNumber);
                                   var ispostal = 'False';
                                   if (obj[0].IsPostalAddress == 'False') {
                                       ispostal = '1'
                                       $('.ElectriciansPDA').hide();
                                       $('.ElectriciansDPA').show();
                                   } else {
                                       ispostal = '2'
                                       $('.ElectriciansDPA').hide();
                                       $('.ElectriciansPDA').show();
                                   }
                                   $('#JobElectricians_AddressID').val(ispostal);
                                   $('#JobElectricians_PostalAddressID').val(obj[0].PostalAddressID);
                                   $('#JobElectricians_PostalDeliveryNumber').val(obj[0].PostalDeliveryNumber);
                                   $('#JobElectricians_UnitTypeID').val(obj[0].UnitTypeID);
                                   $('#JobElectricians_UnitNumber').val(obj[0].UnitNumber);
                                   $('#JobElectricians_StreetNumber').val(obj[0].StreetNumber);
                                   $('#JobElectricians_StreetName').val(obj[0].StreetName);
                                   $('#JobElectricians_StreetTypeID').val(obj[0].StreetTypeID);
                                   $('#JobElectricians_Town').val(obj[0].Town);
                                   $('#JobElectricians_State').val(obj[0].State);
                                   $('#JobElectricians_PostCode').val(obj[0].PostCode);
                               }
                           }
                       });
            });

            $('#JobElectricians_ElectricianID').change(function () {
                var id = $('#JobElectricians_ElectricianID').val();
                $.ajax(
                       {
                           url: '@Url.Action("GetElectricianDetailbySolarcompany", "Job")',
                           data: { Id: id },
                           contentType: 'application/json',
                           method: 'get',
                           success: function (data) {

                               if (data != false) {
                                   var obj = JSON.parse(data);
                                   $('#JobElectricians_CompanyName').val(obj[0].CompanyName);
                                   $('#JobElectricians_FirstName').val(obj[0].FirstName);
                                   $('#JobElectricians_LastName').val(obj[0].LastName);
                                   $('#JobElectricians_Email').val(obj[0].Email);
                                   $('#JobElectricians_Phone').val(obj[0].Phone);
                                   $('#JobElectricians_Mobile').val(obj[0].Mobile);
                                   $('#JobElectricians_LicenseNumber').val(obj[0].ElectricalContractorsLicenseNumber);

                                   var ispostal = 'False';
                                   if (obj[0].IsPostalAddress == 'False') {
                                       ispostal = '1'
                                       $('.ElectriciansPDA').hide();
                                       $('.ElectriciansDPA').show();
                                   } else {
                                       ispostal = '2'
                                       $('.ElectriciansDPA').hide();
                                       $('.ElectriciansPDA').show();
                                   }
                                   $('#JobElectricians_AddressID').val(ispostal);
                                   $('#JobElectricians_PostalAddressID').val(obj[0].PostalAddressID);
                                   $('#JobElectricians_PostalDeliveryNumber').val(obj[0].PostalDeliveryNumber);
                                   $('#JobElectricians_UnitTypeID').val(obj[0].UnitTypeID);
                                   $('#JobElectricians_UnitNumber').val(obj[0].UnitNumber);
                                   $('#JobElectricians_StreetNumber').val(obj[0].StreetNumber);
                                   $('#JobElectricians_StreetName').val(obj[0].StreetName);
                                   $('#JobElectricians_StreetTypeID').val(obj[0].StreetTypeID);
                                   $('#JobElectricians_Town').val(obj[0].Town);
                                   $('#JobElectricians_State').val(obj[0].State);
                                   $('#JobElectricians_PostCode').val(obj[0].PostCode);

                               }
                           }
                       });
            });

            $("#btnCollectSignature").click(function () {
                //Email configuration not required
                if ('@ProjectSession.IsUserEmailAccountConfigured' != 'False') {
                    var email;
                    var message;
                    var JobType = $("#BasicDetails_JobType").val();
                    var IsOwner;
                    var FirstName = '';
                    var LastName = '';
                    if (JobType == 1) {
                        if ($('#drpSendMail').val() == "2") {

                            email = $("#BasicDetails_InstallerID").val();
                            message = "Installer  is required for it."
                            IsOwner = 'No';
                        }
                        else {
                            email = $('#JobOwnerDetails_Email').val();
                            message = "Owner Email is required for it."
                            IsOwner = 'Yes';
                            FirstName = $("#JobOwnerDetails_FirstName").val();
                            LastName = $("#JobOwnerDetails_LastName").val();
                        }

                        if (email != "" && email != null && email != undefined) {
                            var jobId = "@Model.Id";
                            var mailUrl = "@FormBot.Helper.ProjectSession.LoginLink" + "Job/_OwnerSignature/" + jobId;
                            var mailTo = email;
                            $.ajax(
                                   {
                                       url: '@Url.Action("MailForCollectSignature", "Job")',
                                       data: { MailUrl: mailUrl, MailTo: mailTo, JobType: JobType, IsOwner: IsOwner, FirstName: FirstName, LastName: LastName },
                                       contentType: 'application/json',
                                       method: 'get',
                                       success: function (data) {
                                           if (data == true) {
                                               $(".alert").hide();
                                               $("#successMsgRegion").html(closeButton + "Url has been send successfully.");
                                               $("#successMsgRegion").show();
                                               return false;

                                           }
                                       }
                                   });
                        }
                        else {
                            $('#spantxtCollectDignature').show().text(message).fadeOut(3000);
                        }
                    }
                    else {
                        if ($('#drpSendMail').val() == "2") {

                            email = $('#JobInstallerDetails_Email').val();
                            message = "Installer Email is required for it."
                            IsOwner = 'No';
                            FirstName = $("#JobInstallerDetails_FirstName").val();
                            LastName = $("#JobInstallerDetails_Surname").val();
                        }
                        else {
                            email = $('#JobOwnerDetails_Email').val();
                            message = "Owner Email is required for it."
                            IsOwner = 'Yes';
                            FirstName = $("#JobOwnerDetails_FirstName").val();
                            LastName = $("#JobOwnerDetails_LastName").val();
                        }

                        if (email != "" && email != null && email != undefined) {
                            var jobId = "@Model.Id";
                            var mailUrl = "@FormBot.Helper.ProjectSession.LoginLink" + "Job/_OwnerSignature/" + jobId;
                            var mailTo = email;
                            $.ajax(
                                   {
                                       url: '@Url.Action("MailForCollectSignature", "Job")',
                                       data: { MailUrl: mailUrl, MailTo: mailTo, JobType: JobType, IsOwner: IsOwner, FirstName: FirstName, LastName: LastName },
                                       contentType: 'application/json',
                                       method: 'get',
                                       success: function (data) {
                                           if (data == true) {
                                               $(".alert").hide();
                                               $("#successMsgRegion").html(closeButton + "Url has been send successfully.");
                                               $("#successMsgRegion").show();
                                               return false;

                                           }
                                       }
                                   });
                        }
                        else {
                            $('#spantxtCollectDignature').show().text(message).fadeOut(3000);
                        }
                    }
                }
                else {
                    //Email configuration not required
                    EmailAccountConfigureErrorMessage();
                    return false;
                }
            });


            function DeleteFileFromFolderAndElectrician(fileNames, guid, OldEleSign) {
                $.ajax(
                    {
                        url: '@Url.Action("DeleteFileFromFolderAndElectrician", "Job")',
                        data: { fileName: fileNames, FolderName: guid, OldEleSign: OldEleSign },
                        contentType: 'application/json',
                        method: 'get',
                        success: function (data) {

                        },
                    });
            }

            function DeleteDocumentFolderOnCancel() {
                window.location.href = '@Url.Action("Index", "Job")';
            }






            function DisableDropDownbyUsertype() {
                if ('@Model.BasicDetails.JobID' > 0) {
                    $("#BasicDetails_JobType").attr('disabled', 'disabled');
                }
                if ('@Model.BasicDetails.JobType' == '1') {

                    if (USERType == 6 || (USERType == 8 && IsUnderSSC == "True")) {
                        $("#JobOwner").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#JobInstallationAddress").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#frmCreateJob").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    }
                    if (USERType == 7 || USERType == 9) {
                        $("#JobElectricians").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobOwner").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobInstallationAddress").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#frmCreateJob").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                    }
                    if (USERType == 2 || USERType == 5) {
                        $("#JobElectricians").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobOwner").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobInstallationAddress").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#frmCreateJob").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    }
                }

                if ('@Model.BasicDetails.JobType' == '2') {
                    if (USERType == 6 || USERType == 7 || USERType == 9 || (USERType == 8 && IsUnderSSC == "True")) {
                        $("#JobElectricians").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobOwner").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobInstallationAddress").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#frmCreateJob").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    }


                    if (USERType == 2 || USERType == 5) {
                        $("#JobElectricians").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobOwner").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });

                        $("#JobInstallationAddress").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#Installer").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#frmCreateJob").find('Select').each(function () {

                            $(this).attr('disabled', 'disabled');
                        });
                        $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    }
                }
            }

            function CalculateStc1() {
                $("#JobSystemDetails_CalculatedSTC").val('');
                $("#JobSystemDetails_CalculatedSTCForSWH").val();
                var JobType = $("#BasicDetails_JobType").val();
                var systemsize = $("#JobSystemDetails_SystemSize").val();
                var installationDate = $("#BasicDetails_strInstallationDate").val();
                var expectedInstallDate = "";
                if (installationDate != null && installationDate != undefined && installationDate != '') {
                    var installDate = ConvertDateToTick(installationDate, '@ProjectConfiguration.GetDateFormat');
                    expectedInstallDate = moment(installDate).format("YYYY-MM-DD");
                }
                var deemingPeriod = $("#JobSTCDetails_DeemingPeriod").val();
                var postcode = $("#JobInstallationDetails_PostCode").val();
                var systemBrand = $("#JobSystemDetails_SystemBrand").val();
                var systemModel = $("#JobSystemDetails_SystemModel").val();
                if (JobType == 1) {
                    if (expectedInstallDate != null && expectedInstallDate != "" && deemingPeriod != null && deemingPeriod != "" && postcode != null && postcode != "" && systemsize != null && systemsize != "") {
                        $.ajax(
                            {
                                url: '@Url.Action("CalculateSTC", "Job")',
                                data: { sguType: 'SolarDeemed', expectedInstallDate: expectedInstallDate, deemingPeriod: deemingPeriod, postcode: postcode, systemsize: systemsize },
                                contentType: 'application/json',
                                method: 'get',
                                success: function (data) {
                                    var obj = JSON.parse(data);
                                    if (obj.status == "Failed") {
                                        $("#spanJobSystemDetails_CalculatedSTC").show().text(obj.fieldErrors[0].defaultMessage).fadeOut(5000);
                                        //alert(obj.fieldErrors[0].defaultMessage);

                                    }
                                    else {
                                        var numberOfStcs = obj.result.numberOfStcs;
                                        $("#JobSystemDetails_CalculatedSTC").val(numberOfStcs);
                                    }

                                }
                            });
                    }

                    else {
                        $("#spanJobSystemDetails_CalculatedSTC").show().text("Installation Date, STC DeemingPeriod,Installation postcode and System size are required for it.");

                    }
                }

                else if (JobType == 2) {
                    if (expectedInstallDate != null && expectedInstallDate != "" && expectedInstallDate != undefined && postcode != null && postcode != "" && postcode != undefined && systemBrand != null && systemBrand != "" && systemModel != null && systemModel != "") {
                        $.ajax(
                            {
                                url: '@Url.Action("CalculateSWHSTC", "Job")',
                                data: { expectedInstallDate: expectedInstallDate, postcode: postcode, systemBrand: systemBrand, systemModel: systemModel },
                                contentType: 'application/json',
                                method: 'get',
                                success: function (data) {
                                    var obj = JSON.parse(data);
                                    if (obj.status == "Failed") {
                                        $("#spanJobSystemDetails_CalculatedSTCForSWH").show().text(obj.errors[0]).fadeOut(7000);
                                        //alert(obj.fieldErrors[0].defaultMessage);

                                    }
                                    else {
                                        var numberOfStcs = obj.result.numStc;
                                        $("#JobSystemDetails_CalculatedSTCForSWH").val(numberOfStcs);
                                    }

                                }
                            });
                    }

                    else {
                        $("#spanJobSystemDetails_CalculatedSTCForSWH").show().text('Installation Date,System brand,System Model,Owner postcode are required for it.').fadeOut(5000);

                    }

                }
                else {
                    $("#spanJobSystemDetails_CalculatedSTC").show().text("Please select Job Type.").fadeOut(3000);
                    $("#spanJobSystemDetails_CalculatedSTCForSWH").show().text("Please select Job Type.").fadeOut(3000);

                }

            }

            function FillDropDownInstaller(id, url, value, hasSelect, callback, defaultText) {
                $.ajax(
                    {
                        url: url,
                        contentType: 'application/json',
                        dataType: 'json',
                        method: 'get',
                        cache: false,
                        success: function (success) {
                            var options = '';

                            if (hasSelect == true) {
                                if (defaultText == undefined || defaultText == null)
                                    defaultText = 'Select';

                                options = "<option value=''>" + defaultText + "</option>";
                            }

                            $.each(success, function (i, val) {

                                if (val.Text.indexOf("(Current)") >= 0) {
                                    options += '<option value = "' + val.Value + '" style="color:green" >' + val.Text + '</option>'
                                }
                                else if (val.Text.indexOf("(") >= 0 && val.Text.indexOf("(Current)") < 0) {
                                    options += '<option value = "' + val.Value + '"  style="color:red">' + val.Text + '</option>'
                                }
                                else {
                                    options += '<option value = "' + val.Value + '"  >' + val.Text + '</option>'
                                }
                            });

                            $("#" + id).html(options);

                            if (value && value != '' && value != 0) {
                                $("#" + id).val(value);
                            }

                            if ($('#' + id).attr('selval') && $('#' + id).attr('selval') > 0) {
                                $("#" + id).val($('#' + id).attr('selval'));
                            }

                            if ($("#" + id).selectpicker != undefined) {
                                $("#" + id).selectpicker('refresh');
                            }

                            if (callback != undefined) {
                                callback();
                                //setDropDownWidth(id);
                            }
                        }
                    });
            }

            function showSuccessMessages(message) {
                $(".alert").hide();
                $("#successMsgRegion").html(message);
                $("#successMsgRegion").show();
                $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                $('body').animate({ scrollTop: 0 }, 'slow');
            }
            function showErrorMessagesForStatus(message) {
                $(".alert").hide();
                $("#errorMsgRegion").html(message);
                $("#errorMsgRegion").show();
                $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                $('body').animate({ scrollTop: 0 }, 'slow');
            }

            function checkBusinessRules(saveType, isFromSTC) {
                EnableDropDownbyUsertype();
                $("#BasicDetails_JobType").removeAttr("disabled");
                var panelData = '';
                var xmlPanel = '';
                var inverterData = '';
                var xmlInverter = '';
                if (PanelXml.length > 0) {
                    var jsonp = JSON.stringify(PanelXml);
                    var sName = '';
                    var obj = $.parseJSON(jsonp);
                    $.each(obj, function () {
                        sName += '<panel><Brand>' + htmlEncode(this['Brand']) + '</Brand>' + '<Model>' + htmlEncode(this['Model']) + '</Model>' +
                         '<NoOfPanel>' + this['Count'] + '</NoOfPanel></panel>';
                    });
                    xmlPanel = '<Panels>' + sName + '</Panels>'
                }
                if (InverterXml.length > 0) {
                    var jsonp = JSON.stringify(InverterXml);
                    var sName = '';
                    var obj = $.parseJSON(jsonp);
                    $.each(obj, function () {
                        sName += '<inverter><Brand>' + htmlEncode(this['Brand']) + '</Brand>' + '<Model>' + htmlEncode(this['Model']) + '</Model>' +
                         '<Series>' + htmlEncode(this['Series']) + '</Series></inverter>';
                    });
                    xmlInverter = '<Inverters>' + sName + '</Inverters>';
                }

                $("#panelXml").val(xmlPanel);
                $("#inverterXml").val(xmlInverter);
                var data = JSON.stringify($('form').serializeToJson());
                $.ajax({
                    url: '@Url.Action("CheckBusinessRules", "Job")',
                    type: "POST",
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8', // Not to set any content header
                    processData: false, // Not to process data
                    data: data,
                    cache: false,
                    async: true,
                    success: function (result) {
                        //$("#BasicDetails_strInstallationDate").val(dateaa);
                        if (result.IsSuccess) {
                            if (result.ValidationSummary != null && result.ValidationSummary != undefined && result.ValidationSummary != '') {
                                if (isFromSTC) {

                                    $(".STCmodelBodyMessage").html('');
                                    $(".STCmodelBodyMessage").append(result.ValidationSummary);
                                    $("#STCwarning").modal();
                                } else {
                                    $(".modelBodyMessage").html('');
                                    $(".modelBodyMessage").append(result.ValidationSummary);
                                    $("#warning").modal();
                                }
                            }
                            else {
                                if (isFromSTC) {
                                    LoadStc();
                                } else {
                                    SaveJob(saveType);
                                }
                            }
                        }
                        else if (result.IsError) {
                            $("#errorMsgRegion").html(closeButton + result.errorMessage);
                            //$("#errorMsgRegion").html(closeButton + "The field cannot contain symbols like < > ^ [ ].");
                            $("#errorMsgRegion").show();
                            $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                            $('body').animate({ scrollTop: 0 }, 'slow');
                            DisableDropDownbyUsertype();
                        }
                    }
                });
            }

            $(function () {
                'use strict';
                var url = '@Url.Action("Upload", "Job")';


                $('#uploadBtnJobSignature').fileupload({

                    url: url,
                    dataType: 'json',
                    done: function (e, data) {
                        var UploadFailedFiles = [];
                        UploadFailedFiles.length = 0;

                        for (var i = 0; i < data.result.length; i++) {
                            if (data.result[i].Status == true) {

                                var OldEleSign = '@Model.JobElectricians.Signature';
                                var guid = '@Model.Guid';
                                var signName = $('#imgSign').attr('class');
                                $("[name='Signature']").each(function () {
                                    $(this).remove();
                                });

                                if (signName != null && signName != "") {
                                    DeleteFileFromFolderAndElectrician(signName, guid, OldEleSign);
                                }
                                var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                                var imagePath = proofDocumentURL + "JobDocuments" + "/" + guid;
                                var SRC = imagePath + "/" + data.result[i].FileName.replace("%", "$");

                                SRCSign = SRC;

                                //$('#imgSign').attr('src', SRC).load(function () { logoWidth = this.width; logoHeight = this.height });
                                $('#imgSign').attr('class', data.result[i].FileName.replace("%", "$"));


                                $('#imgSignature').show();


                                $('<input type="hidden">').attr({
                                    name: 'Signature',
                                    value: data.result[i].FileName.replace("%", "$"),
                                    id: data.result[i].FileName.replace("%", "$"),
                                }).appendTo('form');

                            }
                            else {
                                UploadFailedFiles.push(data.result[i].FileName.replace("%", "$"));
                            }
                        }
                    },
                    progressall: function (e, data) {

                    },

                    singleFileUploads: false,
                    send: function (e, data) {

                        var documentType = data.files[0].type.split("/");
                        var mimeType = documentType[0];
                        if (data.files.length > 1) {
                            for (var i = 0; i < data.files.length; i++) {
                                if (data.files[i].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                                    $(".alert").hide();
                                    $("#successMsgRegion").hide();
                                    $("#errorMsgRegion").html(closeButton + " " + data.files[i].name + " Maximum file size limit exceeded. Please upload a file smaller  than" + " " + maxsize + "MB");
                                    $("#errorMsgRegion").show();
                                    return false;
                                } else if (CheckSpecialCharInFileName(data.files[i].name)) {
                                    ShowErrorMsgForFileName("Please upload file that not conatain <> ^ [] .")
                                    return false;
                                }
                            }
                        }
                        else {
                            if (data.files[0].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                                $(".alert").hide();
                                $("#successMsgRegion").hide();
                                $("#errorMsgRegion").html(closeButton + "Maximum  file size limit exceeded.Please upload a  file smaller than" + " " + maxsize + "MB");
                                $("#errorMsgRegion").show();
                                return false;
                            } else if (CheckSpecialCharInFileName(data.files[0].name)) {
                                ShowErrorMsgForFileName("Please upload file that not conatain <> ^ [] .")
                                return false;
                            }
                        }
                        if (mimeType != "image") {
                            $(".alert").hide();
                            $("#errorMsgRegion").html(closeButton + "Please upload a file with .jpg , .jpeg or .png extension.");
                            $("#errorMsgRegion").show();
                            $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
                            $('body').animate({ scrollTop: 0 }, 'slow');
                            return false;
                        }
                        $(".alert").hide();
                        $("#errorMsgRegion").html("");
                        $("#errorMsgRegion").hide();

                        $('<input type="hidden">').attr({
                            name: 'Guid',
                            value: '@Model.Guid',
                            id: '@Model.Guid',
                        }).appendTo('form');
                        return true;

                    },
                    formData: { userId: '@Model.Guid' }
                });
            });
            $(".date-pick").keydown(function (e) {
                if (e.which == 9) {
                    return true;
                }
                return false;
            });
        });


        function EnableDropDownbyUsertype() {

            if ('@Model.BasicDetails.JobType' == '1') {
                if (USERType == 6 || (USERType == 8 && IsUnderSSC == "True")) {
                    $("#JobInstallationDetails_ExistingSystem").removeAttr('disabled');
                    $("#JobOwner").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#BasicDetails_strInstallationDate").removeAttr("disabled");
                }
                if (USERType == 7 || USERType == 9) {
                    $("#JobInstallationDetails_ExistingSystem").removeAttr('disabled');
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                }
                if (USERType == 2 || USERType == 5) {
                    $("#JobInstallationDetails_ExistingSystem").removeAttr('disabled');
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#BasicDetails_strInstallationDate").removeAttr("disabled");
                }
            }

            if ('@Model.BasicDetails.JobType' == '2') {
                if (USERType == 6 || USERType == 7 || USERType == 9 || (USERType == 8 && IsUnderSSC == "True")) {
                    $("#JobInstallationDetails_ExistingSystem").removeAttr('disabled');
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#BasicDetails_strInstallationDate").removeAttr("disabled");
                }

                if (USERType == 2 || USERType == 5) {
                    $("#JobInstallationDetails_ExistingSystem").removeAttr('disabled');
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#Installer").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).removeAttr("disabled");
                    });
                    $("#BasicDetails_strInstallationDate").removeAttr("disabled");
                }
            }
        }

        function validateBasicAddress() {
            addressElectricianValidationRules();
            if ($('#JobElectricians').valid()) {
                ElectrianAddressJson = [];
                var address;
                var UnitTypeId = $("#JobElectricians_UnitTypeID").find("option:selected").text();
                var UnitNumber = $("#JobElectricians_UnitNumber").val();
                var StreetNumber = $("#JobElectricians_StreetNumber").val();
                var StreetName = $("#JobElectricians_StreetName").val();
                var StreetTypeId = $("#JobElectricians_StreetTypeID").find("option:selected").text();
                var PostalAddressID = $("#JobElectricians_PostalAddressID").find("option:selected").text();
                var PostalDeliveryNumber = $("#JobElectricians_PostalDeliveryNumber").val();
                var Town = $("#JobElectricians_Town").val();
                var State = $("#JobElectricians_State").val();
                var PostCode = $("#JobElectricians_PostCode").val();
                //bansi4
                var companyName = $('#JobElectricians_CompanyName').val();
                var firstName = $('#JobElectricians_FirstName').val();
                var lastName = $('#JobElectricians_LastName').val();
                var email = $('#JobElectricians_Email').val();
                var phone = $('#JobElectricians_Phone').val();
                var mobile = $('#JobElectricians_Mobile').val();
                var licenseNumber = $('#JobElectricians_LicenseNumber').val();

                if ($("#JobElectricians_AddressID").val() == 1) {
                    if (UnitNumber != "") {
                        address = UnitTypeId + ' ' + UnitNumber + "/" + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                        address = address.replace("Select", "");
                    } else {
                        address = UnitTypeId + ' ' + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                        address = address.replace("Select", "");
                    }
                    ElectrianAddressJson.push({ PostalAddressType: $("#JobElectricians_AddressID").val(), UnitType: $("#JobElectricians_UnitTypeID").val(), UnitNumber: $("#JobElectricians_UnitNumber").val(), StreetNumber: $("#JobElectricians_StreetNumber").val(), StreetName: $("#JobElectricians_StreetName").val(), StreetType: $("#JobElectricians_StreetTypeID").val(), Town: $("#JobElectricians_Town").val(), State: $("#JobElectricians_State").val(), PostCode: $("#JobElectricians_PostCode").val(), CompanyName: companyName, FirstName: firstName, LastName: lastName, Email: email, Phone: phone, Mobile: mobile, LicenseNumber: licenseNumber });

                } else {
                    address = PostalAddressID + ' ' + PostalDeliveryNumber + ', ' + Town + ' ' + State + ' ' + PostCode;
                    ElectrianAddressJson.push({ PostalAddressType: $("#JobElectricians_AddressID").val(), PostalAddressID: $("#JobElectricians_PostalAddressID").val(), PostalDeliveryNumber: $("#JobElectricians_PostalDeliveryNumber").val(), Town: $("#JobElectricians_Town").val(), State: $("#JobElectricians_State").val(), PostCode: $("#JobElectricians_PostCode").val(), CompanyName: companyName, FirstName: firstName, LastName: lastName, Email: email, Phone: phone, Mobile: mobile, LicenseNumber: licenseNumber })
                }
                $("#txtBasicAddress").val($('#JobElectricians_FirstName').val() + ' ' + $('#JobElectricians_LastName').val());
                $('#spantxtBasicAddress').hide();
                $('#popupBasicAddress').modal('toggle');

            }
        }

        function validateInstaller() {
            addressInstallerValidationRules();
            if ($('#Installer').valid()) {
                InstallerJson = [];
                var Installername;
                var FirstName = $("#JobInstallerDetails_FirstName").val();
                var Surname = $("#JobInstallerDetails_Surname").val();
                Installername = FirstName + ' ' + Surname;
                $('#spantxtClientNames').hide();
                $("#txtInstallerName").val(Installername);
                $('#popupInstaller').modal('toggle');
                if ($("#JobInstallerDetails_AddressID").val() == 1) {
                    InstallerJson.push({ Phone: $('#JobInstallerDetails_Phone').val(), Mobile: $('#JobInstallerDetails_Mobile').val(), FirstName: $('#JobInstallerDetails_FirstName').val(), Surname: $('#JobInstallerDetails_Surname').val(), Email: $('#JobInstallerDetails_Email').val(), PostalAddressType: $("#JobInstallerDetails_AddressID").val(), UnitType: $("#JobInstallerDetails_UnitTypeID").val(), UnitNumber: $("#JobInstallerDetails_UnitNumber").val(), StreetNumber: $("#JobInstallerDetails_StreetNumber").val(), StreetName: $("#JobInstallerDetails_StreetName").val(), StreetType: $("#JobInstallerDetails_StreetTypeID").val(), Town: $("#JobInstallerDetails_Town").val(), State: $("#JobInstallerDetails_State").val(), PostCode: $("#JobInstallerDetails_PostCode").val() });
                } else {
                    InstallerJson.push({ Phone: $('#JobInstallerDetails_Phone').val(), Mobile: $('#JobInstallerDetails_Mobile').val(), FirstName: $('#JobInstallerDetails_FirstName').val(), Surname: $('#JobInstallerDetails_Surname').val(), Email: $('#JobInstallerDetails_Email').val(), PostalAddressType: $("#JobInstallerDetails_AddressID").val(), PostalAddressID: $("#JobInstallerDetails_PostalAddressID").val(), PostalDeliveryNumber: $("#JobInstallerDetails_PostalDeliveryNumber").val(), Town: $("#JobInstallerDetails_Town").val(), State: $("#JobInstallerDetails_State").val(), PostCode: $("#JobInstallerDetails_PostCode").val() });

                }
                InstallerEmailFromJson = $('#JobInstallerDetails_Email').val();
            }
        }

        function addressElectricianValidationRules() {


            $("#JobElectricians_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobElectricians_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobElectricians_UnitTypeID").val() == "" && $("#JobElectricians_UnitNumber").val() == "") {
                $('#lblElectriciansUnitNumber').removeClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblElectriciansStreetNumber').addClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }

            if ($("#JobElectricians_UnitTypeID").val() > 0 && $("#JobElectricians_UnitNumber").val() != "") {
                $('#lblElectriciansStreetNumber').removeClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: false,
                });
                $('#lblElectriciansUnitNumber').removeClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobElectricians_UnitTypeID").val() > 0 && $("#JobElectricians_UnitNumber").val() == "") {
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblElectriciansUnitNumber').addClass("required");
                $('#lblElectriciansStreetNumber').removeClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: false,
                });
            }
            if ($("#JobElectricians_UnitTypeID").val() == "" && $("#JobElectricians_UnitNumber").val() != "") {
                $('#lblElectriciansUnitNumber').addClass("required");
                $('#lblElectriciansUnitTypeID').removeClass("required");
                $("#JobElectricians_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobElectricians_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblElectriciansStreetNumber').addClass("required");
                $("#JobElectricians_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
        }


        function addressInstallerValidationRules() {
            $("#JobInstallerDetails_UnitTypeID").rules("add", {
                required: false,
            });
            $("#JobInstallerDetails_UnitNumber").rules("add", {
                required: false,
            });
            if ($("#JobInstallerDetails_UnitTypeID").val() == "" && $("#JobInstallerDetails_UnitNumber").val() == "") {
                $('#lblInstallerUnitNumber').removeClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblInstallerStreetNumber').addClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
            if ($("#JobInstallerDetails_UnitTypeID").val() > 0 && $("#JobInstallerDetails_UnitNumber").val() != "") {
                $('#lblInstallerStreetNumber').removeClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: false,
                });
                $('#lblInstallerUnitNumber').removeClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
            }
            if ($("#JobInstallerDetails_UnitTypeID").val() > 0 && $("#JobInstallerDetails_UnitNumber").val() == "") {
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Unit Number is required."
                    }
                });
                $('#lblInstallerUnitNumber').addClass("required");
                $('#lblInstallerStreetNumber').removeClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: false,
                });
            }
            if ($("#JobInstallerDetails_UnitTypeID").val() == "" && $("#JobInstallerDetails_UnitNumber").val() != "") {
                $('#lblInstallerUnitNumber').addClass("required");
                $('#lblInstallerUnitTypeID').removeClass("required");
                $("#JobInstallerDetails_UnitNumber").rules("add", {
                    required: false,
                });
                $("#JobInstallerDetails_UnitTypeID").rules("add", {
                    required: false,
                });
                $('#lblInstallerStreetNumber').addClass("required");
                $("#JobInstallerDetails_StreetNumber").rules("add", {
                    required: true,
                    messages: {
                        required: "Street Number is required."
                    }
                });
            }
        }

        function clearPopupBasicAddress() {
            $(".popupBasicAddress").find('input[type=text]').each(function () {
                $(this).val('');
                $(this).attr('class', 'form-control valid');
            });
            $(".popupBasicAddress").find('.field-validation-error').attr('class', 'field-validation-valid');
            $("#JobElectricians_UnitTypeID").val($("#JobElectricians_UnitTypeID option:first").val());
            $("#JobElectricians_StreetTypeID").val($("#JobElectricians_StreetTypeID option:first").val());
            $("#JobElectricians_PostalAddressID").val($("#JobElectricians_PostalAddressID option:first").val());

        }

        function clearPopupInstaller() {
            $(".popupInstaller").find('input[type=text]').each(function () {
                $(this).val('');
                $(this).attr('class', 'form-control valid');
            });
            $(".popupInstaller").find('.field-validation-error').attr('class', 'field-validation-valid');
            $("#JobOwnerDetails_UnitTypeID").val($("#JobOwnerDetails_UnitTypeID option:first").val());
            $("#JobOwnerDetails_StreetTypeID").val($("#JobOwnerDetails_StreetTypeID option:first").val());
            $("#JobOwnerDetails_PostalAddressID").val($("#JobOwnerDetails_PostalAddressID option:first").val());
        }

        function deleteImageJob(imageId) {
            var FolderName = '@Model.Guid';
            var fileDelete = $('#imgSign').attr('class');
            var OldEleSign = '@Model.JobElectricians.Signature';
            if (confirm('Are you sure you want to delete this file ?')) {
                $.ajax(
                        {
                            url: '@Url.Action("DeleteFileFromFolderAndElectrician", "Job")',
                            data: { fileName: fileDelete, FolderName: FolderName, OldEleSign: OldEleSign },
                            contentType: 'application/json',
                            method: 'get',
                            success: function () {
                                var sign = $('#imgSign').attr('class');
                                $("[name='Signature']").each(function () {
                                    $(this).remove();
                                });
                                $('#imgSign').removeAttr('src');
                                $('#imgSign').removeAttr('class');
                                $('#popupbox1').modal('hide');
                                $("#imgSignature").hide();
                                $(".alert").hide();
                                //$("#successMsgRegion").html(closeButton + "File has been Deleted successfully.");
                                //$("#successMsgRegion").show();
                                //$("#successMsgRegion").fadeOut(3000);
                                return false;
                            }
                        });
            }
        }

        function SerialNumbersValidation() {
            var isNumbersOverflow = false;
            var isDuplicateSerialNumber = false;

            if ($("#JobSystemDetails_SerialNumbers").val().trim() != "") {
                var text = $("#JobSystemDetails_SerialNumbers").val().trim();
                var lines = text.split("\n");
                lines = lines.filter(function (n) { return n.length > 0 });
                var count = lines.length;
                for (var i = 0; i < lines.length; i++) {
                    if (lines[i].length > 100) {
                        isNumbersOverflow = true;
                        break;
                    }
                }
                isDuplicateSerialNumber = hasDuplicates(lines);
            }

            if (isNumbersOverflow) {
                $('#spanSerialNumbers').show().text('Serial numbers\'s maximum length  is of 100 characters.');
            }
            else if (isDuplicateSerialNumber) {
                $('#spanSerialNumbers').show().text('Serial numbers should not be same.');
            }
            else {
                $('#spanSerialNumbers').hide();
            }

            if (isNumbersOverflow || isDuplicateSerialNumber) {
                return false;
            }
            else {
                return true;
            }
        }

        function hasDuplicates(array) {
            var valuesSoFar = [];
            for (var i = 0; i < array.length; ++i) {
                var value = array[i];
                if (valuesSoFar.indexOf(value) !== -1) {
                    return true;
                }
                valuesSoFar.push(value);
            }
            return false;
        }

        function DeletePanelFromGrid(trId) {

            if (confirm('Are you sure you want to delete this panel?')) {
                PanelXml = $.grep(PanelXml, function (e, i) {
                    if (e.ID.replace("action", "").trim() == trId) {
                        $("#JobSystemDetails_NoOfPanel").val(parseInt($("#JobSystemDetails_NoOfPanel").val()) - parseInt(e.Count));
                        document.getElementById("tblPanel").deleteRow(i);
                        return false;
                    } else { return true; }
                });
                if ($('#Paneldatatable tr').length == 1) {
                    $('#gridPanel').hide();
                }
            }
        }

        function DeleteInverterFromGrid(trId) {
            if (confirm('Are you sure you want to delete this Inverter ?')) {
                InverterXml = $.grep(InverterXml, function (e, i) {
                    if (e.ID.replace("action", "").trim() == trId) {
                        document.getElementById("tblInverter").deleteRow(i);
                        return false;
                    } else { return true };
                });
                if ($('#Inverterdatatable tr').length == 1) {
                    $('#gridInverter').hide();
                }
            }
        }



        //Inverter
        function editInverter(trId) {
            $.each(InverterXml, function (i, e) {
                if (e.ID.replace("action", "").trim() == trId) {
                    $("#JobInverterDetails_Brand").val(e.Brand);
                    $("#JobInverterDetails_Series").prop("disabled", false);
                    FillDropDown('JobInverterDetails_Series', '@Url.Action("GetInverterModel", "Job")?Mode=Series&Search=' + e.Brand, e.Series, true, null);
                    $("#JobInverterDetails_Model").prop("disabled", false);
                    FillDropDown('JobInverterDetails_Model', '@Url.Action("GetInverterSeries", "Job")?Mode=Model&Search=' + e.Series + '&Manufacturer=' + e.Brand, e.Model, true, null);
                    $("#btnEditInverter").show();
                    $('#btnAddInverter').hide();
                    $("#btnEditInverter").attr("name", trId);
                }
            })

        }
        function PanelEditAction(e) {
            var panelBrand = $("#JobPanelDetails_Brand").val();
            var panelModel = $("#JobPanelDetails_Model").val();
            var noOfPanel = $("#JobPanelDetails_NoOfPanel").val();
            var TrId = e.name;
            var isDuplicate = false;
            if ((panelBrand != null && panelBrand != "") && (panelModel != null && panelModel != "") && (noOfPanel != null && noOfPanel != "" && noOfPanel != 0)) {
                //for (var i = 0; i < PanelXml.length; i++) {
                //    if(PanelXml[i].ID != TrId &&( PanelXml[i].Brand == panelBrand && PanelXml[i].Model == panelModel ))
                //    {
                //        isDuplicate=true;
                //        break;
                //    }
                //}

                //if (isDuplicate) {
                //    $("#spanJobPanelDetails_Model").show().text('Same panel is exist.').fadeOut(3000);
                //}
                //else {
                $.each(PanelXml, function (i, e) {
                    if (e.ID.replace("action", "").trim() == TrId) {
                        e.Brand = panelBrand;
                        e.Model = panelModel;
                        e.Count = noOfPanel;
                    }
                });
                $('#tblPanel tr').each(function () {
                    var panelBrand = $(this).find("td").eq(0).attr("class");
                    var panelModel = $(this).find("td").eq(1).attr("class");
                    var numberOfPanel = $(this).find("td").eq(2).attr("class");
                    var trId = $(this).find("td").eq(3).attr("class");
                    if (trId.replace("action", "").trim() == TrId) {
                        $(this).find("td").eq(0).attr("class", $("#JobPanelDetails_Brand").val());
                        $(this).find("td").eq(0).text($("#JobPanelDetails_Brand").val());
                        $(this).find("td").eq(1).attr("class", $("#JobPanelDetails_Model").val());
                        $(this).find("td").eq(1).text($("#JobPanelDetails_Model").val());
                        $(this).find("td").eq(2).attr("class", $("#JobPanelDetails_NoOfPanel").val());
                        $(this).find("td").eq(2).text($("#JobPanelDetails_NoOfPanel").val());

                        $("#JobSystemDetails_NoOfPanel").val(parseInt($("#JobSystemDetails_NoOfPanel").val()) - numberOfPanel);
                        $("#JobSystemDetails_NoOfPanel").val(parseInt($("#JobSystemDetails_NoOfPanel").val()) + parseInt($("#JobPanelDetails_NoOfPanel").val()));
                    }

                    $("#btnEditPanel").hide();
                    $('#btnAddPanel').show();
                });
                //}
            }
            else {
                if (panelBrand == null || panelBrand.trim() == "") {
                    $("#spanJobPanelDetails_Brand").show().fadeOut(3000);
                }

                if (panelModel == null || panelModel.trim() == "") {
                    $("#spanJobPanelDetails_Model").show().text('Panel Model  is required..').fadeOut(3000);
                }

                if (noOfPanel == null || noOfPanel.trim() == "" || noOfPanel == 0) {
                    $("#spanNoOfPanelValue").show().fadeOut(5000);
                }
            }

        }
        function InverterEditAction(e) {
            var InverterBrand = $("#JobInverterDetails_Brand").val();
            var InverterModel = $("#JobInverterDetails_Model").val();
            var Series = $("#JobInverterDetails_Series").val();
            var TrId = e.name;
            if ((InverterBrand != null && InverterBrand != "") && (InverterModel != null && InverterModel != "") && (Series != null && Series != "")) {
                $.each(InverterXml, function (i, e) {
                    if (e.ID.replace("action", "").trim() == TrId) {
                        e.Brand = InverterBrand;
                        e.Model = InverterModel;
                        e.Series = Series;
                    }
                });
                $('#tblInverter tr').each(function () {
                    var inverterBrand = $(this).find("td").eq(0).attr("class");
                    var series = $(this).find("td").eq(1).attr("class");
                    var inverterModel = $(this).find("td").eq(2).attr("class");
                    var trId = $(this).find("td").eq(3).attr("class");
                    if (trId.replace("action", "").trim() == TrId) {
                        $(this).find("td").eq(0).attr("class", InverterBrand);
                        $(this).find("td").eq(0).text(InverterBrand);
                        $(this).find("td").eq(1).attr("class", Series);
                        $(this).find("td").eq(1).text(Series);
                        $(this).find("td").eq(2).attr("class", InverterModel);
                        $(this).find("td").eq(2).text(InverterModel);
                    }

                    $("#btnEditInverter").hide();
                    $('#btnAddInverter').show();
                });
            }
            else {
                if (InverterBrand == null || InverterBrand.trim() == "")
                    $("#spanJobInverterDetails_Brand").show().fadeOut(5000);

                if (InverterModel == null || InverterModel.trim() == "")
                    $("#spanJobInverterDetails_Model").show().fadeOut(5000);

                if (Series == null || Series.trim() == "")
                    $("#spanJobInverterDetails_Series").show().text("Inverter Series  is required.").fadeOut(5000);
            }
        }

        function fillInstallerPopup() {

            if (InstallerJson.length > 0) {
                var AddressType = InstallerJson[0].PostalAddressType;
                $("#JobInstallerDetails_AddressID").val(AddressType);
                if (AddressType == 1) {
                    $("#JobInstallerDetails_UnitTypeID").val(InstallerJson[0].UnitType);
                    $("#JobInstallerDetails_UnitNumber").val(InstallerJson[0].UnitNumber);
                    $("#JobInstallerDetails_StreetNumber").val(InstallerJson[0].StreetNumber);
                    $("#JobInstallerDetails_StreetName").val(InstallerJson[0].StreetName);
                    $("#JobInstallerDetails_StreetTypeID").val(InstallerJson[0].StreetType);
                    $("#JobInstallerDetails_PostalAddressID").val('');
                    $("#JobInstallerDetails_PostalDeliveryNumber").val('');
                }
                else {
                    $("#JobInstallerDetails_PostalAddressID").val(InstallerJson[0].PostalAddressID);
                    $("#JobInstallerDetails_PostalDeliveryNumber").val(InstallerJson[0].PostalDeliveryNumber);
                    $("#JobInstallerDetails_UnitTypeID").val("");
                    $("#JobInstallerDetails_UnitNumber").val("");
                    $("#JobInstallerDetails_StreetNumber").val("");
                    $("#JobInstallerDetails_StreetName").val("");
                    $("#JobInstallerDetails_StreetTypeID").val("");
                }

                $('#JobInstallerDetails_FirstName').val(InstallerJson[0].FirstName);
                $('#JobInstallerDetails_Surname').val(InstallerJson[0].Surname);
                $('#JobInstallerDetails_Email').val(InstallerJson[0].Email);
                $('#JobInstallerDetails_Mobile').val(InstallerJson[0].Mobile);
                $('#JobInstallerDetails_Phone').val(InstallerJson[0].Phone);

                $("#JobInstallerDetails_Town").val(InstallerJson[0].Town);
                $("#JobInstallerDetails_State").val(InstallerJson[0].State);
                $("#JobInstallerDetails_PostCode").val(InstallerJson[0].PostCode);
            }

            else {
                $("#JobInstallerDetails_AddressID").val(1);
                $("#JobInstallerDetails_UnitTypeID").val("");
                $("#JobInstallerDetails_UnitNumber").val("");
                $("#JobInstallerDetails_StreetNumber").val("");
                $("#JobInstallerDetails_StreetName").val("");
                $("#JobInstallerDetails_StreetTypeID").val("");
                $("#JobInstallerDetails_Town").val('');
                $("#JobInstallerDetails_State").val('');
                $("#JobInstallerDetails_PostCode").val('');
                $("#JobInstallerDetails_PostalAddressID").val('');
                $("#JobInstallerDetails_PostalDeliveryNumber").val('');


                $('#JobInstallerDetails_FirstName').val('');
                $('#JobInstallerDetails_Surname').val('');
                $('#JobInstallerDetails_Email').val('');
                $('#JobInstallerDetails_Mobile').val('');
                $('#JobInstallerDetails_Phone').val('');
                $('.InstallerDPA').show();
                $('.InstallerPDA').hide();
            }

        }

        var fillInstallerAddress = function () {
            if ($("#BasicDetails_JobID").val() != "0" && $('#BasicDetails_JobType').val() == "2") {
                if ($("#JobInstallerDetails_UnitTypeID").find('option').length > 0 && $("#JobInstallerDetails_PostalAddressID").find('option').length > 0 && $("#JobInstallerDetails_StreetTypeID").find('option').length > 0) {
                    if ($("#JobInstallerDetails_AddressID").val() == 1) {
                        InstallerJson.push({ Phone: $('#JobInstallerDetails_Phone').val(), Mobile: $('#JobInstallerDetails_Mobile').val(), FirstName: $('#JobInstallerDetails_FirstName').val(), Surname: $('#JobInstallerDetails_Surname').val(), Email: $('#JobInstallerDetails_Email').val(), PostalAddressType: $("#JobInstallerDetails_AddressID").val(), UnitType: $("#JobInstallerDetails_UnitTypeID").val(), UnitNumber: $("#JobInstallerDetails_UnitNumber").val(), StreetNumber: $("#JobInstallerDetails_StreetNumber").val(), StreetName: $("#JobInstallerDetails_StreetName").val(), StreetType: $("#JobInstallerDetails_StreetTypeID").val(), Town: $("#JobInstallerDetails_Town").val(), State: $("#JobInstallerDetails_State").val(), PostCode: $("#JobInstallerDetails_PostCode").val() });
                    }
                    else {
                        InstallerJson.push({ Phone: $('#JobInstallerDetails_Phone').val(), Mobile: $('#JobInstallerDetails_Mobile').val(), FirstName: $('#JobInstallerDetails_FirstName').val(), Surname: $('#JobInstallerDetails_Surname').val(), Email: $('#JobInstallerDetails_Email').val(), PostalAddressType: $("#JobInstallerDetails_AddressID").val(), PostalAddressID: $("#JobInstallerDetails_PostalAddressID").val(), PostalDeliveryNumber: $("#JobInstallerDetails_PostalDeliveryNumber").val(), Town: $("#JobInstallerDetails_Town").val(), State: $("#JobInstallerDetails_State").val(), PostCode: $("#JobInstallerDetails_PostCode").val() });

                    }
                    InstallerEmailFromJson = $('#JobInstallerDetails_Email').val();
                }
            }
        };

        var fillBasicAddress = function () {
            if ($("#BasicDetails_JobID").val() != "0") {
                if ($("#JobElectricians_Town").val().trim() != "" && $("#JobElectricians_Town").val() != undefined && $("#JobElectricians_Town").val() != null) {
                    if ($("#JobElectricians_UnitTypeID").find('option').length > 0 && $("#JobElectricians_PostalAddressID").find('option').length > 0 && $("#JobElectricians_StreetTypeID").find('option').length > 0) {
                        var UnitTypeId = $("#JobElectricians_UnitTypeID [value='@Model.JobElectricians.UnitTypeID']").text();

                        var UnitNumber = $("#JobElectricians_UnitNumber").val();
                        var StreetNumber = $("#JobElectricians_StreetNumber").val();
                        var StreetName = $("#JobElectricians_StreetName").val();
                        var StreetTypeId = $("#JobElectricians_StreetTypeID").find("option:selected").text();
                        var PostalAddressID = $("#JobElectricians_PostalAddressID [value='@Model.JobElectricians.PostalAddressID']").text();
                        var PostalDeliveryNumber = $("#JobElectricians_PostalDeliveryNumber").val();
                        var Town = $("#JobElectricians_Town").val();
                        var State = $("#JobElectricians_State").val();
                        var PostCode = $("#JobElectricians_PostCode").val();
                        //bansi
                        var companyName = $('#JobElectricians_CompanyName').val();
                        var firstName = $('#JobElectricians_FirstName').val();
                        var lastName = $('#JobElectricians_LastName').val();
                        var email = $('#JobElectricians_Email').val();
                        var phone = $('#JobElectricians_Phone').val();
                        var mobile = $('#JobElectricians_Mobile').val();
                        var licenseNumber = $('#JobElectricians_LicenseNumber').val();

                        if ($("#JobElectricians_AddressID").val() == 1) {
                            if (UnitNumber != "") {
                                address = UnitTypeId + ' ' + UnitNumber + "/" + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                                address = address.replace("Select", "");
                            } else {
                                address = UnitTypeId + ' ' + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                                address = address.replace("Select", "");
                            }
                            ElectrianAddressJson.push({ PostalAddressType: $("#JobElectricians_AddressID").val(), UnitType: $("#JobElectricians_UnitTypeID").val(), UnitNumber: $("#JobElectricians_UnitNumber").val(), StreetNumber: $("#JobElectricians_StreetNumber").val(), StreetName: $("#JobElectricians_StreetName").val(), StreetType: $("#JobElectricians_StreetTypeID").val(), Town: $("#JobElectricians_Town").val(), State: $("#JobElectricians_State").val(), PostCode: $("#JobElectricians_PostCode").val(), CompanyName: companyName, FirstName: firstName, LastName: lastName, Email: email, Phone: phone, Mobile: mobile, LicenseNumber: licenseNumber });
                        }
                        else {
                            address = PostalAddressID + ' ' + PostalDeliveryNumber + ', ' + Town + ' ' + State + ' ' + PostCode;
                            ElectrianAddressJson.push({ PostalAddressType: $("#JobElectricians_AddressID").val(), PostalAddressID: $("#JobElectricians_PostalAddressID").val(), PostalDeliveryNumber: $("#JobElectricians_PostalDeliveryNumber").val(), Town: $("#JobElectricians_Town").val(), State: $("#JobElectricians_State").val(), PostCode: $("#JobElectricians_PostCode").val(), CompanyName: companyName, FirstName: firstName, LastName: lastName, Email: email, Phone: phone, Mobile: mobile, LicenseNumber: licenseNumber });
                        }
                        address = address.replace("Select", "");
                    }
                }
                $("#txtBasicAddress").val($('#JobElectricians_FirstName').val() + ' ' + $('#JobElectricians_LastName').val());
            }
        };

        function fillElectrianPopup() {
            if (ElectrianAddressJson.length > 0) {
                var AddressType = ElectrianAddressJson[0].PostalAddressType;
                $("#JobElectricians_AddressID").val(AddressType);
                if (AddressType == 1) {
                    $("#JobElectricians_UnitTypeID").val(ElectrianAddressJson[0].UnitType);
                    $("#JobElectricians_UnitNumber").val(ElectrianAddressJson[0].UnitNumber);
                    $("#JobElectricians_StreetNumber").val(ElectrianAddressJson[0].StreetNumber);
                    $("#JobElectricians_StreetName").val(ElectrianAddressJson[0].StreetName);
                    $("#JobElectricians_StreetTypeID").val(ElectrianAddressJson[0].StreetType);
                    $("#JobElectricians_PostalAddressID").val('');
                    $("#JobElectricians_PostalDeliveryNumber").val('');
                }
                else {
                    $("#JobElectricians_PostalAddressID").val(ElectrianAddressJson[0].PostalAddressID);
                    $("#JobElectricians_PostalDeliveryNumber").val(ElectrianAddressJson[0].PostalDeliveryNumber);
                    $("#JobElectricians_UnitTypeID").val("");
                    $("#JobElectricians_UnitNumber").val("");
                    $("#JobElectricians_StreetNumber").val("");
                    $("#JobElectricians_StreetName").val("");
                    $("#JobElectricians_StreetTypeID").val("");
                }

                $("#JobElectricians_Town").val(ElectrianAddressJson[0].Town);
                $("#JobElectricians_State").val(ElectrianAddressJson[0].State);
                $("#JobElectricians_PostCode").val(ElectrianAddressJson[0].PostCode);
                $('#JobElectricians_CompanyName').val(ElectrianAddressJson[0].CompanyName);
                $('#JobElectricians_FirstName').val(ElectrianAddressJson[0].FirstName);
                $('#JobElectricians_LastName').val(ElectrianAddressJson[0].LastName);
                $('#JobElectricians_Email').val(ElectrianAddressJson[0].Email);
                $('#JobElectricians_Phone').val(ElectrianAddressJson[0].Phone);
                $('#JobElectricians_Mobile').val(ElectrianAddressJson[0].Mobile);
                $('#JobElectricians_LicenseNumber').val(ElectrianAddressJson[0].LicenseNumber);
                //bansi5
            }

            else {
                $("#JobElectricians_AddressID").val(1);
                $("#JobElectricians_UnitTypeID").val("");
                $("#JobElectricians_UnitNumber").val("");
                $("#JobElectricians_StreetNumber").val("");
                $("#JobElectricians_StreetName").val("");
                $("#JobElectricians_StreetTypeID").val("");
                $("#JobElectricians_Town").val('');
                $("#JobElectricians_State").val('');
                $("#JobElectricians_PostCode").val('');
                $("#JobElectricians_PostalAddressID").val('');
                $("#JobElectricians_PostalDeliveryNumber").val('');
                $('#JobElectricians_CompanyName').val("");
                $('#JobElectricians_FirstName').val("");
                $('#JobElectricians_LastName').val("");
                $('#JobElectricians_Email').val("");
                $('#JobElectricians_Phone').val("");
                $('#JobElectricians_Mobile').val("");
                $('#JobElectricians_LicenseNumber').val("");
                $('.ElectriciansDPA').show();
                $('.ElectriciansPDA').hide();
                //bansi6 - NULL
            }
        }

        function jobChange() {
            if (this.value == "2") {
                $("#TypeOfConnection,#JobSTCDetails_TypeOfConnection,#SystemMountingType,#JobSTCDetails_SystemMountingType").hide();
                $("#DeemingPeriod,#JobSTCDetails_DeemingPeriod,#InstallerID,#BasicDetails_InstallerID,#DesignerID,#BasicDetails_DesignerID").hide();
                $("#NMI,#JobInstallationDetails_NMI,#InstallingNewPanel,#InstallingNewPanel,#InstallingNewPanel,#JobInstallationDetails_InstallingNewPanel,#MeterNumber,#JobInstallationDetails_MeterNumber,#PhaseProperty,#JobInstallationDetails_PhaseProperty,#ElectricityProviderID,#JobInstallationDetails_ElectricityProviderID,#ExistingSystem1,#JobInstallationDetails_ExistingSystem,#ExistingSystem").hide();
                $("#installContent").show();
                $("#serialNumberLable").html("Tank serial number(s):");
                $("#MultipleSGUAddress").html("Is there more than one SWH/ASHP at this address:");
                $("#CertificateCreated").html("Creating certificates for previously failed SWH:");
                $(".SWSystemDetails").show();
                $(".PVDSystemDetail").hide();
                $("#divVolumetricCapacity").show();
                $("#divSecondhandWaterHeater").show();
                $("#jobSSCID").hide();
                $("#JobSystemDetails_NoOfPanel").removeAttr("readonly");
                $("#electricianDetail").hide();
            } else if (this.value == "1") {
                $("#TypeOfConnection,#JobSTCDetails_TypeOfConnection,#SystemMountingType,#JobSTCDetails_SystemMountingType").show();
                $("#DeemingPeriod,#JobSTCDetails_DeemingPeriod,#InstallerID,#BasicDetails_InstallerID,#DesignerID,#BasicDetails_DesignerID").show();
                $("#NMI,#JobInstallationDetails_NMI,#InstallingNewPanel,#InstallingNewPanel,#InstallingNewPanel,#JobInstallationDetails_InstallingNewPanel,#MeterNumber,#JobInstallationDetails_MeterNumber,#PhaseProperty,#JobInstallationDetails_PhaseProperty,#ElectricityProviderID,#JobInstallationDetails_ElectricityProviderID,#ExistingSystem1,#JobInstallationDetails_ExistingSystem").show();
                $("#installContent").hide();
                $("#serialNumberLable").html("Equipment model serial number(s):");
                $("#MultipleSGUAddress").html("Is there more than one SGU at this address?:");
                $("#CertificateCreated").html("Are you creating certificates for a system that has previously been failed by the Clean Energy Regulator?:");
                $(".SWSystemDetails").hide();
                $(".PVDSystemDetail").show();
                $("#divVolumetricCapacity").hide();
                $("#divStatutoryDeclarations").hide();
                $("#divSecondhandWaterHeater").hide();
                $("#jobSSCID").show();
                $("#JobSystemDetails_NoOfPanel").attr("readonly");
                $("#electricianDetail").show();
            }
            FillDropDown('JobPanelDetails_Brand', '@Url.Action("GetPanelBrand", "Job")?Mode=Brand&CertificateHolder=null&JobType=' + $('#BasicDetails_JobType').val(), 0, true, null);
        }

        function DisableDropDownbyUsertype() {
            if ('@Model.BasicDetails.JobID' > 0) {
                $("#BasicDetails_JobType").attr('disabled', 'disabled');
            }
            if ('@Model.BasicDetails.JobType' == '1') {

                if (USERType == 6 || (USERType == 8 && IsUnderSSC == "True")) {
                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    if (USERType == 6) {
                        $('#BasicDetails_Priority').removeAttr("disabled");
                    }
                }
                if (USERType == 7 || USERType == 9) {
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                }
                if (USERType == 2 || USERType == 5) {
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                }
            }

            if ('@Model.BasicDetails.JobType' == '2') {
                if (USERType == 6 || USERType == 7 || USERType == 9 || (USERType == 8 && IsUnderSSC == "True")) {
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                    if (USERType == 6) {
                        $('#BasicDetails_Priority').removeAttr("disabled");
                    }

                }


                if (USERType == 2 || USERType == 5) {
                    $("#JobElectricians").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobOwner").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });

                    $("#JobInstallationAddress").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#Installer").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#frmCreateJob").find('Select').each(function () {

                        $(this).attr('disabled', 'disabled');
                    });
                    $("#BasicDetails_strInstallationDate").attr('disabled', 'disabled');
                }
            }
        }
    </script>
}
<style>
    .vertical-alignment-helper {
        display: table;
        height: 100%;
        width: 100%;
    }

    .vertical-align-center-serial {
        /* To center vertically */
        display: table-cell;
        vertical-align: middle;
        width: 40%;
    }

    .vertical-align-center {
        /* To center vertically */
        display: table-cell;
        vertical-align: middle;
        width: 50%;
    }

    .modal-content {
        /* Bootstrap sets the size of the modal in the modal-dialog class, we need to inherit it */
        width: inherit;
        height: inherit;
        /* To center horizontally */
        margin: 0 auto;
    }

    .ui-autocomplete {
        z-index: 2147483647;
    }

    .pac-container {
        background-color: #FFF;
        z-index: 10000;
    }

    #grid .table-responsive td:first-child {
        text-align: left;
    }

    .modelBodyMessage > li {
        position: relative;
        /*border-bottom: 1px solid #d9d9d9;*/
        padding: 14px 0px 0px 30px;
    }

        .modelBodyMessage > li:after {
            content: '';
            border-radius: 50%;
            position: absolute;
            left: 10px;
            top: 18px;
            background-color: red;
            width: 12px;
            height: 12px;
            display: block;
        }

    .modelBodyMessage {
        font-size: 16px;
        color: black;
        font-weight: normal;
        font-family: 'OpenSansSemibold';
    }

    .STCmodelBodyMessage > li {
        position: relative;
        padding: 14px 0px 0px 30px;
    }

        .STCmodelBodyMessage > li:after {
            content: '';
            border-radius: 50%;
            position: absolute;
            left: 10px;
            top: 18px;
            background-color: red;
            width: 12px;
            height: 12px;
            display: block;
        }

    .STCmodelBodyMessage {
        font-size: 16px;
        color: black;
        font-weight: normal;
        font-family: 'OpenSansSemibold';
    }

    .default {
        line-height: 0px !important;
    }
</style>
