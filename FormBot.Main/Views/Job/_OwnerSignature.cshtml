@model FormBot.Entity.CreateJob
@using FormBot.Helper;
@{
    Layout = "~/Views/Shared/_SignUpLayout.cshtml";
}

<style type="text/css">
    .signatureCanvas canvas {
        width: 220px;
        height: 80px;
        border: 1px dotted #000;
    }
</style>

<div id="msgSection">
    @Html.RenderMessages()
</div>

@using (Html.BeginForm("_OwnerSignatureSave", "Job", FormMethod.Post, new { id = "CreateJob", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.BasicDetails.JobID)
    @Html.HiddenFor(m => m.JobOwnerDetails.OwnerBaseSignature)

    @Html.HiddenFor(m => m.JobOwnerDetails.Longitude)
    @Html.HiddenFor(m => m.JobOwnerDetails.Latitude)
    @Html.HiddenFor(m => m.JobOwnerDetails.Location)
    @Html.HiddenFor(m => m.JobOwnerDetails.IpAddress)
    @Html.HiddenFor(m => m.BasicDetails.Email)
    @Html.HiddenFor(m => m.BasicDetails.RefNumber)

    <div class="alert alert-danger alert-dismissible" role="alert" id="errorMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>
    <div class="alert alert-success alert-dismissible" role="alert" id="successMsgRegion" style="display: none">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
    </div>

    <section id="content" class="container signature-outer">
        @*@if (Model.BasicDetails.JobType == 1)
        {
        <h1 class="title">SGU - Collecting Home Owner Signature email template</h1>
        }
        else
        {
        <h1 class="title">SWH - Collecting Home Owner Signature email template</h1>
        }*@
        <h1 class="title">Home Owner Signature Required - Please Sign</h1>
        <p>Dear <label>@(ViewData.ContainsKey("OwnerName") ? ViewData["OwnerName"] : "")</label> ,</p>

        @if (Model.BasicDetails.JobType == 1)
        {@*<p>Your installer <strong> @(ViewData.ContainsKey("ScaName") ? ViewData["ScaName"] : "") </strong> from <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong> is requesting a signature for the assignment of STCs  for the Solar Generation Unit (SGU) they have installed on your property <strong id="lblOwnerAddress"></strong> :</p>*@
                            <p>Your solar retailer <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong> is requesting a signature for the assignment of STCs  for the Solar Generation Unit (SGU) they have installed on your property <strong id="lblOwnerAddress"></strong> :</p> }
                        else
                        { @*<p>Your installer <strong> @(ViewData.ContainsKey("ScaName") ? ViewData["ScaName"] : "") </strong> from <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong> is requesting a signature for the assignment of STCs for the Solar Water Heater/Air Source Heat Pump they have installed on your property <strong id="lblOwnerAddress"></strong> :</p>*@
                                            <p>Your solar retailer <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong> is requesting a signature for the assignment of STCs for the Solar Water Heater/Air Source Heat Pump they have installed on your property <strong id="lblOwnerAddress"></strong> :</p>}

        <h4 class="sub-title"> Before signing please verify your system details below:</h4>

        <ul class="ulSystemDetails list-block">
            @if (Model.BasicDetails.JobType == 1)
            {
    <li>
        Panel brand :
        <label>
            @foreach (var jobPanelDetails in Model.lstJobPanelDetails.FindAll(m => m.IsDeleted == false))
            {
    <span>[</span> @jobPanelDetails.Brand.ToString() <span>]</span>}
        </label>
    </li>
                        <li>
                            Panel Model: <label>
                                @foreach (var jobPanelDetails in Model.lstJobPanelDetails.FindAll(m => m.IsDeleted == false))
                                {
            <span>[</span> @jobPanelDetails.Model.ToString() <span>]</span>}
                            </label>

                        </li>
                                            <li>
                                                Inverter brand : <label>
                                                    @foreach (var jobInverterDetails in Model.lstJobInverterDetails.FindAll(m => m.IsDeleted == false))
                                                    {
                                <span>[</span> @jobInverterDetails.Brand <span>]</span>;
                            }
                                                </label>
                                            </li>
                                                                <li>
                                                                    Inverter Model: <label>
                                                                        @foreach (var jobInverterDetails in Model.lstJobInverterDetails.FindAll(m => m.IsDeleted == false))
                                                                        {
                                                    <span>[</span> @jobInverterDetails.Model <span>]</span>;
                                                }
                                                                    </label>
                                                                </li>
                                                                                    <li>System Total Rated Output kW: <label>@Model.JobSystemDetails.SystemSize</label></li>
                                                                                                        <li>No Of Panel: <label id="lblnoOfpanel"></label></li>
                                                                                                                            <li>Panel Serial Numbers: <label id="lblserialno"></label></li>
 }
                                                                                                                        else
                                                                                                                        {
                                                                                                        <li>System Brand: <label id="lblbrand"></label></li>
                                                                                                                            <li>System Model: <label id="lblmodel"></label></li>
                                                                                                                                                <li>Tank Size: <label id="lblsize"></label></li>
                                                                                                                                                                    <li>Serial Number: <label id="lblserialno"></label></li>
                                                                                                                                                                                        <li>No Of Panel: <label id="lblnoOfpanel"></label></li>
}
        </ul>

        <h4 class="sub-title">Mandatory Declaration:</h4>

        <ul class="list-block">
            @if (Model.BasicDetails.JobType == 1)
            {
                <li>- I am the legal owner and/or authorized representative of the above small generation unit (SGU) and assign the right to create STCs to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label>.</li>

                <li>- I have not previously assigned or created any STCs for this system within this period to claim <label> @(ViewData.ContainsKey("DeemingPeriod") ? ViewData["DeemingPeriod"] : "") </label> deeming for SGU. SGUs must be registered within 12 months of installation. </li>
            }
            else
            {
                <li>- I am the legal owner of the above Solar Water Heater (SWH) and assign the right to create STCs to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label>.</li>
            }
            <li>- I understand i am under no obligation to assign STCs to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label>.</li>
            <li>- By submitting this STC form to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label> the retailer <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong> agrees to repay the total STC amount to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label> should the STC assignment be failed or deemed invalid.</li>
            @if (Model.BasicDetails.JobType == 1)
            {
                <li>- I understand that an agent of the Clean Energy Regulator or <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label> may wish to inspect SGU within the first five years of certificate redemption.</li>
            }
            else
            {
                <li>- I understand that an agent of the Clean Energy Regulator or <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label> may wish to inspect SGU within the first five years of certificate redemption.</li>
            }
            <li>- I must retain receipts and proof of the installation date for the life of the STCs.</li>
            <li>- I am aware that penalties can be applied for providing misleading information in this form under the Renewable (Electricity) Act 2000.</li>
            <li>- I understand that this system is eligible for <label>@(!string.IsNullOrEmpty(Model.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? Model.JobSystemDetails.ModifiedCalculatedSTC : Model.JobSystemDetails.CalculatedSTC)</label>&nbsp; STCs in exchange for assigning my right to create these STCs I will receive from the installer/supplier a point of sale discount.</li>
        </ul>

        @*<p><input type="checkbox" id="chkTerms" /> I have read and understood these terms and conditions and accept them</p>*@

        <p>
            <ul class="list-block">
                <li class="modal-sign">
                    @*<img class="img-responsive" id="imgModalOwnerSign" alt="" style="margin-bottom:7px;">

                    <button type="button" class="btn primary icon-btn" onclick="SignOwnerSignature()">
                        <span class="sprite-img signature-ic"></span>Sign here
                    </button>*@
                </li>
                <li>Customer name: <label>@(ViewData.ContainsKey("OwnerName") ? ViewData["OwnerName"] : "")</label></li>
                <li>Date : <label id="lblDate"></label></li>
                <li>Email: <label>@Model.JobOwnerDetails.Email</label></li>
                @*<li>Captured IP Address <label id="lblIPAddress" ></label></li>
                <li>Location:<label id="lblLocation" ></label></li>*@
            </ul>
        </p>

        <h4 class="sub-title">Owner written statement</h4>
        <p>
            I am the owner of the solar photovoltaic system mentioned in this STC Assignment form and I agree to assign my right to create STCs to <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label>
            for a period of <label> @(ViewData.ContainsKey("DeemingPeriod") ? ViewData["DeemingPeriod"] : "") </label>  years commencing <label>@Model.BasicDetails.InstallationDate </label>.
        </p><br />
            <p>
                I have not previously assigned or created any STCs for this system. I understand that this system is eligible
                for <label>@(!string.IsNullOrEmpty(Model.JobSystemDetails.ModifiedCalculatedSTC.ToString()) ? Model.JobSystemDetails.ModifiedCalculatedSTC : Model.JobSystemDetails.CalculatedSTC)</label> STCs and in exchange for assigning my right to create STCs I will receive a point of sale discount from the <strong>@(ViewData.ContainsKey("ScaCompanyName") ? ViewData["ScaCompanyName"] : "")</strong>.
            </p><br />
        <p>I am aware that penalties can be applied for providing false or misleading information in this form under the Renewable Energy (Electricity) Act 2000.</p><br />
        <table>
            <tr>
                <td>System Owner signature</td>
            </tr>
            <tr>
                <td>
                    <div style="width:200px;">
                        <img class="img-responsive" id="imgModalOwnerSign" alt="" style="margin-bottom:7px;">
                        <button type="button" class="btn primary icon-btn" onclick="SignOwnerSignature()">
                            <span class="sprite-img signature-ic"></span>Sign here
                        </button>
                    </div>
                </td>
            </tr>
            <tr>
                <td>System Owner full name</td>
            </tr>
            <tr>
                <td>
                    <label><strong> (@(ViewData.ContainsKey("OwnerName") ? ViewData["OwnerName"] : ""))</strong> </label>
                </td>
            </tr>
            <tr>
                <td>Signature date</td>
            </tr>
            <tr>
                <td>
                    <label id="txtOwnersignatureDate"></label>
                </td>
            </tr>
        </table>


        <p><strong>Privacy Declaration:</strong> <label> @(ViewData.ContainsKey("RaName") ? ViewData["RaName"] : "") </label> will only use this personal information as intended and will not sell or divulge this to any parties other than the Clean Energy Regulator. If you are not the intended recipient of this email - Please dispose this email and disregard the information within.</p>
        <div class="text-center">
            <p><input type="checkbox" id="chkTerms" /> I have read and understood these terms and conditions and accept them</p>
            <p><span id="spansign" class="" style="color: #b94a48;display:none"></span></p>
            <button id="btnSaveOwnerSignature" type="button" class="btn default icon-btn" onclick="SaveOwnerSignature()">
                <span class="sprite-img save_ic"></span>Complete Signing
            </button>
        </div>
    </section>
}

<div class="modal fade popupSignature" tabindex="-1" id="popupOwnerSignature">
    @Html.Partial("_SignaturePopup", new ViewDataDictionary { { "isCopySign", false } }););
</div>

@section Scripts
    {

    <script src="~/Scripts/jquery.fileupload.js"></script>
    <script src="~/Scripts/FormBot.js"></script>
    <script src="../../Scripts/jSignature.dev.js" type="text/javascript"></script>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyC9JGh32nUUr3-ArB0sn_BeP7r3g5pVacw&sensor=false&libraries=places"></script>

    <script type="text/javascript">
        var $ = $.noConflict();
        var OwnerName = '@(Model.JobOwnerDetails.FirstName + ' ' + Model.JobOwnerDetails.LastName)';
        $(document).ready(function () {
            GetOwnerAddress();
            getSystemDetails();

            var themeId = '@(ViewData.ContainsKey("theme") ? ViewData["theme"] : "green")';
            $('body').attr('id', themeId);
            getLocation();
            var d = new Date();
            var curr_date = d.getDate();
            var curr_month = d.getMonth() + 1;
            var curr_year = d.getFullYear();
            var todayDate = curr_date + "/" + curr_month
             + "/" + curr_year;
            $("#lblDate").text(todayDate);

            var IPAddress = GetUserIP();
            $("#lblIPAddress").text(IPAddress);

            var OwnerAddress = GetOwnerAddress();
            $("#lblOwnerAddress").text(OwnerAddress);

            var url = '@Url.Action("UploadOwnerSignature", "Job")';
            var logoWidth = 0, logoHeight = 0, SRCOwnerSign;

            $('#uploadBtnSignature').fileupload({

                url: url,
                dataType: 'json',
                done: function (e, data) {

                    var UploadFailedFiles = [];
                    UploadFailedFiles.length = 0;

                    for (var i = 0; i < data.result.length; i++) {
                        if (data.result[i].Status == true) {
                            var guid = '@Model.Guid';
                            var signName = $('#imgUploadSign').attr('class');
                            var proofDocumentURL = '@FormBot.Helper.ProjectSession.UploadedDocumentPath';
                            var imagePath = proofDocumentURL + "JobDocuments" + "/" + guid;
                            var SRC = imagePath + "/" + data.result[i].FileName.replace("%", "$");
                            SRCOwnerSign = SRC;
                            $('#imgUploadSign').attr('class', data.result[i].FileName.replace("%", "$"));
                        }
                        else {
                            UploadFailedFiles.push(data.result[i].FileName.replace("%", "$"));
                        }
                    }
                    if (UploadFailedFiles.length > 0) {
                        showErrorMessageForPopup("Signature has not been uploaded.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                    }
                    else {
                        $('#imgUploadSign').show();
                        $("#imgUploadSign").attr('src', SRCOwnerSign);
                        $("#deleteSign").show();
                        showSuccessMessageForPopup("Signature has been uploaded successfully.", $("#successMsgRegionSignPopup"), $("#errorMsgRegionSignPopup"));
                    }
                },
                progressall: function (e, data) { },
                singleFileUploads: false,
                send: function (e, data) {

                    var documentType = data.files[0].type.split("/");
                    var mimeType = documentType[0];
                    if (data.files.length > 1) {
                        for (var i = 0; i < data.files.length; i++) {
                            if (data.files[i].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                                showErrorMessageForPopup(" " + data.files[i].name + " Maximum file size limit exceeded. Please upload a file smaller  than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                                return false;
                            }
                        }
                    }
                    else {
                        if (data.files[0].size > parseInt('@FormBot.Helper.ProjectSession.MaxImageSize')) {
                            showErrorMessageForPopup("Maximum  file size limit exceeded.Please upload a  file smaller than" + " " + maxsize + "MB", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                            return false;
                        }
                    }
                    if (mimeType != "image") {
                        showErrorMessageForPopup("Please upload a file with .jpg , .jpeg or .png extension.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    if (data.files[0].size > parseInt(1024000)) {
                        showErrorMessageForPopup("Please upload Signature Within 1 MB otherwise it will slow down your job performance", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                        return false;
                    }
                    $(".alert").hide();
                    $("#errorMsgRegion").html("");
                    $("#errorMsgRegion").hide();
                    return true;
                },
                formData: { jobId: '@Model.Guid' }
            });

            var guid = '@Model.Guid';

            //  JSignature api to render signature area in div whose id is "cSignature"
            //  and handling mousedown event that sets IsSignature property to true indicating that user initiated writing.
            //$("#cSignature").jSignature({ height: 200,width:500, mousedown: function () { $('#IsSignature').val('True') }, signatureLine : true });
            //$("#cSignature").jSignature({ height: 100, signatureLine: true });
            //var cdIsmouseIn = false;
            //$("#cSignature").jSignature({ height: 100, mousedown: function () { $('#IsSignature').val('True') }, signatureLine: true });
            var $sigdiv = $("#cSignature").jSignature({ height: 220, mousedown: function () { $('#IsSignature').val('True') }, signatureLine: true });
            var cdIsmouseIn = false;

            $("#cSignature").bind('change', function (e) {
                if ($sigdiv.jSignature('getData', 'native').length > 0)
                    $("#cSignature .signLabel").addClass('hidden');
                else
                    $("#cSignature .signLabel").removeClass('hidden');
            });

            $("#aDrawSign").click(function () {
                showHideDrawUploadSection(this);
            });

            $("#aUploadSign").click(function () {
                showHideDrawUploadSection(this);
            });

            $('#popupOwnerSignature').off().on('shown.bs.modal', function () {
                var widthVal = $('#cSignature .jSignature').width();
                $('#cSignature').find("canvas.jSignature").width(widthVal)
                $('#cSignature').find('canvas').attr('width', widthVal + 'px !important');
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").$controlbarLower.css('margin-bottom', '3.0em')
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").resetCanvas($('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['data'])
            })
        });

        function CDMouseOut() {
            cdIsmouseIn = false;
        }

        @*function GetSignature() {

            var jobid = $("#BasicDetails_JobID").val();
            var ImageString = $('#cSignature').jSignature('getData');
            $("#JobOwnerDetails_OwnerBaseSignature").val($('#cSignature').jSignature('getData'));

            $.ajax(
                 {
                     url: '@Url.Action("ConvertIntoImage", "Job")?OwnerBaseSignature=' + ImageString + '&jobid=' + jobid,
                     contentType: 'application/json',
                     method: 'post',
                     success: function (data) {
                         var OwnerBaseSign = data;

                         $("#JobOwnerDetails_OwnerBaseSignature").val(OwnerBaseSign);


                     }
                 });

            return false;
        }*@

        function deleteSign(imageId) {
            var FolderName = '@Model.Guid';
            var fileDelete = $('#imgUploadSign').attr('class');
            if (confirm('Are you sure you want to delete this file ?')) {
                $.ajax({
                    url: '@Url.Action("deleteSignFromFolderandTable", "Job")',
                    data: { fileName: fileDelete, FolderName: FolderName },
                    contentType: 'application/json',
                    method: 'get',
                    success: function () {
                        var sign = $('#imgUploadSign').attr('class');
                        $('#imgUploadSign').removeAttr('src');
                        $('#imgUploadSign').removeAttr('class');
                        $('#deleteSign').hide();
                        showSuccessMessageForPopup("Signature has been deleted successfully.", $("#successMsgRegionSignPopup"), $("#errorMsgRegionSignPopup"));
                        return false;
                    }
                });
            }
        }

        function DeleteFileFromUserOnCancel(fileNames, guid) {
            $.ajax({
                url: '@Url.Action("DeleteFileFromFolder", "Job")',
                data: { fileName: fileNames, FolderName: guid },
                contentType: 'application/json',
                method: 'get',
                success: function (data) { },
            });
        }


        function SaveOwnerSignature() {

            //toDo
            if (typeof ($('#imgModalOwnerSign').attr('src')) == "undefined") {
                showErrorMessage("Please draw/upload signature.");
                return false;
            }

            var IsUploaded;
            var OwnerSignature;
            var StringOwnerBaseSignature;
            var OwnerBaseSignature;
            var terms;

            var Latitude = $("#JobOwnerDetails_Latitude").val();
            var Longitude = $("#JobOwnerDetails_Longitude").val();
            var IpAddress = $("#JobOwnerDetails_IpAddress").val();
            var Location = $("#JobOwnerDetails_Location").val();
            var CompanyName = '@ViewData["ScaName"]';
            var email = $("#BasicDetails_Email").val();
            var RefNumber = $("#BasicDetails_RefNumber").val();
            var ownerEmail = '@ViewData["Email"]';
            var ownerMobile = '@ViewData["Mobile"]';
            var jobid = $("#BasicDetails_JobID").val();

            if ($("#chkTerms").is(":checked")) {
                terms = 1;
            }
            else {
                terms = 0;
            }

            var URL = '@Url.Action("_OwnerSignatureSave", "Job")';
            var dataOwner = {};
            dataOwner.Type = '@Model.Type';
            dataOwner.jobid = jobid;
            dataOwner.latitude = Latitude;
            dataOwner.longitude = Longitude;
            dataOwner.IpAddress = IpAddress;
            dataOwner.Location = Location;
            dataOwner.name = OwnerName;
            dataOwner.CompanyName = CompanyName;
            dataOwner.Email = email;
            dataOwner.RefNumber = RefNumber;
            dataOwner.OwnerEmail = ownerEmail;
            dataOwner.OwnerMobile = ownerMobile;
            dataOwner.SMSOrMail = '@Model.SMSOrMail';
            if (terms == 1) {
                if ($("#imgModalOwnerSign").attr('isDraw') == 'false') {
                    IsUploaded = true;
                    OwnerSignature = $('#imgModalOwnerSign').attr('fileName');
                    StringOwnerBaseSignature = "";

                    dataOwner.OwnerSignature = OwnerSignature;
                    dataOwner.IsUploaded = IsUploaded;

                    if (OwnerSignature != "" && OwnerSignature != null && OwnerSignature != undefined) {
                        $.ajax({
                            url: URL,
                            data: JSON.stringify(dataOwner),
                            contentType: 'application/json',
                            method: 'post',
                            success: function (data) {
                                if (data == true) {
                                    location.href = "@Url.Action("ThankYou","Home")";
                                    return false;
                                }
                            }
                        });
                    }
                    else {
                        $("#spansign").show().text("Signtaure is required.").fadeOut(5000);
                        return false;
                    }
                }
                else {

                    IsUploaded = false;
                    OwnerSignature = "OwnerSign" + "_" + jobid + "." + "Png";
                    AddRemoveSignatureLine(true);
                    StringOwnerBaseSignature = $('#cSignature').jSignature('getData', 'image');
                    base30 = $('#cSignature').jSignature('getData', 'base30');

                    dataOwner.OwnerSignature = OwnerSignature;
                    dataOwner.IsUploaded = IsUploaded;
                    dataOwner.StringOwnerBaseSignature = StringOwnerBaseSignature.join(',');
                    dataOwner.Base30 = base30;

                    if (StringOwnerBaseSignature != "" && StringOwnerBaseSignature != null && StringOwnerBaseSignature != undefined) {
                        $.ajax({
                            url: URL,
                            data: JSON.stringify(dataOwner),
                            contentType: 'application/json',
                            method: 'post',
                            success: function (data) {
                                if (data == true) {
                                    location.href = "@Url.Action("ThankYou","Home")";
                                    return false;
                                }
                            }
                        });
                    }
                    else {
                        $("#spansign").show().text("Signtaure is required.").fadeOut(3000);
                        return false;
                    }
                }
            }
            else {
                $("#spansign").show().text("Please accept terms and conditions").fadeOut(3000);
            }
        }

        function GetUserIP() {
            var ret_ip;
            $.ajaxSetup({ async: false });
            $.get('https://jsonip.com/', function (r) {
                ret_ip = r.ip;
            });
            if (ret_ip) {
                var ip = ret_ip.split(",")[1];
                $("#JobOwnerDetails_IpAddress").val(ip);
                return ip;
            }
        }

        function GetOwnerAddress() {
            var address;
            var UnitTypeId = '@(ViewData.ContainsKey("UnitTypeID") ? ViewData["UnitTypeID"] : "")';
            var UnitNumber = '@Model.JobInstallationDetails.UnitNumber';
            var StreetNumber = '@Model.JobInstallationDetails.StreetNumber';
            var StreetName = '@Model.JobInstallationDetails.StreetName';
            var StreetTypeId = '@(ViewData.ContainsKey("StreetTypeId") ? ViewData["StreetTypeId"] : "")';
            var PostalAddressID = '@(ViewData.ContainsKey("PostalAddressID") ? ViewData["PostalAddressID"] : "")';
            var PostalDeliveryNumber = '@Model.JobInstallationDetails.PostalDeliveryNumber';
            var Town = '@Model.JobInstallationDetails.Town';
            var State = '@Model.JobInstallationDetails.State';
            var PostCode = '@Model.JobInstallationDetails.PostCode';

            if ('@Model.JobInstallationDetails.IsPostalAddress' == 'True') {
                address = PostalAddressID + ' ' + PostalDeliveryNumber + ', ' + Town + ' ' + State + ' ' + PostCode;
            }
            else {
                if (UnitNumber != "") {
                    address = UnitTypeId + ' ' + UnitNumber + "/" + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                    address = address.replace("Select", "");
                }
                else {
                    address = UnitTypeId + ' ' + StreetNumber + ' ' + StreetName + ' ' + StreetTypeId + ', ' + Town + ' ' + State + ' ' + PostCode;
                    address = address.replace("Select", "");
                }
            }
            return address;
        }

        function getSystemDetails() {

            var systemDetails, Brand, Model, NOOfPanel, TankSize, SerialNumber;

            Brand = '@(ViewData.ContainsKey("Brand") ? ViewData["Brand"] : "")';
            Model = '@(ViewData.ContainsKey("Model") ? ViewData["Model"] : "")';
            NOOfPanel = '@Model.JobSystemDetails.NoOfPanel';
            TankSize = '@Model.JobSTCDetails.VolumetricCapacity';
            SerialNumber = "@Model.JobSystemDetails.SerialNumbers".replace(/(?:\r\n|\r|\n)/g, ' ');

            if (Brand != "") {
                $("#lblbrand").text(Brand);
            }
            if (Model != "") {
                $("#lblmodel").text(Model);

            }
            if (NOOfPanel != "") {
                $("#lblnoOfpanel").text(NOOfPanel);

            }
            if (SerialNumber != "") {
                $("#lblserialno").text(SerialNumber);

            }
            if (TankSize == "Yes") {
                $("#lblsize").text("> 700L");
            }
            if (TankSize == "No") {
                $("#lblsize").text("< 700L");
            }
        }

       // var x = document.getElementById("lblLocation");

        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, errorHandler, { timeout: 25000 });
            } else {
                //x.innerHTML = "Geolocation is not supported by this browser.";
            }
        }
        function errorHandler(error) {
            if (error.code == 1) {
                console.log("Error: Access is denied!");
            } else if (error.code == 2) {
                console.log("Error: Position is unavailable!");
            }
        }
        //function showPosition1() {
        //    setTimeout(showPosition, 10000);
        //}
        function showPosition(position) {

            //x.innerHTML = "Latitude: " + position.coords.latitude +
            //"<br>Longitude: " + position.coords.longitude;
            $("#JobOwnerDetails_Latitude").val(position.coords.latitude);
            $("#JobOwnerDetails_Longitude").val(position.coords.longitude);
            console.log(position.coords.latitude + " : " + position.coords.longitude)
            GetAddress(position.coords.latitude, position.coords.longitude);
        }

        function GetAddress(lat, lng) {
            var address = '';
            var latlng = new google.maps.LatLng(lat, lng);
            var geocoder = geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        address = results[1].formatted_address;
                        $("#JobOwnerDetails_Location").val(results[1].formatted_address);
                        //x.innerHTML = results[1].formatted_address;
                    }
                }
            });
            return address;
        }

        function SignOwnerSignature() {
            $("#errorMsgRegionSignPopup").hide();
            $("#successMsgRegionSignPopup").hide();
            AddRemoveSignatureLine(false);
            $('#popupOwnerSignature').modal({ backdrop: 'static', keyboard: false });
        }

        function SaveModalSignature() {
            $(".alert").hide();
            $("#errorMsgRegionSignPopup").hide();
            $("#successMsgRegionSignPopup").hide();

            if ($('.signature-menu').find('.active').attr('isDraw') == "false") {
                var imgSrc = $("#imgUploadSign").attr('src');
                if (typeof (imgSrc) == "undefined") {
                    showErrorMessageForPopup("Please draw/upload signature.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                    return false;
                }
                $("#imgModalOwnerSign").attr('src', imgSrc);
                $("#imgModalOwnerSign").attr('fileName', imgSrc.split(/[\\\/]/).pop());
                $("#imgModalOwnerSign").attr('isDraw', false);
            }
            else {
                base30 = $('#cSignature').jSignature('getData', 'base30');
                if (base30[1] == '') {
                    showErrorMessageForPopup("Please draw/upload signature.", $("#errorMsgRegionSignPopup"), $("#successMsgRegionSignPopup"));
                    return false;
                }
                AddRemoveSignatureLine(true);
                StringOwnerBaseSignature = $('#cSignature').jSignature('getData', 'image');
                var imgSrc = StringOwnerBaseSignature.join(',');
                $("#imgModalOwnerSign").attr('src', "data:" + imgSrc);
                $("#imgModalOwnerSign").attr('isDraw', true);
            }
            enableCompleteSigning($("#imgModalOwnerSign").attr('src'));
            $('#popupOwnerSignature').modal('toggle');
            var d = new Date,
                dformat = [d.getDate(), d.getMonth() + 1, d.getFullYear()].join('/') + ' ' + [d.getHours(), d.getMinutes(), d.getSeconds()].join(':');

            $("#txtOwnersignatureDate").text(dformat);
        }

        function ClosePopupSignature() {
            if ($("#imgModalOwnerSign").attr('isDraw') == 'false') {
                $('.signature-menu').find('.active').removeClass('active');
                $('.signature-menu').find('.primary').removeClass('primary');
                $('#aUploadSign').closest('li').addClass('active');
                $('#aUploadSign').closest('li').addClass('primary');
                $("#divUpload").show();
                $("#divDraw").hide();
            }
            else {
                $('.signature-menu').find('.active').removeClass('active');
                $('.signature-menu').find('.primary').removeClass('primary');
                $('#aDrawSign').closest('li').addClass('active');
                $('#aDrawSign').closest('li').addClass('primary');
                $("#divUpload").hide();
                $("#divDraw").show();
            }
            enableCompleteSigning($("#imgModalOwnerSign").attr('src'));
            $('#popupOwnerSignature').modal('toggle');
        }

        function AddRemoveSignatureLine(isRemove) {
            if (isRemove) {
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['background-color'] = 'transparent';
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['decor-color'] = 'transparent'
            }
            else {
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['background-color'] = 'rgb(255, 255, 255)';
                $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['decor-color'] = 'rgb(134, 134, 134)';
            }
            $('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").resetCanvas($('#cSignature').find("canvas.jSignature").add($('#cSignature').filter("canvas.jSignature")).data("jSignature.this").settings['data']);
        }

        function showErrorMessage(message) {
            $(".alert").hide();
            $("#successMsgRegion").hide();
            $("#errorMsgRegion").html(closeButton + message);
            $("#errorMsgRegion").show();
            $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
            $('body').animate({ scrollTop: 0 }, 'slow');
        }

        function showSuccessMessage(message) {
            $(".alert").hide();
            $("#errorMsgRegion").hide();
            $("#successMsgRegion").html(closeButton + message);
            $("#successMsgRegion").show();
            $('html').animate({ scrollTop: 0 }, 'slow');//IE, FF
            $('body').animate({ scrollTop: 0 }, 'slow');
        }

        function showErrorMessageForPopup(message, objError, objSuccess) {
            $(".alert").hide();
            if (objSuccess)
                objSuccess.hide();
            objError.html(closeButton + message);
            objError.show();
        }

        function showSuccessMessageForPopup(message, objSuccess, objError) {
            $(".alert").hide();
            if (objError)
                objError.hide();
            objSuccess.html(closeButton + message);
            objSuccess.show();
        }

        function showHideDrawUploadSection(obj) {
            $(".alert").hide();
            $("#errorMsgRegionSignPopup").hide();
            $("#successMsgRegionSignPopup").hide();

            if ($(obj).attr('id').toLowerCase() == "auploadsign") {
                $("#divDraw").hide();
                $("#divUpload").show();
            }
            else {
                $("#divDraw").show();
                $("#divUpload").hide();
            }

            $(obj).closest('ul').find('.active').removeClass('active');
            $(obj).closest('ul').find('.primary').removeClass('primary');
            $(obj).closest('li').addClass('active');
            $(obj).closest('li').addClass('primary');
        }

        function enableCompleteSigning(obj) {
            if (typeof (obj) != "undefined") {
                $('#btnSaveOwnerSignature').removeClass('default');
                $('#btnSaveOwnerSignature').addClass('primary');
            }
            else {
                $('#btnSaveOwnerSignature').removeClass('primary');
                $('#btnSaveOwnerSignature').addClass('default');
            }
        }
    </script>

}
